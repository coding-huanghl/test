#define Dalsa
//#define Dahua
//#define HikVision
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

using HalconDotNet;
using System.Threading;
using System.Runtime.InteropServices;
using System.IO;
using ThridLibray;
using System.Diagnostics;
using TcpComm;
using DALSA.SaperaLT.SapClassBasic;
using System.Xml;
using System.Text.RegularExpressions;
using _6.CS;
using Newtonsoft.Json;
using MvCamCtrl.NET;


/***************************************修改记录*********************************************/
//2018-12-12----徐慧鹏：
//新增DALSA相机取像功能和不同机型选择功能，引用DALSA.SaperaLT.SapClassBasic.dll，变量89行-91行，相机取像代码  判断相机品牌877行， DALSA取像989行；机型选择：由于发送数据端口不同，所以在1647行增加机型判断后设置端口号，发送数据方面只有B侧数据不同，在B侧发送数据入队时增加判断，代码36530行;增加读写这两个变量的代码----修改人：徐慧鹏

//2019-01-07----黄浩：
//(1)将表面缺陷细化为表面脏污|破损+表面划痕；
//(2)删除主栅线宽度这一参数，在检测算法中改为局部变量；
//(3)更改参数窗口逻辑，使得在自动运行时可以查看参数内容但不能修改；

//2019--1-28----黄浩：
//（1）优化界面；
//（2）兼容四分流电池片；

//2019--2-13----黄浩：
//（1）解决断栅缩进距离的数据类型报错问题；

//2019--2-25----黄浩：
//（1）优化Halcon算法，即增大图像分割后结构性开运算的宽度，消除片间距有效行数过小导致的异常图片问题；
//（2）优化Halcon算法，即将角点计算片间距的方式更改为角点中心点计算片间距。

//2019--2-26----黄浩：
//（1）消除表面划痕NG图片不保存的BUG；
//（2）增大异常图片行数判定阈值，减少异常图片保存数量，从10改为500；
//（3）优化宽度分辨率和高度分辨率校准逻辑，程序每次启动后如果勾选校准则校准成功后会自动将配方文件里面的开发关闭并更新分辨率数值；

//2019--2-27----黄浩：
//（1）新增色差功能，具体包括：优化Halcon算法，新增上下半片Blue通道平均灰度值输出；
//                             更改C#单串逻辑，将每串内平均灰度最小值和最大值差值进行对比，超过阈值则认为该串为色差串；
//（2）删除直线度功能，具体包括：优化Halcon算法，删除直线度参数输出；
//                               改过C#界面及配方参数设置，同时更新配方，删除直线度相关参数；
//（3）新增膜检宽度补偿功能，具体包括：优化Halcon算法，将参数“膜检宽度补偿值”由阈值位置更改为叠加到膜宽检测值；
//2019--3-22----徐慧鹏：
//（1）增加NG类型文本显示；
//2019--4-4----徐慧鹏：
//（1）增加NG类型历史文本显示；
//（2）修改时间刷新周期，解决保存图片丢失问题
//（3）更新算法，解决表面大缺陷问题
//2019--5-22----徐慧鹏：
//（1）完善NG历史信息显示，增加背面信息整合，利用集合的形式存储NG信息；
//2019--6-26----徐慧鹏：
//（1）增加中英文切换；
//2019--8-23----徐慧鹏：
//（1）增加少片逻辑优化，避免结束当前串都打NG；
//2019--9-3----徐慧鹏：
//（1）增加通讯文档自动删除；
//2019--9-10----徐慧鹏：
//（1）修改图片保存方式和格式；
//(2)增加班次检测信息自动清零，并保存。
//2019--9-12----黄海龙：
//（1）修改NG信息显示方式，增加查看历史图片信息；
//2019--10-20----徐慧鹏：
//（1）强制打开片间距检测；
//2019--10-30----徐慧鹏：
//（1）修复统计问题；
//（2）修复NG信息（少片和异常）图片打不开问题；
//（3）增加黑斑导致膜短屏蔽区域；
//2019--11-7----徐慧鹏、黄海龙：
//（1）优化NG信息逻辑；
//2019--11-18----徐慧鹏：
//（1）增加到24片；
//2019--11-29----徐慧鹏：
//（1）修复刷新问题；
//2020--4-3----徐慧鹏：
//（1）优化超出数组问题，停止后清零重置；
//2020--4-14----徐慧鹏,黄海龙：
//（1）增加划痕记录；
//（1）增加MES发送Json格式数据；
//2020--4-15----徐慧鹏：
//（1）程序加载时遍历控件；
//2020--4-29----徐慧鹏，黄海龙：
//（1）算法增加模板匹配；
//（1）界面增加标定功能；
//2020--5-11----徐慧鹏，黄海龙,张艳：
//（1）HALCON算法整合成一个；
//（1）界面增加参数，选择何种类型电池串，运行不同检测程序；
//2020--5-21----徐慧鹏：
//（1）增加AB侧分开模板标定；

//2020--5-26----徐慧鹏：
//（1）增加防止程序重复启动；
//2020--6-2----徐慧鹏：
//（1）修改片间距和上下半片都NG时 片间距计数+1 防止报数组超出界限；
//2020--7-16----徐慧鹏：
//（1）增加模板另存为和读取功能；
//2020--7-28----徐慧鹏：
//（1）补充英文界面；
//2020--8-05----徐慧鹏：
//（1）增加上位链路通讯功能；
//（2）修复尾片打滑导致的程序崩溃；  
namespace _6
{
    public partial class MainForm : Form
    {
        /**************************主界面逻辑相关参数*********************** */
        #region 参数
        //主程序是否运行
        public bool bl_Inspect = false;
        //是否正在检测
        public bool bl_IsRunPositive = false;
        public bool bl_IsRunNegative = false;

        public bool AFinishPositive = false;
        public bool BFinishPositive = false;
        public bool AFinishNegative = false;
        public bool BFinishNegative = false;
        public int ClassNGNumA = 0;
        public int ClassNGNumB = 0;
        //是否缺少下半片
        public bool IsCellLackA = false;
        public bool IsCellLackB = false;
        //主界面halcon窗口控件ID
        HTuple WindowsHandlePositiveA = null;
        HTuple WindowsHandlePositiveA1 = null;
        HTuple WindowsHandlePositiveA2 = null;
        HTuple WindowsHandlePositiveA3 = null;
        HTuple WindowsHandlePositiveB = null;
        HTuple WindowsHandlePositiveB1 = null;
        HTuple WindowsHandlePositiveB2 = null;
        HTuple WindowsHandlePositiveB3 = null;
        HTuple WindowsHandleNegativeA = null;
        HTuple WindowsHandleNegativeB = null;


        List<HDevelopExport> HFuncPositiveAList = new List<HDevelopExport>();
        List<HTuple> WindowsHandlePositiveAList = new List<HTuple>();
        List<HDevelopExport> HFuncPositiveBList = new List<HDevelopExport>();
        List<HTuple> WindowsHandlePositiveBList = new List<HTuple>();

        //halcon算法实例化
        public HDevelopExport HFuncPositiveA = new HDevelopExport();
        HDevelopExport HFuncPositiveA1 = new HDevelopExport();
        HDevelopExport HFuncPositiveA2 = new HDevelopExport();
        HDevelopExport HFuncPositiveA3 = new HDevelopExport();
        public HDevelopExport HFuncPositiveB = new HDevelopExport();
        HDevelopExport HFuncPositiveB1 = new HDevelopExport();
        HDevelopExport HFuncPositiveB2 = new HDevelopExport();
        HDevelopExport HFuncPositiveB3 = new HDevelopExport();
        HDevelopExport HFuncNegativeA = new HDevelopExport();
        HDevelopExport HFuncNegativeB = new HDevelopExport();

        //是否开启本地复测Flag
        public bool bl_IsReDetectPositive = false;
        public bool bl_IsReDetectNegative = false;

        //默认配方路径
        public string defaultRecipePath = "D:\\Program Files\\Config\\033\\config.ini";
        public string defaultChineseLanguagePath = "D:\\Program Files\\Config\\033\\chinese.xml";
        public string defaultEnglishLanguagePath = "D:\\Program Files\\Config\\033\\english.xml";
        public string defaultCalibrationPathPositiveA = "D:\\Program Files\\Config\\033\\TopA.shm";
        public string defaultCalibrationPathPositiveB = "D:\\Program Files\\Config\\033\\TopB.shm";
        //Dalsa相机默认配置文件路径
        private string defaultDalsaCameraFilePathPositiveA = "D:\\Program Files\\Config\\033\\A1.ccf";
        private string defaultDalsaCameraFilePathPositiveB = "D:\\Program Files\\Config\\033\\B1.ccf";
        private string defaultDalsaCameraFilePathNegativeA = "D:\\Program Files\\Config\\033\\A2.ccf";
        private string defaultDalsaCameraFilePathNegativeB = "D:\\Program Files\\Config\\033\\B2.ccf";

        //实时时间
        string RealTime = DateTime.Now.ToString("yyyyMMdd");
        string ImageRealTime = DateTime.Now.ToString("yyyyMMddHHmmss");
        //文件死亡时间
        string FileDeadTime = DateTime.Now.AddDays(-3).ToString("yyyyMMdd");

        //以太网相机
        private IDevice CameraPositiveA, CameraPositiveB;
        private IDevice CameraNegativeA, CameraNegativeB;
        //相机是否成功链接的Flag
        private bool IsCameraPositiveAConnected = false;
        private bool IsCameraPositiveBConnected = false;
        private bool IsCameraNegativeAConnected = false;
        private bool IsCameraNegativeBConnected = false;

        //采集图像队列
        public Queue<HObject> ImageQueuePositiveA = new Queue<HObject>();
        public Queue<HObject> ImageQueuePositiveB = new Queue<HObject>();
        public Queue<HObject> ImageQueueNegativeA = new Queue<HObject>();
        public Queue<HObject> ImageQueueNegativeB = new Queue<HObject>();
        //采集图像互斥锁
        public Object LockObjectPositiveA = new Object();
        public Object LockObjectPositiveB = new Object();
        public Object LockObjectNegativeA = new Object();
        public Object LockObjectNegativeB = new Object();
        //相机采图宽、高
        long CameraImageMaxWidth, CameraImageMaxHeight;
        //相机SDK路径
        private const string CameraSDKPath = @".\ImageConvert.dll";

        //硅片编号
        int WaferIDPositiveA = 1, WaferIDPositiveB = 1;
        int WaferIDNegativeA = 1, WaferIDNegativeB = 1;

        //CSV统计文件名
        private string CsvtimePositive;
        private string CsvtimeNegative;

        //是否开启参数辅助框Flag
        public HTuple IsOpenParameterAssistantROIPositive = 0;
        public HTuple IsOpenParameterAssistantROINegative = 0;
        //是否为首串首片Flag
        public bool IsFirstWaferOfFirstClassPositiveA = false;
        public bool IsFirstWaferOfFirstClassPositiveB = false;
        public bool IsFirstWaferOfFirstClassNegativeA = false;
        public bool IsFirstWaferOfFirstClassNegativeB = false;
        //单串膜偏数组(单串总片数)以及显示
        private bool[] SingleClassFilmShiftingFlagArrayPositiveA;
        private bool[] SingleClassFilmShiftingFlagArrayPositiveB;
        private bool[] SingleClassFilmShiftingFlagArrayNegativeA;
        private bool[] SingleClassFilmShiftingFlagArrayNegativeB;
        private string SingleClassFilmShiftingTypePositiveA;
        private string SingleClassFilmShiftingTypePositiveB;
        private string SingleClassFilmShiftingTypeNegativeA;
        private string SingleClassFilmShiftingTypeNegativeB;
        //单串膜失数组(单串总片数)以及显示
        private bool[] SingleClassFilmMissFlagArrayPositiveA;
        private bool[] SingleClassFilmMissFlagArrayPositiveB;
        private bool[] SingleClassFilmMissFlagArrayNegativeA;
        private bool[] SingleClassFilmMissFlagArrayNegativeB;
        private string SingleClassFilmMissTypePositiveA;
        private string SingleClassFilmMissTypePositiveB;
        private string SingleClassFilmMissTypeNegativeA;
        private string SingleClassFilmMissTypeNegativeB;
        //单串头尾膜偏数组(单串总片数)以及显示
        private bool[] SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA;
        private bool[] SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB;
        private bool[] SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA;
        private bool[] SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB;
        private string SingleClassFilmShiftingOfHeadAndTailTypePositiveA;
        private string SingleClassFilmShiftingOfHeadAndTailTypePositiveB;
        private string SingleClassFilmShiftingOfHeadAndTailTypeNegativeA;
        private string SingleClassFilmShiftingOfHeadAndTailTypeNegativeB;
        //单串片间距数组(单串总片数 - 1)以及显示
        private bool[] SingleClassDistanceNGFlagArrayPositiveA;
        private bool[] SingleClassDistanceNGFlagArrayPositiveB;
        private bool[] SingleClassDistanceNGFlagArrayNegativeA;
        private bool[] SingleClassDistanceNGFlagArrayNegativeB;
        private string SingleClassDistanceNGTypePositiveA;
        private string SingleClassDistanceNGTypePositiveB;
        private string SingleClassDistanceNGTypeNegativeA;
        private string SingleClassDistanceNGTypeNegativeB;
        //单串边缘缺陷数组(单串总片数)以及显示
        private bool[] SingleClassEdgeDefectFlagArrayPositiveA;
        private bool[] SingleClassEdgeDefectFlagArrayPositiveB;
        private bool[] SingleClassEdgeDefectFlagArrayNegativeA;
        private bool[] SingleClassEdgeDefectFlagArrayNegativeB;
        private string SingleClassEdgeDefectTypePositiveA;
        private string SingleClassEdgeDefectTypePositiveB;
        private string SingleClassEdgeDefectTypeNegativeA;
        private string SingleClassEdgeDefectTypeNegativeB;
        //单串表面缺陷数组(单串总片数)以及显示
        private bool[] SingleClassSurfaceDefectFlagArrayPositiveA;
        private bool[] SingleClassSurfaceDefectFlagArrayPositiveB;
        private bool[] SingleClassSurfaceDefectFlagArrayNegativeA;
        private bool[] SingleClassSurfaceDefectFlagArrayNegativeB;
        private string SingleClassSurfaceDefectTypePositiveA;
        private string SingleClassSurfaceDefectTypePositiveB;
        private string SingleClassSurfaceDefectTypeNegativeA;
        private string SingleClassSurfaceDefectTypeNegativeB;
        //单串划痕数组(单串总片数)以及显示
        private bool[] SingleClassSurfaceScratchFlagArrayPositiveA;
        private bool[] SingleClassSurfaceScratchFlagArrayPositiveB;
        private bool[] SingleClassSurfaceScratchFlagArrayNegativeA;
        private bool[] SingleClassSurfaceScratchFlagArrayNegativeB;
        private string SingleClassSurfaceScratchTypePositiveA;
        private string SingleClassSurfaceScratchTypePositiveB;
        private string SingleClassSurfaceScratchTypeNegativeA;
        private string SingleClassSurfaceScratchTypeNegativeB;
        //单串断栅数组(单串总片数)以及显示
        private bool[] SingleClassBrokenLineFlagArrayPositiveA;
        private bool[] SingleClassBrokenLineFlagArrayPositiveB;
        private bool[] SingleClassBrokenLineFlagArrayNegativeA;
        private bool[] SingleClassBrokenLineFlagArrayNegativeB;
        private string SingleClassBrokenLineTypePositiveA;
        private string SingleClassBrokenLineTypePositiveB;
        private string SingleClassBrokenLineTypeNegativeA;
        private string SingleClassBrokenLineTypeNegativeB;
        //单串起焊点异常数组(单串总片数)以及显示
        private bool[] SingleClassStargingWeldingNGFlagArrayPositiveA;
        private bool[] SingleClassStargingWeldingNGFlagArrayPositiveB;
        private bool[] SingleClassStargingWeldingNGFlagArrayNegativeA;
        private bool[] SingleClassStargingWeldingNGFlagArrayNegativeB;
        private string SingleClassStargingWeldingNGTypePositiveA;
        private string SingleClassStargingWeldingNGTypePositiveB;
        private string SingleClassStargingWeldingNGTypeNegativeA;
        private string SingleClassStargingWeldingNGTypeNegativeB;
        //单串少片异常数组(单串总片数)以及显示
        private bool[] SingleClassCellMissingNGFlagArrayPositiveA;
        private bool[] SingleClassCellMissingNGFlagArrayPositiveB;
        private bool[] SingleClassCellMissingNGFlagArrayNegativeA;
        private bool[] SingleClassCellMissingNGFlagArrayNegativeB;
        //单串算法异常数组(单串总片数)以及显示
        private bool[] SingleClassAlgorithmExceptionNGFlagArrayPositiveA;
        private bool[] SingleClassAlgorithmExceptionNGFlagArrayPositiveB;
        private bool[] SingleClassAlgorithmExceptionNGFlagArrayNegativeA;
        private bool[] SingleClassAlgorithmExceptionNGFlagArrayNegativeB;

        //单串色差数组(单串总片数 - 1)
        private List<double> SingleClassSurfaceMeanGrayArrayPositiveA = new List<double>();
        private List<double> SingleClassSurfaceMeanGrayArrayPositiveB = new List<double>();
        private List<double> SingleClassSurfaceMeanGrayArrayNegativeA = new List<double>();
        private List<double> SingleClassSurfaceMeanGrayArrayNegativeB = new List<double>();
        private string SingleClassSurfaceMeanGrayNGTypePositiveA;
        private string SingleClassSurfaceMeanGrayNGTypePositiveB;
        //单串空片数组(单串总片数 - 1)
        private bool[] SingleClassEmptyPlateFlagArrayPositiveA;
        private bool[] SingleClassEmptyPlateFlagArrayPositiveB;
        private bool[] SingleClassEmptyPlateFlagArrayNegativeA;
        private bool[] SingleClassEmptyPlateFlagArrayNegativeB;
        //单串色差标志
        private bool SingleClassSurfaceMeanGrayFlagPositiveA;
        private bool SingleClassSurfaceMeanGrayFlagPositiveB;
        //单片NG类型文本
        private string SingleClassNGTypePositiveA;
        private string SingleClassNGTypePositiveB;
        private string SingleClassNGTypeNegativeA;
        private string SingleClassNGTypeNegativeB;
        //单串数据汇总
        public bool AlgorithmExceptionPositiveA = false;
        public bool AlgorithmExceptionPositiveB = false;


        //单串NG信息（id，每片NG信息，每片NG图片路径）
        public SingleClassNG singleClassNGPositiveA = new SingleClassNG();
        public SingleClassNG singleClassNGPositiveB = new SingleClassNG();
        public SingleClassNG singleClassNGNegativeA = new SingleClassNG();
        public SingleClassNG singleClassNGNegativeB = new SingleClassNG();

        //单串临时NG信息（id，每片NG信息，每片NG图片路径）
        private SingleClassNG tempSingleClassNGPositiveA = new SingleClassNG();
        private SingleClassNG tempSingleClassNGPositiveB = new SingleClassNG();
        private SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
        private SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();

        //单串NG信息id初始化赋值
        public int idOfPositiveA = 1;
        public int idOfPositiveB = 1;
        public int idOfNegativeA = 1;
        public int idOfNegativeB = 1;

        private int saveImageWaferIDPositiveA = 0;
        private int saveImageWaferIDPositiveB = 0;
        private int saveImageWaferIDNegativeA = 0;
        private int saveImageWaferIDNegativeB = 0;

        private int tempSaveImageWaferIDPositiveA = 0;
        private int tempSaveImageWaferIDPositiveB = 0;
        private int tempSaveImageWaferIDNegativeA = 0;
        private int tempSaveImageWaferIDNegativeB = 0;

        public List<SingleClassNG> singleClassNGPositiveAList = new List<SingleClassNG>();
        public List<SingleClassNG> singleClassNGPositiveBList = new List<SingleClassNG>();
        public List<SingleClassNG> singleClassNGNegativeAList = new List<SingleClassNG>();
        public List<SingleClassNG> singleClassNGNegativeBList = new List<SingleClassNG>();

        public List<SingleClassNG> historySingleClassNGPositiveAList = new List<SingleClassNG>();
        public List<SingleClassNG> historySingleClassNGPositiveBList = new List<SingleClassNG>();
        public List<SingleClassNG> historySingleClassNGNegativeAList = new List<SingleClassNG>();
        public List<SingleClassNG> historySingleClassNGNegativeBList = new List<SingleClassNG>();

        private bool[] isTopAndBottomNGPositiveA = new bool[30];
        private bool[] isTopAndBottomNGPositiveB = new bool[30];
        private bool[] isTopAndBottomNGNegativeA = new bool[30];
        private bool[] isTopAndBottomNGNegativeB = new bool[30];

        private bool[] isStartWeldingNGPositiveA = new bool[30];
        private bool[] isStartWeldingNGPositiveB = new bool[30];
        private bool[] isStartWeldingNGNegativeA = new bool[30];
        private bool[] isStartWeldingNGNegativeB = new bool[30];

        private bool isNextClassFlagPositiveA = false;
        private bool isNextClassFlagPositiveB = false;
        private bool isNextClassFlagNegativeA = false;
        private bool isNextClassFlagNegativeB = false;

        private bool isSingleClassOKPositiveA = true;
        private bool isSingleClassOKPositiveB = true;
        private bool isSingleClassOKNegativeA = true;
        private bool isSingleClassOKNegativeB = true;

        public int TotalAlgorithmExceptionCountPerClassPositiveA = 0;
        public int TotalCellMissingCountPerClassPositiveA = 0;
        public int TotalFilmShiftingCountPerClassPositiveA = 0;
        public int TotalFilmMissCountPerClassPositiveA = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA = 0;
        public int TotalDistanceNGCountPerClassPositiveA = 0;
        public int TotalEdgeDefectCountPerClassPositiveA = 0;
        public int TotalSurfaceDefectCountPerClassPositiveA = 0;
        public int TotalBrokenLineCountPerClassPositiveA = 0;
        public int TotalStartingWeldingNGCountPerClassPositiveA = 0;
        public int TotalEmptyPlateCountPerClassPositiveA = 0;

        public int TotalAlgorithmExceptionCountPerClassNegativeA = 0;
        public int TotalCellMissingCountPerClassNegativeA = 0;
        public int TotalFilmShiftingCountPerClassNegativeA = 0;
        public int TotalFilmMissCountPerClassNegativeA = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA = 0;
        public int TotalDistanceNGCountPerClassNegativeA = 0;
        public int TotalEdgeDefectCountPerClassNegativeA = 0;
        public int TotalSurfaceDefectCountPerClassNegativeA = 0;
        public int TotalBrokenLineCountPerClassNegativeA = 0;
        public int TotalStartingWeldingNGCountPerClassNegativeA = 0;
        public int TotalEmptyPlateCountPerClassNegativeA = 0;

        public int TotalAlgorithmExceptionCountPerClassPositiveB = 0;
        public int TotalCellMissingCountPerClassPositiveB = 0;
        public int TotalFilmShiftingCountPerClassPositiveB = 0;
        public int TotalFilmMissCountPerClassPositiveB = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB = 0;
        public int TotalDistanceNGCountPerClassPositiveB = 0;
        public int TotalEdgeDefectCountPerClassPositiveB = 0;
        public int TotalSurfaceDefectCountPerClassPositiveB = 0;
        public int TotalBrokenLineCountPerClassPositiveB = 0;
        public int TotalStartingWeldingNGCountPerClassPositiveB = 0;
        public int TotalEmptyPlateCountPerClassPositiveB = 0;

        public int TotalAlgorithmExceptionCountPerClassNegativeB = 0;
        public int TotalCellMissingCountPerClassNegativeB = 0;
        public int TotalFilmShiftingCountPerClassNegativeB = 0;
        public int TotalFilmMissCountPerClassNegativeB = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB = 0;
        public int TotalDistanceNGCountPerClassNegativeB = 0;
        public int TotalEdgeDefectCountPerClassNegativeB = 0;
        public int TotalSurfaceDefectCountPerClassNegativeB = 0;
        public int TotalBrokenLineCountPerClassNegativeB = 0;
        public int TotalStartingWeldingNGCountPerClassNegativeB = 0;
        public int TotalEmptyPlateCountPerClassNegativeB = 0;

        //总串数据汇总
        public int TotalCountPositiveA = 0;
        public int NGTotalCountPositiveA = 0;
        public int MajorFailureCountPositiveA = 0;
        public int TotalFilmShiftingCountPositiveA = 0;
        public int TotalFilmMissCountPositiveA = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPositiveA = 0;
        public int TotalDistanceNGCountPositiveA = 0;
        public int TotalEdgeDefectCountPositiveA = 0;
        public int TotalSurfaceDefectCountPositiveA = 0;
        public int TotalBrokenLineCountPositiveA = 0;
        public int TotalStartingWeldingNGCountPositiveA = 0;
        public int TotalSurfaceColorDiffCountPositiveA = 0;
        public int TotalLinearityNGCountPositiveA = 0;
        public int TotalEmptyPlateCountPositiveA = 0;

        public int TotalCountNegativeA = 0;
        public int NGTotalCountNegativeA = 0;
        public int MajorFailureCountNegativeA = 0;
        public int TotalFilmShiftingCountNegativeA = 0;
        public int TotalFilmMissCountNegativeA = 0;
        public int TotalFilmShiftingOfHeadAndTailCountNegativeA = 0;
        public int TotalDistanceNGCountNegativeA = 0;
        public int TotalEdgeDefectCountNegativeA = 0;
        public int TotalSurfaceDefectCountNegativeA = 0;
        public int TotalBrokenLineCountNegativeA = 0;
        public int TotalStartingWeldingNGCountNegativeA = 0;
        public int TotalSurfaceColorDiffCountNegativeA = 0;
        public int TotalLinearityNGCountNegativeA = 0;
        public int TotalEmptyPlateCountNegativeA = 0;

        public int TotalCountPositiveB = 0;
        public int NGTotalCountPositiveB = 0;
        public int MajorFailureCountPositiveB = 0;
        public int TotalFilmShiftingCountPositiveB = 0;
        public int TotalFilmMissCountPositiveB = 0;
        public int TotalFilmShiftingOfHeadAndTailCountPositiveB = 0;
        public int TotalDistanceNGCountPositiveB = 0;
        public int TotalEdgeDefectCountPositiveB = 0;
        public int TotalSurfaceDefectCountPositiveB = 0;
        public int TotalBrokenLineCountPositiveB = 0;
        public int TotalStartingWeldingNGCountPositiveB = 0;
        public int TotalSurfaceColorDiffCountPositiveB = 0;
        public int TotalLinearityNGCountPositiveB = 0;
        public int TotalEmptyPlateCountPositiveB = 0;

        public int TotalCountNegativeB = 0;
        public int NGTotalCountNegativeB = 0;
        public int MajorFailureCountNegativeB = 0;
        public int TotalFilmShiftingCountNegativeB = 0;
        public int TotalFilmMissCountNegativeB = 0;
        public int TotalFilmShiftingOfHeadAndTailCountNegativeB = 0;
        public int TotalDistanceNGCountNegativeB = 0;
        public int TotalEdgeDefectCountNegativeB = 0;
        public int TotalSurfaceDefectCountNegativeB = 0;
        public int TotalBrokenLineCountNegativeB = 0;
        public int TotalStartingWeldingNGCountNegativeB = 0;
        public int TotalSurfaceColorDiffCountNegativeB = 0;
        public int TotalLinearityNGCountNegativeB = 0;
        public int TotalEmptyPlateCountNegativeB = 0;
        //历史NG串信息
        public string[] HistoryNGPositiveA = new string[24];
        public string[] HistoryNGPositiveB = new string[24];
        public List<String[]> HistoryNGPositiveAList = new List<String[]>();
        public List<String[]> HistoryNGPositiveBList = new List<String[]>();

        public string[] HistoryNGNegativeA = new string[24];
        public string[] HistoryNGNegativeB = new string[24];
        public List<String[]> HistoryNGNegativeAList = new List<String[]>();
        public List<String[]> HistoryNGNegativeBList = new List<String[]>();

        public int GrayOpenHeight = 11;
        public int ImagePartNum = 1;
        public int SendTimes = 0;
        bool resultSendSucceed = false;
        string Recv;
        /**************************PLC通信相关参数****************************/
        //与PLC通信端
        private SocketClient _tcpClientPositiveA = new SocketClient();
        private SocketClient _tcpClientPositiveB = new SocketClient();
        private SocketClient _tcpClientNegativeA = new SocketClient();
        private SocketClient _tcpClientNegativeB = new SocketClient();
        private string plcIPAddress = "172.168.155.201";
        private int plcPortPositiveA = 9011;
        private int plcPortNegativeA = 9012;
        private int plcPortPositiveB = 9013;
        private int plcPortNegativeB = 9014;
        bool TcpFlagPositiveA, TcpFlagPositiveB;
        bool TcpFlagNegativeA, TcpFlagNegativeB;
        int ConnectNumPositiveA = 0, ConnectNumPositiveB = 0;
        int ConnectNumNegativeA = 0, ConnectNumNegativeB = 0;

        Queue<string> Result2PLC = new Queue<string>();
        Queue<string> ResultPositiveA = new Queue<string>();
        Queue<string> ResultPositiveB = new Queue<string>();
        Queue<string> ResultNegativeA = new Queue<string>();
        Queue<string> ResultNegativeB = new Queue<string>();
        //上位链路
        //A侧正面OK片
        string ResultOKPositiveA = "WR EM12664 1";
        //A侧正面NG片
        string ResultNGPositiveA = "WR EM12664 2";
        //A侧正面无片
        string ResultEmptyPositiveA = "WR EM12664 8";
        //B侧正面OK片
        string ResultOKPositiveB = "WR EM12764 1";
        //B侧正面NG片
        string ResultNGPositiveB = "WR EM12764 2";
        //B侧正面无片
        string ResultEmptyPositiveB = "WR EM12764 8";
        //A侧背面OK片
        string ResultOKNegativeA = "WR EM12694 1";
        //A侧背面NG片
        string ResultNGNegativeA = "WR EM12694 2";
        //A侧背面无片
        string ResultEmptyNegativeA = "WR EM12694 8";
        //B侧背面OK片
        string ResultOKNegativeB = "WR EM12794 1";
        //B侧背面NG片
        string ResultNGNegativeB = "WR EM12794 2";
        //B侧背面无片
        string ResultEmptyNegativeB = "WR EM12794 8";
        //A侧背面第几片
        public string CellNumNegativeA = "00";
        //B侧背面第几片
        public string CellNumNegativeB = "00";
        bool LastCellNegativeA;
        bool LastCellNegativeB;
        //与PLC间通信交流当前状态
        string tellPlcCurrentStatePositiveA, tellPlcCurrentStatePositiveB;
        string tellPlcCurrentStateNegativeA, tellPlcCurrentStateNegativeB;
        //与上位机http协议url
        string url = "http://172.168.155.151:6006/";
        /*****************************子界面*********************************/
        public MainFormLoginInterface mfLoginInterface;
        public MainFormPositiveInterface mfPositiveInterface;
        public MainFormNegativeInterface mfNegativeInterface;
        public MainFormNGStatisticsInterface mfNGStatisticsInterface;
        public MainFormParameterInterface mfParameterInterface;
        public MainFormStatisticsInterface mfStatisticsInterface;
        public MainFormUserManager mfUserManagerInterface;

        public MainFormNGInfoInterface mfNGInfoInterface;
        //Global类库静态变量
        //单串片数
        HTuple WaferCountPerClass;
        //相机选择
        HTuple IsDalsaCam;//0表示是大华，1表示是DALSA
        //栅线数量：0-四栅；1-五栅；2-MBB。
        HTuple MainLineNum = 1;
        //电池片完整类型：false-半片；true-全片
        HTuple IsFullWafer = 1;
        //纵向细栅数量：0-无分流；1-两分流；2-三分流；3-四分流
        HTuple SubMainLineNum = 0;
        //是否为双面串检
        HTuple IsDoubleDetect = 0;
        //是否有MES
        HTuple IsMESFun = 0;
        //是否上位链路
        HTuple IsUpperLink = 0;
        //是否英文界面
        HTuple IsEnglish = 0;
        //主栅线间距
        HTuple MainLineDistance = 0;
        //
        HTuple StringType = "常规间距";
        //是否启用宽度分辨率校准
        HTuple IsUsingWidthResolutionCalibratePositiveA = 1;
        HTuple IsUsingWidthResolutionCalibratePositiveB = 1;
        HTuple IsUsingWidthResolutionCalibrateNegativeA = 1;
        HTuple IsUsingWidthResolutionCalibrateNegativeB = 1;
        //宽度分辨率
        HTuple WidthResolutionPositiveA = 0.04315;
        HTuple WidthResolutionPositiveB = 0.04315;
        HTuple WidthResolutionNegativeA = 0.04315;
        HTuple WidthResolutionNegativeB = 0.04315;
        //硅片宽度(单位mm)
        HTuple WaferWidth = 156.75;

        HTuple WaferWidthPositiveA = 156.75;
        HTuple WaferWidthPositiveB = 156.75;
        HTuple WaferWidthNegativeA = 156.75;
        HTuple WaferWidthNegativeB = 156.75;
        //是否启用高度分辨率校准
        HTuple IsUsingHeightResolutionCalibratePositiveA = 1;
        HTuple IsUsingHeightResolutionCalibratePositiveB = 1;
        HTuple IsUsingHeightResolutionCalibrateNegativeA = 1;
        HTuple IsUsingHeightResolutionCalibrateNegativeB = 1;
        //高度分辨率
        HTuple HeightResolutionPositiveA = 0.0416218;
        HTuple HeightResolutionPositiveB = 0.0416218;
        HTuple HeightResolutionNegativeA = 0.0416218;
        HTuple HeightResolutionNegativeB = 0.0416218;
        //****新增参数*******
        //副栅线间距(单位mm)
        HTuple ViceLineInterval = 1.5;

        //是否启用膜偏、露白检测
        HTuple IsUsingFilmShiftingDetectPositiveA = 1;
        HTuple IsUsingFilmShiftingDetectPositiveB = 1;
        HTuple IsUsingFilmShiftingDetectNegativeA = 1;
        HTuple IsUsingFilmShiftingDetectNegativeB = 1;
        //*****新增参数*******
        //屏蔽区域(mm)
        HTuple TopShieldLengthOfTopRegionPositiveA = 4;
        HTuple TopShieldLengthOfTopRegionPositiveB = 4;
        HTuple TopShieldLengthOfTopRegionNegativeA = 4;
        HTuple TopShieldLengthOfTopRegionNegativeB = 4;
        HTuple BottomShieldLengthOfTopRegionPositiveA = 2;
        HTuple BottomShieldLengthOfTopRegionPositiveB = 2;
        HTuple BottomShieldLengthOfTopRegionNegativeA = 2;
        HTuple BottomShieldLengthOfTopRegionNegativeB = 2;
        HTuple TopShieldLengthOfBottomRegionPositiveA = 2;
        HTuple TopShieldLengthOfBottomRegionPositiveB = 2;
        HTuple TopShieldLengthOfBottomRegionNegativeA = 2;
        HTuple TopShieldLengthOfBottomRegionNegativeB = 2;
        HTuple BottomShieldLengthOfBottomRegionPositiveA = 4;
        HTuple BottomShieldLengthOfBottomRegionPositiveB = 4;
        HTuple BottomShieldLengthOfBottomRegionNegativeA = 4;
        HTuple BottomShieldLengthOfBottomRegionNegativeB = 4;
        //*******************
        //主栅线定位阈值
        HTuple LocationMainLineThreshPositiveA = 50;
        HTuple LocationMainLineThreshPositiveB = 50;
        HTuple LocationMainLineThreshNegativeA = 50;
        HTuple LocationMainLineThreshNegativeB = 50;
        //贴膜宽度阈值(mm)
        HTuple FilmWidthThreshPositiveA = 1.66;
        HTuple FilmWidthThreshPositiveB = 1.66;
        HTuple FilmWidthThreshNegativeA = 1.66;
        HTuple FilmWidthThreshNegativeB = 1.66;
        //贴膜宽度补偿值(mm)
        HTuple FilmWidthOffSetPositiveA = 0;
        HTuple FilmWidthOffSetPositiveB = 0;
        HTuple FilmWidthOffSetNegativeA = 0;
        HTuple FilmWidthOffSetNegativeB = 0;
        //是否启用膜短、膜缺失检测
        HTuple IsUsingFilmMissDetectPositiveA = 1;
        HTuple IsUsingFilmMissDetectPositiveB = 1;
        HTuple IsUsingFilmMissDetectNegativeA = 1;
        HTuple IsUsingFilmMissDetectNegativeB = 1;
        //焊带宽度阈值(mm)
        HTuple WeldWidthThreshPositiveA = 1.1;
        HTuple WeldWidthThreshPositiveB = 1.1;
        HTuple WeldWidthThreshNegativeA = 1.1;
        HTuple WeldWidthThreshNegativeB = 1.1;
        //膜短膜缺失屏蔽阈值(mm)
        HTuple WeldShieldLengthPositiveA = 1.1;
        HTuple WeldShieldLengthPositiveB = 1.1;
        HTuple WeldShieldLengthNegativeA = 1.1;
        HTuple WeldShieldLengthNegativeB = 1.1;
        //MBB九栅焊带检测参数
        //上半片头部大矩形检测位置(mm)
        HTuple FirstDetectPosForTopRegionPositiveA = 11.5;
        HTuple FirstDetectPosForTopRegionPositiveB = 11.5;
        HTuple FirstDetectPosForTopRegionNegativeA = 11.5;
        HTuple FirstDetectPosForTopRegionNegativeB = 11.5;
        //上半片靠近头部第一段窄区域检测位置(mm)
        HTuple SecondDetectPosForTopRegionPositiveA = 15;
        HTuple SecondDetectPosForTopRegionPositiveB = 15;
        HTuple SecondDetectPosForTopRegionNegativeA = 15;
        HTuple SecondDetectPosForTopRegionNegativeB = 15;
        //下半片头部大矩形区域检测位置(mm)
        HTuple FirstDetectPosForBottomRegionPositiveA = 5;
        HTuple FirstDetectPosForBottomRegionPositiveB = 5;
        HTuple FirstDetectPosForBottomRegionNegativeA = 5;
        HTuple FirstDetectPosForBottomRegionNegativeB = 5;
        //下半片靠近头部第一段窄区域检测位置(mm)
        HTuple SecondDetectPosForBottomRegionPositiveA = 8;
        HTuple SecondDetectPosForBottomRegionPositiveB = 8;
        HTuple SecondDetectPosForBottomRegionNegativeA = 8;
        HTuple SecondDetectPosForBottomRegionNegativeB = 8;

        //是否启用头尾膜检
        HTuple IsUsingHeadAndTailFilmShiftingDetectPositiveA = 1;
        HTuple IsUsingHeadAndTailFilmShiftingDetectPositiveB = 1;
        HTuple IsUsingHeadAndTailFilmShiftingDetectNegativeA = 1;
        HTuple IsUsingHeadAndTailFilmShiftingDetectNegativeB = 1;
        //头尾膜检宽度阈值(mm)
        HTuple HeadAndTailFilmWidthThreshPositiveA = 1.8;
        HTuple HeadAndTailFilmWidthThreshPositiveB = 1.8;
        HTuple HeadAndTailFilmWidthThreshNegativeA = 1.8;
        HTuple HeadAndTailFilmWidthThreshNegativeB = 1.8;
        //头尾膜检缩进距离(mm)
        HTuple HeadAndTailFilmShieldLengthPositiveA = 0;
        HTuple HeadAndTailFilmShieldLengthPositiveB = 0;
        HTuple HeadAndTailFilmShieldLengthNegativeA = 0;
        HTuple HeadAndTailFilmShieldLengthNegativeB = 0;
        //头尾膜检范围(mm)
        HTuple HeadAndTailFilmDetectRangePositiveA = 10;
        HTuple HeadAndTailFilmDetectRangePositiveB = 10;
        HTuple HeadAndTailFilmDetectRangeNegativeA = 10;
        HTuple HeadAndTailFilmDetectRangeNegativeB = 10;

        //是否开启上、下电池片Region边缘优化
        HTuple IsUsingWaferEdgeCalibrationPositiveA = 1;
        HTuple IsUsingWaferEdgeCalibrationPositiveB = 1;
        HTuple IsUsingWaferEdgeCalibrationNegativeA = 1;
        HTuple IsUsingWaferEdgeCalibrationNegativeB = 1;
        //上、下电池片Region边缘优化定位灰度差值
        HTuple LocationWaferEdgeThreshPositiveA = 15;
        HTuple LocationWaferEdgeThreshPositiveB = 15;
        HTuple LocationWaferEdgeThreshNegativeA = 15;
        HTuple LocationWaferEdgeThreshNegativeB = 15;
        //上、下电池片Region边缘优化区域膨胀像素
        HTuple WaferEdgeCalibrationRegionDilationPixelPositiveA = 3;
        HTuple WaferEdgeCalibrationRegionDilationPixelPositiveB = 3;
        HTuple WaferEdgeCalibrationRegionDilationPixelNegativeA = 3;
        HTuple WaferEdgeCalibrationRegionDilationPixelNegativeB = 3;

        //是否启用片间距检测
        HTuple IsUsingDistanceDetectPositiveA = 1;
        HTuple IsUsingDistanceDetectPositiveB = 1;
        HTuple IsUsingDistanceDetectNegativeA = 1;
        HTuple IsUsingDistanceDetectNegativeB = 1;
        //最小片间距阈值(mm)
        HTuple MinimumDistanceThreshPositiveA = 1.5;
        HTuple MinimumDistanceThreshPositiveB = 1.5;
        HTuple MinimumDistanceThreshNegativeA = 1.5;
        HTuple MinimumDistanceThreshNegativeB = 1.5;
        //最大片间距阈值(mm)
        HTuple MaxDistanceThreshPositiveA = 3.5;
        HTuple MaxDistanceThreshPositiveB = 3.5;
        HTuple MaxDistanceThreshNegativeA = 3.5;
        HTuple MaxDistanceThreshNegativeB = 3.5;
        //最小串间距阈值(mm)
        HTuple ClassDistanceThreshPositiveA = 20;
        HTuple ClassDistanceThreshPositiveB = 20;
        HTuple ClassDistanceThreshNegativeA = 20;
        HTuple ClassDistanceThreshNegativeB = 20;

        //是否启用边缺陷检测
        HTuple IsUsingEdgeDefectDetectPositiveA = 1;
        HTuple IsUsingEdgeDefectDetectPositiveB = 1;
        HTuple IsUsingEdgeDefectDetectNegativeA = 1;
        HTuple IsUsingEdgeDefectDetectNegativeB = 1;
        //边缘大缺陷宽度阈值(mm)
        HTuple EdgeBigDefectWidthThreshPositiveA = 5;
        HTuple EdgeBigDefectWidthThreshPositiveB = 5;
        HTuple EdgeBigDefectWidthThreshNegativeA = 5;
        HTuple EdgeBigDefectWidthThreshNegativeB = 5;
        //边缘大缺陷高度阈值(mm)
        HTuple EdgeBigDefectHeightThreshPositiveA = 5;
        HTuple EdgeBigDefectHeightThreshPositiveB = 5;
        HTuple EdgeBigDefectHeightThreshNegativeA = 5;
        HTuple EdgeBigDefectHeightThreshNegativeB = 5;
        //边缘小缺陷检测深度(mm)
        HTuple EdgeSmallDefectDetectDepthPositiveA = 10;
        HTuple EdgeSmallDefectDetectDepthPositiveB = 10;
        HTuple EdgeSmallDefectDetectDepthNegativeA = 10;
        HTuple EdgeSmallDefectDetectDepthNegativeB = 10;
        //边缘小缺陷与周围背景像素灰度差阈值
        HTuple EdgeSmallDefectGrayThreshPositiveA = 30;
        HTuple EdgeSmallDefectGrayThreshPositiveB = 30;
        HTuple EdgeSmallDefectGrayThreshNegativeA = 30;
        HTuple EdgeSmallDefectGrayThreshNegativeB = 30;
        //边缘小缺陷宽度阈值(mm)
        HTuple EdgeSmallDefectWidthThreshPositiveA = 0.4;
        HTuple EdgeSmallDefectWidthThreshPositiveB = 0.4;
        HTuple EdgeSmallDefectWidthThreshNegativeA = 0.4;
        HTuple EdgeSmallDefectWidthThreshNegativeB = 0.4;
        //边缘小缺陷高度阈值(mm)
        HTuple EdgeSmallDefectHeightThreshPositiveA = 0.4;
        HTuple EdgeSmallDefectHeightThreshPositiveB = 0.4;
        HTuple EdgeSmallDefectHeightThreshNegativeA = 0.4;
        HTuple EdgeSmallDefectHeightThreshNegativeB = 0.4;
        //边缘小缺陷灰度均值阈值
        HTuple EdgeSmallDefectGrayMeanThreshPositiveA = 120;
        HTuple EdgeSmallDefectGrayMeanThreshPositiveB = 120;
        HTuple EdgeSmallDefectGrayMeanThreshNegativeA = 120;
        HTuple EdgeSmallDefectGrayMeanThreshNegativeB = 120;
        //边缘小缺陷灰度方差阈值
        HTuple EdgeSmallDefectGrayDeviationThreshPositiveA = 30;
        HTuple EdgeSmallDefectGrayDeviationThreshPositiveB = 30;
        HTuple EdgeSmallDefectGrayDeviationThreshNegativeA = 30;
        HTuple EdgeSmallDefectGrayDeviationThreshNegativeB = 30;
        //角部缺陷阈值(边缘小缺陷检测深度*边缘小缺陷检测深度)：单晶默认0.7；多晶默认0.5
        HTuple CornerDefectAreaRatioThreshPositiveA = 0.5;
        HTuple CornerDefectAreaRatioThreshPositiveB = 0.5;
        HTuple CornerDefectAreaRatioThreshNegativeA = 0.5;
        HTuple CornerDefectAreaRatioThreshNegativeB = 0.5;

        //是否启用表面缺陷检测
        HTuple IsUsingSurfaceDefectDetectPositiveA = 1;
        HTuple IsUsingSurfaceDefectDetectPositiveB = 1;
        HTuple IsUsingSurfaceDefectDetectNegativeA = 1;
        HTuple IsUsingSurfaceDefectDetectNegativeB = 1;
        //表面缺陷与周围背景像素灰度差阈值
        HTuple SurfaceDefectGrayThreshPositiveA = 40;
        HTuple SurfaceDefectGrayThreshPositiveB = 40;
        HTuple SurfaceDefectGrayThreshNegativeA = 40;
        HTuple SurfaceDefectGrayThreshNegativeB = 40;
        //表面缺陷宽度阈值(mm)
        HTuple SurfaceDefectWidthThreshPositiveA = 0.15;
        HTuple SurfaceDefectWidthThreshPositiveB = 0.15;
        HTuple SurfaceDefectWidthThreshNegativeA = 0.15;
        HTuple SurfaceDefectWidthThreshNegativeB = 0.15;
        //表面缺陷高度阈值(mm)
        HTuple SurfaceDefectHeightThreshPositiveA = 0.15;
        HTuple SurfaceDefectHeightThreshPositiveB = 0.15;
        HTuple SurfaceDefectHeightThreshNegativeA = 0.15;
        HTuple SurfaceDefectHeightThreshNegativeB = 0.15;
        //表面缺陷缩进距离(mm)
        HTuple SurfaceDefectDetectIndentDepthPositiveA = 5;
        HTuple SurfaceDefectDetectIndentDepthPositiveB = 5;
        HTuple SurfaceDefectDetectIndentDepthNegativeA = 5;
        HTuple SurfaceDefectDetectIndentDepthNegativeB = 5;
        //纵向栅线屏蔽像素
        HTuple SurfaceDefectViceLineShieldWidthPositiveA = 50;
        HTuple SurfaceDefectViceLineShieldWidthPositiveB = 50;
        HTuple SurfaceDefectViceLineShieldWidthNegativeA = 50;
        HTuple SurfaceDefectViceLineShieldWidthNegativeB = 50;
        //纵向栅线屏蔽左侧位置补偿
        HTuple SurfaceDefectViceLineShieldLeftPosOffSetPositiveA = -3;
        HTuple SurfaceDefectViceLineShieldLeftPosOffSetPositiveB = -3;
        HTuple SurfaceDefectViceLineShieldLeftPosOffSetNegativeA = -3;
        HTuple SurfaceDefectViceLineShieldLeftPosOffSetNegativeB = -3;
        //纵向栅线屏蔽右侧位置补偿
        HTuple SurfaceDefectViceLineShieldRightPosOffSetPositiveA = 10;
        HTuple SurfaceDefectViceLineShieldRightPosOffSetPositiveB = 10;
        HTuple SurfaceDefectViceLineShieldRightPosOffSetNegativeA = 10;
        HTuple SurfaceDefectViceLineShieldRightPosOffSetNegativeB = 10;
        //表面划痕与周围背景像素灰度差阈值
        HTuple SurfaceScratchGrayThreshPositiveA = 25;
        HTuple SurfaceScratchGrayThreshPositiveB = 25;
        HTuple SurfaceScratchGrayThreshNegativeA = 25;
        HTuple SurfaceScratchGrayThreshNegativeB = 25;
        //表面划痕宽度阈值(mm)
        HTuple SurfaceScratchWidthThreshPositiveA = 0.5;
        HTuple SurfaceScratchWidthThreshPositiveB = 0.5;
        HTuple SurfaceScratchWidthThreshNegativeA = 0.5;
        HTuple SurfaceScratchWidthThreshNegativeB = 0.5;
        //表面划痕高度阈值(mm)
        HTuple SurfaceScratchHeightThreshPositiveA = 0.5;
        HTuple SurfaceScratchHeightThreshPositiveB = 0.5;
        HTuple SurfaceScratchHeightThreshNegativeA = 0.5;
        HTuple SurfaceScratchHeightThreshNegativeB = 0.5;

        //是否启用断栅、氧化检测
        HTuple IsUsingBrokenLineDetectPositiveA = 1;
        HTuple IsUsingBrokenLineDetectPositiveB = 1;
        HTuple IsUsingBrokenLineDetectNegativeA = 1;
        HTuple IsUsingBrokenLineDetectNegativeB = 1;
        //断栅与周围背景像素灰度差阈值
        HTuple BrokenLineGrayThreshPositiveA = 30;
        HTuple BrokenLineGrayThreshPositiveB = 30;
        HTuple BrokenLineGrayThreshNegativeA = 30;
        HTuple BrokenLineGrayThreshNegativeB = 30;
        //断栅宽度阈值(mm)
        HTuple BrokenLineWidthThreshPositiveA = 0.2;
        HTuple BrokenLineWidthThreshPositiveB = 0.2;
        HTuple BrokenLineWidthThreshNegativeA = 0.2;
        HTuple BrokenLineWidthThreshNegativeB = 0.2;
        //断栅高度阈值(mm)
        HTuple BrokenLineHeightThreshPositiveA = 0.2;
        HTuple BrokenLineHeightThreshPositiveB = 0.2;
        HTuple BrokenLineHeightThreshNegativeA = 0.2;
        HTuple BrokenLineHeightThreshNegativeB = 0.2;
        //断栅检测缩进距离(mm)
        HTuple BrokenLineDetectIndentDepthPositiveA = 5;
        HTuple BrokenLineDetectIndentDepthPositiveB = 5;
        HTuple BrokenLineDetectIndentDepthNegativeA = 5;
        HTuple BrokenLineDetectIndentDepthNegativeB = 5;

        //是否启用起焊点检测
        HTuple IsUsingStartWeldingDetectPositiveA = 1;
        HTuple IsUsingStartWeldingDetectPositiveB = 1;
        HTuple IsUsingStartWeldingDetectNegativeA = 1;
        HTuple IsUsingStartWeldingDetectNegativeB = 1;
        //起焊点距边界最大距离阈值
        HTuple StartWeldingDistanceMaxThreshPositiveA = 5;
        HTuple StartWeldingDistanceMaxThreshPositiveB = 5;
        HTuple StartWeldingDistanceMaxThreshNegativeA = 5;
        HTuple StartWeldingDistanceMaxThreshNegativeB = 5;
        //起焊点距边界最小距离阈值
        HTuple StartWeldingDistanceMinThreshPositiveA = 3;
        HTuple StartWeldingDistanceMinThreshPositiveB = 3;
        HTuple StartWeldingDistanceMinThreshNegativeA = 3;
        HTuple StartWeldingDistanceMinThreshNegativeB = 3;

        //是否启用色差检测
        HTuple IsUsingSurfaceColorDiffDetectPositiveA = 1;
        HTuple IsUsingSurfaceColorDiffDetectPositiveB = 1;
        HTuple IsUsingSurfaceColorDiffDetectNegativeA = 1;
        HTuple IsUsingSurfaceColorDiffDetectNegativeB = 1;
        //色差灰度差阈值
        HTuple SurfaceColorDiffGrayThreshPositiveA = 50;
        HTuple SurfaceColorDiffGrayThreshPositiveB = 50;
        HTuple SurfaceColorDiffGrayThreshNegativeA = 50;
        HTuple SurfaceColorDiffGrayThreshNegativeB = 50;

        //是否保存图片
        HTuple IsSaveNGImage_PositiveA = null;
        HTuple IsSaveNGImage_PositiveB = null;
        HTuple IsSaveNGImage_NegativeA = null;
        HTuple IsSaveNGImage_NegativeB = null;
        HTuple IsSaveAllImage_PositiveA = null;
        HTuple IsSaveAllImage_PositiveB = null;
        HTuple IsSaveAllImage_NegativeA = null;
        HTuple IsSaveAllImage_NegativeB = null;
        HTuple IsSaveNGImageWithRoi_PositiveA = null;
        HTuple IsSaveNGImageWithRoi_PositiveB = null;
        HTuple IsSaveNGImageWithRoi_NegativeA = null;
        HTuple IsSaveNGImageWithRoi_NegativeB = null;
        //是否启用相机
        HTuple IsUsingCamera_PositiveA = 0;
        HTuple IsUsingCamera_PositiveB = 0;
        HTuple IsUsingCamera_NegativeA = 0;
        HTuple IsUsingCamera_NegativeB = 0;
        //重大故障串报警
        HTuple IsUsingAlarmFunction_PositiveA = null;
        HTuple IsUsingAlarmFunction_PositiveB = null;
        HTuple IsUsingAlarmFunction_NegativeA = null;
        HTuple IsUsingAlarmFunction_NegativeB = null;
        HTuple MaxAlamClusterCount_PositiveA = null;
        HTuple MaxAlamClusterCount_PositiveB = null;
        HTuple MaxAlamClusterCount_NegativeA = null;
        HTuple MaxAlamClusterCount_NegativeB = null;

        /**************************Halcon检测全局变量****************************/
        HObject tempImagePositiveA, tempImagePositiveB;
        HObject tempImageNegativeA, tempImageNegativeB;
        public HObject ho_MainImagePositiveA = null, ho_MainImagePositiveB = null;
        public HObject ho_MainImageNegativeA = null, ho_MainImageNegativeB = null;
        public HTuple ImageWidthPositiveA = null, ImageHeightPositiveA = null;
        public HTuple ImageWidthNegativeA = null, ImageHeightNegativeA = null;
        public HTuple ImageWidthPositiveB = null, ImageHeightPositiveB = null;
        public HTuple ImageWidthNegativeB = null, ImageHeightNegativeB = null;

        //保存图像队列
        Queue<HObject> OriImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> FilmShiftingImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiFilmShiftingImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> FilmMissImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiFilmMissImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> HeadAndTailFilmShiftingImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiHeadAndTailFilmShiftingImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> EdgeDefectImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiEdgeDefectImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> DistanceNGImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiDistanceNGImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> SurfaceDefectImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiSurfaceDefectImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> BrokenLineImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiBrokenLineImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> StartWeldingNGImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> RoiStartWeldingNGImageQueuePositiveA = new Queue<HObject>();
        Object LockObjectOriImageQueuePositiveA = new Object();
        Object LockObjectFilmShiftingImageQueuePositiveA = new Object();
        Object LockObjectRoiFilmShiftingImageQueuePositiveA = new Object();
        Object LockObjectFilmMissImageQueuePositiveA = new Object();
        Object LockObjectRoiFilmMissImageQueuePositiveA = new Object();
        Object LockObjectHeadAndTailFilmShiftingImageQueuePositiveA = new Object();
        Object LockObjectRoiHeadAndTailFilmShiftingImageQueuePositiveA = new Object();
        Object LockObjectEdgeDefectImageQueuePositiveA = new Object();
        Object LockObjectRoiEdgeDefectImageQueuePositiveA = new Object();
        Object LockObjectDistanceNGImageQueuePositiveA = new Object();
        Object LockObjectRoiDistanceNGImageQueuePositiveA = new Object();
        Object LockObjectSurfaceDefectImageQueuePositiveA = new Object();
        Object LockObjectRoiSurfaceDefectImageQueuePositiveA = new Object();
        Object LockObjectBrokenLineImageQueuePositiveA = new Object();
        Object LockObjectRoiBrokenLineImageQueuePositiveA = new Object();
        Object LockObjectStartWeldingNGImageQueuePositiveA = new Object();
        Object LockObjectRoiStartWeldingNGImageQueuePositiveA = new Object();

        Queue<HObject> OriImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> FilmShiftingImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiFilmShiftingImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> FilmMissImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiFilmMissImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> HeadAndTailFilmShiftingImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiHeadAndTailFilmShiftingImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> EdgeDefectImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiEdgeDefectImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> DistanceNGImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiDistanceNGImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> SurfaceDefectImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiSurfaceDefectImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> BrokenLineImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiBrokenLineImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> StartWeldingNGImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> RoiStartWeldingNGImageQueueNegativeA = new Queue<HObject>();
        Object LockObjectOriImageQueueNegativeA = new Object();
        Object LockObjectFilmShiftingImageQueueNegativeA = new Object();
        Object LockObjectRoiFilmShiftingImageQueueNegativeA = new Object();
        Object LockObjectFilmMissImageQueueNegativeA = new Object();
        Object LockObjectRoiFilmMissImageQueueNegativeA = new Object();
        Object LockObjectHeadAndTailFilmShiftingImageQueueNegativeA = new Object();
        Object LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeA = new Object();
        Object LockObjectEdgeDefectImageQueueNegativeA = new Object();
        Object LockObjectRoiEdgeDefectImageQueueNegativeA = new Object();
        Object LockObjectDistanceNGImageQueueNegativeA = new Object();
        Object LockObjectRoiDistanceNGImageQueueNegativeA = new Object();
        Object LockObjectSurfaceDefectImageQueueNegativeA = new Object();
        Object LockObjectRoiSurfaceDefectImageQueueNegativeA = new Object();
        Object LockObjectBrokenLineImageQueueNegativeA = new Object();
        Object LockObjectRoiBrokenLineImageQueueNegativeA = new Object();
        Object LockObjectStartWeldingNGImageQueueNegativeA = new Object();
        Object LockObjectRoiStartWeldingNGImageQueueNegativeA = new Object();

        Queue<HObject> OriImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> FilmShiftingImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiFilmShiftingImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> FilmMissImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiFilmMissImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> HeadAndTailFilmShiftingImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiHeadAndTailFilmShiftingImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> EdgeDefectImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiEdgeDefectImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> DistanceNGImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiDistanceNGImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> SurfaceDefectImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiSurfaceDefectImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> BrokenLineImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiBrokenLineImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> StartWeldingNGImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> RoiStartWeldingNGImageQueuePositiveB = new Queue<HObject>();
        Object LockObjectOriImageQueuePositiveB = new Object();
        Object LockObjectFilmShiftingImageQueuePositiveB = new Object();
        Object LockObjectRoiFilmShiftingImageQueuePositiveB = new Object();
        Object LockObjectFilmMissImageQueuePositiveB = new Object();
        Object LockObjectRoiFilmMissImageQueuePositiveB = new Object();
        Object LockObjectHeadAndTailFilmShiftingImageQueuePositiveB = new Object();
        Object LockObjectRoiHeadAndTailFilmShiftingImageQueuePositiveB = new Object();
        Object LockObjectEdgeDefectImageQueuePositiveB = new Object();
        Object LockObjectRoiEdgeDefectImageQueuePositiveB = new Object();
        Object LockObjectDistanceNGImageQueuePositiveB = new Object();
        Object LockObjectRoiDistanceNGImageQueuePositiveB = new Object();
        Object LockObjectSurfaceDefectImageQueuePositiveB = new Object();
        Object LockObjectRoiSurfaceDefectImageQueuePositiveB = new Object();
        Object LockObjectBrokenLineImageQueuePositiveB = new Object();
        Object LockObjectRoiBrokenLineImageQueuePositiveB = new Object();
        Object LockObjectStartWeldingNGImageQueuePositiveB = new Object();
        Object LockObjectRoiStartWeldingNGImageQueuePositiveB = new Object();

        Queue<HObject> OriImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> FilmShiftingImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiFilmShiftingImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> FilmMissImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiFilmMissImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> HeadAndTailFilmShiftingImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiHeadAndTailFilmShiftingImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> EdgeDefectImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiEdgeDefectImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> DistanceNGImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiDistanceNGImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> SurfaceDefectImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiSurfaceDefectImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> BrokenLineImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiBrokenLineImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> StartWeldingNGImageQueueNegativeB = new Queue<HObject>();
        Queue<HObject> RoiStartWeldingNGImageQueueNegativeB = new Queue<HObject>();
        Object LockObjectOriImageQueueNegativeB = new Object();
        Object LockObjectFilmShiftingImageQueueNegativeB = new Object();
        Object LockObjectRoiFilmShiftingImageQueueNegativeB = new Object();
        Object LockObjectFilmMissImageQueueNegativeB = new Object();
        Object LockObjectRoiFilmMissImageQueueNegativeB = new Object();
        Object LockObjectHeadAndTailFilmShiftingImageQueueNegativeB = new Object();
        Object LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeB = new Object();
        Object LockObjectEdgeDefectImageQueueNegativeB = new Object();
        Object LockObjectRoiEdgeDefectImageQueueNegativeB = new Object();
        Object LockObjectDistanceNGImageQueueNegativeB = new Object();
        Object LockObjectRoiDistanceNGImageQueueNegativeB = new Object();
        Object LockObjectSurfaceDefectImageQueueNegativeB = new Object();
        Object LockObjectRoiSurfaceDefectImageQueueNegativeB = new Object();
        Object LockObjectBrokenLineImageQueueNegativeB = new Object();
        Object LockObjectRoiBrokenLineImageQueueNegativeB = new Object();
        Object LockObjectStartWeldingNGImageQueueNegativeB = new Object();
        Object LockObjectRoiStartWeldingNGImageQueueNegativeB = new Object();

        Object LockObjectNextClassPositiveA = new Object();
        Object LockObjectNextClassPositiveB = new Object();
        Object LockObjectNextClassNegativeA = new Object();
        Object LockObjectNextClassNegativeB = new Object();



        HObject tempOriImagePositiveA, tempOriImagePositiveB;
        HObject tempFilmShiftingImagePositiveA, tempFilmShiftingImagePositiveB;
        HObject tempRoiFilmShiftingImagePositiveA, tempRoiFilmShiftingImagePositiveB;
        HObject tempFilmMissImagePositiveA, tempFilmMissImagePositiveB;
        HObject tempRoiFilmMissImagePositiveA, tempRoiFilmMissImagePositiveB;
        HObject tempHeadAndTailFilmShiftingImagePositiveA, tempHeadAndTailFilmShiftingImagePositiveB;
        HObject tempRoiHeadAndTailFilmShiftingImagePositiveA, tempRoiHeadAndTailFilmShiftingImagePositiveB;
        HObject tempEdgeDefectImagePositiveA, tempEdgeDefectImagePositiveB;
        HObject tempRoiEdgeDefectImagePositiveA, tempRoiEdgeDefectImagePositiveB;
        HObject tempDistanceNGImagePositiveA, tempDistanceNGImagePositiveB;
        HObject tempRoiDistanceNGImagePositiveA, tempRoiDistanceNGImagePositiveB;
        HObject tempSurfaceDefectImagePositiveA, tempSurfaceDefectImagePositiveB;
        HObject tempRoiSurfaceDefectImagePositiveA, tempRoiSurfaceDefectImagePositiveB;
        HObject tempBrokenLineImagePositiveA, tempBrokenLineImagePositiveB;
        HObject tempRoiBrokenLineImagePositiveA, tempRoiBrokenLineImagePositiveB;
        HObject tempStartWeldingNGImagePositiveA, tempStartWeldingNGImagePositiveB;
        HObject tempRoiStartWeldingNGImagePositiveA, tempRoiStartWeldingNGImagePositiveB;

        HObject tempOriImageNegativeA, tempOriImageNegativeB;
        HObject tempFilmShiftingImageNegativeA, tempFilmShiftingImageNegativeB;
        HObject tempRoiFilmShiftingImageNegativeA, tempRoiFilmShiftingImageNegativeB;
        HObject tempFilmMissImageNegativeA, tempFilmMissImageNegativeB;
        HObject tempRoiFilmMissImageNegativeA, tempRoiFilmMissImageNegativeB;
        HObject tempHeadAndTailFilmShiftingImageNegativeA, tempHeadAndTailFilmShiftingImageNegativeB;
        HObject tempRoiHeadAndTailFilmShiftingImageNegativeA, tempRoiHeadAndTailFilmShiftingImageNegativeB;
        HObject tempEdgeDefectImageNegativeA, tempEdgeDefectImageNegativeB;
        HObject tempRoiEdgeDefectImageNegativeA, tempRoiEdgeDefectImageNegativeB;
        HObject tempDistanceNGImageNegativeA, tempDistanceNGImageNegativeB;
        HObject tempRoiDistanceNGImageNegativeA, tempRoiDistanceNGImageNegativeB;
        HObject tempSurfaceDefectImageNegativeA, tempSurfaceDefectImageNegativeB;
        HObject tempRoiSurfaceDefectImageNegativeA, tempRoiSurfaceDefectImageNegativeB;
        HObject tempBrokenLineImageNegativeA, tempBrokenLineImageNegativeB;
        HObject tempRoiBrokenLineImageNegativeA, tempRoiBrokenLineImageNegativeB;
        HObject tempStartWeldingNGImageNegativeA, tempStartWeldingNGImageNegativeB;
        HObject tempRoiStartWeldingNGImageNegativeA, tempRoiStartWeldingNGImageNegativeB;

        Queue<HObject> CellMissImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> CellMissImageQueuePositiveB = new Queue<HObject>();
        Object LockObjectCellMissImageQueuePositiveA = new Object();
        Object LockObjectCellMissImageQueuePositiveB = new Object();
        HObject tempCellMissImagePositiveA, tempCellMissImagePositiveB;

        Queue<HObject> SurfaceMeanGrayImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> SurfaceMeanGrayImageQueuePositiveB = new Queue<HObject>();
        Object LockObjectSurfaceMeanGrayImageQueuePositiveA = new Object();
        Object LockObjectSurfaceMeanGrayImageQueuePositiveB = new Object();
        HObject tempSurfaceMeanGrayImagePositiveA, tempSurfaceMeanGrayImagePositiveB;
        //异常图片
        Queue<HObject> ExceptionImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> ExceptionImageQueuePositiveB = new Queue<HObject>();
        Queue<HObject> AlgorithmExceptionImageQueuePositiveA = new Queue<HObject>();
        Queue<HObject> AlgorithmExceptionImageQueuePositiveB = new Queue<HObject>();
        Object LockObjectAlgorithmExceptionImageQueuePositiveA = new Object();
        Object LockObjectAlgorithmExceptionImageQueuePositiveB = new Object();
        Object LockObjectExceptionImageQueuePositiveA = new Object();
        Object LockObjectExceptionImageQueuePositiveB = new Object();
        HObject tempExceptionImagePositiveA, tempExceptionImagePositiveB;
        HObject tempAlgorithmExceptionImagePositiveA, tempAlgorithmExceptionImagePositiveB;

        Queue<HObject> ExceptionImageQueueNegativeA = new Queue<HObject>();
        Queue<HObject> ExceptionImageQueueNegativeB = new Queue<HObject>();
        Object LockObjectExceptionImageQueueNegativeA = new Object();
        Object LockObjectExceptionImageQueueNegativeB = new Object();
        HObject tempExceptionImageNegativeA, tempExceptionImageNegativeB;


        List<textObject> mainFormMenuList = new List<textObject>();
        List<textObject> mainFormTitleList = new List<textObject>();
        List<textObject> loginFormList = new List<textObject>();
        List<textObject> positiveFormList = new List<textObject>();
        List<textObject> negativeFormList = new List<textObject>();
        List<textObject> NGStatisticsFormList = new List<textObject>();
        List<textObject> parameterFormList = new List<textObject>();
        List<textObject> statisticsFormList = new List<textObject>();
        List<textObject> userManagerFormList = new List<textObject>();
        List<textObject> NGInfoFormList = new List<textObject>();

        List<Control> lblPositiveInterfaceCurrentClusterStateAList = new List<Control>();
        List<Control> lblPositiveInterfaceCurrentClusterTypeAList = new List<Control>();
        List<Control> lblPositiveInterfaceCurrentClusterStateBList = new List<Control>();
        List<Control> lblPositiveInterfaceCurrentClusterTypeBList = new List<Control>();
        List<Control> lblNegativeInterfaceCurrentClusterStateAList = new List<Control>();
        List<Control> lblNegativeInterfaceCurrentClusterTypeAList = new List<Control>();
        List<Control> lblNegativeInterfaceCurrentClusterStateBList = new List<Control>();
        List<Control> lblNegativeInterfaceCurrentClusterTypeBList = new List<Control>();
        /**************************Halcon检测局部变量****************************/
        #endregion


        /**************************以太网相机相关参数************************************/
        public enum IMGCNV_EBayerDemosaic
        {
            IMGCNV_DEMOSAIC_NEAREST_NEIGHBOR,		 ///< 最近邻 Nearest neighbor
            IMGCNV_DEMOSAIC_BILINEAR,				 ///< 双线性 Bilinear
            IMGCNV_DEMOSAIC_EDGE_SENSING,			 ///< 边缘检测 Edge sensing
            IMGCNV_DEMOSAIC_NOT_SUPPORT = 255,       ///< 不支持 Not support
        }
        /// <summary>
        /// 图片输出选项
        /// </summary>
        [Serializable]
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 4)]
        public struct IMGCNV_SOpenParam
        {
            public int width;                           ///< 图像宽 Image width
            public int height;                          ///< 图像高 Image Height
            public int paddingX;                        ///< 图像宽填充 Padding X
            public int paddingY;                        ///< 图像高填充 Padding Y
            public int dataSize;                        ///< 图像大小   Image size
            public uint pixelForamt;                    ///< 源图像的图像格式 Image format of source image
        }
        /// <summary>
        /// 裸数据转码到BGR24数据
        /// </summary>
        /// <returns>成功返回0</returns>
        [DllImport(CameraSDKPath, CallingConvention = CallingConvention.StdCall)]
        public static extern int IMGCNV_ConvertToBGR24_Ex(IntPtr pSrcData, ref IMGCNV_SOpenParam pOpenParam, IntPtr pDstData, ref int pDstDataSize, IMGCNV_EBayerDemosaic eBayerDemosaic);

        //相机回调函数相关参数
        IntPtr ptrRGB_PositiveA = IntPtr.Zero;
        IntPtr ptrRGB_PositiveB = IntPtr.Zero;
        IntPtr ptrRGB_NegativeA = IntPtr.Zero;
        IntPtr ptrRGB_NegativeB = IntPtr.Zero;
        IMGCNV_SOpenParam oParam_PositiveA = new IMGCNV_SOpenParam();
        IMGCNV_SOpenParam oParam_PositiveB = new IMGCNV_SOpenParam();
        IMGCNV_SOpenParam oParam_NegativeA = new IMGCNV_SOpenParam();
        IMGCNV_SOpenParam oParam_NegativeB = new IMGCNV_SOpenParam();

        #region Dalsa采集卡


        public SapAcqDevice m_AcquisitionPositiveA = null;

        SapTransfer m_XferPositiveA = null;
        SapView view = null;
        public SapAcqDevice m_AcquisitionPositiveB = null;

        SapTransfer m_XferPositiveB = null;

        //private SapAcquisition m_AcquisitionPositiveA;  //采集卡设备A
        private SapBuffer m_BuffersPositiveA;           //图像数据A
        //private SapAcqToBuf m_XferPositiveA;            // 关联设备与图像数据A
        private SapLocation m_ServerLocationPositiveA;  //设备选择A
        private string m_ConfigFileNamePositiveA;       //ccf路径A
        private IntPtr imagedataPositiveA;
        private HObject tempImageFromCameraPositiveA;

        private SapAcquisition m_AcquisitionNegativeA;  //采集卡设备A
        private SapBuffer m_BuffersNegativeA;           //图像数据A
        private SapAcqToBuf m_XferNegativeA;            // 关联设备与图像数据A
        private SapLocation m_ServerLocationNegativeA;  //设备选择A
        private string m_ConfigFileNameNegativeA;       //ccf路径A
        private IntPtr imagedataNegativeA;
        private HObject tempImageFromCameraNegativeA;

        //private SapAcquisition m_AcquisitionPositiveB;  //采集卡设备B
        private SapBuffer m_BuffersPositiveB;           //图像数据B
        //private SapAcqToBuf m_XferPositiveB;            // 关联设备与图像数据B
        private SapLocation m_ServerLocationPositiveB;  //设备选择B
        private string m_ConfigFileNamePositiveB;       //ccf路径B
        private IntPtr imagedataPositiveB;
        private HObject tempImageFromCameraPositiveB;

        private SapAcquisition m_AcquisitionNegativeB;  //采集卡设备B
        private SapBuffer m_BuffersNegativeB;           //图像数据B
        private SapAcqToBuf m_XferNegativeB;            // 关联设备与图像数据B
        private SapLocation m_ServerLocationNegativeB;  //设备选择B
        private string m_ConfigFileNameNegativeB;       //ccf路径B
        private IntPtr imagedataNegativeB;
        private HObject tempImageFromCameraNegativeB;

        private void xfer_XferNotifyPositiveA(object sender, SapXferNotifyEventArgs argsNotify)//halcon读取A侧图像地址
        {
            MainForm pt = argsNotify.Context as MainForm;
           
            try
            {
                
                pt.m_BuffersPositiveA.GetAddress(out pt.imagedataPositiveA);
                int dateSize = pt.m_BuffersPositiveA.get_SpaceUsed(pt.m_BuffersPositiveA.Index);
               // Global.SaveLog("D:\\Program Files\\Config\\033\\图像A高度.txt",
               //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像Index" + pt.m_BuffersPositiveA.Index.ToString());
               // Global.SaveLog("D:\\Program Files\\Config\\033\\图像A高度.txt",
               //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像大小" + dateSize.ToString());


                
                int m_BufWidth = pt.m_BuffersPositiveA.Width;
                
                float m_BufBytesPerPixel = pt.m_BuffersPositiveA.BytesPerPixel;
                
                float m_BufHeight = (dateSize / m_BufWidth)/ m_BufBytesPerPixel;
                //string filename = "D:/testA/" + ImageRealTime+".bmp";
                //bool ba =pt.m_BuffersPositiveA.Save(filename, "-format bmp", pt.m_BuffersPositiveA.Index,0);
                //Global.SaveLog("D:\\Program Files\\Config\\033\\图像A高度.txt",
                //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像高度" + m_BufHeight.ToString());

                //FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\图像A高度.txt");

                //if (fileInfo.Length / 1024 > 10240)
                //{
                //    File.Delete("D:\\Program Files\\Config\\033\\图像A高度.txt");
                //}
                // HOperatorSet.GenImageInterleaved(out tempImageFromCameraPositiveA, pt.imagedataPositiveA, "rgb", pt.m_BuffersPositiveA.Width, pt.m_BuffersPositiveA.Height, 0, "byte", pt.m_BuffersPositiveA.Width, pt.m_BuffersPositiveA.Height, 0, 0, -1, 0);
                if (m_BufHeight>0)
                {
                    HOperatorSet.GenImageInterleaved(out tempImageFromCameraPositiveA, pt.imagedataPositiveA, "rgb", m_BufWidth, m_BufHeight, 0, "byte", m_BufWidth, m_BufHeight, 0, 0, -1, 0);
                    if (pt.bl_IsRunPositive && pt.IsUsingCamera_PositiveA)
                    {
                        lock (pt.LockObjectPositiveA)
                        {
                            pt.ImageQueuePositiveA.Enqueue(pt.tempImageFromCameraPositiveA);
                        }
                    }
                }


                //if (pt.bl_IsRunPositive && pt.IsUsingCamera_PositiveA)
                //{
                //    lock (pt.LockObjectPositiveA)
                //    {
                //        pt.ImageQueuePositiveA.Enqueue(pt.tempImageFromCameraPositiveA);
                //    }
                //}
                //byte[] b = new byte[pt.m_BuffersPositiveA.Width * pt.m_BuffersPositiveA.Height * 3];
                //Array.Clear(b, 0, pt.m_BuffersPositiveA.Width * pt.m_BuffersPositiveA.Height * 3);
                //Marshal.Copy(b, 0, pt.imagedataPositiveA, pt.m_BuffersPositiveA.Width * pt.m_BuffersPositiveA.Height * 3);

                pt.m_BuffersPositiveA.Clear(pt.m_BuffersPositiveA.Index);

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            //runPositiveA();
        }
        private void xfer_XferNotifyPositiveB(object sender, SapXferNotifyEventArgs argsNotify)//halcon读取B侧图像地址
        {
            MainForm pt = argsNotify.Context as MainForm;
            try
            {
                
                pt.m_BuffersPositiveB.GetAddress(out pt.imagedataPositiveB);
              
                int  dateSize = pt.m_BuffersPositiveB.get_SpaceUsed(pt.m_BuffersPositiveB.Index);
               // Global.SaveLog("D:\\Program Files\\Config\\033\\图像B高度.txt",
               //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像Index" + pt.m_BuffersPositiveB.Index.ToString());
               // Global.SaveLog("D:\\Program Files\\Config\\033\\图像B高度.txt",
               //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像大小" + dateSize.ToString());
                int m_BufWidth = pt.m_BuffersPositiveB.Width;

                float m_BufBytesPerPixel = pt.m_BuffersPositiveB.BytesPerPixel;

                float m_BufHeight = (dateSize / m_BufWidth) / m_BufBytesPerPixel;
              //  Global.SaveLog("D:\\Program Files\\Config\\033\\图像B高度.txt",
              //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "图像高度" + m_BufHeight.ToString());

              //  FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\图像B高度.txt");

              //  if (fileInfo.Length / 1024 > 10240)
              //  {
              //      File.Delete("D:\\Program Files\\Config\\033\\图像B高度.txt");
              //  }
                //bool b= pt.m_BuffersPositiveB.Save(filename, "-format bmp", pt.m_BuffersPositiveB.Index,0);
                //HOperatorSet.GenImageInterleaved(out pt.tempImageFromCameraPositiveB, pt.imagedataPositiveB, "rgb", pt.m_BuffersPositiveB.Width, pt.m_BuffersPositiveB.Height, 0, "byte", pt.m_BuffersPositiveB.Width, pt.m_BuffersPositiveB.Height, 0, 0, -1, 0);
                if (m_BufHeight > 0)
                {
                    HOperatorSet.GenImageInterleaved(out tempImageFromCameraPositiveB, pt.imagedataPositiveB, "rgb", m_BufWidth, m_BufHeight, 0, "byte", m_BufWidth, m_BufHeight, 0, 0, -1, 0);
                    if (pt.bl_IsRunPositive && pt.IsUsingCamera_PositiveB)
                    {
                        lock (pt.LockObjectPositiveB)
                        {
                            pt.ImageQueuePositiveB.Enqueue(pt.tempImageFromCameraPositiveB);
                        }
                    }
                }
                //if (pt.bl_IsRunPositive && pt.IsUsingCamera_PositiveB)
                //{
                //    lock (pt.LockObjectPositiveB)
                //    {
                //        pt.ImageQueuePositiveB.Enqueue(pt.tempImageFromCameraPositiveB);
                //    }
                //}
                pt.m_BuffersPositiveB.Clear(pt.m_BuffersPositiveB.Index);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            //runPositiveB();
        }
        public void DestroyObjectsPositiveA()
        {
            if (m_XferPositiveA != null && m_XferPositiveA.Initialized)
                m_XferPositiveA.Destroy();
            if (m_BuffersPositiveA != null && m_BuffersPositiveA.Initialized)
                m_BuffersPositiveA.Destroy();
            if (m_AcquisitionPositiveA != null && m_AcquisitionPositiveA.Initialized)
                m_AcquisitionPositiveA.Destroy();
        }//清空A缓存

        public void DestroyObjectsPositiveB()
        {
            if (m_XferPositiveB != null && m_XferPositiveB.Initialized)
                m_XferPositiveB.Destroy();
            if (m_BuffersPositiveB != null && m_BuffersPositiveB.Initialized)
                m_BuffersPositiveB.Destroy();
            if (m_AcquisitionPositiveB != null && m_AcquisitionPositiveB.Initialized)
                m_AcquisitionPositiveB.Destroy();
        }//清空B缓存

        public void DisposeObjectsPositiveA()
        {
            if (m_XferPositiveA != null)
            { m_XferPositiveA.Dispose(); m_XferPositiveA = null; }
            if (m_BuffersPositiveA != null)
            { m_BuffersPositiveA.Dispose(); m_BuffersPositiveA = null; }
            if (m_AcquisitionPositiveA != null)
            { m_AcquisitionPositiveA.Dispose(); m_AcquisitionPositiveA = null; }

        }//清空A缓存

        public void DisposeObjectsPositiveB()
        {
            if (m_XferPositiveB != null)
            { m_XferPositiveB.Dispose(); m_XferPositiveB = null; }
            if (m_BuffersPositiveB != null)
            { m_BuffersPositiveB.Dispose(); m_BuffersPositiveB = null; }
            if (m_AcquisitionPositiveB != null)
            { m_AcquisitionPositiveB.Dispose(); m_AcquisitionPositiveB = null; }

        }//清空B缓存

        private void xfer_XferNotifyNegativeA(object sender, SapXferNotifyEventArgs argsNotify)//halcon读取A侧图像地址
        {
            MainForm pt = argsNotify.Context as MainForm;
            try
            {
                
                pt.m_BuffersNegativeA.GetAddress(out pt.imagedataNegativeA);
               
                HOperatorSet.GenImageInterleaved(out pt.tempImageFromCameraNegativeA, pt.imagedataNegativeA, "bgr", pt.m_BuffersNegativeA.Width, pt.m_BuffersNegativeA.Height, 0, "byte", pt.m_BuffersNegativeA.Width, pt.m_BuffersNegativeA.Height, 0, 0, -1, 0);
                if (pt.bl_IsRunNegative && pt.IsUsingCamera_NegativeA)
                {
                    lock (pt.LockObjectNegativeA)
                    {
                        pt.ImageQueueNegativeA.Enqueue(pt.tempImageFromCameraNegativeA);
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            //runNegativeA();
        }
        private void xfer_XferNotifyNegativeB(object sender, SapXferNotifyEventArgs argsNotify)//halcon读取B侧图像地址
        {
            MainForm pt = argsNotify.Context as MainForm;
            try
            {
                pt.m_BuffersNegativeB.GetAddress(out pt.imagedataNegativeB);
                HOperatorSet.GenImageInterleaved(out pt.tempImageFromCameraNegativeB, pt.imagedataNegativeB, "bgr", pt.m_BuffersNegativeB.Width, pt.m_BuffersNegativeB.Height, 0, "byte", pt.m_BuffersNegativeB.Width, pt.m_BuffersNegativeB.Height, 0, 0, -1, 0);
                if (pt.bl_IsRunNegative && pt.IsUsingCamera_NegativeB)
                {
                    lock (pt.LockObjectNegativeB)
                    {
                        pt.ImageQueueNegativeB.Enqueue(pt.tempImageFromCameraNegativeB);
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            //runNegativeB();
        }
        public void DestroyObjectsNegativeA()
        {
            if (m_XferNegativeA != null && m_XferNegativeA.Initialized)
                m_XferNegativeA.Destroy();
            if (m_BuffersNegativeA != null && m_BuffersNegativeA.Initialized)
                m_BuffersNegativeA.Destroy();
            if (m_AcquisitionNegativeA != null && m_AcquisitionNegativeA.Initialized)
                m_AcquisitionNegativeA.Destroy();
        }//清空A缓存

        public void DestroyObjectsNegativeB()
        {
            if (m_XferNegativeB != null && m_XferNegativeB.Initialized)
                m_XferNegativeB.Destroy();
            if (m_BuffersNegativeB != null && m_BuffersNegativeB.Initialized)
                m_BuffersNegativeB.Destroy();
            if (m_AcquisitionNegativeB != null && m_AcquisitionNegativeB.Initialized)
                m_AcquisitionNegativeB.Destroy();
        }//清空B缓存

        public void DisposeObjectsNegativeA()
        {
            if (m_XferNegativeA != null)
            { m_XferNegativeA.Dispose(); m_XferNegativeA = null; }
            if (m_BuffersNegativeA != null)
            { m_BuffersNegativeA.Dispose(); m_BuffersNegativeA = null; }
            if (m_AcquisitionNegativeA != null)
            { m_AcquisitionNegativeA.Dispose(); m_AcquisitionNegativeA = null; }

        }//清空A缓存

        public void DisposeObjectsNegativeB()
        {
            if (m_XferNegativeB != null)
            { m_XferNegativeB.Dispose(); m_XferNegativeB = null; }
            if (m_BuffersNegativeB != null)
            { m_BuffersNegativeB.Dispose(); m_BuffersNegativeB = null; }
            if (m_AcquisitionNegativeB != null)
            { m_AcquisitionNegativeB.Dispose(); m_AcquisitionNegativeB = null; }

        }//清空B缓存
        #endregion////

        private void timer_AutoTimeAndDeleteOldFiles_Tick(object sender, EventArgs e)
        {
            RealTime = DateTime.Now.AddHours(-8).ToString("yyyyMMdd");
            ImageRealTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            FileDeadTime = DateTime.Now.AddDays(-3).ToString("yyyyMMdd");
            DeleteMethod(FileDeadTime);
            RefreshClassStaticsData();
            FileInfo fileInfo1 = new FileInfo("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt");
            if(fileInfo1.Exists)
            {
                if (fileInfo1.Length / 1024 > 10240)
                {
                    File.Delete("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt");
                }
            }
            

            FileInfo fileInfo2 = new FileInfo(" D:\\Program Files\\Config\\033\\TcpIpStateLogReceive.txt");
            if (fileInfo2.Exists)
            {
                if (fileInfo2.Length / 1024 > 10240)
                {
                    File.Delete(" D:\\Program Files\\Config\\033\\TcpIpStateLogReceive.txt");
                }
            }
        }
        //是否已经导出生产数据
        bool isDone = false;
        private void timer_AutoCreateCSVFiles_Tick(object sender, EventArgs e)
        {
            CsvtimePositive = DateTime.Now.ToString("HHmmss");
            //CsvCreate();
            string dd = DateTime.Now.ToString("HH:mm:ss");
            if ((dd.CompareTo("07:58:00") > 0 && dd.CompareTo("08:00:00") < 0) || (dd.CompareTo("19:58:00") > 0 && dd.CompareTo("20:00:00") < 0))
            {
                if (!isDone)
                {
                    //Global.SaveLog("D:\\Program Files\\Config\\033\\班次生产记录.txt",
                    //        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "开始");
                   isDone = true;
                    saveTotalStatisticsLog();
                    if (Global.isEnglish == "0")
                    {
                        string aa = DateTime.Now.ToString("yyyy_MMdd_HH");
                        string destFileName = "D:\\Program Files\\Config\\033\\班次记录" + aa + ".txt";

                        if (System.IO.File.Exists("D:\\Program Files\\Config\\033\\班次记录.txt") && !System.IO.File.Exists(destFileName))
                        {
                            System.IO.File.Move("D:\\Program Files\\Config\\033\\班次记录.txt", destFileName);
                        }
                    }
                    else
                    {
                        string aa = DateTime.Now.ToString("yyyy_MMdd_HH");
                        string destFileName = "D:\\Program Files\\Config\\033\\Class Record" + aa + ".txt";

                        if (System.IO.File.Exists("D:\\Program Files\\Config\\033\\Class Record.txt") && !System.IO.File.Exists(destFileName))
                        {
                            System.IO.File.Move("D:\\Program Files\\Config\\033\\Class Record.txt", destFileName);
                        }
                    }
                    mfNGStatisticsInterface.ClearStaticsPositiveA();
                    mfNGStatisticsInterface.ClearStaticsPositiveB();
                    mfNGStatisticsInterface.ClearStaticsNegativeA();
                    mfNGStatisticsInterface.ClearStaticsNegativeB();
#if Dalsa
                    ConnectCamerasPositive();
#endif


                }

            }
            else
            {
                isDone = false;
            }

        }


        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            bl_Inspect = false;
            //myThread.Abort();
            //this.Controls.Clear();
        }
        public static MyCamera.cbOutputExdelegate ImageCallbackPositiveA;
        public static MyCamera.cbOutputExdelegate ImageCallbackPositiveB;
        public static MyCamera devicePositiveA = new MyCamera();
        public static MyCamera devicePositiveB = new MyCamera();
        public static MyCamera.cbExceptiondelegate pCallBackFuncPositiveA;
        public  static MyCamera.cbExceptiondelegate pCallBackFuncPositiveB;
        private  void ImageCallbackFuncPositiveA(IntPtr pData, ref MyCamera.MV_FRAME_OUT_INFO_EX pFrameInfo, IntPtr pUser)
        {
            //Console.WriteLine("Get one frame: Width[" + Convert.ToString(pFrameInfo.nWidth) + "] , Height[" + Convert.ToString(pFrameInfo.nHeight)
            //                    + "] , FrameNum[" + Convert.ToString(pFrameInfo.nFrameNum) + "]");


            // 获取帧数据信息
            //var frame = e.GrabResult;
            //framePositiveA = e.GrabResult;
            var nWidth = pFrameInfo.nWidth;
            var nHeight = pFrameInfo.nHeight;
            ptrRGB_PositiveA = IntPtr.Zero;
            //var nRGB = RGBFactory.EncodeLen((int)CameraImageMaxWidth, (int)CameraImageMaxHeight, true);
            if (ptrRGB_PositiveA == IntPtr.Zero)
            {
                ptrRGB_PositiveA = Marshal.AllocHGlobal((int)(pFrameInfo.nHeight * pFrameInfo.nWidth * 3 + 2048));
            }



            MyCamera.MV_PIXEL_CONVERT_PARAM stConverPixelParam = new MyCamera.MV_PIXEL_CONVERT_PARAM();
            stConverPixelParam.nWidth = pFrameInfo.nWidth;
            stConverPixelParam.nHeight = pFrameInfo.nHeight;
            stConverPixelParam.pSrcData = pData;
            stConverPixelParam.nSrcDataLen = pFrameInfo.nFrameLen;
            stConverPixelParam.enSrcPixelType = pFrameInfo.enPixelType;
            stConverPixelParam.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_RGB8_Packed;
            stConverPixelParam.pDstBuffer = ptrRGB_PositiveA;
            stConverPixelParam.nDstBufferSize = (uint)(pFrameInfo.nWidth * pFrameInfo.nHeight * 3 + 2048);

            int nRet = devicePositiveA.MV_CC_ConvertPixelType_NET(ref stConverPixelParam);
            if (MyCamera.MV_OK != nRet)
            {
                Console.WriteLine("Convert pixel type Failed:{0:x8}", nRet);
                return;
            }

            // ch:将图像数据保存到本地文件 | en:Save image data to local file
            byte[] data = new byte[stConverPixelParam.nDstLen];
            Marshal.Copy(ptrRGB_PositiveA, data, 0, (int)stConverPixelParam.nDstLen);




            //oParam_PositiveA.width = pFrameInfo.nWidth;
            //oParam_PositiveA.height = pFrameInfo.nHeight;
            //oParam_PositiveA.paddingX = 0;
            //oParam_PositiveA.paddingY = 0;
            //oParam_PositiveA.dataSize = (int)pFrameInfo.nFrameLen;
            //oParam_PositiveA.pixelForamt = (uint)pFrameInfo.enPixelType;
            ////Global.SaveLog("D:\\Program Files\\Config\\033\\图像源数据格式A.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + (uint)frame.PixelFmt);
            //int nDesDataSize = 0;
            ////Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(frame.Raw));


            ////Global.SaveLog("D:\\Program Files\\Config\\033\\oParamA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + oParam_PositiveA.width + "-- height:" + oParam_PositiveA.height + "-- dataSize:" + oParam_PositiveA.dataSize + "--pixelForamt:" + oParam_PositiveA.pixelForamt);

            ////Global.SaveLog("D:\\Program Files\\Config\\033\\frameA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + frame.Width + "-- height:" + frame.Height + "-- dataSize:" + frame.ImageSize + "--pixelForamt:" + (uint)frame.PixelFmt);


            //IMGCNV_ConvertToBGR24_Ex(pData, ref oParam_PositiveA, ptrRGB_PositiveA, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            //Trace.WriteLine("Block id is :" + frame.BlockID);
            //mfPositiveInterface.textBox1.Text = Convert.ToString(frame.BlockID);
            //Global.SaveLog("D:\\Program Files\\Config\\033\\ptrRGB_PositiveA.txt",
            //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(ptrRGB_PositiveA));

            try
            {
                HObject tempImageFromCameraA;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraA);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraA, (HTuple)ptrRGB_PositiveA, "rgb", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                if (bl_IsRunPositive && IsUsingCamera_PositiveA)
                {
                    lock (LockObjectPositiveA)
                    {
                        ImageQueuePositiveA.Enqueue(tempImageFromCameraA);
                    }
                }
            }
            catch (Exception exception)
            {
                //return;
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                Marshal.FreeHGlobal(ptrRGB_PositiveA);
            }

        }
        private void ImageCallbackFuncPositiveB(IntPtr pData, ref MyCamera.MV_FRAME_OUT_INFO_EX pFrameInfo, IntPtr pUser)
        {
            //Console.WriteLine("Get one frame: Width[" + Convert.ToString(pFrameInfo.nWidth) + "] , Height[" + Convert.ToString(pFrameInfo.nHeight)
            //                    + "] , FrameNum[" + Convert.ToString(pFrameInfo.nFrameNum) + "]");


            // 获取帧数据信息
            //var frame = e.GrabResult;
            //framePositiveA = e.GrabResult;
            var nWidth = pFrameInfo.nWidth;
            var nHeight = pFrameInfo.nHeight;
            ptrRGB_PositiveB = IntPtr.Zero;

            if (ptrRGB_PositiveB == IntPtr.Zero)
            {
                ptrRGB_PositiveB = Marshal.AllocHGlobal((int)(pFrameInfo.nHeight * pFrameInfo.nWidth * 3 + 2048));
            }
            MyCamera.MV_PIXEL_CONVERT_PARAM stConverPixelParam = new MyCamera.MV_PIXEL_CONVERT_PARAM();
            stConverPixelParam.nWidth = pFrameInfo.nWidth;
            
            stConverPixelParam.nHeight = pFrameInfo.nHeight;
            
            stConverPixelParam.pSrcData = pData;
            
            stConverPixelParam.nSrcDataLen = pFrameInfo.nFrameLen;
            
            stConverPixelParam.enSrcPixelType = pFrameInfo.enPixelType;
           
            stConverPixelParam.enDstPixelType = MyCamera.MvGvspPixelType.PixelType_Gvsp_RGB8_Packed;
            //stConverPixelParam.nDstLen = Convert.ToUInt32( pFrameInfo.nFrameLen*1.5);
            
            stConverPixelParam.pDstBuffer = ptrRGB_PositiveB;
           
            stConverPixelParam.nDstBufferSize = (uint)(pFrameInfo.nWidth * pFrameInfo.nHeight * 3 + 2048);
            
            int nRet = devicePositiveB.MV_CC_ConvertPixelType_NET(ref stConverPixelParam);
            if (MyCamera.MV_OK != nRet)
            {
                Console.WriteLine("Convert pixel type Failed:{0:x8}", nRet);
                return;
            }

            // ch:将图像数据保存到本地文件 | en:Save image data to local file
            byte[] data = new byte[stConverPixelParam.nDstLen];
            Marshal.Copy(ptrRGB_PositiveB, data, 0, (int)stConverPixelParam.nDstLen);




            //oParam_PositiveB.width = pFrameInfo.nWidth;
            //oParam_PositiveB.height = pFrameInfo.nHeight;
            //oParam_PositiveB.paddingX = 0;
            //oParam_PositiveB.paddingY = 0;
            //oParam_PositiveB.dataSize = (int)pFrameInfo.nFrameLen;
            //oParam_PositiveB.pixelForamt = (uint)pFrameInfo.enPixelType;
            //////Global.SaveLog("D:\\Program Files\\Config\\033\\图像源数据格式A.txt",
            //////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + (uint)frame.PixelFmt);
            //int nDesDataSize = 0;
            ////Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(frame.Raw));


            ////Global.SaveLog("D:\\Program Files\\Config\\033\\oParamA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + oParam_PositiveA.width + "-- height:" + oParam_PositiveA.height + "-- dataSize:" + oParam_PositiveA.dataSize + "--pixelForamt:" + oParam_PositiveA.pixelForamt);

            ////Global.SaveLog("D:\\Program Files\\Config\\033\\frameA.txt",
            ////            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + frame.Width + "-- height:" + frame.Height + "-- dataSize:" + frame.ImageSize + "--pixelForamt:" + (uint)frame.PixelFmt);

            //IMGCNV_ConvertToBGR24_Ex(pData, ref oParam_PositiveB, ptrRGB_PositiveB, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            //Trace.WriteLine("Block id is :" + frame.BlockID);
            //mfPositiveInterface.textBox1.Text = Convert.ToString(frame.BlockID);
            //Global.SaveLog("D:\\Program Files\\Config\\033\\ptrRGB_PositiveA.txt",
            //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(ptrRGB_PositiveA));

            try
            {
                HObject tempImageFromCameraB;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraB);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraB, (HTuple)ptrRGB_PositiveB, "rgb", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                if (bl_IsRunPositive && IsUsingCamera_PositiveB)
                {
                    lock (LockObjectPositiveB)
                    {
                        ImageQueuePositiveB.Enqueue(tempImageFromCameraB);
                    }
                }
            }
            catch (Exception exception)
            {
                //return;
                MessageBox.Show(exception.ToString());
            }
            finally
            {
                Marshal.FreeHGlobal(ptrRGB_PositiveB);
            }

        }
        private void cbExceptiondelegatePositiveA(uint nMsgType, IntPtr pUser)
        {
            if (nMsgType == MyCamera.MV_EXCEPTION_DEV_DISCONNECT)
            {
                // ch:停止采集 | en:Stop Grabbing
                devicePositiveA.MV_CC_StopGrabbing_NET();



                // ch:关闭设备 | en:Close Device
                devicePositiveA.MV_CC_CloseDevice_NET();
                devicePositiveA.MV_CC_DestroyDevice_NET();
                IsCameraPositiveAConnected = false;
                Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                                DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机A掉线");
                ConnectCamerasPositive();

            }
        }
        private void cbExceptiondelegatePositiveB(uint nMsgType, IntPtr pUser)
        {
            if (nMsgType == MyCamera.MV_EXCEPTION_DEV_DISCONNECT)
            {
                // ch:停止采集 | en:Stop Grabbing
                devicePositiveB.MV_CC_StopGrabbing_NET();

                   

                // ch:关闭设备 | en:Close Device
                devicePositiveB.MV_CC_CloseDevice_NET();
                devicePositiveB.MV_CC_DestroyDevice_NET();
                IsCameraPositiveBConnected = false;
                Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                               DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机B掉线");
                ConnectCamerasPositive();


            }
        }
        //链接相机函数
        public SapAcqDevice m_pAcqDevice = null;
        private void SapError(Object sender ,SapErrorEventArgs e)
        {
            Global.SaveLog("D:\\Program Files\\Config\\033\\相机错误.txt",
                                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "DALSA" + e.Message);
        }
        public bool ConnectCamerasPositive()
        {
            //链接相机
            #if Dalsa
            #region DALSA相机采集卡

                        //#region 读取配置文件A，尝试建立连接
                        //try
                        //{
                        //    if (!IsCameraPositiveAConnected)
                        //    {
                        //        //saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                        //        m_ServerLocationPositiveA = new SapLocation("Xtium-CL_MX4_1", 2);
                        //        m_ConfigFileNamePositiveA = defaultDalsaCameraFilePathPositiveA;

                        //        // define on-line object
                        //        m_AcquisitionPositiveA = new SapAcquisition(m_ServerLocationPositiveA, m_ConfigFileNamePositiveA);
                        //        m_AcquisitionPositiveA.AcqNotify += new SapAcqNotifyHandler(start_frame_callback);
                        //        m_BuffersPositiveA = new SapBufferWithTrash(2, m_AcquisitionPositiveA, SapBuffer.MemoryType.ScatterGather);
                        //        m_XferPositiveA = new SapAcqToBuf(m_AcquisitionPositiveA, m_BuffersPositiveA);

                        //        //event for view
                        //        m_XferPositiveA.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                        //        m_XferPositiveA.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyPositiveA);
                        //        m_XferPositiveA.XferNotifyContext = this;

                        //        // Create acquisition object
                        //        if (m_AcquisitionPositiveA != null && !m_AcquisitionPositiveA.Initialized)
                        //        {
                        //            if (m_AcquisitionPositiveA.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveA();
                        //                DisposeObjectsPositiveA();
                        //                return false;
                        //            }
                        //        }
                        //        // Create buffer object
                        //        if (m_BuffersPositiveA != null && !m_BuffersPositiveA.Initialized)
                        //        {
                        //            if (m_BuffersPositiveA.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveA();
                        //                DisposeObjectsPositiveA();
                        //                return false;
                        //            }
                        //            m_BuffersPositiveA.Clear();
                        //        }
                        //        // Create Xfer object
                        //        if (m_XferPositiveA != null && !m_XferPositiveA.Initialized)
                        //        {
                        //            if (m_XferPositiveA.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveA();
                        //                DisposeObjectsPositiveA();
                        //                return false;
                        //            }
                        //        }
                        //        m_XferPositiveA.Grab();
                        //        IsCameraPositiveAConnected = true;
                        //    }
                        //}
                        //catch (SapException)
                        //{
                        //    MessageBox.Show("打开A侧正面相机配置文件失败");
                        //    IsCameraPositiveAConnected = false;
                        //}
                        //catch (Exception e)
                        //{
                        //    MessageBox.Show(e.Message);
                        //}
                        //#endregion

                        //#region 读取配置文件B，尝试建立连接
                        //try
                        //{
                        //    if (!IsCameraPositiveBConnected)
                        //    {
                        //        //saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                        //        m_ServerLocationPositiveB = new SapLocation("Xtium-CL_MX4_1", 3);
                        //        m_ConfigFileNamePositiveB = defaultDalsaCameraFilePathPositiveB;

                        //        // define on-line object
                        //        m_AcquisitionPositiveB = new SapAcquisition(m_ServerLocationPositiveB, m_ConfigFileNamePositiveB);
                        //        m_AcquisitionPositiveB.AcqNotify += new SapAcqNotifyHandler(start_frame_callback);
                        //        m_BuffersPositiveB = new SapBufferWithTrash(2, m_AcquisitionPositiveB, SapBuffer.MemoryType.ScatterGather);
                        //        m_XferPositiveB = new SapAcqToBuf(m_AcquisitionPositiveB, m_BuffersPositiveB);

                        //        //event for view
                        //        m_XferPositiveB.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                        //        m_XferPositiveB.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyPositiveB);
                        //        m_XferPositiveB.XferNotifyContext = this;

                        //        // Create acquisition object
                        //        if (m_AcquisitionPositiveB != null && !m_AcquisitionPositiveB.Initialized)
                        //        {
                        //            if (m_AcquisitionPositiveB.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveB();
                        //                DisposeObjectsPositiveB();
                        //                return false;
                        //            }
                        //        }
                        //        // Create buffer object
                        //        if (m_BuffersPositiveB != null && !m_BuffersPositiveB.Initialized)
                        //        {
                        //            if (m_BuffersPositiveB.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveB();
                        //                DisposeObjectsPositiveB();
                        //                return false;
                        //            }
                        //            m_BuffersPositiveB.Clear();
                        //        }
                        //        // Create Xfer object
                        //        if (m_XferPositiveB != null && !m_XferPositiveB.Initialized)
                        //        {
                        //            if (m_XferPositiveB.Create() == false)
                        //            {

                        //                DestroyObjectsPositiveB();
                        //                DisposeObjectsPositiveB();
                        //                return false;
                        //            }
                        //        }
                        //        m_XferPositiveB.Grab();
                        //        IsCameraPositiveBConnected = true;
                        //    }
                        //}
                        //catch (SapException)
                        //{
                        //    MessageBox.Show("打开B侧正面相机配置文件失败");
                        //    IsCameraPositiveBConnected = false;

                        //}
                        //catch (Exception e)
                        //{
                        //    MessageBox.Show(e.Message);
                        //}
                        //#endregion
             
                        //return true;
            #endregion
            #region DALSA千兆网
                        int serverCount = SapManager.GetServerCount();
                        string userDefinedName = "";
                        string serverName = "";
            

                            DestroyObjectsPositiveA();
                            DisposeObjectsPositiveA();
                        IsCameraPositiveAConnected = false;





                            DestroyObjectsPositiveB();
                            DisposeObjectsPositiveB();

                        IsCameraPositiveBConnected = false;


                        for (int serverIndex = 0; serverIndex < serverCount; serverIndex++)
                        {
                            if (SapManager.GetResourceCount(serverIndex, SapManager.ResourceType.AcqDevice) != 0)
                            {
                                serverName = SapManager.GetServerName(serverIndex);
                                SapLocation location = new SapLocation(serverName, 0);
                                m_pAcqDevice = new SapAcqDevice(location, false);
                    
                                // Create acquisition device object
                   
                                    if (!m_pAcqDevice.Create())
                                    {
                                        Console.WriteLine("Error during SapAcqDevice creation!\n");
                                        return false;
                                    }
                    
                                // Get User Defined Name Feature Value
                                bool status = m_pAcqDevice.GetFeatureValue("DeviceUserID", out userDefinedName);
                                Global.SaveLog("D:\\Program Files\\Config\\033\\连接相机.txt",
                                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "相机名称" + userDefinedName);
                                if (status)
                                {
                                    if (userDefinedName == "A")
                                        m_AcquisitionPositiveA = m_pAcqDevice;
                                    if (userDefinedName == "B")
                                        m_AcquisitionPositiveB = m_pAcqDevice;
                                }
                                else

                                {
                                    return false;
                                }

                   
                    
                            }
                
                        }
            SapManager.DisplayStatusMode = SapManager.StatusMode.Event;
            SapManager.Error += SapError;
            #region 读取配置文件A，尝试建立连接
            try
                        {
                            if (!IsCameraPositiveAConnected && IsUsingCamera_PositiveA)
                            {
                                ////saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                                //m_ServerLocationPositiveA = new SapLocation("Linea_C4096-7um_1",0);
                   
                                //m_ConfigFileNamePositiveA = defaultDalsaCameraFilePathPositiveA;

                                //// Allocate objects
                                //m_AcquisitionPositiveA = new SapAcqDevice(m_ServerLocationPositiveA);
                   
                                m_BuffersPositiveA = new SapBufferWithTrash(10, m_AcquisitionPositiveA, SapBuffer.MemoryType.ScatterGather);
                                m_XferPositiveA = new SapAcqDeviceToBuf(m_AcquisitionPositiveA, m_BuffersPositiveA);
                               // view = new SapView(m_BuffersPositiveA);

                                m_XferPositiveA.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                                m_XferPositiveA.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyPositiveA);
                                m_XferPositiveA.XferNotifyContext = this;

                    
                                // Create acquisition object
                                if (m_AcquisitionPositiveA != null && !m_AcquisitionPositiveA.Initialized)
                                {
                                    if (m_AcquisitionPositiveA.Create() == false)
                                    {

                                        DestroyObjectsPositiveA();
                                        DisposeObjectsPositiveA();
                                        return false;
                                    }
                                }
                                // Create buffer object
                                if (m_BuffersPositiveA != null && !m_BuffersPositiveA.Initialized)
                                {
                                    if (m_BuffersPositiveA.Create() == false)
                                    {

                                        DestroyObjectsPositiveA();
                                        DisposeObjectsPositiveA();
                                        return false;
                                    }
                                    m_BuffersPositiveA.Clear();
                                }
                                // Create Xfer object
                                if (m_XferPositiveA != null && !m_XferPositiveA.Initialized)
                                {
                                    if (m_XferPositiveA.Create() == false)
                                    {

                                        DestroyObjectsPositiveA();
                                        DisposeObjectsPositiveA();
                                        return false;
                                    }
                                }
                                m_XferPositiveA.Grab();
                                IsCameraPositiveAConnected = true;
                            }
                        }
                        catch (SapException)
                        {
                            MessageBox.Show("打开A侧正面相机配置文件失败");
                            IsCameraPositiveAConnected = false;
                        }
                        catch (Exception e)
                        {
                            MessageBox.Show(e.Message);
                        }
            #endregion
            #region 读取配置文件B，尝试建立连接
                        try
                        {
                            if (!IsCameraPositiveBConnected&&IsUsingCamera_PositiveB)
                            {
                                //saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                                //m_ServerLocationPositiveB = new SapLocation("Linea_C4096-7um_2", 0);

                                //m_ConfigFileNamePositiveB = defaultDalsaCameraFilePathPositiveB;

                                //// Allocate objects
                                //m_AcquisitionPositiveB= new SapAcqDevice(m_ServerLocationPositiveB);

                                m_BuffersPositiveB = new SapBuffer(10, m_AcquisitionPositiveB, SapBuffer.MemoryType.ScatterGather);
                                m_XferPositiveB = new SapAcqDeviceToBuf(m_AcquisitionPositiveB, m_BuffersPositiveB);
                    
                                m_XferPositiveB.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                                m_XferPositiveB.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyPositiveB);
                                m_XferPositiveB.XferNotifyContext = this;
                                // Create acquisition object
                                if (m_AcquisitionPositiveB != null && !m_AcquisitionPositiveB.Initialized)
                                {
                                    if (m_AcquisitionPositiveB.Create() == false)
                                    {

                                        DestroyObjectsPositiveB();
                                        DisposeObjectsPositiveB();
                                        return false;
                                    }
                                }
                                // Create buffer object
                                if (m_BuffersPositiveB != null && !m_BuffersPositiveB.Initialized)
                                {
                                    if (m_BuffersPositiveB.Create() == false)
                                    {

                                        DestroyObjectsPositiveB();
                                        DisposeObjectsPositiveB();
                                        return false;
                                    }
                                    m_BuffersPositiveB.Clear();
                                }
                                // Create Xfer object
                                if (m_XferPositiveB != null && !m_XferPositiveB.Initialized)
                                {
                                    if (m_XferPositiveB.Create() == false)
                                    {

                                        DestroyObjectsPositiveB();
                                        DisposeObjectsPositiveB();
                                        return false;
                                    }
                                }
                                m_XferPositiveB.Grab();
                                IsCameraPositiveBConnected = true;
                            }
                        }
                        catch (SapException)
                        {
                            MessageBox.Show("打开B侧正面相机配置文件失败");
                            IsCameraPositiveBConnected = false;
                        }
                        catch (Exception e)
                        {
                            MessageBox.Show(e.Message);
                        }
            #endregion
                        return true;
            #endregion
            #endif
            #if Dahua
            #region 大华相机
                        //连接配方选择的相机
                        List<IDeviceInfo> cameraList = Enumerator.EnumerateDevices();
                        if ((IsUsingCamera_PositiveA || IsUsingCamera_PositiveB) && cameraList.Count <= 0)
                        {
                            MessageBox.Show("无法检测到相机，请检查线缆是否连接正常！");
                            return false;
                        }
                        if (IsUsingCamera_PositiveA && !IsCameraPositiveAConnected)
                        {
                            //关闭并清空之前开启的相机
                            //if (CameraPositiveA != null)
                            //{
                            //    CameraPositiveA.ShutdownGrab();
                            //    CameraPositiveA.Close();
                            //    CameraPositiveA.Dispose();
                            //    CameraPositiveA = null;
                            //}

                            //根据相机IP获取相机
                            CameraPositiveA = Enumerator.GetDeviceByGigeIP("192.168.0.50");
                            //注册相机A丢失回调函数
                            CameraPositiveA.ConnectionLost += OnConnectLossPositiveA;
                            // 打开设备
                            if (!CameraPositiveA.Open())
                            {
                                MessageBox.Show("连接A侧正面相机失败");
                                return false;
                            }
                            // 关闭Trigger
                            //CameraPositiveA.TriggerSet.Close();
                            // 设置图像格式
                            using (IEnumParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
                            {
                                p.SetValue("BayerRG8");
                            }
                            using (IIntegraParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImageWidth])
                            {
                                CameraImageMaxWidth = p.GetValue();
                            }
                            using (IIntegraParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImageHeight])
                            {
                                CameraImageMaxHeight = p.GetValue();
                            }
                            // 注册码流回调事件
                            CameraPositiveA.StreamGrabber.ImageGrabbed += OnImageGrabbedPositiveA;
                            //CameraPositiveA.StreamGrabber.SetBufferCount(2);
                            // 开启码流
                            if (!CameraPositiveA.GrabUsingGrabLoopThread())
                            {
                                MessageBox.Show(@"开启A侧正面相机码流失败");
                                return false;
                            }
                            IsCameraPositiveAConnected = true;
                        }
                        if (IsUsingCamera_PositiveB && !IsCameraPositiveBConnected)
                        {
                            //关闭并清空之前开启的相机
                            //if (CameraPositiveB != null)
                            //{
                            //    CameraPositiveB.ShutdownGrab();
                            //    CameraPositiveB.Close();
                            //    CameraPositiveB.Dispose();
                            //    CameraPositiveB = null;
                            //}

                            // 获取搜索到的第二个设备
                            CameraPositiveB = Enumerator.GetDeviceByGigeIP("192.168.1.50");
                            // 注册相机B丢失回调函数
                            CameraPositiveB.ConnectionLost += OnConnectLossPositiveB;
                            // 打开设备
                            if (!CameraPositiveB.Open())
                            {
                                MessageBox.Show("连接B侧正面相机失败");
                                return false;
                            }
                            //关闭Trigger
                            //   CameraPositiveB.TriggerSet.Close();
                            // 设置图像格式
                            using (IEnumParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
                            {
                                p.SetValue("BayerRG8");
                            }
                            using (IIntegraParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImageWidth])
                            {
                                CameraImageMaxWidth = p.GetValue();
                            }
                            using (IIntegraParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImageHeight])
                            {
                                CameraImageMaxHeight = p.GetValue();
                            }
                            // 注册码流回调事件
                            CameraPositiveB.StreamGrabber.ImageGrabbed += OnImageGrabbedPositiveB;
                            //CameraPositiveB.StreamGrabber.SetBufferCount(2);
                            // 开启码流
                            if (!CameraPositiveB.GrabUsingGrabLoopThread())
                            {
                                MessageBox.Show("开启B侧正面相机码流失败");
                                return false;
                            }
                            IsCameraPositiveBConnected = true;
                        }
                        return true;

            #endregion
            #endif
            #if HikVision
            #region 海康威视
                int nRet = MyCamera.MV_OK;
                // ch:枚举设备 | en:Enum device
                MyCamera.MV_CC_DEVICE_INFO_LIST stDevList = new MyCamera.MV_CC_DEVICE_INFO_LIST();
                nRet = MyCamera.MV_CC_EnumDevices_NET(MyCamera.MV_GIGE_DEVICE | MyCamera.MV_USB_DEVICE, ref stDevList);
                if (MyCamera.MV_OK != nRet)
                {
                    Console.WriteLine("Enum device failed:{0:x8}", nRet);
                    return false;
                }
                Console.WriteLine("Enum device count : " + Convert.ToString(stDevList.nDeviceNum));
                if (0 == stDevList.nDeviceNum)
                {
                    return false;
                }
            Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                               DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机数量"+ stDevList.nDeviceNum);
            MyCamera.MV_CC_DEVICE_INFO stDevInfo;                            // 通用设备信息
                Int32 nDevIndex = 0;
                // ch:打印设备信息 en:Print device info
                for (Int32 i = 0; i < stDevList.nDeviceNum; i++)
                {

                    stDevInfo = (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(stDevList.pDeviceInfo[i], typeof(MyCamera.MV_CC_DEVICE_INFO));
                    uint nIp1 = 0;
                    uint nIp2 = 0;
                    uint nIp3 = 0;
                    uint nIp4 = 0;
                    if (MyCamera.MV_GIGE_DEVICE == stDevInfo.nTLayerType)
                    {
                        MyCamera.MV_GIGE_DEVICE_INFO stGigEDeviceInfo = (MyCamera.MV_GIGE_DEVICE_INFO)MyCamera.ByteToStruct(stDevInfo.SpecialInfo.stGigEInfo, typeof(MyCamera.MV_GIGE_DEVICE_INFO));
                        nIp1 = ((stGigEDeviceInfo.nCurrentIp & 0xff000000) >> 24);
                        nIp2 = ((stGigEDeviceInfo.nCurrentIp & 0x00ff0000) >> 16);
                        nIp3 = ((stGigEDeviceInfo.nCurrentIp & 0x0000ff00) >> 8);
                        nIp4 = (stGigEDeviceInfo.nCurrentIp & 0x000000ff);
                        Console.WriteLine("\n" + i.ToString() + ": [GigE] User Define Name : " + stGigEDeviceInfo.chUserDefinedName);
                        Console.WriteLine("device IP :" + nIp1 + "." + nIp2 + "." + nIp3 + "." + nIp4);
                    }
                    else if (MyCamera.MV_USB_DEVICE == stDevInfo.nTLayerType)
                    {
                        MyCamera.MV_USB3_DEVICE_INFO stUsb3DeviceInfo = (MyCamera.MV_USB3_DEVICE_INFO)MyCamera.ByteToStruct(stDevInfo.SpecialInfo.stUsb3VInfo, typeof(MyCamera.MV_USB3_DEVICE_INFO));
                        Console.WriteLine("\n" + i.ToString() + ": [U3V] User Define Name : " + stUsb3DeviceInfo.chUserDefinedName);
                        Console.WriteLine("\n Serial Number : " + stUsb3DeviceInfo.chSerialNumber);
                        Console.WriteLine("\n Device Number : " + stUsb3DeviceInfo.nDeviceNumber);
                    }
                Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                          DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机ip" +  nIp1 + "." + nIp2 + "." + nIp3 + "." + nIp4);
                if (IsUsingCamera_PositiveA && !IsCameraPositiveAConnected)
                {
                    #region A侧正面
                    if ((nIp1 + "." + nIp2 + "." + nIp3 + "." + nIp4) == "192.168.0.50")
                    {
                        nDevIndex = i;

                        stDevInfo = (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(stDevList.pDeviceInfo[nDevIndex], typeof(MyCamera.MV_CC_DEVICE_INFO));

                        // ch:创建设备 | en:Create device
                        nRet = devicePositiveA.MV_CC_CreateDevice_NET(ref stDevInfo);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Create device failed:{0:x8}", nRet);
                            return false;
                        }

                        // ch:打开设备 | en:Open device
                        nRet = devicePositiveA.MV_CC_OpenDevice_NET();
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Open device failed:{0:x8}", nRet);
                            return false;
                        }
                        Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "A相机打开");
                        // ch:探测网络最佳包大小(只对GigE相机有效) | en:Detection network optimal package size(It only works for the GigE camera)
                        if (stDevInfo.nTLayerType == MyCamera.MV_GIGE_DEVICE)
                        {
                            int nPacketSize = devicePositiveA.MV_CC_GetOptimalPacketSize_NET();
                            if (nPacketSize > 0)
                            {
                                nRet = devicePositiveA.MV_CC_SetIntValue_NET("GevSCPSPacketSize", (uint)nPacketSize);
                                if (nRet != MyCamera.MV_OK)
                                {
                                    Console.WriteLine("Warning: Set Packet Size failed {0:x8}", nRet);
                                }
                            }
                            else
                            {
                                Console.WriteLine("Warning: Get Packet Size failed {0:x8}", nPacketSize);
                            }
                        }

                        // ch:设置触发模式为off || en:set trigger mode as off
                        //if (MyCamera.MV_OK != device.MV_CC_SetEnumValue_NET("TriggerMode", 0))
                        //{
                        //    Console.WriteLine("Set TriggerMode failed!");
                        //    return false;
                        //}
                        // ch:注册回调函数 | en:Register image callback
                        ImageCallbackPositiveA = new MyCamera.cbOutputExdelegate(ImageCallbackFuncPositiveA);
                        nRet = devicePositiveA.MV_CC_RegisterImageCallBackEx_NET(ImageCallbackPositiveA, IntPtr.Zero);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Register image callback failed!");
                            return false;
                        }
                        Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
                                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "A相机回调");
                        // ch:注册异常回调函数 | en:Register Exception Callback
                        pCallBackFuncPositiveA = new MyCamera.cbExceptiondelegate(cbExceptiondelegatePositiveA);
                        nRet = devicePositiveA.MV_CC_RegisterExceptionCallBack_NET(pCallBackFuncPositiveA, IntPtr.Zero);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Register expection callback failed!");
                            return false;
                        }

                        // ch:获取包大小 || en: Get Payload Size
                        MyCamera.MVCC_INTVALUE stParam = new MyCamera.MVCC_INTVALUE();
                        nRet = devicePositiveA.MV_CC_GetIntValue_NET("PayloadSize", ref stParam);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Get PayloadSize failed:{0:x8}", nRet);
                            return false;
                        }
                        UInt32 nPayloadSize = stParam.nCurValue;
                        //ch: 开启抓图 || en: start grab image
                        nRet = devicePositiveA.MV_CC_StartGrabbing_NET();
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Start grabbing failed:{0:x8}", nRet);
                            return false;
                        }
                        IsCameraPositiveAConnected = true;
                    }
                   
                    #endregion
                }

                if (IsUsingCamera_PositiveB && !IsCameraPositiveBConnected)
                {
                    #region B侧正面
                    if ((nIp1 + "." + nIp2 + "." + nIp3 + "." + nIp4) == "192.168.1.50")
                    {
                        nDevIndex = i;

                        stDevInfo = (MyCamera.MV_CC_DEVICE_INFO)Marshal.PtrToStructure(stDevList.pDeviceInfo[nDevIndex], typeof(MyCamera.MV_CC_DEVICE_INFO));

                        // ch:创建设备 | en:Create device
                        nRet = devicePositiveB.MV_CC_CreateDevice_NET(ref stDevInfo);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Create device failed:{0:x8}", nRet);
                            return false;
                        }

                        // ch:打开设备 | en:Open device
                        nRet = devicePositiveB.MV_CC_OpenDevice_NET();
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Open device failed:{0:x8}", nRet);
                            return false;
                        }
                        Global.SaveLog("D:\\Program Files\\Config\\033\\RawB.txt",
                                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "B相机打开");
                        // ch:探测网络最佳包大小(只对GigE相机有效) | en:Detection network optimal package size(It only works for the GigE camera)
                        if (stDevInfo.nTLayerType == MyCamera.MV_GIGE_DEVICE)
                        {
                            int nPacketSize = devicePositiveA.MV_CC_GetOptimalPacketSize_NET();
                            if (nPacketSize > 0)
                            {
                                nRet = devicePositiveB.MV_CC_SetIntValue_NET("GevSCPSPacketSize", (uint)nPacketSize);
                                if (nRet != MyCamera.MV_OK)
                                {
                                    Console.WriteLine("Warning: Set Packet Size failed {0:x8}", nRet);
                                }
                            }
                            else
                            {
                                Console.WriteLine("Warning: Get Packet Size failed {0:x8}", nPacketSize);
                            }
                        }

                        // ch:设置触发模式为off || en:set trigger mode as off
                        //if (MyCamera.MV_OK != device.MV_CC_SetEnumValue_NET("TriggerMode", 0))
                        //{
                        //    Console.WriteLine("Set TriggerMode failed!");
                        //    return false;
                        //}
                        // ch:获取包大小 || en: Get Payload Size
                        MyCamera.MVCC_INTVALUE stParam = new MyCamera.MVCC_INTVALUE();
                        nRet = devicePositiveB.MV_CC_GetIntValue_NET("PayloadSize", ref stParam);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Get PayloadSize failed:{0:x8}", nRet);
                            return false;
                        }
                        UInt32 nPayloadSize = stParam.nCurValue;
                        // ch:注册回调函数 | en:Register image callback
                        ImageCallbackPositiveB = new MyCamera.cbOutputExdelegate(ImageCallbackFuncPositiveB);
                        nRet = devicePositiveB.MV_CC_RegisterImageCallBackEx_NET(ImageCallbackPositiveB, IntPtr.Zero);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Register image callback failed!");
                            return false;
                        }
                        Global.SaveLog("D:\\Program Files\\Config\\033\\RawB.txt",
                                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "B相机回调");
                        // ch:注册异常回调函数 | en:Register Exception Callback
                        pCallBackFuncPositiveB = new MyCamera.cbExceptiondelegate(cbExceptiondelegatePositiveB);
                        nRet = devicePositiveB.MV_CC_RegisterExceptionCallBack_NET(pCallBackFuncPositiveB, IntPtr.Zero);
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Register expection callback failed!");
                            return false;
                        }
                        
                        //ch: 开启抓图 || en: start grab image
                        nRet = devicePositiveB.MV_CC_StartGrabbing_NET();
                        if (MyCamera.MV_OK != nRet)
                        {
                            Console.WriteLine("Start grabbing failed:{0:x8}", nRet);
                            return false;
                        }
                        IsCameraPositiveBConnected = true;
                    }
                    
                    #endregion
                }
            }


            return true;
               
            #endregion
            #endif
        }


        public bool ConnectCamerasNegative()
        {
            //链接相机
#if Dalsa
#region DALSA相机

#region 读取配置文件A，尝试建立连接
            try
            {
                if (!IsCameraNegativeAConnected)
                {
                    //saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                    m_ServerLocationNegativeA = new SapLocation("Xtium-CL_MX4_2", 2);
                    m_ConfigFileNameNegativeA = defaultDalsaCameraFilePathNegativeA;

                    // define on-line object
                    m_AcquisitionNegativeA = new SapAcquisition(m_ServerLocationNegativeA, m_ConfigFileNameNegativeA);
                    m_AcquisitionNegativeA.AcqNotify += new SapAcqNotifyHandler(start_frame_callback);
                    m_BuffersNegativeA = new SapBufferWithTrash(2, m_AcquisitionNegativeA, SapBuffer.MemoryType.ScatterGather);
                    m_XferNegativeA = new SapAcqToBuf(m_AcquisitionNegativeA, m_BuffersNegativeA);

                    //event for view
                    m_XferNegativeA.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                    m_XferNegativeA.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyNegativeA);
                    m_XferNegativeA.XferNotifyContext = this;

                    // Create acquisition object
                    if (m_AcquisitionNegativeA != null && !m_AcquisitionNegativeA.Initialized)
                    {
                        if (m_AcquisitionNegativeA.Create() == false)
                        {

                            DestroyObjectsNegativeA();
                            DisposeObjectsNegativeA();
                            return false;
                        }
                    }
                    // Create buffer object
                    if (m_BuffersNegativeA != null && !m_BuffersNegativeA.Initialized)
                    {
                        if (m_BuffersNegativeA.Create() == false)
                        {

                            DestroyObjectsNegativeA();
                            DisposeObjectsNegativeA();
                            return false;
                        }
                        m_BuffersNegativeA.Clear();
                    }
                    // Create Xfer object
                    if (m_XferNegativeA != null && !m_XferNegativeA.Initialized)
                    {
                        if (m_XferNegativeA.Create() == false)
                        {

                            DestroyObjectsNegativeA();
                            DisposeObjectsNegativeA();
                            return false;
                        }
                    }
                    m_XferNegativeA.Grab();
                    IsCameraNegativeAConnected = true;
                }
            }
            catch (SapException)
            {
                MessageBox.Show("打开A侧背面配置文件失败");
                IsCameraNegativeAConnected = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }
#endregion

#region 读取配置文件B，尝试建立连接
            try
            {
                if (!IsCameraNegativeBConnected)
                {
                    //saveLog("进入CreateNewObjects()" + "\t" + "Xtium-CL_MX4_" + str_BordNum + "\t" + str_BordPort + "\t" + ccffile, LogType.Debug);
                    m_ServerLocationNegativeB = new SapLocation("Xtium-CL_MX4_2", 3);
                    m_ConfigFileNameNegativeB = defaultDalsaCameraFilePathNegativeB;

                    // define on-line object
                    m_AcquisitionNegativeB = new SapAcquisition(m_ServerLocationNegativeB, m_ConfigFileNameNegativeB);
                    m_AcquisitionNegativeB.AcqNotify += new SapAcqNotifyHandler(start_frame_callback);
                    m_BuffersNegativeB = new SapBufferWithTrash(2, m_AcquisitionNegativeB, SapBuffer.MemoryType.ScatterGather);
                    m_XferNegativeB = new SapAcqToBuf(m_AcquisitionNegativeB, m_BuffersNegativeB);

                    //event for view
                    m_XferNegativeB.Pairs[0].EventType = SapXferPair.XferEventType.EndOfFrame;
                    m_XferNegativeB.XferNotify += new SapXferNotifyHandler(xfer_XferNotifyNegativeB);
                    m_XferNegativeB.XferNotifyContext = this;

                    // Create acquisition object
                    if (m_AcquisitionNegativeB != null && !m_AcquisitionNegativeB.Initialized)
                    {
                        if (m_AcquisitionNegativeB.Create() == false)
                        {

                            DestroyObjectsNegativeB();
                            DisposeObjectsNegativeB();
                            return false;
                        }
                    }
                    // Create buffer object
                    if (m_BuffersNegativeB != null && !m_BuffersNegativeB.Initialized)
                    {
                        if (m_BuffersNegativeB.Create() == false)
                        {

                            DestroyObjectsNegativeB();
                            DisposeObjectsNegativeB();
                            return false;
                        }
                        m_BuffersNegativeB.Clear();
                    }
                    // Create Xfer object
                    if (m_XferNegativeB != null && !m_XferNegativeB.Initialized)
                    {
                        if (m_XferNegativeB.Create() == false)
                        {

                            DestroyObjectsNegativeB();
                            DisposeObjectsNegativeB();
                            return false;
                        }
                    }
                    m_XferNegativeB.Grab();
                    IsCameraNegativeBConnected = true;
                }
            }
            catch (SapException)
            {
                MessageBox.Show("打开B侧背面相机配置文件失败");
                IsCameraNegativeBConnected = false;

            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
            }
#endregion

            return true;
#endregion
#else
#region 大华相机
            //连接配方选择的相机
            List<IDeviceInfo> cameraList = Enumerator.EnumerateDevices();
            if ((IsUsingCamera_NegativeA || IsUsingCamera_NegativeB) && cameraList.Count <= 0)
            {
                MessageBox.Show("无法检测到相机，请检查线缆是否连接正常！");
                return false;
            }
            if (IsUsingCamera_NegativeA && !IsCameraNegativeAConnected)
            {
                //关闭并清空之前开启的相机
                //if (CameraNegativeA != null)
                //{
                //    CameraNegativeA.ShutdownGrab();
                //    CameraNegativeA.Close();
                //    CameraNegativeA.Dispose();
                //    CameraNegativeA = null;
                //}

                //根据相机IP获取相机
                CameraNegativeA = Enumerator.GetDeviceByGigeIP("192.168.2.50");
                //注册相机A丢失回调函数
                CameraNegativeA.ConnectionLost += OnConnectLossNegativeA;
                // 打开设备
                if (!CameraNegativeA.Open())
                {
                    MessageBox.Show("连接A侧背面相机失败");
                    return false;
                }
                // 关闭Trigger
                //CameraNegativeA.TriggerSet.Close();
                // 设置图像格式
                using (IEnumParameter p = CameraNegativeA.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
                {
                    p.SetValue("BayerRG8");
                }
                using (IIntegraParameter p = CameraNegativeA.ParameterCollection[ParametrizeNameSet.ImageWidth])
                {
                    CameraImageMaxWidth = p.GetValue();
                }
                using (IIntegraParameter p = CameraNegativeA.ParameterCollection[ParametrizeNameSet.ImageHeight])
                {
                    CameraImageMaxHeight = p.GetValue();
                }
                // 注册码流回调事件
                CameraNegativeA.StreamGrabber.ImageGrabbed += OnImageGrabbedNegativeA;
                //CameraNegativeA.StreamGrabber.SetBufferCount(2);
                // 开启码流
                if (!CameraNegativeA.GrabUsingGrabLoopThread())
                {
                    MessageBox.Show(@"开启A侧背面码流失败");
                    return false;
                }
                IsCameraNegativeAConnected = true;
            }
            if (IsUsingCamera_NegativeB && !IsCameraNegativeBConnected)
            {
                //关闭并清空之前开启的相机
                //if (CameraNegativeB != null)
                //{
                //    CameraNegativeB.ShutdownGrab();
                //    CameraNegativeB.Close();
                //    CameraNegativeB.Dispose();
                //    CameraNegativeB = null;
                //}

                // 获取搜索到的第二个设备
                CameraNegativeB = Enumerator.GetDeviceByGigeIP("192.168.3.50");
                // 注册相机B丢失回调函数
                CameraNegativeB.ConnectionLost += OnConnectLossNegativeB;
                // 打开设备
                if (!CameraNegativeB.Open())
                {
                    MessageBox.Show("连接B侧背面相机失败");
                    return false;
                }
                //关闭Trigger
                //   CameraNegativeB.TriggerSet.Close();
                // 设置图像格式
                using (IEnumParameter p = CameraNegativeB.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
                {
                    p.SetValue("BayerRG8");
                }
                using (IIntegraParameter p = CameraNegativeB.ParameterCollection[ParametrizeNameSet.ImageWidth])
                {
                    CameraImageMaxWidth = p.GetValue();
                }
                using (IIntegraParameter p = CameraNegativeB.ParameterCollection[ParametrizeNameSet.ImageHeight])
                {
                    CameraImageMaxHeight = p.GetValue();
                }
                // 注册码流回调事件
                CameraNegativeB.StreamGrabber.ImageGrabbed += OnImageGrabbedNegativeB;
                //CameraNegativeB.StreamGrabber.SetBufferCount(2);
                // 开启码流
                if (!CameraNegativeB.GrabUsingGrabLoopThread())
                {
                    MessageBox.Show("开启B侧背面码流失败");
                    return false;
                }
                IsCameraNegativeBConnected = true;
            }
            return true;
#endregion
#endif
        }

        // Delegate to display number of frame acquired 
        // Delegate is needed because .NEt framework does not support  cross thread control modification
        //private delegate void DisplayFrameAcquired(int number, bool trash);
        static void start_frame_callback(object sender, SapAcqNotifyEventArgs args)
        {
            MainForm pt = args.Context as MainForm;
        }

        public MainForm()
        {
            InitializeComponent();
        }

        //public void CsvCreate()
        //{
        //    csvCreatTime = System.DateTime.Now.ToString("yyyy-MM-dd");
        //    string path = "D:/Record/" + csvCreatTime + "";
        //    if (!Directory.Exists(path))
        //    {
        //        Directory.CreateDirectory(path);
        //    }


        //    Path_OffA = "D:/Record/" + csvCreatTime + "/" + "A-Offset" + csvCreatTime + ".csv";
        //    Path_OffB = "D:/Record/" + csvCreatTime + "/" + "B-Offset" + csvCreatTime + ".csv";
        //    Path_A = "D:/Record/" + csvCreatTime + "/" + "A" + csvCreatTime + ".csv";
        //    Path_B = "D:/Record/" + csvCreatTime + "/" + "B" + csvCreatTime + ".csv";


        //    FileInfo fi_OffA = new FileInfo(Path_OffA);            //检测膜偏参数文件是否存在
        //    //FileStream fs = new FileStream(Path_A,FileMode.OpenOrCreate);
        //    if (!fi_OffA.Exists)
        //    {

        //        StreamWriter swA = new StreamWriter(Path_OffA, true, Encoding.UTF8);

        //        swA.WriteLine("时间,串数,片数, , ,第一根栅线, , , , ,第二根栅线 , , , , ,第三根栅线, , , , ,第四根栅线 , , , , ,第五根栅线 , , ,");
        //        swA.WriteLine("  , , ,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,");
        //        swA.Close();


        //    }

        //    FileInfo fi_A = new FileInfo(Path_A);
        //    if (!fi_A.Exists)
        //    {

        //        StreamWriter swNGA = new StreamWriter(Path_A, true, Encoding.UTF8);

        //        swNGA.WriteLine("时间,串数,片数,无膜,片间距,头尾, ,脏污, ,断栅,划痕, ,边缺陷, ,角缺陷,色差,起焊点");
        //        swNGA.WriteLine("  , , , , , ,位置,高,宽, , ,位置,高,宽, , , , , , , , ,");
        //        swNGA.Close();


        //    }

        //    FileInfo fi_OffB = new FileInfo(Path_OffB);            //检测膜偏参数文件是否存在
        //    //FileStream fs = new FileStream(Path_A,FileMode.OpenOrCreate);
        //    if (!fi_OffB.Exists)
        //    {

        //        StreamWriter swB = new StreamWriter(Path_OffB, true, Encoding.UTF8);

        //        swB.WriteLine("时间,串数,片数, , ,第一根栅线, , , , ,第二根栅线 , , , , ,第三根栅线, , , , ,第四根栅线 , , , , ,第五根栅线 , , ,");
        //        swB.WriteLine("  , , ,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,");
        //        swB.Close();


        //    }
        //    FileInfo fi_B = new FileInfo(Path_B);
        //    if (!fi_B.Exists)
        //    {

        //        StreamWriter swNGB = new StreamWriter(Path_B, true, Encoding.UTF8);

        //        swNGB.WriteLine("时间,串数,片数,无膜,片间距,头尾, ,脏污, ,断栅,划痕, ,边缺陷, ,角缺陷,色差,起焊点");
        //        swNGB.WriteLine("  , , , , , ,位置,高,宽, , ,位置,高,宽, , , , , , , , ,");
        //        swNGB.Close();


        //    }
        //}
#region 初始化读参数
        public void ReadConfig(string path)
        {
            //判断配方文件是否存在
            if (!File.Exists(path))
            {
                MessageBox.Show("错误路径，无法找到配方文件" + path);
                return;
            }
            Global.passWordAdministrator = Config.ReadIniData("Config", "PassWordAdministrator", null, path);
            Global.passWordHandlers = Config.ReadIniData("Config", "PassWordHandlers", null, path);
            Global.isEnglish = Config.ReadIniData("Config", "IsEnglish", "0", path);
            Global.waferCountPerClass = Config.ReadIniData("Config", "WaferCountPerClass", "12", path);
            Global.isDalsaCam = Config.ReadIniData("Config", "IsDalsaCam", "0", path);//0表示是大华，1表示是DALSA
            Global.mainLineNum = Config.ReadIniData("Config", "MainLineNum", "5", path);
            Global.isFullWafer = Config.ReadIniData("Config", "IsFullWafer", "0", path);
            Global.subMainLineNum = Config.ReadIniData("Config", "SubMainLineNum", "0", path);
            Global.stringType = Config.ReadIniData("Config", "StringType", "常规间距", path);
            Global.isDoubleDetect = Config.ReadIniData("Config", "IsDoubleDetect", "0", path);
            Global.isMESFun = Config.ReadIniData("Config", "IsMESFun", "0", path);
            Global.isUpperLink = Config.ReadIniData("Config", "IsUpperLink", "0", path);
            Global.mainLineDistance = Config.ReadIniData("Config", "MainLineDistance", "0", path);
            Global.isUsingWidthResolutionCalibratePositiveA = Config.ReadIniData("Config", "IsUsingWidthResolutionCalibratePositiveA", null, path);
            Global.isUsingWidthResolutionCalibratePositiveB = Config.ReadIniData("Config", "IsUsingWidthResolutionCalibratePositiveB", null, path);
            Global.isUsingWidthResolutionCalibrateNegativeA = Config.ReadIniData("Config", "IsUsingWidthResolutionCalibrateNegativeA", null, path);
            Global.isUsingWidthResolutionCalibrateNegativeB = Config.ReadIniData("Config", "IsUsingWidthResolutionCalibrateNegativeB", null, path);
            Global.widthResolutionPositiveA = Config.ReadIniData("Config", "WidthResolutionPositiveA", null, path);
            Global.widthResolutionPositiveB = Config.ReadIniData("Config", "WidthResolutionPositiveB", null, path);
            Global.widthResolutionNegativeA = Config.ReadIniData("Config", "WidthResolutionNegativeA", null, path);
            Global.widthResolutionNegativeB = Config.ReadIniData("Config", "WidthResolutionNegativeB", null, path);
            Global.waferWidth = Config.ReadIniData("Config", "WaferWidth", null, path);
            Global.waferWidthPositiveA = Config.ReadIniData("Config", "WaferWidthPositiveA", "0", path);
            Global.waferWidthPositiveB = Config.ReadIniData("Config", "WaferWidthPositiveB", "0", path);
            Global.waferWidthNegativeA = Config.ReadIniData("Config", "WaferWidthNegativeA", "0", path);
            Global.waferWidthNegativeB = Config.ReadIniData("Config", "WaferWidthNegativeB", "0", path);
            Global.isUsingHeightResolutionCalibratePositiveA = Config.ReadIniData("Config", "IsUsingHeightResolutionCalibratePositiveA", null, path);
            Global.isUsingHeightResolutionCalibratePositiveB = Config.ReadIniData("Config", "IsUsingHeightResolutionCalibratePositiveB", null, path);
            Global.isUsingHeightResolutionCalibrateNegativeA = Config.ReadIniData("Config", "IsUsingHeightResolutionCalibrateNegativeA", null, path);
            Global.isUsingHeightResolutionCalibrateNegativeB = Config.ReadIniData("Config", "IsUsingHeightResolutionCalibrateNegativeB", null, path);
            Global.heightResolutionPositiveA = Config.ReadIniData("Config", "HeightResolutionPositiveA", null, path);
            Global.heightResolutionPositiveB = Config.ReadIniData("Config", "HeightResolutionPositiveB", null, path);
            Global.heightResolutionNegativeA = Config.ReadIniData("Config", "HeightResolutionNegativeA", null, path);
            Global.heightResolutionNegativeB = Config.ReadIniData("Config", "HeightResolutionNegativeB", null, path);
            Global.viceLineInterval = Config.ReadIniData("Config", "ViceLineInterval", null, path);
            Global.isUsingFilmShiftingDetectPositiveA = Config.ReadIniData("Config", "IsUsingFilmShiftingDetectPositiveA", null, path);
            Global.isUsingFilmShiftingDetectPositiveB = Config.ReadIniData("Config", "IsUsingFilmShiftingDetectPositiveB", null, path);
            Global.isUsingFilmShiftingDetectNegativeA = Config.ReadIniData("Config", "IsUsingFilmShiftingDetectNegativeA", null, path);
            Global.isUsingFilmShiftingDetectNegativeB = Config.ReadIniData("Config", "IsUsingFilmShiftingDetectNegativeB", null, path);
            Global.topShieldLengthOfTopRegionPositiveA = Config.ReadIniData("Config", "TopShieldLengthOfTopRegionPositiveA", null, path);
            Global.topShieldLengthOfTopRegionPositiveB = Config.ReadIniData("Config", "TopShieldLengthOfTopRegionPositiveB", null, path);
            Global.topShieldLengthOfTopRegionNegativeA = Config.ReadIniData("Config", "TopShieldLengthOfTopRegionNegativeA", null, path);
            Global.topShieldLengthOfTopRegionNegativeB = Config.ReadIniData("Config", "TopShieldLengthOfTopRegionNegativeB", null, path);
            Global.bottomShieldLengthOfTopRegionPositiveA = Config.ReadIniData("Config", "BottomShieldLengthOfTopRegionPositiveA", null, path);
            Global.bottomShieldLengthOfTopRegionPositiveB = Config.ReadIniData("Config", "BottomShieldLengthOfTopRegionPositiveB", null, path);
            Global.bottomShieldLengthOfTopRegionNegativeA = Config.ReadIniData("Config", "BottomShieldLengthOfTopRegionNegativeA", null, path);
            Global.bottomShieldLengthOfTopRegionNegativeB = Config.ReadIniData("Config", "BottomShieldLengthOfTopRegionNegativeB", null, path);
            Global.topShieldLengthOfBottomRegionPositiveA = Config.ReadIniData("Config", "TopShieldLengthOfBottomRegionPositiveA", null, path);
            Global.topShieldLengthOfBottomRegionPositiveB = Config.ReadIniData("Config", "TopShieldLengthOfBottomRegionPositiveB", null, path);
            Global.topShieldLengthOfBottomRegionNegativeA = Config.ReadIniData("Config", "TopShieldLengthOfBottomRegionNegativeA", null, path);
            Global.topShieldLengthOfBottomRegionNegativeB = Config.ReadIniData("Config", "TopShieldLengthOfBottomRegionNegativeB", null, path);
            Global.bottomShieldLengthOfBottomRegionPositiveA = Config.ReadIniData("Config", "BottomShieldLengthOfBottomRegionPositiveA", null, path);
            Global.bottomShieldLengthOfBottomRegionPositiveB = Config.ReadIniData("Config", "BottomShieldLengthOfBottomRegionPositiveB", null, path);
            Global.bottomShieldLengthOfBottomRegionNegativeA = Config.ReadIniData("Config", "BottomShieldLengthOfBottomRegionNegativeA", null, path);
            Global.bottomShieldLengthOfBottomRegionNegativeB = Config.ReadIniData("Config", "BottomShieldLengthOfBottomRegionNegativeB", null, path);
            Global.locationMainLineThreshPositiveA = Config.ReadIniData("Config", "LocationMainLineThreshPositiveA", null, path);
            Global.locationMainLineThreshPositiveB = Config.ReadIniData("Config", "LocationMainLineThreshPositiveB", null, path);
            Global.locationMainLineThreshNegativeA = Config.ReadIniData("Config", "LocationMainLineThreshNegativeA", null, path);
            Global.locationMainLineThreshNegativeB = Config.ReadIniData("Config", "LocationMainLineThreshNegativeB", null, path);
            Global.filmWidthThreshPositiveA = Config.ReadIniData("Config", "FilmWidthThreshPositiveA", null, path);
            Global.filmWidthThreshPositiveB = Config.ReadIniData("Config", "FilmWidthThreshPositiveB", null, path);
            Global.filmWidthThreshNegativeA = Config.ReadIniData("Config", "FilmWidthThreshNegativeA", null, path);
            Global.filmWidthThreshNegativeB = Config.ReadIniData("Config", "FilmWidthThreshNegativeB", null, path);
            Global.filmWidthOffSetPositiveA = Config.ReadIniData("Config", "FilmWidthOffSetPositiveA", null, path);
            Global.filmWidthOffSetPositiveB = Config.ReadIniData("Config", "FilmWidthOffSetPositiveB", null, path);
            Global.filmWidthOffSetNegativeA = Config.ReadIniData("Config", "FilmWidthOffSetNegativeA", null, path);
            Global.filmWidthOffSetNegativeB = Config.ReadIniData("Config", "FilmWidthOffSetNegativeB", null, path);
            Global.isUsingFilmMissDetectPositiveA = Config.ReadIniData("Config", "IsUsingFilmMissDetectPositiveA", null, path);
            Global.isUsingFilmMissDetectPositiveB = Config.ReadIniData("Config", "IsUsingFilmMissDetectPositiveB", null, path);
            Global.isUsingFilmMissDetectNegativeA = Config.ReadIniData("Config", "IsUsingFilmMissDetectNegativeA", null, path);
            Global.isUsingFilmMissDetectNegativeB = Config.ReadIniData("Config", "IsUsingFilmMissDetectNegativeB", null, path);
            Global.weldWidthThreshPositiveA = Config.ReadIniData("Config", "WeldWidthThreshPositiveA", null, path);
            Global.weldWidthThreshPositiveB = Config.ReadIniData("Config", "WeldWidthThreshPositiveB", null, path);
            Global.weldWidthThreshNegativeA = Config.ReadIniData("Config", "WeldWidthThreshNegativeA", null, path);
            Global.weldWidthThreshNegativeB = Config.ReadIniData("Config", "WeldWidthThreshNegativeB", null, path);
            Global.weldShieldLengthPositiveA = Config.ReadIniData("Config", "WeldShieldLengthPositiveA", "0", path);
            Global.weldShieldLengthPositiveB = Config.ReadIniData("Config", "WeldShieldLengthPositiveB", "0", path);
            Global.weldShieldLengthNegativeA = Config.ReadIniData("Config", "WeldShieldLengthNegativeA", "0", path);
            Global.weldShieldLengthNegativeB = Config.ReadIniData("Config", "WeldShieldLengthNegativeB", "0", path);
            Global.firstDetectPosForTopRegionPositiveA = Config.ReadIniData("Config", "FirstDetectPosForTopRegionPositiveA", null, path);
            Global.firstDetectPosForTopRegionPositiveB = Config.ReadIniData("Config", "FirstDetectPosForTopRegionPositiveB", null, path);
            Global.firstDetectPosForTopRegionNegativeA = Config.ReadIniData("Config", "FirstDetectPosForTopRegionNegativeA", null, path);
            Global.firstDetectPosForTopRegionNegativeB = Config.ReadIniData("Config", "FirstDetectPosForTopRegionNegativeB", null, path);
            Global.secondDetectPosForTopRegionPositiveA = Config.ReadIniData("Config", "SecondDetectPosForTopRegionPositiveA", null, path);
            Global.secondDetectPosForTopRegionPositiveB = Config.ReadIniData("Config", "SecondDetectPosForTopRegionPositiveB", null, path);
            Global.secondDetectPosForTopRegionNegativeA = Config.ReadIniData("Config", "SecondDetectPosForTopRegionNegativeA", null, path);
            Global.secondDetectPosForTopRegionNegativeB = Config.ReadIniData("Config", "SecondDetectPosForTopRegionNegativeB", null, path);
            Global.firstDetectPosForBottomRegionPositiveA = Config.ReadIniData("Config", "FirstDetectPosForBottomRegionPositiveA", null, path);
            Global.firstDetectPosForBottomRegionPositiveB = Config.ReadIniData("Config", "FirstDetectPosForBottomRegionPositiveB", null, path);
            Global.firstDetectPosForBottomRegionNegativeA = Config.ReadIniData("Config", "FirstDetectPosForBottomRegionNegativeA", null, path);
            Global.firstDetectPosForBottomRegionNegativeB = Config.ReadIniData("Config", "FirstDetectPosForBottomRegionNegativeB", null, path);
            Global.secondDetectPosForBottomRegionPositiveA = Config.ReadIniData("Config", "SecondDetectPosForBottomRegionPositiveA", null, path);
            Global.secondDetectPosForBottomRegionPositiveB = Config.ReadIniData("Config", "SecondDetectPosForBottomRegionPositiveB", null, path);
            Global.secondDetectPosForBottomRegionNegativeA = Config.ReadIniData("Config", "SecondDetectPosForBottomRegionNegativeA", null, path);
            Global.secondDetectPosForBottomRegionNegativeB = Config.ReadIniData("Config", "SecondDetectPosForBottomRegionNegativeB", null, path);
            Global.isUsingHeadAndTailFilmShiftingDetectPositiveA = Config.ReadIniData("Config", "IsUsingHeadAndTailFilmShiftingDetectPositiveA", null, path);
            Global.isUsingHeadAndTailFilmShiftingDetectPositiveB = Config.ReadIniData("Config", "IsUsingHeadAndTailFilmShiftingDetectPositiveB", null, path);
            Global.isUsingHeadAndTailFilmShiftingDetectNegativeA = Config.ReadIniData("Config", "IsUsingHeadAndTailFilmShiftingDetectNegativeA", null, path);
            Global.isUsingHeadAndTailFilmShiftingDetectNegativeB = Config.ReadIniData("Config", "IsUsingHeadAndTailFilmShiftingDetectNegativeB", null, path);
            Global.headAndTailFilmWidthThreshPositiveA = Config.ReadIniData("Config", "HeadAndTailFilmWidthThreshPositiveA", null, path);
            Global.headAndTailFilmWidthThreshPositiveB = Config.ReadIniData("Config", "HeadAndTailFilmWidthThreshPositiveB", null, path);
            Global.headAndTailFilmWidthThreshNegativeA = Config.ReadIniData("Config", "HeadAndTailFilmWidthThreshNegativeA", null, path);
            Global.headAndTailFilmWidthThreshNegativeB = Config.ReadIniData("Config", "HeadAndTailFilmWidthThreshNegativeB", null, path);
            Global.headAndTailFilmShieldLengthPositiveA = Config.ReadIniData("Config", "HeadAndTailFilmShieldLengthPositiveA", null, path);
            Global.headAndTailFilmShieldLengthPositiveB = Config.ReadIniData("Config", "HeadAndTailFilmShieldLengthPositiveB", null, path);
            Global.headAndTailFilmShieldLengthNegativeA = Config.ReadIniData("Config", "HeadAndTailFilmShieldLengthNegativeA", null, path);
            Global.headAndTailFilmShieldLengthNegativeB = Config.ReadIniData("Config", "HeadAndTailFilmShieldLengthNegativeB", null, path);
            Global.headAndTailFilmDetectRangePositiveA = Config.ReadIniData("Config", "HeadAndTailFilmDetectRangePositiveA", null, path);
            Global.headAndTailFilmDetectRangePositiveB = Config.ReadIniData("Config", "HeadAndTailFilmDetectRangePositiveB", null, path);
            Global.headAndTailFilmDetectRangeNegativeA = Config.ReadIniData("Config", "HeadAndTailFilmDetectRangeNegativeA", null, path);
            Global.headAndTailFilmDetectRangeNegativeB = Config.ReadIniData("Config", "HeadAndTailFilmDetectRangeNegativeB", null, path);
            Global.isUsingWaferEdgeCalibrationPositiveA = Config.ReadIniData("Config", "IsUsingWaferEdgeCalibrationPositiveA", null, path);
            Global.isUsingWaferEdgeCalibrationPositiveB = Config.ReadIniData("Config", "IsUsingWaferEdgeCalibrationPositiveB", null, path);
            Global.isUsingWaferEdgeCalibrationNegativeA = Config.ReadIniData("Config", "IsUsingWaferEdgeCalibrationNegativeA", null, path);
            Global.isUsingWaferEdgeCalibrationNegativeB = Config.ReadIniData("Config", "IsUsingWaferEdgeCalibrationNegativeB", null, path);
            Global.locationWaferEdgeThreshPositiveA = Config.ReadIniData("Config", "LocationWaferEdgeThreshPositiveA", null, path);
            Global.locationWaferEdgeThreshPositiveB = Config.ReadIniData("Config", "LocationWaferEdgeThreshPositiveB", null, path);
            Global.locationWaferEdgeThreshNegativeA = Config.ReadIniData("Config", "LocationWaferEdgeThreshNegativeA", null, path);
            Global.locationWaferEdgeThreshNegativeB = Config.ReadIniData("Config", "LocationWaferEdgeThreshNegativeB", null, path);
            Global.waferEdgeCalibrationRegionDilationPixelPositiveA = Config.ReadIniData("Config", "WaferEdgeCalibrationRegionDilationPixelPositiveA", null, path);
            Global.waferEdgeCalibrationRegionDilationPixelPositiveB = Config.ReadIniData("Config", "WaferEdgeCalibrationRegionDilationPixelPositiveB", null, path);
            Global.waferEdgeCalibrationRegionDilationPixelNegativeA = Config.ReadIniData("Config", "WaferEdgeCalibrationRegionDilationPixelNegativeA", null, path);
            Global.waferEdgeCalibrationRegionDilationPixelNegativeB = Config.ReadIniData("Config", "WaferEdgeCalibrationRegionDilationPixelNegativeB", null, path);
            Global.isUsingDistanceDetectPositiveA = "1";
            Global.isUsingDistanceDetectPositiveB = "1";
            Global.isUsingDistanceDetectNegativeA = "1";
            Global.isUsingDistanceDetectNegativeB = "1";
            Global.minimumDistanceThreshPositiveA = Config.ReadIniData("Config", "MinimumDistanceThreshPositiveA", null, path);
            Global.minimumDistanceThreshPositiveB = Config.ReadIniData("Config", "MinimumDistanceThreshPositiveB", null, path);
            Global.minimumDistanceThreshNegativeA = Config.ReadIniData("Config", "MinimumDistanceThreshNegativeA", null, path);
            Global.minimumDistanceThreshNegativeB = Config.ReadIniData("Config", "MinimumDistanceThreshNegativeB", null, path);
            Global.maxDistanceThreshPositiveA = Config.ReadIniData("Config", "MaxDistanceThreshPositiveA", null, path);
            Global.maxDistanceThreshPositiveB = Config.ReadIniData("Config", "MaxDistanceThreshPositiveB", null, path);
            Global.maxDistanceThreshNegativeA = Config.ReadIniData("Config", "MaxDistanceThreshNegativeA", null, path);
            Global.maxDistanceThreshNegativeB = Config.ReadIniData("Config", "MaxDistanceThreshNegativeB", null, path);
            Global.classDistanceThreshPositiveA = Config.ReadIniData("Config", "ClassDistanceThreshPositiveA", null, path);
            Global.classDistanceThreshPositiveB = Config.ReadIniData("Config", "ClassDistanceThreshPositiveB", null, path);
            Global.classDistanceThreshNegativeA = Config.ReadIniData("Config", "ClassDistanceThreshNegativeA", null, path);
            Global.classDistanceThreshNegativeB = Config.ReadIniData("Config", "ClassDistanceThreshNegativeB", null, path);
            Global.isUsingEdgeDefectDetectPositiveA = Config.ReadIniData("Config", "IsUsingEdgeDefectDetectPositiveA", null, path);
            Global.isUsingEdgeDefectDetectPositiveB = Config.ReadIniData("Config", "IsUsingEdgeDefectDetectPositiveB", null, path);
            Global.isUsingEdgeDefectDetectNegativeA = Config.ReadIniData("Config", "IsUsingEdgeDefectDetectNegativeA", null, path);
            Global.isUsingEdgeDefectDetectNegativeB = Config.ReadIniData("Config", "IsUsingEdgeDefectDetectNegativeB", null, path);
            Global.edgeBigDefectWidthThreshPositiveA = Config.ReadIniData("Config", "EdgeBigDefectWidthThreshPositiveA", null, path);
            Global.edgeBigDefectWidthThreshPositiveB = Config.ReadIniData("Config", "EdgeBigDefectWidthThreshPositiveB", null, path);
            Global.edgeBigDefectWidthThreshNegativeA = Config.ReadIniData("Config", "EdgeBigDefectWidthThreshNegativeA", null, path);
            Global.edgeBigDefectWidthThreshNegativeB = Config.ReadIniData("Config", "EdgeBigDefectWidthThreshNegativeB", null, path);
            Global.edgeBigDefectHeightThreshPositiveA = Config.ReadIniData("Config", "EdgeBigDefectHeightThreshPositiveA", null, path);
            Global.edgeBigDefectHeightThreshPositiveB = Config.ReadIniData("Config", "EdgeBigDefectHeightThreshPositiveB", null, path);
            Global.edgeBigDefectHeightThreshNegativeA = Config.ReadIniData("Config", "EdgeBigDefectHeightThreshNegativeA", null, path);
            Global.edgeBigDefectHeightThreshNegativeB = Config.ReadIniData("Config", "EdgeBigDefectHeightThreshNegativeB", null, path);
            Global.edgeSmallDefectDetectDepthPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectDetectDepthPositiveA", null, path);
            Global.edgeSmallDefectDetectDepthPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectDetectDepthPositiveB", null, path);
            Global.edgeSmallDefectDetectDepthNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectDetectDepthNegativeA", null, path);
            Global.edgeSmallDefectDetectDepthNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectDetectDepthNegativeB", null, path);
            Global.edgeSmallDefectGrayThreshPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectGrayThreshPositiveA", null, path);
            Global.edgeSmallDefectGrayThreshPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectGrayThreshPositiveB", null, path);
            Global.edgeSmallDefectGrayThreshNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectGrayThreshNegativeA", null, path);
            Global.edgeSmallDefectGrayThreshNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectGrayThreshNegativeB", null, path);
            Global.edgeSmallDefectWidthThreshPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectWidthThreshPositiveA", null, path);
            Global.edgeSmallDefectWidthThreshPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectWidthThreshPositiveB", null, path);
            Global.edgeSmallDefectWidthThreshNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectWidthThreshNegativeA", null, path);
            Global.edgeSmallDefectWidthThreshNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectWidthThreshNegativeB", null, path);
            Global.edgeSmallDefectHeightThreshPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectHeightThreshPositiveA", null, path);
            Global.edgeSmallDefectHeightThreshPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectHeightThreshPositiveB", null, path);
            Global.edgeSmallDefectHeightThreshNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectHeightThreshNegativeA", null, path);
            Global.edgeSmallDefectHeightThreshNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectHeightThreshNegativeB", null, path);
            Global.edgeSmallDefectGrayMeanThreshPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectGrayMeanThreshPositiveA", null, path);
            Global.edgeSmallDefectGrayMeanThreshPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectGrayMeanThreshPositiveB", null, path);
            Global.edgeSmallDefectGrayMeanThreshNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectGrayMeanThreshNegativeA", null, path);
            Global.edgeSmallDefectGrayMeanThreshNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectGrayMeanThreshNegativeB", null, path);
            Global.edgeSmallDefectGrayDeviationThreshPositiveA = Config.ReadIniData("Config", "EdgeSmallDefectGrayDeviationThreshPositiveA", null, path);
            Global.edgeSmallDefectGrayDeviationThreshPositiveB = Config.ReadIniData("Config", "EdgeSmallDefectGrayDeviationThreshPositiveB", null, path);
            Global.edgeSmallDefectGrayDeviationThreshNegativeA = Config.ReadIniData("Config", "EdgeSmallDefectGrayDeviationThreshNegativeA", null, path);
            Global.edgeSmallDefectGrayDeviationThreshNegativeB = Config.ReadIniData("Config", "EdgeSmallDefectGrayDeviationThreshNegativeB", null, path);
            Global.cornerDefectAreaRatioThreshPositiveA = Config.ReadIniData("Config", "CornerDefectAreaRatioThreshPositiveA", null, path);
            Global.cornerDefectAreaRatioThreshPositiveB = Config.ReadIniData("Config", "CornerDefectAreaRatioThreshPositiveB", null, path);
            Global.cornerDefectAreaRatioThreshNegativeA = Config.ReadIniData("Config", "CornerDefectAreaRatioThreshNegativeA", null, path);
            Global.cornerDefectAreaRatioThreshNegativeB = Config.ReadIniData("Config", "CornerDefectAreaRatioThreshNegativeB", null, path);
            Global.isUsingSurfaceDefectDetectPositiveA = Config.ReadIniData("Config", "IsUsingSurfaceDefectDetectPositiveA", null, path);
            Global.isUsingSurfaceDefectDetectPositiveB = Config.ReadIniData("Config", "IsUsingSurfaceDefectDetectPositiveB", null, path);
            Global.isUsingSurfaceDefectDetectNegativeA = Config.ReadIniData("Config", "IsUsingSurfaceDefectDetectNegativeA", null, path);
            Global.isUsingSurfaceDefectDetectNegativeB = Config.ReadIniData("Config", "IsUsingSurfaceDefectDetectNegativeB", null, path);
            Global.surfaceDefectGrayThreshPositiveA = Config.ReadIniData("Config", "SurfaceDefectGrayThreshPositiveA", null, path);
            Global.surfaceDefectGrayThreshPositiveB = Config.ReadIniData("Config", "SurfaceDefectGrayThreshPositiveB", null, path);
            Global.surfaceDefectGrayThreshNegativeA = Config.ReadIniData("Config", "SurfaceDefectGrayThreshNegativeA", null, path);
            Global.surfaceDefectGrayThreshNegativeB = Config.ReadIniData("Config", "SurfaceDefectGrayThreshNegativeB", null, path);
            Global.surfaceDefectWidthThreshPositiveA = Config.ReadIniData("Config", "SurfaceDefectWidthThreshPositiveA", null, path);
            Global.surfaceDefectWidthThreshPositiveB = Config.ReadIniData("Config", "SurfaceDefectWidthThreshPositiveB", null, path);
            Global.surfaceDefectWidthThreshNegativeA = Config.ReadIniData("Config", "SurfaceDefectWidthThreshNegativeA", null, path);
            Global.surfaceDefectWidthThreshNegativeB = Config.ReadIniData("Config", "SurfaceDefectWidthThreshNegativeB", null, path);
            Global.surfaceDefectHeightThreshPositiveA = Config.ReadIniData("Config", "SurfaceDefectHeightThreshPositiveA", null, path);
            Global.surfaceDefectHeightThreshPositiveB = Config.ReadIniData("Config", "SurfaceDefectHeightThreshPositiveB", null, path);
            Global.surfaceDefectHeightThreshNegativeA = Config.ReadIniData("Config", "SurfaceDefectHeightThreshNegativeA", null, path);
            Global.surfaceDefectHeightThreshNegativeB = Config.ReadIniData("Config", "SurfaceDefectHeightThreshNegativeB", null, path);
            Global.surfaceDefectDetectIndentDepthPositiveA = Config.ReadIniData("Config", "SurfaceDefectDetectIndentDepthPositiveA", null, path);
            Global.surfaceDefectDetectIndentDepthPositiveB = Config.ReadIniData("Config", "SurfaceDefectDetectIndentDepthPositiveB", null, path);
            Global.surfaceDefectDetectIndentDepthNegativeA = Config.ReadIniData("Config", "SurfaceDefectDetectIndentDepthNegativeA", null, path);
            Global.surfaceDefectDetectIndentDepthNegativeB = Config.ReadIniData("Config", "SurfaceDefectDetectIndentDepthNegativeB", null, path);
            Global.surfaceDefectViceLineShieldWidthPositiveA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldWidthPositiveA", null, path);
            Global.surfaceDefectViceLineShieldWidthPositiveB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldWidthPositiveB", null, path);
            Global.surfaceDefectViceLineShieldWidthNegativeA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldWidthNegativeA", null, path);
            Global.surfaceDefectViceLineShieldWidthNegativeB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldWidthNegativeB", null, path);
            Global.surfaceDefectViceLineShieldLeftPosOffSetPositiveA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldLeftPosOffSetPositiveA", null, path);
            Global.surfaceDefectViceLineShieldLeftPosOffSetPositiveB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldLeftPosOffSetPositiveB", null, path);
            Global.surfaceDefectViceLineShieldLeftPosOffSetNegativeA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldLeftPosOffSetNegativeA", null, path);
            Global.surfaceDefectViceLineShieldLeftPosOffSetNegativeB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldLeftPosOffSetNegativeB", null, path);
            Global.surfaceDefectViceLineShieldRightPosOffSetPositiveA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldRightPosOffSetPositiveA", null, path);
            Global.surfaceDefectViceLineShieldRightPosOffSetPositiveB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldRightPosOffSetPositiveB", null, path);
            Global.surfaceDefectViceLineShieldRightPosOffSetNegativeA = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldRightPosOffSetNegativeA", null, path);
            Global.surfaceDefectViceLineShieldRightPosOffSetNegativeB = Config.ReadIniData("Config", "SurfaceDefectViceLineShieldRightPosOffSetNegativeB", null, path);
            Global.surfaceScratchGrayThreshPositiveA = Config.ReadIniData("Config", "SurfaceScratchGrayThreshPositiveA", null, path);
            Global.surfaceScratchGrayThreshPositiveB = Config.ReadIniData("Config", "SurfaceScratchGrayThreshPositiveB", null, path);
            Global.surfaceScratchGrayThreshNegativeA = Config.ReadIniData("Config", "SurfaceScratchGrayThreshNegativeA", null, path);
            Global.surfaceScratchGrayThreshNegativeB = Config.ReadIniData("Config", "SurfaceScratchGrayThreshNegativeB", null, path);
            Global.surfaceScratchWidthThreshPositiveA = Config.ReadIniData("Config", "SurfaceScratchWidthThreshPositiveA", null, path);
            Global.surfaceScratchWidthThreshPositiveB = Config.ReadIniData("Config", "SurfaceScratchWidthThreshPositiveB", null, path);
            Global.surfaceScratchWidthThreshNegativeA = Config.ReadIniData("Config", "SurfaceScratchWidthThreshNegativeA", null, path);
            Global.surfaceScratchWidthThreshNegativeB = Config.ReadIniData("Config", "SurfaceScratchWidthThreshNegativeB", null, path);
            Global.surfaceScratchHeightThreshPositiveA = Config.ReadIniData("Config", "SurfaceScratchHeightThreshPositiveA", null, path);
            Global.surfaceScratchHeightThreshPositiveB = Config.ReadIniData("Config", "SurfaceScratchHeightThreshPositiveB", null, path);
            Global.surfaceScratchHeightThreshNegativeA = Config.ReadIniData("Config", "SurfaceScratchHeightThreshNegativeA", null, path);
            Global.surfaceScratchHeightThreshNegativeB = Config.ReadIniData("Config", "SurfaceScratchHeightThreshNegativeB", null, path);
            Global.isUsingBrokenLineDetectPositiveA = Config.ReadIniData("Config", "IsUsingBrokenLineDetectPositiveA", null, path);
            Global.isUsingBrokenLineDetectPositiveB = Config.ReadIniData("Config", "IsUsingBrokenLineDetectPositiveB", null, path);
            Global.isUsingBrokenLineDetectNegativeA = Config.ReadIniData("Config", "IsUsingBrokenLineDetectNegativeA", null, path);
            Global.isUsingBrokenLineDetectNegativeB = Config.ReadIniData("Config", "IsUsingBrokenLineDetectNegativeB", null, path);
            Global.brokenLineGrayThreshPositiveA = Config.ReadIniData("Config", "BrokenLineGrayThreshPositiveA", null, path);
            Global.brokenLineGrayThreshPositiveB = Config.ReadIniData("Config", "BrokenLineGrayThreshPositiveB", null, path);
            Global.brokenLineGrayThreshNegativeA = Config.ReadIniData("Config", "BrokenLineGrayThreshNegativeA", null, path);
            Global.brokenLineGrayThreshNegativeB = Config.ReadIniData("Config", "BrokenLineGrayThreshNegativeB", null, path);
            Global.brokenLineWidthThreshPositiveA = Config.ReadIniData("Config", "BrokenLineWidthThreshPositiveA", null, path);
            Global.brokenLineWidthThreshPositiveB = Config.ReadIniData("Config", "BrokenLineWidthThreshPositiveB", null, path);
            Global.brokenLineWidthThreshNegativeA = Config.ReadIniData("Config", "BrokenLineWidthThreshNegativeA", null, path);
            Global.brokenLineWidthThreshNegativeB = Config.ReadIniData("Config", "BrokenLineWidthThreshNegativeB", null, path);
            Global.brokenLineHeightThreshPositiveA = Config.ReadIniData("Config", "BrokenLineHeightThreshPositiveA", null, path);
            Global.brokenLineHeightThreshPositiveB = Config.ReadIniData("Config", "BrokenLineHeightThreshPositiveB", null, path);
            Global.brokenLineHeightThreshNegativeA = Config.ReadIniData("Config", "BrokenLineHeightThreshNegativeA", null, path);
            Global.brokenLineHeightThreshNegativeB = Config.ReadIniData("Config", "BrokenLineHeightThreshNegativeB", null, path);
            Global.brokenLineDetectIndentDepthPositiveA = Config.ReadIniData("Config", "BrokenLineDetectIndentDepthPositiveA", null, path);
            Global.brokenLineDetectIndentDepthPositiveB = Config.ReadIniData("Config", "BrokenLineDetectIndentDepthPositiveB", null, path);
            Global.brokenLineDetectIndentDepthNegativeA = Config.ReadIniData("Config", "BrokenLineDetectIndentDepthNegativeA", null, path);
            Global.brokenLineDetectIndentDepthNegativeB = Config.ReadIniData("Config", "BrokenLineDetectIndentDepthNegativeB", null, path);
            Global.isUsingStartWeldingDetectPositiveA = Config.ReadIniData("Config", "IsUsingStartWeldingDetectPositiveA", null, path);
            Global.isUsingStartWeldingDetectPositiveB = Config.ReadIniData("Config", "IsUsingStartWeldingDetectPositiveB", null, path);
            Global.isUsingStartWeldingDetectNegativeA = Config.ReadIniData("Config", "IsUsingStartWeldingDetectNegativeA", null, path);
            Global.isUsingStartWeldingDetectNegativeB = Config.ReadIniData("Config", "IsUsingStartWeldingDetectNegativeB", null, path);
            Global.startWeldingDistanceMaxThreshPositiveA = Config.ReadIniData("Config", "StartWeldingDistanceMaxThreshPositiveA", null, path);
            Global.startWeldingDistanceMaxThreshPositiveB = Config.ReadIniData("Config", "StartWeldingDistanceMaxThreshPositiveB", null, path);
            Global.startWeldingDistanceMaxThreshNegativeA = Config.ReadIniData("Config", "StartWeldingDistanceMaxThreshNegativeA", null, path);
            Global.startWeldingDistanceMaxThreshNegativeB = Config.ReadIniData("Config", "StartWeldingDistanceMaxThreshNegativeB", null, path);
            Global.startWeldingDistanceMinThreshPositiveA = Config.ReadIniData("Config", "StartWeldingDistanceMinThreshPositiveA", null, path);
            Global.startWeldingDistanceMinThreshPositiveB = Config.ReadIniData("Config", "StartWeldingDistanceMinThreshPositiveB", null, path);
            Global.startWeldingDistanceMinThreshNegativeA = Config.ReadIniData("Config", "StartWeldingDistanceMinThreshNegativeA", null, path);
            Global.startWeldingDistanceMinThreshNegativeB = Config.ReadIniData("Config", "StartWeldingDistanceMinThreshNegativeB", null, path);
            Global.isUsingSurfaceColorDiffDetectPositiveA = Config.ReadIniData("Config", "IsUsingSurfaceColorDiffDetectPositiveA", null, path);
            Global.isUsingSurfaceColorDiffDetectPositiveB = Config.ReadIniData("Config", "IsUsingSurfaceColorDiffDetectPositiveB", null, path);
            Global.isUsingSurfaceColorDiffDetectNegativeA = Config.ReadIniData("Config", "IsUsingSurfaceColorDiffDetectNegativeA", null, path);
            Global.isUsingSurfaceColorDiffDetectNegativeB = Config.ReadIniData("Config", "IsUsingSurfaceColorDiffDetectNegativeB", null, path);
            Global.surfaceColorDiffGrayThreshPositiveA = Config.ReadIniData("Config", "SurfaceColorDiffGrayThreshPositiveA", null, path);
            Global.surfaceColorDiffGrayThreshPositiveB = Config.ReadIniData("Config", "SurfaceColorDiffGrayThreshPositiveB", null, path);
            Global.surfaceColorDiffGrayThreshNegativeA = Config.ReadIniData("Config", "SurfaceColorDiffGrayThreshNegativeA", null, path);
            Global.surfaceColorDiffGrayThreshNegativeB = Config.ReadIniData("Config", "SurfaceColorDiffGrayThreshNegativeB", null, path);
            Global.isSaveNGImage_PositiveA = Config.ReadIniData("Config", "IsSaveNGImage_PositiveA", null, path);
            Global.isSaveNGImage_PositiveB = Config.ReadIniData("Config", "IsSaveNGImage_PositiveB", null, path);
            Global.isSaveNGImage_NegativeA = Config.ReadIniData("Config", "IsSaveNGImage_NegativeA", null, path);
            Global.isSaveNGImage_NegativeB = Config.ReadIniData("Config", "IsSaveNGImage_NegativeB", null, path);
            Global.isSaveAllImage_PositiveA = Config.ReadIniData("Config", "IsSaveAllImage_PositiveA", null, path);
            Global.isSaveAllImage_PositiveB = Config.ReadIniData("Config", "IsSaveAllImage_PositiveB", null, path);
            Global.isSaveAllImage_NegativeA = Config.ReadIniData("Config", "IsSaveAllImage_NegativeA", null, path);
            Global.isSaveAllImage_NegativeB = Config.ReadIniData("Config", "IsSaveAllImage_NegativeB", null, path);
            Global.isSaveNGImageWithRoi_PositiveA = Config.ReadIniData("Config", "IsSaveNGImageWithRoi_PositiveA", null, path);
            Global.isSaveNGImageWithRoi_PositiveB = Config.ReadIniData("Config", "IsSaveNGImageWithRoi_PositiveB", null, path);
            Global.isSaveNGImageWithRoi_NegativeA = Config.ReadIniData("Config", "IsSaveNGImageWithRoi_NegativeA", null, path);
            Global.isSaveNGImageWithRoi_NegativeB = Config.ReadIniData("Config", "IsSaveNGImageWithRoi_NegativeB", null, path);
            Global.isUsingCamera_PositiveA = Config.ReadIniData("Config", "IsUsingCamera_PositiveA", null, path);
            Global.isUsingCamera_PositiveB = Config.ReadIniData("Config", "IsUsingCamera_PositiveB", null, path);
            Global.isUsingCamera_NegativeA = Config.ReadIniData("Config", "IsUsingCamera_NegativeA", null, path);
            Global.isUsingCamera_NegativeB = Config.ReadIniData("Config", "IsUsingCamera_NegativeB", null, path);
            Global.isUsingAlarmFunction_PositiveA = Config.ReadIniData("Config", "IsUsingAlarmFunction_PositiveA", null, path);
            Global.isUsingAlarmFunction_PositiveB = Config.ReadIniData("Config", "IsUsingAlarmFunction_PositiveB", null, path);
            Global.isUsingAlarmFunction_NegativeA = Config.ReadIniData("Config", "IsUsingAlarmFunction_NegativeA", null, path);
            Global.isUsingAlarmFunction_NegativeB = Config.ReadIniData("Config", "IsUsingAlarmFunction_NegativeB", null, path);
            Global.maxAlamClusterCount_PositiveA = Config.ReadIniData("Config", "MaxAlamClusterCount_PositiveA", null, path);
            Global.maxAlamClusterCount_PositiveB = Config.ReadIniData("Config", "MaxAlamClusterCount_PositiveB", null, path);
            Global.maxAlamClusterCount_NegativeA = Config.ReadIniData("Config", "MaxAlamClusterCount_NegativeA", null, path);
            Global.maxAlamClusterCount_NegativeB = Config.ReadIniData("Config", "MaxAlamClusterCount_NegativeB", null, path);


            /**********************主界面数据统计***********************/
            Global.TotalCount_PositiveA = Config.ReadIniData("Config", "TotalCount_PositiveA", null, path);
            Global.TotalCount_PositiveB = Config.ReadIniData("Config", "TotalCount_PositiveB", null, path);
            Global.NGTotalCount_PositiveA = Config.ReadIniData("Config", "NGTotalCount_PositiveA", null, path);
            Global.NGTotalCount_PositiveB = Config.ReadIniData("Config", "NGTotalCount_PositiveB", null, path);
            Global.MajorFailureCount_PositiveA = Config.ReadIniData("Config", "MajorFailureCount_PositiveA", null, path);
            Global.MajorFailureCount_PositiveB = Config.ReadIniData("Config", "MajorFailureCount_PositiveB", null, path);
            Global.FilmShiftingCount_PositiveA = Config.ReadIniData("Config", "FilmShiftingCount_PositiveA", null, path);
            Global.FilmShiftingCount_PositiveB = Config.ReadIniData("Config", "FilmShiftingCount_PositiveB", null, path);
            Global.FilmMissCount_PositiveA = Config.ReadIniData("Config", "FilmMissCount_PositiveA", null, path);
            Global.FilmMissCount_PositiveB = Config.ReadIniData("Config", "FilmMissCount_PositiveB", null, path);
            Global.FilmShiftingHeadAndTailCountPositiveA = Config.ReadIniData("Config", "FilmShiftingHeadAndTailCountPositiveA", null, path);
            Global.FilmShiftingHeadAndTailCountPositiveB = Config.ReadIniData("Config", "FilmShiftingHeadAndTailCountPositiveB", null, path);
            Global.DistanceNGCount_PositiveA = Config.ReadIniData("Config", "DistanceNGCount_PositiveA", null, path);
            Global.DistanceNGCount_PositiveB = Config.ReadIniData("Config", "DistanceNGCount_PositiveB", null, path);
            Global.EdgeDefectCount_PositiveA = Config.ReadIniData("Config", "EdgeDefectCount_PositiveA", null, path);
            Global.EdgeDefectCount_PositiveB = Config.ReadIniData("Config", "EdgeDefectCount_PositiveB", null, path);
            Global.SurfaceDefectCount_PositiveA = Config.ReadIniData("Config", "SurfaceDefectCount_PositiveA", null, path);
            Global.SurfaceDefectCount_PositiveB = Config.ReadIniData("Config", "SurfaceDefectCount_PositiveB", null, path);
            Global.BrokenLineCount_PositiveA = Config.ReadIniData("Config", "BrokenLineCount_PositiveA", null, path);
            Global.BrokenLineCount_PositiveB = Config.ReadIniData("Config", "BrokenLineCount_PositiveB", null, path);
            Global.StartWeldingNGCount_PositiveA = Config.ReadIniData("Config", "StartWeldingNGCount_PositiveA", null, path);
            Global.StartWeldingNGCount_PositiveB = Config.ReadIniData("Config", "StartWeldingNGCount_PositiveB", null, path);
            Global.SurfaceColorDiffCount_PositiveA = Config.ReadIniData("Config", "SurfaceColorDiffCount_PositiveA", null, path);
            Global.SurfaceColorDiffCount_PositiveB = Config.ReadIniData("Config", "SurfaceColorDiffCount_PositiveB", null, path);

            Global.TotalCount_NegativeA = Config.ReadIniData("Config", "TotalCount_NegativeA", null, path);
            Global.TotalCount_NegativeB = Config.ReadIniData("Config", "TotalCount_NegativeB", null, path);
            Global.NGTotalCount_NegativeA = Config.ReadIniData("Config", "NGTotalCount_NegativeA", null, path);
            Global.NGTotalCount_NegativeB = Config.ReadIniData("Config", "NGTotalCount_NegativeB", null, path);
            Global.MajorFailureCount_NegativeA = Config.ReadIniData("Config", "MajorFailureCount_NegativeA", null, path);
            Global.MajorFailureCount_NegativeB = Config.ReadIniData("Config", "MajorFailureCount_NegativeB", null, path);
            Global.FilmShiftingCount_NegativeA = Config.ReadIniData("Config", "FilmShiftingCount_NegativeA", null, path);
            Global.FilmShiftingCount_NegativeB = Config.ReadIniData("Config", "FilmShiftingCount_NegativeB", null, path);
            Global.FilmMissCount_NegativeA = Config.ReadIniData("Config", "FilmMissCount_NegativeA", null, path);
            Global.FilmMissCount_NegativeB = Config.ReadIniData("Config", "FilmMissCount_NegativeB", null, path);
            Global.FilmShiftingHeadAndTailCountNegativeA = Config.ReadIniData("Config", "FilmShiftingHeadAndTailCountNegativeA", null, path);
            Global.FilmShiftingHeadAndTailCountNegativeB = Config.ReadIniData("Config", "FilmShiftingHeadAndTailCountNegativeB", null, path);
            Global.DistanceNGCount_NegativeA = Config.ReadIniData("Config", "DistanceNGCount_NegativeA", null, path);
            Global.DistanceNGCount_NegativeB = Config.ReadIniData("Config", "DistanceNGCount_NegativeB", null, path);
            Global.EdgeDefectCount_NegativeA = Config.ReadIniData("Config", "EdgeDefectCount_NegativeA", null, path);
            Global.EdgeDefectCount_NegativeB = Config.ReadIniData("Config", "EdgeDefectCount_NegativeB", null, path);
            Global.SurfaceDefectCount_NegativeA = Config.ReadIniData("Config", "SurfaceDefectCount_NegativeA", null, path);
            Global.SurfaceDefectCount_NegativeB = Config.ReadIniData("Config", "SurfaceDefectCount_NegativeB", null, path);
            Global.BrokenLineCount_NegativeA = Config.ReadIniData("Config", "BrokenLineCount_NegativeA", null, path);
            Global.BrokenLineCount_NegativeB = Config.ReadIniData("Config", "BrokenLineCount_NegativeB", null, path);
            Global.StartWeldingNGCount_NegativeA = Config.ReadIniData("Config", "StartWeldingNGCount_NegativeA", null, path);
            Global.StartWeldingNGCount_NegativeB = Config.ReadIniData("Config", "StartWeldingNGCount_NegativeB", null, path);
            Global.SurfaceColorDiffCount_NegativeA = Config.ReadIniData("Config", "SurfaceColorDiffCount_NegativeA", null, path);
            Global.SurfaceColorDiffCount_NegativeB = Config.ReadIniData("Config", "SurfaceColorDiffCount_NegativeB", null, path);
        }
#endregion

        //在主界面刷新串统计数据的委托
        private delegate void UpdateForm_dl();
        //刷新主界面串统计数据
        private void RefreshClassStaticsData()
        {
            if (bl_Inspect)
            {
                mfNGStatisticsInterface.lblTotalCountPositiveA.Text = Convert.ToString(TotalCountPositiveA);
                mfNGStatisticsInterface.lblNGTotalCountPositiveA.Text = Convert.ToString(NGTotalCountPositiveA);
                mfNGStatisticsInterface.lblMajorFailureCountPositiveA.Text = Convert.ToString(MajorFailureCountPositiveA);
                mfNGStatisticsInterface.lblFilmShiftingCountPositiveA.Text = Convert.ToString(TotalFilmShiftingCountPositiveA);
                mfNGStatisticsInterface.lblFilmMissCountPositiveA.Text = Convert.ToString(TotalFilmMissCountPositiveA);
                mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountPositiveA.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveA);
                mfNGStatisticsInterface.lblDistanceNGCountPositiveA.Text = Convert.ToString(TotalDistanceNGCountPositiveA);
                mfNGStatisticsInterface.lblEdgeDefectCountPositiveA.Text = Convert.ToString(TotalEdgeDefectCountPositiveA);
                mfNGStatisticsInterface.lblSurfaceDefectCountPositiveA.Text = Convert.ToString(TotalSurfaceDefectCountPositiveA);
                mfNGStatisticsInterface.lblBrokenLineCountPositiveA.Text = Convert.ToString(TotalBrokenLineCountPositiveA);
                mfNGStatisticsInterface.lblStartWeldingNGCountPositiveA.Text = Convert.ToString(TotalStartingWeldingNGCountPositiveA);
                mfNGStatisticsInterface.lblSurfaceColorDiffCountPositiveA.Text = Convert.ToString(TotalSurfaceColorDiffCountPositiveA);
                mfNGStatisticsInterface.lblAlgorithmExceptionCountPositiveA.Text = Convert.ToString(TotalDistanceNGCountNegativeA);
                mfNGStatisticsInterface.lblCellMissingCountPositiveA.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA);

                mfNGStatisticsInterface.lblTotalCountPositiveB.Text = Convert.ToString(TotalCountPositiveB);
                mfNGStatisticsInterface.lblNGTotalCountPositiveB.Text = Convert.ToString(NGTotalCountPositiveB);
                mfNGStatisticsInterface.lblMajorFailureCountPositiveB.Text = Convert.ToString(MajorFailureCountPositiveB);
                mfNGStatisticsInterface.lblFilmShiftingCountPositiveB.Text = Convert.ToString(TotalFilmShiftingCountPositiveB);
                mfNGStatisticsInterface.lblFilmMissCountPositiveB.Text = Convert.ToString(TotalFilmMissCountPositiveB);
                mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountPositiveB.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveB);
                mfNGStatisticsInterface.lblDistanceNGCountPositiveB.Text = Convert.ToString(TotalDistanceNGCountPositiveB);
                mfNGStatisticsInterface.lblEdgeDefectCountPositiveB.Text = Convert.ToString(TotalEdgeDefectCountPositiveB);
                mfNGStatisticsInterface.lblSurfaceDefectCountPositiveB.Text = Convert.ToString(TotalSurfaceDefectCountPositiveB);
                mfNGStatisticsInterface.lblBrokenLineCountPositiveB.Text = Convert.ToString(TotalBrokenLineCountPositiveB);
                mfNGStatisticsInterface.lblStartWeldingNGCountPositiveB.Text = Convert.ToString(TotalStartingWeldingNGCountPositiveB);
                mfNGStatisticsInterface.lblSurfaceColorDiffCountPositiveB.Text = Convert.ToString(TotalSurfaceColorDiffCountPositiveB);
                mfNGStatisticsInterface.lblAlgorithmExceptionCountPositiveB.Text = Convert.ToString(TotalDistanceNGCountNegativeB);
                mfNGStatisticsInterface.lblCellMissingCountPositiveB.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB);

                mfNGStatisticsInterface.lblTotalCountNegativeA.Text = Convert.ToString(TotalCountNegativeA);
                mfNGStatisticsInterface.lblNGTotalCountNegativeA.Text = Convert.ToString(NGTotalCountNegativeA);
                mfNGStatisticsInterface.lblMajorFailureCountNegativeA.Text = Convert.ToString(MajorFailureCountNegativeA);
                mfNGStatisticsInterface.lblFilmShiftingCountNegativeA.Text = Convert.ToString(TotalFilmShiftingCountNegativeA);
                mfNGStatisticsInterface.lblFilmMissCountNegativeA.Text = Convert.ToString(TotalFilmMissCountNegativeA);
                //mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountNegativeA.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA);
                //mfNGStatisticsInterface.lblDistanceNGCountNegativeA.Text = Convert.ToString(TotalDistanceNGCountNegativeA);
                mfNGStatisticsInterface.lblEdgeDefectCountNegativeA.Text = Convert.ToString(TotalEdgeDefectCountNegativeA);
                mfNGStatisticsInterface.lblSurfaceDefectCountNegativeA.Text = Convert.ToString(TotalSurfaceDefectCountNegativeA);
                mfNGStatisticsInterface.lblBrokenLineCountNegativeA.Text = Convert.ToString(TotalBrokenLineCountNegativeA);
                mfNGStatisticsInterface.lblStartWeldingNGCountNegativeA.Text = Convert.ToString(TotalStartingWeldingNGCountNegativeA);
                mfNGStatisticsInterface.lblSurfaceColorDiffCountNegativeA.Text = Convert.ToString(TotalSurfaceColorDiffCountNegativeA);

                mfNGStatisticsInterface.lblTotalCountNegativeB.Text = Convert.ToString(TotalCountNegativeB);
                mfNGStatisticsInterface.lblNGTotalCountNegativeB.Text = Convert.ToString(NGTotalCountNegativeB);
                mfNGStatisticsInterface.lblMajorFailureCountNegativeB.Text = Convert.ToString(MajorFailureCountNegativeB);
                mfNGStatisticsInterface.lblFilmShiftingCountNegativeB.Text = Convert.ToString(TotalFilmShiftingCountNegativeB);
                mfNGStatisticsInterface.lblFilmMissCountNegativeB.Text = Convert.ToString(TotalFilmMissCountNegativeB);
                // mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountNegativeB.Text = Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB);
                //mfNGStatisticsInterface.lblDistanceNGCountNegativeB.Text = Convert.ToString(TotalDistanceNGCountNegativeB);
                mfNGStatisticsInterface.lblEdgeDefectCountNegativeB.Text = Convert.ToString(TotalEdgeDefectCountNegativeB);
                mfNGStatisticsInterface.lblSurfaceDefectCountNegativeB.Text = Convert.ToString(TotalSurfaceDefectCountNegativeB);
                mfNGStatisticsInterface.lblBrokenLineCountNegativeB.Text = Convert.ToString(TotalBrokenLineCountNegativeB);
                mfNGStatisticsInterface.lblStartWeldingNGCountNegativeB.Text = Convert.ToString(TotalStartingWeldingNGCountNegativeB);
                mfNGStatisticsInterface.lblSurfaceColorDiffCountNegativeB.Text = Convert.ToString(TotalSurfaceColorDiffCountNegativeB);

                Application.DoEvents();
            }
        }

        public bool CalibrationExistPositiveA = false;
        public bool CalibrationExistPositiveB = false;
        public  HObject ho_ModelContoursPositiveA;
        public HTuple ho_ModelIDPositiveA;
        public HObject ho_ModelContoursPositiveB;
        public HTuple ho_ModelIDPositiveB;
        private void LoadModel()
        {
            if (!File.Exists(defaultCalibrationPathPositiveA))
            {
                CalibrationExistPositiveA = false;
            }
            else
            {
                CalibrationExistPositiveA = true;
                HFuncPositiveA.ReadModel(out ho_ModelContoursPositiveA, defaultCalibrationPathPositiveA, out ho_ModelIDPositiveA);
                mfPositiveInterface.lblCalibrationPositiveA.Text = defaultCalibrationPathPositiveA;
            }

            if (!File.Exists(defaultCalibrationPathPositiveB))
            {
                CalibrationExistPositiveB = false;
            }
            else
            {
                CalibrationExistPositiveB = true;
                HFuncPositiveB.ReadModel(out ho_ModelContoursPositiveB, defaultCalibrationPathPositiveB, out ho_ModelIDPositiveB);
                mfPositiveInterface.lblCalibrationPositiveB.Text = defaultCalibrationPathPositiveB;
            }
        }
  
        private void Form1_Load(object sender, EventArgs e)
        {
            lblVersion.Text = "V1.0-" + File.GetLastWriteTime(GetType().Assembly.Location).ToString("yy.MM.dd");

            //主程序运行Flag
            bl_Inspect = true;
            Global.userType = "0";  
            //读取配方参数
            ReadConfig(defaultRecipePath);
            //强制打开片间距检测
            Global.isUsingDistanceDetectPositiveA = "1";
            Global.isUsingDistanceDetectPositiveB = "1";
            Global.isUsingDistanceDetectNegativeA = "1";
            Global.isUsingDistanceDetectNegativeB = "1";
            
            //刷新配方参数
            RefreshRecipeGlobalParameter();
            RefreshRecipeParameterPositiveA();
            RefreshRecipeParameterPositiveB();
            RefreshRecipeParameterNegativeA();
            RefreshRecipeParameterNegativeB();

            InitNGArray();

            //如果语言文件不存在，置为中文
            if (File.Exists(defaultChineseLanguagePath) == false & File.Exists(defaultEnglishLanguagePath) == false)
            {
                Global.isEnglish = "0";
            }
            //子界面初始化

            mfPositiveInterface = new MainFormPositiveInterface(this);
            mfNegativeInterface = new MainFormNegativeInterface(this);
            mfParameterInterface = new MainFormParameterInterface(this);
            mfStatisticsInterface = new MainFormStatisticsInterface(this);
            mfNGStatisticsInterface = new MainFormNGStatisticsInterface(this);
            mfLoginInterface = new MainFormLoginInterface(this);
            mfUserManagerInterface = new MainFormUserManager(this);
            mfNGInfoInterface = new MainFormNGInfoInterface(this);

            //背面关闭起焊点等功能
            if (Convert.ToInt32(Global.mainLineNum) >= 9)
            {
                Global.isUsingStartWeldingDetectNegativeA = "0";
                Global.isUsingStartWeldingDetectNegativeB = "0";

                Global.isUsingEdgeDefectDetectNegativeA = "0";
                Global.isUsingEdgeDefectDetectNegativeB = "0";

                Global.isUsingSurfaceColorDiffDetectNegativeA = "0";
                Global.isUsingSurfaceColorDiffDetectNegativeB = "0";

                //Global.isUsingSurfaceDefectDetectNegativeA = "0";
                //Global.isUsingSurfaceDefectDetectNegativeB = "0";

                Global.isUsingBrokenLineDetectNegativeA = "0";
                Global.isUsingBrokenLineDetectNegativeB = "0";

                mfParameterInterface.txtStartWeldingDistanceMinThresh_PositiveA.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_PositiveB.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_NegativeA.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_NegativeB.Enabled = false;

                mfParameterInterface.txtStartWeldingDistanceMaxThresh_PositiveA.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_PositiveB.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_NegativeA.Enabled = false;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_NegativeB.Enabled = false;
            }
            else
            {
                mfParameterInterface.txtStartWeldingDistanceMinThresh_PositiveA.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_PositiveB.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_NegativeA.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMinThresh_NegativeB.Enabled = true;

                mfParameterInterface.txtStartWeldingDistanceMaxThresh_PositiveA.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_PositiveB.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_NegativeA.Enabled = true;
                mfParameterInterface.txtStartWeldingDistanceMaxThresh_NegativeB.Enabled = true;
            }
            RefreshTcpIPLabelState();
            LoadModel();

            if (Convert.ToInt32(Global.isEnglish) == 0)
            {
               
                switchLanguages(defaultChineseLanguagePath);
                //this.Text = "无锡奥特维科技股份有限公司";
                //mfLoginInterface.cb_UserType.Items.Clear();
                //mfLoginInterface.cb_UserType.Items.Add("管理员");
                //mfLoginInterface.cb_UserType.Items.Add("操作工");
                
            }
            else
            {
               switchLanguages(defaultEnglishLanguagePath);
                //this.Text = "Wuxi Autowell Technology Co., Ltd.";
                //mfLoginInterface.cb_UserType.Items.Clear();
                //mfLoginInterface.cb_UserType.Items.Add("Administrator");
                //mfLoginInterface.cb_UserType.Items.Add("Handlers");
                
            }

            //主界面内容控件赋值
            pnlMainFormContentView.Controls.Add(mfPositiveInterface);
            pnlMainFormContentView.Controls.Add(mfNegativeInterface);
            pnlMainFormContentView.Controls.Add(mfParameterInterface);
            pnlMainFormContentView.Controls.Add(mfStatisticsInterface);
            pnlMainFormContentView.Controls.Add(mfNGStatisticsInterface);
            pnlMainFormContentView.Controls.Add(mfLoginInterface);
            pnlMainFormContentView.Controls.Add(mfUserManagerInterface);
            pnlMainFormContentView.Controls.Add(mfNGInfoInterface);

            getAllControlsByKeys();
            //主界面内容界面初始化
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = true;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;
            //主界面按钮初始化
            btnMainFormPositiveInterface.Enabled = false;
            btnMainFormNegativeInterface.Enabled = false;
            btnMainFormRecipe.Enabled = false;
            btnMainFormStatistics.Enabled = false;
            btnMainFormNGStatistics.Enabled = false;
            btnMainFormUserLogin.Enabled = true;
            btnMainFormUserManager.Enabled = true;
            btnMainFormExit.Enabled = true;
            //主界面按钮背景颜色初始化
            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.Lime;
            btnMainFormUserManager.BackColor = Color.White;
            btnMainFormExit.BackColor = Color.Red;

            //注册主界面Halcon窗口ID
            WindowsHandlePositiveA = mfPositiveInterface.hWindowIDOne;
            WindowsHandlePositiveA1 = mfPositiveInterface.hWindowIDOne1;
            WindowsHandlePositiveA2 = mfPositiveInterface.hWindowIDOne2;
            WindowsHandlePositiveA3 = mfPositiveInterface.hWindowIDOne3;
            WindowsHandlePositiveB = mfPositiveInterface.hWindowIDTwo;
            WindowsHandlePositiveB1 = mfPositiveInterface.hWindowIDTwo1;
            WindowsHandlePositiveB2 = mfPositiveInterface.hWindowIDTwo2;
            WindowsHandlePositiveB3 = mfPositiveInterface.hWindowIDTwo3;
            WindowsHandleNegativeA = mfNegativeInterface.hWindowIDOne;
            WindowsHandleNegativeB = mfNegativeInterface.hWindowIDTwo;

            HFuncPositiveA.hv_ExpDefaultWinHandle = WindowsHandlePositiveA;
            HFuncPositiveA1.hv_ExpDefaultWinHandle = WindowsHandlePositiveA1;
            HFuncPositiveA2.hv_ExpDefaultWinHandle = WindowsHandlePositiveA2;
            HFuncPositiveA3.hv_ExpDefaultWinHandle = WindowsHandlePositiveA3;
            HFuncPositiveB.hv_ExpDefaultWinHandle = WindowsHandlePositiveB;
            HFuncPositiveB1.hv_ExpDefaultWinHandle = WindowsHandlePositiveB1;
            HFuncPositiveB2.hv_ExpDefaultWinHandle = WindowsHandlePositiveB2;
            HFuncPositiveB3.hv_ExpDefaultWinHandle = WindowsHandlePositiveB3;
            HFuncNegativeA.hv_ExpDefaultWinHandle = WindowsHandleNegativeA;
            HFuncNegativeB.hv_ExpDefaultWinHandle = WindowsHandleNegativeB;

            InitWindowHandlers();
            SetWindowHandlerSize();
            //初始化主界面统计参数
            MainFormLoadStatisticsParameters();
            
            //开启正面串检算法处理的线程
            
            new Thread(() =>
            {
                
                while (bl_Inspect)
                {
                    //if(!bl_IsRunNegative&&!bl_IsReDetectNegative)
                    //{
                    //    AFinish = false;&& AFinishPositive == false &&AFinishNegative == false
                    //}

                    if (IsUsingCamera_PositiveA && ImageQueuePositiveA.Count > 0)
                    {
                        runPositiveA();
                    }
                    else
                    {

                        Thread.Sleep(10);
                    }
                }
            }).Start();



           

            new Thread(() =>
            {
                while (bl_Inspect)
                {
                    
                    //if (!bl_IsRunNegative && !bl_IsReDetectNegative)
                    //{
                    //    BFinish = false;&& AFinishPositive &&AFinishNegative 
                    //}
                    if (IsUsingCamera_PositiveB && ImageQueuePositiveB.Count > 0)
                    {
                        runPositiveB();
                    }
                    else
                    {

                        Thread.Sleep(10);
                    }
                }
            }).Start();

            //开启反面串检算法处理的线程
            new Thread(() =>
            {
                while (bl_Inspect)
                {
                    
                    //if (!bl_IsRunPositive && !bl_IsReDetectPositive)
                    //{
                    //    AFinish = true ;&& AFinishPositive == false && AFinishNegative == false
                    //}
                    if (IsUsingCamera_NegativeA && ImageQueueNegativeA.Count > 0)
                    {
                        runNegativeA();
                    }
                    else
                    {

                        Thread.Sleep(10);
                    }
                }
            }).Start();

            l2TCPClientSend2PLC.Active = true;
            new Thread(() =>
            {
                while (bl_Inspect)
                {
                    OnClientSendData();
                    Thread.Sleep(10);
                }


            }).Start();
            new Thread(() =>
            {
                
                while (bl_Inspect)
                {
                    
                    //if (!bl_IsRunPositive && !bl_IsReDetectPositive)
                    //{
                    //    BFinish = true;&& AFinishPositive && AFinishNegative
                    //}
                    if (IsUsingCamera_NegativeB && ImageQueueNegativeB.Count > 0)
                    {
                        runNegativeB();
                    }
                    else
                    {

                        Thread.Sleep(10);
                    }
                }
            }).Start();
            


            //开启双线PLC通信线程
            new Thread(() =>
            {
                StartConnectPositiveA();
                StartConnectPositiveB();
                StartConnectNegativeA();
                StartConnectNegativeB();
            }).Start();


            //开启刷新统计结果在主界面的线程
            
            //new Thread(() =>
            //{
            //    while (bl_Inspect)
            //    {
            //        try
            //        {
            //            Invoke(new UpdateForm_dl(RefreshClassStaticsData));
            //        }
            //        catch (Exception)
            //        {

            //        }
            //        Thread.Sleep(10);
            //    }
            //}).Start();

            //开启保存图片的线程
            new Thread(() =>
            {
                SaveImagePositiveA();
            }).Start();
            new Thread(() =>
            {
                SaveImagePositiveB();
            }).Start();
            new Thread(() =>
            {
                SaveImageNegativeA();
            }).Start();
            new Thread(() =>
            {
                SaveImageNegativeB();
            }).Start();
        }

        //初始化主界面统计参数
        private void MainFormLoadStatisticsParameters()
        {
            TotalCountPositiveA = Convert.ToInt32(Global.TotalCount_PositiveA);
            NGTotalCountPositiveA = Convert.ToInt32(Global.NGTotalCount_PositiveA);
            MajorFailureCountPositiveA = Convert.ToInt32(Global.MajorFailureCount_PositiveA);
            TotalFilmShiftingCountPositiveA = Convert.ToInt32(Global.FilmShiftingCount_PositiveA);
            TotalFilmMissCountPositiveA = Convert.ToInt32(Global.FilmMissCount_PositiveA);
            TotalFilmShiftingOfHeadAndTailCountPositiveA = Convert.ToInt32(Global.FilmShiftingHeadAndTailCountPositiveA);
            TotalDistanceNGCountPositiveA = Convert.ToInt32(Global.DistanceNGCount_PositiveA);
            TotalEdgeDefectCountPositiveA = Convert.ToInt32(Global.EdgeDefectCount_PositiveA);
            TotalSurfaceDefectCountPositiveA = Convert.ToInt32(Global.SurfaceDefectCount_PositiveA);
            TotalBrokenLineCountPositiveA = Convert.ToInt32(Global.BrokenLineCount_PositiveA);
            TotalStartingWeldingNGCountPositiveA = Convert.ToInt32(Global.StartWeldingNGCount_PositiveA);
            TotalSurfaceColorDiffCountPositiveA = Convert.ToInt32(Global.SurfaceColorDiffCount_PositiveA);

            TotalCountPositiveB = Convert.ToInt32(Global.TotalCount_PositiveB);
            NGTotalCountPositiveB = Convert.ToInt32(Global.NGTotalCount_PositiveB);
            MajorFailureCountPositiveB = Convert.ToInt32(Global.MajorFailureCount_PositiveB);
            TotalFilmShiftingCountPositiveB = Convert.ToInt32(Global.FilmShiftingCount_PositiveB);
            TotalFilmMissCountPositiveB = Convert.ToInt32(Global.FilmMissCount_PositiveB);
            TotalFilmShiftingOfHeadAndTailCountPositiveB = Convert.ToInt32(Global.FilmShiftingHeadAndTailCountPositiveB);
            TotalDistanceNGCountPositiveB = Convert.ToInt32(Global.DistanceNGCount_PositiveB);
            TotalEdgeDefectCountPositiveB = Convert.ToInt32(Global.EdgeDefectCount_PositiveB);
            TotalSurfaceDefectCountPositiveB = Convert.ToInt32(Global.SurfaceDefectCount_PositiveB);
            TotalBrokenLineCountPositiveB = Convert.ToInt32(Global.BrokenLineCount_PositiveB);
            TotalStartingWeldingNGCountPositiveB = Convert.ToInt32(Global.StartWeldingNGCount_PositiveB);
            TotalSurfaceColorDiffCountPositiveB = Convert.ToInt32(Global.SurfaceColorDiffCount_PositiveB);

            TotalCountNegativeA = Convert.ToInt32(Global.TotalCount_NegativeA);
            NGTotalCountNegativeA = Convert.ToInt32(Global.NGTotalCount_NegativeA);
            MajorFailureCountNegativeA = Convert.ToInt32(Global.MajorFailureCount_NegativeA);
            TotalFilmShiftingCountNegativeA = Convert.ToInt32(Global.FilmShiftingCount_NegativeA);
            TotalFilmMissCountNegativeA = Convert.ToInt32(Global.FilmMissCount_NegativeA);
            TotalFilmShiftingOfHeadAndTailCountNegativeA = Convert.ToInt32(Global.FilmShiftingHeadAndTailCountNegativeA);
            TotalDistanceNGCountNegativeA = Convert.ToInt32(Global.DistanceNGCount_NegativeA);
            TotalEdgeDefectCountNegativeA = Convert.ToInt32(Global.EdgeDefectCount_NegativeA);
            TotalSurfaceDefectCountNegativeA = Convert.ToInt32(Global.SurfaceDefectCount_NegativeA);
            TotalBrokenLineCountNegativeA = Convert.ToInt32(Global.BrokenLineCount_NegativeA);
            TotalStartingWeldingNGCountNegativeA = Convert.ToInt32(Global.StartWeldingNGCount_NegativeA);
            TotalSurfaceColorDiffCountNegativeA = Convert.ToInt32(Global.SurfaceColorDiffCount_NegativeA);

            TotalCountNegativeB = Convert.ToInt32(Global.TotalCount_NegativeB);
            NGTotalCountNegativeB = Convert.ToInt32(Global.NGTotalCount_NegativeB);
            MajorFailureCountNegativeB = Convert.ToInt32(Global.MajorFailureCount_NegativeB);
            TotalFilmShiftingCountNegativeB = Convert.ToInt32(Global.FilmShiftingCount_NegativeB);
            TotalFilmMissCountNegativeB = Convert.ToInt32(Global.FilmMissCount_NegativeB);
            TotalFilmShiftingOfHeadAndTailCountNegativeB = Convert.ToInt32(Global.FilmShiftingHeadAndTailCountNegativeB);
            TotalDistanceNGCountNegativeB = Convert.ToInt32(Global.DistanceNGCount_NegativeB);
            TotalEdgeDefectCountNegativeB = Convert.ToInt32(Global.EdgeDefectCount_NegativeB);
            TotalSurfaceDefectCountNegativeB = Convert.ToInt32(Global.SurfaceDefectCount_NegativeB);
            TotalBrokenLineCountNegativeB = Convert.ToInt32(Global.BrokenLineCount_NegativeB);
            TotalStartingWeldingNGCountNegativeB = Convert.ToInt32(Global.StartWeldingNGCount_NegativeB);
            TotalSurfaceColorDiffCountNegativeB = Convert.ToInt32(Global.SurfaceColorDiffCount_NegativeB);
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            //grpMainFormButtonBox.Left = 0;
            //grpMainFormButtonBox.Top = msMainFormMenuStrip.Top + msMainFormMenuStrip.Height + 5;
            //grpMainFormButtonBox.Width = msMainFormMenuStrip.Width;

            //hWindowControl1.Width = this.Width / 2 - 20;
            //hWindowControl1.Height = (this.Height - grpMainFormButtonBox.Height - msMainFormMenuStrip.Height) * 2 / 3 - 20;
            //hWindowControl1.Left = grpMainFormButtonBox.Left;
            //hWindowControl1.Top = grpMainFormButtonBox.Top + grpMainFormButtonBox.Height + 5;

            //hWindowControl2.Width = hWindowControl1.Width;
            //hWindowControl2.Height = hWindowControl1.Height;
            //hWindowControl2.Left = hWindowControl1.Left + hWindowControl1.Width + 20;
            //hWindowControl2.Top = hWindowControl1.Top;

            ///**********A侧**********/
            ////第一行
            //labelA.Left = hWindowControl1.Left + 10;
            //labelA.Top = hWindowControl1.Height + hWindowControl1.Top + 20;
            //lblCurrentClusterStateA12.Left = hWindowControl1.Left + hWindowControl1.Width - 30;
            //lblCurrentClusterStateA12.Top = labelA.Top;
            //lblCurrentClusterStateA1.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 1 / 12;
            //lblCurrentClusterStateA1.Top = labelA.Top;
            //lblCurrentClusterStateA2.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 2 / 12;
            //lblCurrentClusterStateA2.Top = labelA.Top;
            //lblCurrentClusterStateA3.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 3 / 12;
            //lblCurrentClusterStateA3.Top = labelA.Top;
            //lblCurrentClusterStateA4.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 4 / 12;
            //lblCurrentClusterStateA4.Top = labelA.Top;
            //lblCurrentClusterStateA5.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 5 / 12;
            //lblCurrentClusterStateA5.Top = labelA.Top;
            //lblCurrentClusterStateA6.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 6 / 12;
            //lblCurrentClusterStateA6.Top = labelA.Top;
            //lblCurrentClusterStateA7.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 7 / 12;
            //lblCurrentClusterStateA7.Top = labelA.Top;
            //lblCurrentClusterStateA8.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 8 / 12;
            //lblCurrentClusterStateA8.Top = labelA.Top;
            //lblCurrentClusterStateA9.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 9 / 12;
            //lblCurrentClusterStateA9.Top = labelA.Top;
            //lblCurrentClusterStateA10.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 10 / 12;
            //lblCurrentClusterStateA10.Top = labelA.Top;
            //lblCurrentClusterStateA11.Left = labelA.Left + (lblCurrentClusterStateA12.Left - labelA.Left) * 11 / 12;
            //lblCurrentClusterStateA11.Top = labelA.Top;

            ////第六行
            //btnClearStaticsA.Top = this.Height - btnClearStaticsA.Height - 60;
            //btnClearStaticsA.Left = lblCurrentClusterStateA12.Left - btnClearStaticsA.Width;

            //lblPointInfoGrayValueA.Top = btnClearStaticsA.Top;
            //lblPointInfoGrayValueA.Left = btnClearStaticsA.Left - lblPointInfoGrayValueA.Width - 200;
            //lblPointInfoGrayValueATitle.Top = btnClearStaticsA.Top;
            //lblPointInfoGrayValueATitle.Left = lblPointInfoGrayValueA.Left - lblPointInfoGrayValueATitle.Width - 10;
            //lblPointInfoColumnA.Top = btnClearStaticsA.Top;
            //lblPointInfoColumnA.Left = lblPointInfoGrayValueATitle.Left - lblPointInfoColumnA.Width - 10;
            //lblPointInfoColumnATitle.Top = btnClearStaticsA.Top;
            //lblPointInfoColumnATitle.Left = lblPointInfoColumnA.Left - lblPointInfoColumnATitle.Width - 10;
            //lblPointInfoRowA.Top = btnClearStaticsA.Top;
            //lblPointInfoRowA.Left = lblPointInfoColumnATitle.Left - lblPointInfoRowA.Width - 10;
            //lblPointInfoRowATitle.Top = btnClearStaticsA.Top;
            //lblPointInfoRowATitle.Left = lblPointInfoRowA.Left - lblPointInfoRowATitle.Width - 10;

            ////第二行
            //lblTotalCountATitle.Top = labelA.Top + (btnClearStaticsA.Top - labelA.Top) * 1 / 5;
            //lblTotalCountATitle.Left = labelA.Left;
            //lblBrokenLineCountA.Top = lblTotalCountATitle.Top;
            //lblBrokenLineCountA.Left = lblCurrentClusterStateA12.Left - lblBrokenLineCountA.Width;
            //lblTotalCountA.Top = lblTotalCountATitle.Top;
            //lblTotalCountA.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 1 / 7;
            //lblFilmShiftingCountATitle.Top = lblTotalCountATitle.Top;
            //lblFilmShiftingCountATitle.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 2 / 7;
            //lblFilmShiftingCountA.Top = lblTotalCountATitle.Top;
            //lblFilmShiftingCountA.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 3 / 7;
            //lblDistanceNGCountATitle.Top = lblTotalCountATitle.Top;
            //lblDistanceNGCountATitle.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 4 / 7;
            //lblDistanceNGCountA.Top = lblTotalCountATitle.Top;
            //lblDistanceNGCountA.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 5 / 7;
            //lblBrokenLineCountATitle.Top = lblTotalCountATitle.Top;
            //lblBrokenLineCountATitle.Left = lblTotalCountATitle.Left + (lblBrokenLineCountA.Left - lblTotalCountATitle.Left) * 6 / 7;

            ////第三行
            //lblNGTotalCountATitle.Top = labelA.Top + (btnClearStaticsA.Top - labelA.Top) * 2 / 5;
            //lblNGTotalCountATitle.Left = labelA.Left;
            //lblStartWeldingNGCountA.Top = lblNGTotalCountATitle.Top;
            //lblStartWeldingNGCountA.Left = lblCurrentClusterStateA12.Left - lblStartWeldingNGCountA.Width;
            //lblNGTotalCountA.Top = lblNGTotalCountATitle.Top;
            //lblNGTotalCountA.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 1 / 7;
            //lblFilmMissCountATitle.Top = lblNGTotalCountATitle.Top;
            //lblFilmMissCountATitle.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 2 / 7;
            //lblFilmMissCountA.Top = lblNGTotalCountATitle.Top;
            //lblFilmMissCountA.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 3 / 7 + 10;
            //lblEdgeDefectCountATitle.Top = lblNGTotalCountATitle.Top;
            //lblEdgeDefectCountATitle.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 4 / 7;
            //lblEdgeDefectCountA.Top = lblNGTotalCountATitle.Top;
            //lblEdgeDefectCountA.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 5 / 7;
            //lblStartWeldingNGCountATitle.Top = lblNGTotalCountATitle.Top;
            //lblStartWeldingNGCountATitle.Left = lblNGTotalCountATitle.Left + (lblStartWeldingNGCountA.Left - lblNGTotalCountATitle.Left) * 6 / 7;

            ////第四行
            //lblMajorFailureCountATitle.Top = labelA.Top + (btnClearStaticsA.Top - labelA.Top) * 3 / 5;
            //lblMajorFailureCountATitle.Left = labelA.Left;
            //lblSurfaceColorDiffCountA.Top = lblMajorFailureCountATitle.Top;
            //lblSurfaceColorDiffCountA.Left = lblCurrentClusterStateA12.Left - lblSurfaceColorDiffCountA.Width;
            //lblMajorFailureCountA.Top = lblMajorFailureCountATitle.Top;
            //lblMajorFailureCountA.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 1 / 7;
            //lblFilmShiftingHeadAndTailCountATitle.Top = lblMajorFailureCountATitle.Top;
            //lblFilmShiftingHeadAndTailCountATitle.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 2 / 7;
            //lblFilmShiftingHeadAndTailCountA.Top = lblMajorFailureCountATitle.Top;
            //lblFilmShiftingHeadAndTailCountA.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 3 / 7;
            //lblSurfaceDefectCountATitle.Top = lblMajorFailureCountATitle.Top;
            //lblSurfaceDefectCountATitle.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 4 / 7;
            //lblSurfaceDefectCountA.Top = lblMajorFailureCountATitle.Top;
            //lblSurfaceDefectCountA.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 5 / 7;
            //lblSurfaceColorDiffCountATitle.Top = lblMajorFailureCountATitle.Top;
            //lblSurfaceColorDiffCountATitle.Left = lblMajorFailureCountATitle.Left + (lblSurfaceColorDiffCountA.Left - lblMajorFailureCountATitle.Left) * 6 / 7;

            ////第五行
            //lblLinearityNGCountA.Top = labelA.Top + (btnClearStaticsA.Top - labelA.Top) * 4 / 5;
            //lblLinearityNGCountA.Left = lblCurrentClusterStateA12.Left - lblLinearityNGCountA.Width;
            //lblLinearityNGCountATitle.Top = lblLinearityNGCountA.Top;
            //lblLinearityNGCountATitle.Left = lblLinearityNGCountA.Left - lblLinearityNGCountATitle.Width - 20;

            ///*************B侧**************/
            ////第一行
            //labelB.Left = hWindowControl2.Left + 10;
            //labelB.Top = hWindowControl2.Height + hWindowControl2.Top + 20;
            //lblCurrentClusterStateB12.Left = hWindowControl2.Left + hWindowControl2.Width - 30;
            //lblCurrentClusterStateB12.Top = labelB.Top;
            //lblCurrentClusterStateB1.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 1 / 12;
            //lblCurrentClusterStateB1.Top = labelB.Top;
            //lblCurrentClusterStateB2.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 2 / 12;
            //lblCurrentClusterStateB2.Top = labelB.Top;
            //lblCurrentClusterStateB3.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 3 / 12;
            //lblCurrentClusterStateB3.Top = labelB.Top;
            //lblCurrentClusterStateB4.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 4 / 12;
            //lblCurrentClusterStateB4.Top = labelB.Top;
            //lblCurrentClusterStateB5.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 5 / 12;
            //lblCurrentClusterStateB5.Top = labelB.Top;
            //lblCurrentClusterStateB6.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 6 / 12;
            //lblCurrentClusterStateB6.Top = labelB.Top;
            //lblCurrentClusterStateB7.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 7 / 12;
            //lblCurrentClusterStateB7.Top = labelB.Top;
            //lblCurrentClusterStateB8.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 8 / 12;
            //lblCurrentClusterStateB8.Top = labelB.Top;
            //lblCurrentClusterStateB9.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 9 / 12;
            //lblCurrentClusterStateB9.Top = labelB.Top;
            //lblCurrentClusterStateB10.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 10 / 12;
            //lblCurrentClusterStateB10.Top = labelB.Top;
            //lblCurrentClusterStateB11.Left = labelB.Left + (lblCurrentClusterStateB12.Left - labelB.Left) * 11 / 12;
            //lblCurrentClusterStateB11.Top = labelB.Top;

            ////第六行
            //btnClearStaticsB.Top = this.Height - btnClearStaticsB.Height - 60;
            //btnClearStaticsB.Left = lblCurrentClusterStateB12.Left - btnClearStaticsB.Width;

            //lblPointInfoGrayValueB.Top = btnClearStaticsB.Top;
            //lblPointInfoGrayValueB.Left = btnClearStaticsB.Left - lblPointInfoGrayValueB.Width - 200;
            //lblPointInfoGrayValueBTitle.Top = btnClearStaticsB.Top;
            //lblPointInfoGrayValueBTitle.Left = lblPointInfoGrayValueB.Left - lblPointInfoGrayValueBTitle.Width - 10;
            //lblPointInfoColumnB.Top = btnClearStaticsB.Top;
            //lblPointInfoColumnB.Left = lblPointInfoGrayValueBTitle.Left - lblPointInfoColumnB.Width - 10;
            //lblPointInfoColumnBTitle.Top = btnClearStaticsB.Top;
            //lblPointInfoColumnBTitle.Left = lblPointInfoColumnB.Left - lblPointInfoColumnBTitle.Width - 10;
            //lblPointInfoRowB.Top = btnClearStaticsB.Top;
            //lblPointInfoRowB.Left = lblPointInfoColumnBTitle.Left - lblPointInfoRowB.Width - 10;
            //lblPointInfoRowBTitle.Top = btnClearStaticsB.Top;
            //lblPointInfoRowBTitle.Left = lblPointInfoRowB.Left - lblPointInfoRowBTitle.Width - 10;

            ////第二行
            //lblTotalCountBTitle.Top = labelB.Top + (btnClearStaticsB.Top - labelB.Top) * 1 / 5;
            //lblTotalCountBTitle.Left = labelB.Left;
            //lblBrokenLineCountB.Top = lblTotalCountBTitle.Top;
            //lblBrokenLineCountB.Left = lblCurrentClusterStateB12.Left - lblBrokenLineCountB.Width;
            //lblTotalCountB.Top = lblTotalCountBTitle.Top;
            //lblTotalCountB.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 1 / 7;
            //lblFilmShiftingCountBTitle.Top = lblTotalCountBTitle.Top;
            //lblFilmShiftingCountBTitle.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 2 / 7;
            //lblFilmShiftingCountB.Top = lblTotalCountBTitle.Top;
            //lblFilmShiftingCountB.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 3 / 7;
            //lblDistanceNGCountBTitle.Top = lblTotalCountBTitle.Top;
            //lblDistanceNGCountBTitle.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 4 / 7;
            //lblDistanceNGCountB.Top = lblTotalCountBTitle.Top;
            //lblDistanceNGCountB.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 5 / 7;
            //lblBrokenLineCountBTitle.Top = lblTotalCountBTitle.Top;
            //lblBrokenLineCountBTitle.Left = lblTotalCountBTitle.Left + (lblBrokenLineCountB.Left - lblTotalCountBTitle.Left) * 6 / 7;

            ////第三行
            //lblNGTotalCountBTitle.Top = labelB.Top + (btnClearStaticsB.Top - labelB.Top) * 2 / 5;
            //lblNGTotalCountBTitle.Left = labelB.Left;
            //lblStartWeldingNGCountB.Top = lblNGTotalCountBTitle.Top;
            //lblStartWeldingNGCountB.Left = lblCurrentClusterStateB12.Left - lblStartWeldingNGCountB.Width;
            //lblNGTotalCountB.Top = lblNGTotalCountBTitle.Top;
            //lblNGTotalCountB.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 1 / 7;
            //lblFilmMissCountBTitle.Top = lblNGTotalCountBTitle.Top;
            //lblFilmMissCountBTitle.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 2 / 7;
            //lblFilmMissCountB.Top = lblNGTotalCountBTitle.Top;
            //lblFilmMissCountB.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 3 / 7 + 10;
            //lblEdgeDefectCountBTitle.Top = lblNGTotalCountBTitle.Top;
            //lblEdgeDefectCountBTitle.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 4 / 7;
            //lblEdgeDefectCountB.Top = lblNGTotalCountBTitle.Top;
            //lblEdgeDefectCountB.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 5 / 7;
            //lblStartWeldingNGCountBTitle.Top = lblNGTotalCountBTitle.Top;
            //lblStartWeldingNGCountBTitle.Left = lblNGTotalCountBTitle.Left + (lblStartWeldingNGCountB.Left - lblNGTotalCountBTitle.Left) * 6 / 7;

            ////第四行
            //lblMajorFailureCountBTitle.Top = labelB.Top + (btnClearStaticsB.Top - labelB.Top) * 3 / 5;
            //lblMajorFailureCountBTitle.Left = labelB.Left;
            //lblSurfaceColorDiffCountB.Top = lblMajorFailureCountBTitle.Top;
            //lblSurfaceColorDiffCountB.Left = lblCurrentClusterStateB12.Left - lblSurfaceColorDiffCountB.Width;
            //lblMajorFailureCountB.Top = lblMajorFailureCountBTitle.Top;
            //lblMajorFailureCountB.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 1 / 7;
            //lblFilmShiftingHeadAndTailCountBTitle.Top = lblMajorFailureCountBTitle.Top;
            //lblFilmShiftingHeadAndTailCountBTitle.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 2 / 7;
            //lblFilmShiftingHeadAndTailCountB.Top = lblMajorFailureCountBTitle.Top;
            //lblFilmShiftingHeadAndTailCountB.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 3 / 7;
            //lblSurfaceDefectCountBTitle.Top = lblMajorFailureCountBTitle.Top;
            //lblSurfaceDefectCountBTitle.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 4 / 7;
            //lblSurfaceDefectCountB.Top = lblMajorFailureCountBTitle.Top;
            //lblSurfaceDefectCountB.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 5 / 7;
            //lblSurfaceColorDiffCountBTitle.Top = lblMajorFailureCountBTitle.Top;
            //lblSurfaceColorDiffCountBTitle.Left = lblMajorFailureCountBTitle.Left + (lblSurfaceColorDiffCountB.Left - lblMajorFailureCountBTitle.Left) * 6 / 7;

            ////第五行
            //lblLinearityNGCountB.Top = labelB.Top + (btnClearStaticsB.Top - labelB.Top) * 4 / 5;
            //lblLinearityNGCountB.Left = lblCurrentClusterStateB12.Left - lblLinearityNGCountB.Width;
            //lblLinearityNGCountBTitle.Top = lblLinearityNGCountB.Top;
            //lblLinearityNGCountBTitle.Left = lblLinearityNGCountB.Left - lblLinearityNGCountBTitle.Width - 20;
        }
        private void SaveImage(Queue<HObject> imageQueue, string path, string pathAdvanced, bool isReDetect, string format, string redetectFormat, string inspectSide, bool isRoi)
        {
            
            string pictureName="";
            if (isRoi)
            {
                if (inspectSide == "PositiveA")
                {
                    if(WaferIDPositiveA==1)
                    {
                        pictureName = ImageRealTime +"_"+Global.waferCountPerClass+ "ROI";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert .ToString(WaferIDPositiveA-1) + "ROI";
                    }
                }

                if (inspectSide == "NegativeA")
                {
                    if (WaferIDNegativeA == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "ROI";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDNegativeA - 1) + "ROI";
                    }
                }

                if (inspectSide == "PositiveB")
                {
                    if (WaferIDPositiveB == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "ROI";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDPositiveB - 1) + "ROI";
                    }
                }

                if (inspectSide == "NegativeB")
                {
                    if (WaferIDNegativeB == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "ROI";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDNegativeB - 1) + "ROI";
                    }
                }

            }
            else
            {
                pictureName = ImageRealTime + "Origin";

                if (inspectSide == "PositiveA")
                {
                    if (WaferIDPositiveA == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "Origin";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDPositiveA - 1) + "Origin";
                    }
                }

                if (inspectSide == "NegativeA")
                {
                    if (WaferIDNegativeA == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "Origin";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDNegativeA - 1) + "Origin";
                    }
                }

                if (inspectSide == "PositiveB")
                {
                    if (WaferIDPositiveB == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "Origin";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDPositiveB - 1) + "Origin";
                    }
                }

                if (inspectSide == "NegativeB")
                {
                    if (WaferIDNegativeB == 1)
                    {
                        pictureName = ImageRealTime + "_" + Global.waferCountPerClass + "Origin";
                    }
                    else
                    {
                        pictureName = ImageRealTime + "_" + Convert.ToString(WaferIDNegativeB - 1) + "Origin";
                    }
                }
            }
            if (imageQueue.Count > 0)
            {
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }
                if (!Directory.Exists(pathAdvanced))
                {
                    Directory.CreateDirectory(pathAdvanced);
                }
                HObject saveImage = imageQueue.Dequeue();
                if (isReDetect)
                {
                    string savePath = pathAdvanced + "/" + pictureName;
                    HOperatorSet.WriteImage(saveImage, redetectFormat, 0, pathAdvanced + "/" + pictureName);
                    
                    
                }
                else
                {
                    string savePath = path + "/" + pictureName;
                    HOperatorSet.WriteImage(saveImage, format, 0, savePath);

                    if (isRoi)
                    {
                        if (inspectSide.Equals("PositiveA"))
                        {
                            if (WaferIDPositiveA == 1)
                            {
                                if (isNextClassFlagPositiveA)
                                {
                                    lock (LockObjectNextClassPositiveA)
                                    {
                                        singleClassNGPositiveA.PicPath[0] = savePath + "." + redetectFormat;
                                        isNextClassFlagPositiveA = false;
                                    }
                                }

                                if (isTopAndBottomNGPositiveA[WaferIDPositiveA] && tempSaveImageWaferIDPositiveA >= 2)
                                {
                                    lock (LockObjectNextClassPositiveA)
                                    {
                                        singleClassNGPositiveAList[singleClassNGPositiveAList.Count - 1].PicPath[tempSaveImageWaferIDPositiveA - 2] = savePath + "." + redetectFormat;
                                        isTopAndBottomNGPositiveA[WaferIDPositiveA] = false;
                                    }
                                }
                                //tempSingleClassNGPositiveA.PicPath[saveImageWaferIDPositiveA - 2] = savePath;
                            }
                            else
                            {
                                singleClassNGPositiveA.PicPath[saveImageWaferIDPositiveA - 2] = savePath + "." + redetectFormat;
                                if (isTopAndBottomNGPositiveA[WaferIDPositiveA])
                                {
                                    singleClassNGPositiveA.PicPath[saveImageWaferIDPositiveA - 3] = savePath + "." + redetectFormat;
                                    isTopAndBottomNGPositiveA[WaferIDPositiveA] = false;
                                }
                                
                            }
                        }
                        else if (inspectSide.Equals("PositiveB"))
                        {
                            if (WaferIDPositiveB == 1)
                            {
                                if (isNextClassFlagPositiveB)
                                {
                                    lock (LockObjectNextClassPositiveB)
                                    {
                                        singleClassNGPositiveB.PicPath[0] = savePath + "." + redetectFormat;
                                        isNextClassFlagPositiveB = false;
                                    }
                                }

                                if (isTopAndBottomNGPositiveB[WaferIDPositiveB] && tempSaveImageWaferIDPositiveB >= 2)
                                {
                                    lock (LockObjectNextClassPositiveB)
                                    {
                                        singleClassNGPositiveBList[singleClassNGPositiveBList.Count - 1].PicPath[tempSaveImageWaferIDPositiveB - 2] = savePath + "." + redetectFormat;
                                        isTopAndBottomNGPositiveB[WaferIDPositiveB] = false;
                                    }
                                }
                                //tempSingleClassNGPositiveB.PicPath[saveImageWaferIDPositiveB - 2] = savePath;
                            }
                            else
                            {
                                singleClassNGPositiveB.PicPath[saveImageWaferIDPositiveB - 2] = savePath + "." + redetectFormat;
                                if (isTopAndBottomNGPositiveB[WaferIDPositiveB])
                                {
                                    singleClassNGPositiveB.PicPath[saveImageWaferIDPositiveB - 3] = savePath + "." + redetectFormat;
                                    isTopAndBottomNGPositiveB[WaferIDPositiveB] = false;
                                }
                            }
                        }
                        else if (inspectSide.Equals("NegativeA"))
                        {
                            if (WaferIDNegativeA == 1)
                            {
                                if (isNextClassFlagNegativeA)
                                {
                                    lock (LockObjectNextClassNegativeA)
                                    {
                                        singleClassNGNegativeA.PicPath[0] = savePath + "." + redetectFormat;
                                        isNextClassFlagNegativeA = false;
                                    }
                                }

                                if (isTopAndBottomNGNegativeA[WaferIDNegativeA] && tempSaveImageWaferIDNegativeA >= 2)
                                {
                                    lock (LockObjectNextClassNegativeA)
                                    {
                                        singleClassNGNegativeAList[singleClassNGNegativeAList.Count - 1].PicPath[tempSaveImageWaferIDNegativeA - 2] = savePath + "." + redetectFormat;
                                        isTopAndBottomNGNegativeA[WaferIDNegativeA] = false;
                                    }
                                }
                                //tempSingleClassNGNegativeA.PicPath[saveImageWaferIDNegativeA - 2] = savePath;
                            }
                            else
                            {
                                singleClassNGNegativeA.PicPath[saveImageWaferIDNegativeA - 2] = savePath + "." + redetectFormat;
                                if (isTopAndBottomNGNegativeA[WaferIDNegativeA])
                                {
                                    singleClassNGNegativeA.PicPath[saveImageWaferIDNegativeA - 3] = savePath + "." + redetectFormat;
                                    isTopAndBottomNGNegativeA[WaferIDNegativeA] = false;
                                }
                            }
                        }
                        else if (inspectSide.Equals("NegativeB"))
                        {
                            if (WaferIDNegativeB == 1)
                            {
                                if (isNextClassFlagNegativeB)
                                {
                                    lock (LockObjectNextClassNegativeB)
                                    {
                                        singleClassNGNegativeB.PicPath[0] = savePath + "." + redetectFormat;
                                        isNextClassFlagNegativeB = false;
                                    }
                                }

                                if (isTopAndBottomNGNegativeB[WaferIDNegativeB] && tempSaveImageWaferIDNegativeB >= 2)
                                {
                                    lock (LockObjectNextClassNegativeB)
                                    {
                                        
                                        singleClassNGNegativeBList[singleClassNGNegativeBList.Count - 1].PicPath[tempSaveImageWaferIDNegativeB - 2] = savePath + "." + redetectFormat;
                                        isTopAndBottomNGNegativeB[WaferIDNegativeB] = false;
                                    }
                                }
                                //tempSingleClassNGNegativeB.PicPath[saveImageWaferIDNegativeB - 2] = savePath;
                            }
                            else
                            {
                                singleClassNGNegativeB.PicPath[saveImageWaferIDNegativeB - 2] = savePath + "." + redetectFormat;
                                if (isTopAndBottomNGNegativeB[WaferIDNegativeB])
                                {
                                    singleClassNGNegativeB.PicPath[saveImageWaferIDNegativeB - 3] = savePath + "." + redetectFormat;
                                    isTopAndBottomNGNegativeB[WaferIDNegativeB] = false;
                                }
                            }
                        }
                    }

                }
                saveImage.Dispose();
            }
        }
        public bool pathSave = true ;
        void SaveImagePositiveA()
        {
            while (bl_Inspect)
            {
                //Thread.Sleep(1);
                //SaveImage(OriImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageA正面OK", "D:/" + RealTime + "/ASI/ImageA正面OK/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", false );
                if (OriImageQueuePositiveA.Count > 0)
                {
                    string path = "";
                    string pathAdvanced = "";
                    path = "D:/" + RealTime + "/ASI/ImageA正面OK";
                    pathAdvanced = "D:/" + RealTime + "/ASI/ImageA正面OK/本地复测";
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    if (!Directory.Exists(pathAdvanced))
                    {
                        Directory.CreateDirectory(pathAdvanced);
                    }
                    HObject saveImage = OriImageQueuePositiveA.Dequeue();
                    if (bl_IsReDetectPositive)
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                    }
                    else
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, path + "/" + ImageRealTime);

                    }
                    saveImage.Dispose();
                }
                //NG图，查看最近10张
                //if (NGImageQueueA.Count > 0)
                //{
                //    string path = "";
                //    string pathAdvanced = "";
                //    path = "D:/" + RealTime + "/ASI/ImageNgA正面";
                //    pathAdvanced = "D:/" + RealTime + "/ASI/ImageNgA正面/本地复测";
                //    if (!Directory.Exists(path))
                //    {
                //        Directory.CreateDirectory(path);
                //    }
                //    if (!Directory.Exists(pathAdvanced))
                //    {
                //        Directory.CreateDirectory(pathAdvanced);
                //    }
                //    HObject saveNGImage = NGImageQueueA.Dequeue();
                //    if (bl_IsReDetectPositive)
                //    {
                //        HOperatorSet.WriteImage(saveNGImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                //    }
                //    else
                //    {
                //        HOperatorSet.WriteImage(saveNGImage, "bmp", 0, path + "/" + ImageRealTime);
                //        AddNGimgeName(path + "/" + ImageRealTime, "A", false);
                //    }
                //    saveNGImage.Dispose();
                //}

                //if (RoiNGImageQueueA.Count > 0)
                //{
                //    string path = "";
                //    string pathAdvanced = "";
                //    path = "D:/" + RealTime + "/ASI/ImageNgRoiA正面";
                //    pathAdvanced = "D:/" + RealTime + "/ASI/ImageNgA正面/本地复测";
                //    if (!Directory.Exists(path))
                //    {
                //        Directory.CreateDirectory(path);
                //    }
                //    if (!Directory.Exists(pathAdvanced))
                //    {
                //        Directory.CreateDirectory(pathAdvanced);
                //    }
                //    HObject saveRoiNGImage = RoiNGImageQueueA.Dequeue();
                //    if (bl_IsReDetectPositive)
                //    {
                //        HOperatorSet.WriteImage(saveRoiNGImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                //    }
                //    else
                //    {
                //        HOperatorSet.WriteImage(saveRoiNGImage, "jpg", 0, path + "/" + ImageRealTime);
                //        AddNGimgeName(path + "/" + ImageRealTime, "A", true);
                //    }
                //    saveRoiNGImage.Dispose();
                //}

                SaveImage(FilmShiftingImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA正面/膜偏露白/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiFilmShiftingImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA正面/膜偏露白/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(FilmMissImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgA正面/膜失膜短/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiFilmMissImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgA正面/膜失膜短/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(HeadAndTailFilmShiftingImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA正面/头尾膜偏露白/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiHeadAndTailFilmShiftingImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA正面/头尾膜偏露白/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(EdgeDefectImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgA正面/边角缺陷/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiEdgeDefectImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgA正面/边角缺陷/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(DistanceNGImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/片间距", "D:/" + RealTime + "/ASI/ImageNgA正面/片间距/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiDistanceNGImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/片间距", "D:/" + RealTime + "/ASI/ImageNgA正面/片间距/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(SurfaceDefectImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgA正面/表面缺陷/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiSurfaceDefectImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgA正面/表面缺陷/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(BrokenLineImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/断栅", "D:/" + RealTime + "/ASI/ImageNgA正面/断栅/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiBrokenLineImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/断栅", "D:/" + RealTime + "/ASI/ImageNgA正面/断栅/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(StartWeldingNGImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/起焊点", "D:/" + RealTime + "/ASI/ImageNgA正面/起焊点/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveA", false);
                SaveImage(RoiStartWeldingNGImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/起焊点", "D:/" + RealTime + "/ASI/ImageNgA正面/起焊点/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(CellMissImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/少片", "D:/" + RealTime + "/ASI/ImageNgA正面/少片", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(SurfaceMeanGrayImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageNgA正面/色差", "D:/" + RealTime + "/ASI/ImageNgA正面/色差", bl_IsReDetectPositive, "jpg", "jpg", "PositiveA", true);
                SaveImage(ExceptionImageQueuePositiveA, "D:/" + RealTime + "/ASI/ImageExceptionA正面", "D:/" + RealTime + "/ASI/ImageExceptionA正面", bl_IsReDetectPositive, "bmp", "bmp", "PositiveA", false);
                SaveImage(AlgorithmExceptionImageQueuePositiveA, "D:/" + RealTime + "/ASI/AlgorithmImageExceptionA正面", "D:/" + RealTime + "/ASI/AlgorithmImageExceptionA正面", bl_IsReDetectPositive, "bmp", "bmp", "PositiveA", true);
                Thread.Sleep(10);
            }
        }

        void SaveImagePositiveB()
        {
            while (bl_Inspect)
            {
                
                //SaveImage(OriImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageB正面OK", "D:/" + RealTime + "/ASI/ImageB正面OK/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", false );
                if (OriImageQueuePositiveB.Count > 0)
                {
                    string path = "";
                    string pathAdvanced = "";
                    path = "D:/" + RealTime + "/ASI/ImageB正面OK";
                    pathAdvanced = "D:/" + RealTime + "/ASI/ImageB正面OK/本地复测";
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    if (!Directory.Exists(pathAdvanced))
                    {
                        Directory.CreateDirectory(pathAdvanced);
                    }
                    HObject saveImage = OriImageQueuePositiveB.Dequeue();
                    if (bl_IsReDetectPositive)
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                    }
                    else
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, path + "/" + ImageRealTime);

                    }
                    saveImage.Dispose();
                }
                //NG图，查看最近10张
                //if (NGImageQueueB.Count > 0)
                //{
                //    string path = "";
                //    string pathAdvanced = "";
                //    path = "D:/" + RealTime + "/ASI/ImageNgB正面";
                //    pathAdvanced = "D:/" + RealTime + "/ASI/ImageNgB正面/本地复测";
                //    if (!Directory.Exists(path))
                //    {
                //        Directory.CreateDirectory(path);
                //    }
                //    if (!Directory.Exists(pathAdvanced))
                //    {
                //        Directory.CreateDirectory(pathAdvanced);
                //    }
                //    HObject saveNGImage = NGImageQueueB.Dequeue();
                //    if (bl_IsReDetectPositive)
                //    {
                //        HOperatorSet.WriteImage(saveNGImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                //    }
                //    else
                //    {
                //        HOperatorSet.WriteImage(saveNGImage, "bmp", 0, path + "/" + ImageRealTime);
                //        AddNGimgeName(path + "/" + ImageRealTime, "B", false);
                //    }
                //    saveNGImage.Dispose();
                //}

                //if (RoiNGImageQueueB.Count > 0)
                //{
                //    string path = "";
                //    string pathAdvanced = "";
                //    path = "D:/" + RealTime + "/ASI/ImageNgRoiB正面";
                //    pathAdvanced = "D:/" + RealTime + "/ASI/ImageNgB正面/本地复测";
                //    if (!Directory.Exists(path))
                //    {
                //        Directory.CreateDirectory(path);
                //    }
                //    if (!Directory.Exists(pathAdvanced))
                //    {
                //        Directory.CreateDirectory(pathAdvanced);
                //    }
                //    HObject saveRoiNGImage = RoiNGImageQueueB.Dequeue();
                //    if (bl_IsReDetectPositive)
                //    {
                //        HOperatorSet.WriteImage(saveRoiNGImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                //    }
                //    else
                //    {
                //        HOperatorSet.WriteImage(saveRoiNGImage, "jpg", 0, path + "/" + ImageRealTime);
                //        AddNGimgeName(path + "/" + ImageRealTime, "B", true);
                //    }
                //    saveRoiNGImage.Dispose();
                //}

                SaveImage(FilmShiftingImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB正面/膜偏露白/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiFilmShiftingImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB正面/膜偏露白/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(FilmMissImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgB正面/膜失膜短/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiFilmMissImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgB正面/膜失膜短/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(HeadAndTailFilmShiftingImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB正面/头尾膜偏露白/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiHeadAndTailFilmShiftingImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB正面/头尾膜偏露白/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(EdgeDefectImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgB正面/边角缺陷/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiEdgeDefectImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgB正面/边角缺陷/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(DistanceNGImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/片间距", "D:/" + RealTime + "/ASI/ImageNgB正面/片间距/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiDistanceNGImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/片间距", "D:/" + RealTime + "/ASI/ImageNgB正面/片间距/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(SurfaceDefectImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgB正面/表面缺陷/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiSurfaceDefectImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgB正面/表面缺陷/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(BrokenLineImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/断栅", "D:/" + RealTime + "/ASI/ImageNgB正面/断栅/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiBrokenLineImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/断栅", "D:/" + RealTime + "/ASI/ImageNgB正面/断栅/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(StartWeldingNGImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/起焊点", "D:/" + RealTime + "/ASI/ImageNgB正面/起焊点/本地复测", bl_IsReDetectPositive, "bmp", "jpg", "PositiveB", false);
                SaveImage(RoiStartWeldingNGImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/起焊点", "D:/" + RealTime + "/ASI/ImageNgB正面/起焊点/本地复测", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(CellMissImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/少片", "D:/" + RealTime + "/ASI/ImageNgB正面/少片", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(SurfaceMeanGrayImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageNgB正面/色差", "D:/" + RealTime + "/ASI/ImageNgB正面/色差", bl_IsReDetectPositive, "jpg", "jpg", "PositiveB", true);
                SaveImage(ExceptionImageQueuePositiveB, "D:/" + RealTime + "/ASI/ImageExceptionB正面", "D:/" + RealTime + "/ASI/ImageExceptionB正面", bl_IsReDetectPositive, "bmp", "bmp", "PositiveB", false);
                SaveImage(AlgorithmExceptionImageQueuePositiveB, "D:/" + RealTime + "/ASI/AlgorithmImageExceptionB正面", "D:/" + RealTime + "/ASI/AlgorithmImageExceptionB正面", bl_IsReDetectPositive, "bmp", "bmp", "PositiveB", true);
                Thread.Sleep(10);
            }
        }

        void SaveImageNegativeA()
        {
            while (bl_Inspect)
            {
                

                if (OriImageQueueNegativeA.Count > 0)
                {
                    string path = "";
                    string pathAdvanced = "";
                    path = "D:/" + RealTime + "/ASI/ImageA背面OK";
                    pathAdvanced = "D:/" + RealTime + "/ASI/ImageA背面OK/本地复测";
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    if (!Directory.Exists(pathAdvanced))
                    {
                        Directory.CreateDirectory(pathAdvanced);
                    }
                    HObject saveImage = OriImageQueueNegativeA.Dequeue();
                    if (bl_IsReDetectPositive)
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                    }
                    else
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, path + "/" + ImageRealTime);

                    }
                    saveImage.Dispose();
                }




                //SaveImage(OriImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageA背面OK", "D:/" + RealTime + "/ASI/ImageA背面OK/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", false);
                SaveImage(FilmShiftingImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA背面/膜偏露白/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiFilmShiftingImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA背面/膜偏露白/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(FilmMissImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgA背面/膜失膜短/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiFilmMissImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgA背面/膜失膜短/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(HeadAndTailFilmShiftingImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA背面/头尾膜偏露白/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiHeadAndTailFilmShiftingImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgA背面/头尾膜偏露白/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(EdgeDefectImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgA背面/边角缺陷/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiEdgeDefectImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgA背面/边角缺陷/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(DistanceNGImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/片间距", "D:/" + RealTime + "/ASI/ImageNgA背面/片间距/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiDistanceNGImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/片间距", "D:/" + RealTime + "/ASI/ImageNgA背面/片间距/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(SurfaceDefectImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgA背面/表面缺陷/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiSurfaceDefectImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgA背面/表面缺陷/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(BrokenLineImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/断栅", "D:/" + RealTime + "/ASI/ImageNgA背面/断栅/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiBrokenLineImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/断栅", "D:/" + RealTime + "/ASI/ImageNgA背面/断栅/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(StartWeldingNGImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/起焊点", "D:/" + RealTime + "/ASI/ImageNgA背面/起焊点/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeA", false);
                SaveImage(RoiStartWeldingNGImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageNgA背面/起焊点", "D:/" + RealTime + "/ASI/ImageNgA背面/起焊点/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeA", true);
                SaveImage(ExceptionImageQueueNegativeA, "D:/" + RealTime + "/ASI/ImageExceptionA背面", "D:/" + RealTime + "/ASI/ImageExceptionA背面", bl_IsReDetectNegative, "bmp", "bmp", "NegativeA", false);
                Thread.Sleep(10);
            }
        }

        void SaveImageNegativeB()
        {
            while (bl_Inspect)
            {
              

                if (OriImageQueueNegativeB.Count > 0)
                {
                    string path = "";
                    string pathAdvanced = "";
                    path = "D:/" + RealTime + "/ASI/ImageB背面OK";
                    pathAdvanced = "D:/" + RealTime + "/ASI/ImageB背面OK/本地复测";
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }
                    if (!Directory.Exists(pathAdvanced))
                    {
                        Directory.CreateDirectory(pathAdvanced);
                    }
                    HObject saveImage = OriImageQueueNegativeB.Dequeue();
                    if (bl_IsReDetectPositive)
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, pathAdvanced + "/" + ImageRealTime);
                    }
                    else
                    {
                        HOperatorSet.WriteImage(saveImage, "jpg", 0, path + "/" + ImageRealTime);

                    }
                    saveImage.Dispose();
                }


                // SaveImage(OriImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageB背面OK", "D:/" + RealTime + "/ASI/ImageB背面OK/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", false);
                SaveImage(FilmShiftingImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB背面/膜偏露白/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiFilmShiftingImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB背面/膜偏露白/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(FilmMissImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgB背面/膜失膜短/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiFilmMissImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/膜失膜短", "D:/" + RealTime + "/ASI/ImageNgB背面/膜失膜短/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(HeadAndTailFilmShiftingImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB背面/头尾膜偏露白/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiHeadAndTailFilmShiftingImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/头尾膜偏露白", "D:/" + RealTime + "/ASI/ImageNgB背面/头尾膜偏露白/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(EdgeDefectImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgB背面/边角缺陷/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiEdgeDefectImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/边角缺陷", "D:/" + RealTime + "/ASI/ImageNgB背面/边角缺陷/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(DistanceNGImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/片间距", "D:/" + RealTime + "/ASI/ImageNgB背面/片间距/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiDistanceNGImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/片间距", "D:/" + RealTime + "/ASI/ImageNgB背面/片间距/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(SurfaceDefectImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgB背面/表面缺陷/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiSurfaceDefectImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/表面缺陷", "D:/" + RealTime + "/ASI/ImageNgB背面/表面缺陷/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(BrokenLineImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/断栅", "D:/" + RealTime + "/ASI/ImageNgB背面/断栅/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiBrokenLineImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/断栅", "D:/" + RealTime + "/ASI/ImageNgB背面/断栅/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(StartWeldingNGImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/起焊点", "D:/" + RealTime + "/ASI/ImageNgB背面/起焊点/本地复测", bl_IsReDetectNegative, "bmp", "jpg", "NegativeB", false);
                SaveImage(RoiStartWeldingNGImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageNgB背面/起焊点", "D:/" + RealTime + "/ASI/ImageNgB背面/起焊点/本地复测", bl_IsReDetectNegative, "jpg", "jpg", "NegativeB", true);
                SaveImage(ExceptionImageQueueNegativeB, "D:/" + RealTime + "/ASI/ImageExceptionB背面", "D:/" + RealTime + "/ASI/ImageExceptionB背面", bl_IsReDetectNegative, "bmp", "bmp", "NegativeB", false);
                Thread.Sleep(10);
            }
        }

        //每次运行重新读参数
        public void RefreshRecipeGlobalParameter()
        {
            WaferCountPerClass = new HTuple(Convert.ToInt32(Global.waferCountPerClass));
            IsDalsaCam = new HTuple(Convert.ToInt32(Global.isDalsaCam));
            MainLineNum = new HTuple(Convert.ToInt32(Global.mainLineNum));
            MainLineDistance = new HTuple(Convert.ToDouble( Global.mainLineDistance));
            IsFullWafer = new HTuple(Convert.ToInt32(Global.isFullWafer));
            SubMainLineNum = new HTuple(Convert.ToInt32(Global.subMainLineNum));
            StringType = new HTuple(Global.stringType);
            IsDoubleDetect = new HTuple(Convert.ToInt32(Global.isDoubleDetect));
            IsMESFun = new HTuple(Convert.ToInt32(Global.isMESFun));
            IsUpperLink = new HTuple(Convert.ToInt32(Global.isUpperLink));
            IsEnglish = new HTuple(1 - Convert.ToInt32(Global.isEnglish));
        }
        public void InitNGArryPositive()
        {
            //刷新单串Flag数组A正面
            SingleClassFilmShiftingFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassFilmMissFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassDistanceNGFlagArrayPositiveA = new bool[WaferCountPerClass - 1 + 3];
            SingleClassEdgeDefectFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceDefectFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceScratchFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassBrokenLineFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassStargingWeldingNGFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceMeanGrayArrayPositiveA.Clear();
            SingleClassEmptyPlateFlagArrayPositiveA = new bool[WaferCountPerClass - 1 + 3];
            SingleClassCellMissingNGFlagArrayPositiveA = new bool[WaferCountPerClass + 3];
            SingleClassAlgorithmExceptionNGFlagArrayPositiveA = new bool[WaferCountPerClass + 3];

            //刷新单串Flag数组B正面
            SingleClassFilmShiftingFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassFilmMissFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassDistanceNGFlagArrayPositiveB = new bool[WaferCountPerClass - 1 + 3];
            SingleClassEdgeDefectFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceDefectFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceScratchFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassBrokenLineFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassStargingWeldingNGFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceMeanGrayArrayPositiveB.Clear();
            SingleClassEmptyPlateFlagArrayPositiveB = new bool[WaferCountPerClass - 1 + 3];
            SingleClassCellMissingNGFlagArrayPositiveB = new bool[WaferCountPerClass + 3];
            SingleClassAlgorithmExceptionNGFlagArrayPositiveB = new bool[WaferCountPerClass + 3];

        }
        public void InitNGArryNegative()
        {
            //刷新单串Flag数组A正面
            SingleClassFilmShiftingFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassFilmMissFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassDistanceNGFlagArrayNegativeA = new bool[WaferCountPerClass - 1 + 3];
            SingleClassEdgeDefectFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceDefectFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceScratchFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassBrokenLineFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassStargingWeldingNGFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceMeanGrayArrayNegativeA.Clear();
            SingleClassEmptyPlateFlagArrayNegativeA = new bool[WaferCountPerClass - 1 + 3];
            SingleClassCellMissingNGFlagArrayNegativeA = new bool[WaferCountPerClass + 3];
            SingleClassAlgorithmExceptionNGFlagArrayNegativeA = new bool[WaferCountPerClass + 3];

            //刷新单串Flag数组B正面
            SingleClassFilmShiftingFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassFilmMissFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassDistanceNGFlagArrayNegativeB = new bool[WaferCountPerClass - 1 + 3];
            SingleClassEdgeDefectFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceDefectFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassBrokenLineFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassStargingWeldingNGFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassSurfaceMeanGrayArrayNegativeB.Clear();
            SingleClassEmptyPlateFlagArrayNegativeB = new bool[WaferCountPerClass - 1 + 3];
            SingleClassCellMissingNGFlagArrayNegativeB = new bool[WaferCountPerClass + 3];
            SingleClassAlgorithmExceptionNGFlagArrayNegativeB = new bool[WaferCountPerClass + 3];

        }
        public void InitNGArray()
        {
            InitNGArryPositive();
            InitNGArryNegative();
        }
        public void RefreshRecipeParameterPositiveA()
        {
            
            IsUsingWidthResolutionCalibratePositiveA = new HTuple(Convert.ToInt32(Global.isUsingWidthResolutionCalibratePositiveA));
            WidthResolutionPositiveA = new HTuple(Convert.ToDouble(Global.widthResolutionPositiveA));
            WaferWidth = new HTuple(Convert.ToDouble(Global.waferWidth));
            WaferWidthPositiveA = new HTuple(Convert.ToDouble(Global.waferWidthPositiveA));
            
            
            IsUsingHeightResolutionCalibratePositiveA = new HTuple(Convert.ToInt32(Global.isUsingHeightResolutionCalibratePositiveA));
            HeightResolutionPositiveA = new HTuple(Convert.ToDouble(Global.heightResolutionPositiveA));
            ViceLineInterval = new HTuple(Convert.ToDouble(Global.viceLineInterval));
            IsUsingFilmShiftingDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingFilmShiftingDetectPositiveA));
            TopShieldLengthOfTopRegionPositiveA = new HTuple(Convert.ToDouble(Global.topShieldLengthOfTopRegionPositiveA));
            BottomShieldLengthOfTopRegionPositiveA = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfTopRegionPositiveA));
            TopShieldLengthOfBottomRegionPositiveA = new HTuple(Convert.ToDouble(Global.topShieldLengthOfBottomRegionPositiveA));
            BottomShieldLengthOfBottomRegionPositiveA = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfBottomRegionPositiveA));
            LocationMainLineThreshPositiveA = new HTuple(Convert.ToInt32(Global.locationMainLineThreshPositiveA));
            FilmWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.filmWidthThreshPositiveA));
            FilmWidthOffSetPositiveA = new HTuple(Convert.ToDouble(Global.filmWidthOffSetPositiveA));
            IsUsingFilmMissDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingFilmMissDetectPositiveA));
            WeldWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.weldWidthThreshPositiveA));
            WeldShieldLengthPositiveA = new HTuple(Convert.ToDouble(Global.weldShieldLengthPositiveA));
            FirstDetectPosForTopRegionPositiveA = new HTuple(Convert.ToDouble(Global.firstDetectPosForTopRegionPositiveA));
            SecondDetectPosForTopRegionPositiveA = new HTuple(Convert.ToDouble(Global.secondDetectPosForTopRegionPositiveA));
            FirstDetectPosForBottomRegionPositiveA = new HTuple(Convert.ToDouble(Global.firstDetectPosForBottomRegionPositiveA));
            SecondDetectPosForBottomRegionPositiveA = new HTuple(Convert.ToDouble(Global.secondDetectPosForBottomRegionPositiveA));
            IsUsingHeadAndTailFilmShiftingDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingHeadAndTailFilmShiftingDetectPositiveA));
            HeadAndTailFilmWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.headAndTailFilmWidthThreshPositiveA));
            HeadAndTailFilmShieldLengthPositiveA = new HTuple(Convert.ToDouble(Global.headAndTailFilmShieldLengthPositiveA));
            HeadAndTailFilmDetectRangePositiveA = new HTuple(Convert.ToDouble(Global.headAndTailFilmDetectRangePositiveA));
            IsUsingWaferEdgeCalibrationPositiveA = new HTuple(Convert.ToInt32(Global.isUsingWaferEdgeCalibrationPositiveA));
            LocationWaferEdgeThreshPositiveA = new HTuple(Convert.ToInt32(Global.locationWaferEdgeThreshPositiveA));
            WaferEdgeCalibrationRegionDilationPixelPositiveA = new HTuple(Convert.ToInt32(Global.waferEdgeCalibrationRegionDilationPixelPositiveA));
            IsUsingDistanceDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingDistanceDetectPositiveA));
            MinimumDistanceThreshPositiveA = new HTuple(Convert.ToDouble(Global.minimumDistanceThreshPositiveA));
            MaxDistanceThreshPositiveA = new HTuple(Convert.ToDouble(Global.maxDistanceThreshPositiveA));
            ClassDistanceThreshPositiveA = new HTuple(Convert.ToDouble(Global.classDistanceThreshPositiveA));
            IsUsingEdgeDefectDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingEdgeDefectDetectPositiveA));
            EdgeBigDefectWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeBigDefectWidthThreshPositiveA));
            EdgeBigDefectHeightThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeBigDefectHeightThreshPositiveA));
            EdgeSmallDefectDetectDepthPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectDetectDepthPositiveA));
            EdgeSmallDefectGrayThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayThreshPositiveA));
            EdgeSmallDefectWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectWidthThreshPositiveA));
            EdgeSmallDefectHeightThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectHeightThreshPositiveA));
            EdgeSmallDefectGrayMeanThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayMeanThreshPositiveA));
            EdgeSmallDefectGrayDeviationThreshPositiveA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayDeviationThreshPositiveA));
            CornerDefectAreaRatioThreshPositiveA = new HTuple(Convert.ToDouble(Global.cornerDefectAreaRatioThreshPositiveA));
            IsUsingSurfaceDefectDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingSurfaceDefectDetectPositiveA));
            SurfaceDefectGrayThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectGrayThreshPositiveA));
            SurfaceDefectWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectWidthThreshPositiveA));
            SurfaceDefectHeightThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectHeightThreshPositiveA));
            SurfaceDefectDetectIndentDepthPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectDetectIndentDepthPositiveA));
            SurfaceDefectViceLineShieldWidthPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldWidthPositiveA));
            SurfaceDefectViceLineShieldLeftPosOffSetPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldLeftPosOffSetPositiveA));
            SurfaceDefectViceLineShieldRightPosOffSetPositiveA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldRightPosOffSetPositiveA));
            SurfaceScratchGrayThreshPositiveA = new HTuple(Convert.ToInt32(Global.surfaceScratchGrayThreshPositiveA));
            SurfaceScratchGrayThreshPositiveB = new HTuple(Convert.ToInt32(Global.surfaceScratchGrayThreshPositiveB));
            SurfaceScratchWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceScratchWidthThreshPositiveA));
            SurfaceScratchWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceScratchWidthThreshPositiveB));
            SurfaceScratchHeightThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceScratchHeightThreshPositiveA));
            SurfaceScratchHeightThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceScratchHeightThreshPositiveB));
            IsUsingBrokenLineDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingBrokenLineDetectPositiveA));
            BrokenLineGrayThreshPositiveA = new HTuple(Convert.ToInt32(Global.brokenLineGrayThreshPositiveA));
            BrokenLineWidthThreshPositiveA = new HTuple(Convert.ToDouble(Global.brokenLineWidthThreshPositiveA));
            BrokenLineHeightThreshPositiveA = new HTuple(Convert.ToDouble(Global.brokenLineHeightThreshPositiveA));
            BrokenLineDetectIndentDepthPositiveA = new HTuple(Convert.ToDouble(Global.brokenLineDetectIndentDepthPositiveA));
            IsUsingStartWeldingDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingStartWeldingDetectPositiveA));
            StartWeldingDistanceMaxThreshPositiveA = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMaxThreshPositiveA));
            StartWeldingDistanceMinThreshPositiveA = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMinThreshPositiveA));
            IsUsingSurfaceColorDiffDetectPositiveA = new HTuple(Convert.ToInt32(Global.isUsingSurfaceColorDiffDetectPositiveA));
            SurfaceColorDiffGrayThreshPositiveA = new HTuple(Convert.ToDouble(Global.surfaceColorDiffGrayThreshPositiveA));
            IsSaveNGImage_PositiveA = new HTuple(Convert.ToInt32(Global.isSaveNGImage_PositiveA));
            IsSaveAllImage_PositiveA = new HTuple(Convert.ToInt32(Global.isSaveAllImage_PositiveA));
            IsSaveNGImageWithRoi_PositiveA = new HTuple(Convert.ToInt32(Global.isSaveNGImageWithRoi_PositiveA));
            IsUsingCamera_PositiveA = new HTuple(Convert.ToInt32(Global.isUsingCamera_PositiveA));
            IsUsingAlarmFunction_PositiveA = new HTuple(Convert.ToInt32(Global.isUsingAlarmFunction_PositiveA));
            MaxAlamClusterCount_PositiveA = new HTuple(Convert.ToInt32(Global.maxAlamClusterCount_PositiveA));

            
        }

        public void RefreshRecipeParameterPositiveB()
        {
            IsUsingWidthResolutionCalibratePositiveB = new HTuple(Convert.ToInt32(Global.isUsingWidthResolutionCalibratePositiveB));
            WidthResolutionPositiveB = new HTuple(Convert.ToDouble(Global.widthResolutionPositiveB));
            WaferWidthPositiveB = new HTuple(Convert.ToDouble(Global.waferWidthPositiveB));
            IsUsingHeightResolutionCalibratePositiveB = new HTuple(Convert.ToInt32(Global.isUsingHeightResolutionCalibratePositiveB));
            HeightResolutionPositiveB = new HTuple(Convert.ToDouble(Global.heightResolutionPositiveB));
            ViceLineInterval = new HTuple(Convert.ToDouble(Global.viceLineInterval));
            IsUsingFilmShiftingDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingFilmShiftingDetectPositiveB));
            TopShieldLengthOfTopRegionPositiveB = new HTuple(Convert.ToDouble(Global.topShieldLengthOfTopRegionPositiveB));
            BottomShieldLengthOfTopRegionPositiveB = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfTopRegionPositiveB));
            TopShieldLengthOfBottomRegionPositiveB = new HTuple(Convert.ToDouble(Global.topShieldLengthOfBottomRegionPositiveB));
            BottomShieldLengthOfBottomRegionPositiveB = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfBottomRegionPositiveB));
            LocationMainLineThreshPositiveB = new HTuple(Convert.ToInt32(Global.locationMainLineThreshPositiveB));
            FilmWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.filmWidthThreshPositiveB));
            FilmWidthOffSetPositiveB = new HTuple(Convert.ToDouble(Global.filmWidthOffSetPositiveB));
            IsUsingFilmMissDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingFilmMissDetectPositiveB));
            WeldWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.weldWidthThreshPositiveB));
            WeldShieldLengthPositiveB = new HTuple(Convert.ToDouble(Global.weldShieldLengthPositiveB));
            FirstDetectPosForTopRegionPositiveB = new HTuple(Convert.ToDouble(Global.firstDetectPosForTopRegionPositiveB));
            SecondDetectPosForTopRegionPositiveB = new HTuple(Convert.ToDouble(Global.secondDetectPosForTopRegionPositiveB));
            FirstDetectPosForBottomRegionPositiveB = new HTuple(Convert.ToDouble(Global.firstDetectPosForBottomRegionPositiveB));
            SecondDetectPosForBottomRegionPositiveB = new HTuple(Convert.ToDouble(Global.secondDetectPosForBottomRegionPositiveB));
            IsUsingHeadAndTailFilmShiftingDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingHeadAndTailFilmShiftingDetectPositiveB));
            HeadAndTailFilmWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.headAndTailFilmWidthThreshPositiveB));
            HeadAndTailFilmShieldLengthPositiveB = new HTuple(Convert.ToDouble(Global.headAndTailFilmShieldLengthPositiveB));
            HeadAndTailFilmDetectRangePositiveB = new HTuple(Convert.ToDouble(Global.headAndTailFilmDetectRangePositiveB));
            IsUsingWaferEdgeCalibrationPositiveB = new HTuple(Convert.ToInt32(Global.isUsingWaferEdgeCalibrationPositiveB));
            LocationWaferEdgeThreshPositiveB = new HTuple(Convert.ToInt32(Global.locationWaferEdgeThreshPositiveB));
            WaferEdgeCalibrationRegionDilationPixelPositiveB = new HTuple(Convert.ToInt32(Global.waferEdgeCalibrationRegionDilationPixelPositiveB));
            IsUsingDistanceDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingDistanceDetectPositiveB));
            MinimumDistanceThreshPositiveB = new HTuple(Convert.ToDouble(Global.minimumDistanceThreshPositiveB));
            MaxDistanceThreshPositiveB = new HTuple(Convert.ToDouble(Global.maxDistanceThreshPositiveB));
            ClassDistanceThreshPositiveB = new HTuple(Convert.ToDouble(Global.classDistanceThreshPositiveB));
            IsUsingEdgeDefectDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingEdgeDefectDetectPositiveB));
            EdgeBigDefectWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeBigDefectWidthThreshPositiveB));
            EdgeBigDefectHeightThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeBigDefectHeightThreshPositiveB));
            EdgeSmallDefectDetectDepthPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectDetectDepthPositiveB));
            EdgeSmallDefectGrayThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayThreshPositiveB));
            EdgeSmallDefectWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectWidthThreshPositiveB));
            EdgeSmallDefectHeightThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectHeightThreshPositiveB));
            EdgeSmallDefectGrayMeanThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayMeanThreshPositiveB));
            EdgeSmallDefectGrayDeviationThreshPositiveB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayDeviationThreshPositiveB));
            CornerDefectAreaRatioThreshPositiveB = new HTuple(Convert.ToDouble(Global.cornerDefectAreaRatioThreshPositiveB));
            IsUsingSurfaceDefectDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingSurfaceDefectDetectPositiveB));
            SurfaceDefectGrayThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectGrayThreshPositiveB));
            SurfaceDefectWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectWidthThreshPositiveB));
            SurfaceDefectHeightThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectHeightThreshPositiveB));
            SurfaceDefectDetectIndentDepthPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectDetectIndentDepthPositiveB));
            SurfaceDefectViceLineShieldWidthPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldWidthPositiveB));
            SurfaceDefectViceLineShieldLeftPosOffSetPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldLeftPosOffSetPositiveB));
            SurfaceDefectViceLineShieldRightPosOffSetPositiveB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldRightPosOffSetPositiveB));
            IsUsingBrokenLineDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingBrokenLineDetectPositiveB));
            BrokenLineGrayThreshPositiveB = new HTuple(Convert.ToInt32(Global.brokenLineGrayThreshPositiveB));
            BrokenLineWidthThreshPositiveB = new HTuple(Convert.ToDouble(Global.brokenLineWidthThreshPositiveB));
            BrokenLineHeightThreshPositiveB = new HTuple(Convert.ToDouble(Global.brokenLineHeightThreshPositiveB));
            BrokenLineDetectIndentDepthPositiveB = new HTuple(Convert.ToDouble(Global.brokenLineDetectIndentDepthPositiveB));
            IsUsingStartWeldingDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingStartWeldingDetectPositiveB));
            StartWeldingDistanceMaxThreshPositiveB = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMaxThreshPositiveB));
            StartWeldingDistanceMinThreshPositiveB = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMinThreshPositiveB));
            IsUsingSurfaceColorDiffDetectPositiveB = new HTuple(Convert.ToInt32(Global.isUsingSurfaceColorDiffDetectPositiveB));
            SurfaceColorDiffGrayThreshPositiveB = new HTuple(Convert.ToDouble(Global.surfaceColorDiffGrayThreshPositiveB));
            IsSaveNGImage_PositiveB = new HTuple(Convert.ToInt32(Global.isSaveNGImage_PositiveB));
            IsSaveAllImage_PositiveB = new HTuple(Convert.ToInt32(Global.isSaveAllImage_PositiveB));
            IsSaveNGImageWithRoi_PositiveB = new HTuple(Convert.ToInt32(Global.isSaveNGImageWithRoi_PositiveB));
            IsUsingCamera_PositiveB = new HTuple(Convert.ToInt32(Global.isUsingCamera_PositiveB));
            IsUsingAlarmFunction_PositiveB = new HTuple(Convert.ToInt32(Global.isUsingAlarmFunction_PositiveB));
            MaxAlamClusterCount_PositiveB = new HTuple(Convert.ToInt32(Global.maxAlamClusterCount_PositiveB));

           
        }

        public void RefreshRecipeParameterNegativeA()
        {

            //背面关闭起焊点等功能
            if (Convert.ToInt32(Global.mainLineNum) > 9)
            {
                Global.isUsingStartWeldingDetectNegativeA = "0";
                Global.isUsingStartWeldingDetectNegativeB = "0";

                Global.isUsingEdgeDefectDetectNegativeA = "0";
                Global.isUsingEdgeDefectDetectNegativeB = "0";

                Global.isUsingSurfaceColorDiffDetectNegativeA = "0";
                Global.isUsingSurfaceColorDiffDetectNegativeB = "0";

                //Global.isUsingSurfaceDefectDetectNegativeA = "0";
                //Global.isUsingSurfaceDefectDetectNegativeB = "0";

                Global.isUsingBrokenLineDetectNegativeA = "0";
                Global.isUsingBrokenLineDetectNegativeB = "0";
            }
            IsUsingWidthResolutionCalibrateNegativeA = new HTuple(Convert.ToInt32(Global.isUsingWidthResolutionCalibrateNegativeA));
            WidthResolutionNegativeA = new HTuple(Convert.ToDouble(Global.widthResolutionNegativeA));
            WaferWidthNegativeA = new HTuple(Convert.ToDouble(Global.waferWidthNegativeA));
            
            IsUsingHeightResolutionCalibrateNegativeA = new HTuple(Convert.ToInt32(Global.isUsingHeightResolutionCalibrateNegativeA));
            HeightResolutionNegativeA = new HTuple(Convert.ToDouble(Global.heightResolutionNegativeA));
            ViceLineInterval = new HTuple(Convert.ToDouble(Global.viceLineInterval));
            IsUsingFilmShiftingDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingFilmShiftingDetectNegativeA));
            TopShieldLengthOfTopRegionNegativeA = new HTuple(Convert.ToDouble(Global.topShieldLengthOfTopRegionNegativeA));
            BottomShieldLengthOfTopRegionNegativeA = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfTopRegionNegativeA));
            TopShieldLengthOfBottomRegionNegativeA = new HTuple(Convert.ToDouble(Global.topShieldLengthOfBottomRegionNegativeA));
            BottomShieldLengthOfBottomRegionNegativeA = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfBottomRegionNegativeA));
            LocationMainLineThreshNegativeA = new HTuple(Convert.ToInt32(Global.locationMainLineThreshNegativeA));
            FilmWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.filmWidthThreshNegativeA));
            FilmWidthOffSetNegativeA = new HTuple(Convert.ToDouble(Global.filmWidthOffSetNegativeA));
            IsUsingFilmMissDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingFilmMissDetectNegativeA));

            WeldWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.weldWidthThreshNegativeA));
            WeldShieldLengthNegativeA = new HTuple(Convert.ToDouble(Global.weldShieldLengthNegativeA));
            FirstDetectPosForTopRegionNegativeA = new HTuple(Convert.ToDouble(Global.firstDetectPosForTopRegionNegativeA));
            SecondDetectPosForTopRegionNegativeA = new HTuple(Convert.ToDouble(Global.secondDetectPosForTopRegionNegativeA));
            FirstDetectPosForBottomRegionNegativeA = new HTuple(Convert.ToDouble(Global.firstDetectPosForBottomRegionNegativeA));
            SecondDetectPosForBottomRegionNegativeA = new HTuple(Convert.ToDouble(Global.secondDetectPosForBottomRegionNegativeA));
            IsUsingHeadAndTailFilmShiftingDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingHeadAndTailFilmShiftingDetectNegativeA));
            HeadAndTailFilmWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.headAndTailFilmWidthThreshNegativeA));
            HeadAndTailFilmShieldLengthNegativeA = new HTuple(Convert.ToDouble(Global.headAndTailFilmShieldLengthNegativeA));
            HeadAndTailFilmDetectRangeNegativeA = new HTuple(Convert.ToDouble(Global.headAndTailFilmDetectRangeNegativeA));
            IsUsingWaferEdgeCalibrationNegativeA = new HTuple(Convert.ToInt32(Global.isUsingWaferEdgeCalibrationNegativeA));
            LocationWaferEdgeThreshNegativeA = new HTuple(Convert.ToInt32(Global.locationWaferEdgeThreshNegativeA));
            WaferEdgeCalibrationRegionDilationPixelNegativeA = new HTuple(Convert.ToInt32(Global.waferEdgeCalibrationRegionDilationPixelNegativeA));
            IsUsingDistanceDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingDistanceDetectNegativeA));
            MinimumDistanceThreshNegativeA = new HTuple(Convert.ToDouble(Global.minimumDistanceThreshNegativeA));
            MaxDistanceThreshNegativeA = new HTuple(Convert.ToDouble(Global.maxDistanceThreshNegativeA));
            ClassDistanceThreshNegativeA = new HTuple(Convert.ToDouble(Global.classDistanceThreshNegativeA));
            IsUsingEdgeDefectDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingEdgeDefectDetectNegativeA));
            EdgeBigDefectWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeBigDefectWidthThreshNegativeA));
            EdgeBigDefectHeightThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeBigDefectHeightThreshNegativeA));
            EdgeSmallDefectDetectDepthNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectDetectDepthNegativeA));
            EdgeSmallDefectGrayThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayThreshNegativeA));
            EdgeSmallDefectWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectWidthThreshNegativeA));
            EdgeSmallDefectHeightThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectHeightThreshNegativeA));
            EdgeSmallDefectGrayMeanThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayMeanThreshNegativeA));
            EdgeSmallDefectGrayDeviationThreshNegativeA = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayDeviationThreshNegativeA));
            CornerDefectAreaRatioThreshNegativeA = new HTuple(Convert.ToDouble(Global.cornerDefectAreaRatioThreshNegativeA));
            IsUsingSurfaceDefectDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingSurfaceDefectDetectNegativeA));
            SurfaceDefectGrayThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectGrayThreshNegativeA));
            SurfaceDefectWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectWidthThreshNegativeA));
            SurfaceDefectHeightThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectHeightThreshNegativeA));
            SurfaceDefectDetectIndentDepthNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectDetectIndentDepthNegativeA));
            SurfaceDefectViceLineShieldWidthNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldWidthNegativeA));
            SurfaceDefectViceLineShieldLeftPosOffSetNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldLeftPosOffSetNegativeA));
            SurfaceDefectViceLineShieldRightPosOffSetNegativeA = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldRightPosOffSetNegativeA));
            SurfaceScratchGrayThreshNegativeA = new HTuple(Convert.ToInt32(Global.surfaceScratchGrayThreshNegativeA));
            SurfaceScratchGrayThreshNegativeB = new HTuple(Convert.ToInt32(Global.surfaceScratchGrayThreshNegativeB));
            SurfaceScratchWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceScratchWidthThreshNegativeA));
            SurfaceScratchWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceScratchWidthThreshNegativeB));
            SurfaceScratchHeightThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceScratchHeightThreshNegativeA));
            SurfaceScratchHeightThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceScratchHeightThreshNegativeB));
            IsUsingBrokenLineDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingBrokenLineDetectNegativeA));
            BrokenLineGrayThreshNegativeA = new HTuple(Convert.ToInt32(Global.brokenLineGrayThreshNegativeA));
            BrokenLineWidthThreshNegativeA = new HTuple(Convert.ToDouble(Global.brokenLineWidthThreshNegativeA));
            BrokenLineHeightThreshNegativeA = new HTuple(Convert.ToDouble(Global.brokenLineHeightThreshNegativeA));
            BrokenLineDetectIndentDepthNegativeA = new HTuple(Convert.ToDouble(Global.brokenLineDetectIndentDepthNegativeA));
            IsUsingStartWeldingDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingStartWeldingDetectNegativeA));
            StartWeldingDistanceMaxThreshNegativeA = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMaxThreshNegativeA));
            StartWeldingDistanceMinThreshNegativeA = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMinThreshNegativeA));
            IsUsingSurfaceColorDiffDetectNegativeA = new HTuple(Convert.ToInt32(Global.isUsingSurfaceColorDiffDetectNegativeA));
            SurfaceColorDiffGrayThreshNegativeA = new HTuple(Convert.ToDouble(Global.surfaceColorDiffGrayThreshNegativeA));
            IsSaveNGImage_NegativeA = new HTuple(Convert.ToInt32(Global.isSaveNGImage_NegativeA));
            IsSaveAllImage_NegativeA = new HTuple(Convert.ToInt32(Global.isSaveAllImage_NegativeA));
            IsSaveNGImageWithRoi_NegativeA = new HTuple(Convert.ToInt32(Global.isSaveNGImageWithRoi_NegativeA));
            IsUsingCamera_NegativeA = new HTuple(Convert.ToInt32(Global.isUsingCamera_NegativeA));
            IsUsingAlarmFunction_NegativeA = new HTuple(Convert.ToInt32(Global.isUsingAlarmFunction_NegativeA));
            MaxAlamClusterCount_NegativeA = new HTuple(Convert.ToInt32(Global.maxAlamClusterCount_NegativeA));

           
        }

        public void RefreshRecipeParameterNegativeB()
        {
            //背面关闭起焊点等功能
            if (Convert.ToInt32(Global.mainLineNum) > 9)
            {
                Global.isUsingStartWeldingDetectNegativeA = "0";
                Global.isUsingStartWeldingDetectNegativeB = "0";

                Global.isUsingEdgeDefectDetectNegativeA = "0";
                Global.isUsingEdgeDefectDetectNegativeB = "0";

                Global.isUsingSurfaceColorDiffDetectNegativeA = "0";
                Global.isUsingSurfaceColorDiffDetectNegativeB = "0";

                //Global.isUsingSurfaceDefectDetectNegativeA = "0";
                //Global.isUsingSurfaceDefectDetectNegativeB = "0";

                Global.isUsingBrokenLineDetectNegativeA = "0";
                Global.isUsingBrokenLineDetectNegativeB = "0";
            }
            IsUsingWidthResolutionCalibrateNegativeB = new HTuple(Convert.ToInt32(Global.isUsingWidthResolutionCalibrateNegativeB));
            WidthResolutionNegativeB = new HTuple(Convert.ToDouble(Global.widthResolutionNegativeB));
             
            WaferWidthNegativeB = new HTuple(Convert.ToDouble(Global.waferWidthNegativeB));
            IsUsingHeightResolutionCalibrateNegativeB = new HTuple(Convert.ToInt32(Global.isUsingHeightResolutionCalibrateNegativeB));
            HeightResolutionNegativeB = new HTuple(Convert.ToDouble(Global.heightResolutionNegativeB));
            ViceLineInterval = new HTuple(Convert.ToDouble(Global.viceLineInterval));
            IsUsingFilmShiftingDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingFilmShiftingDetectNegativeB));
            TopShieldLengthOfTopRegionNegativeB = new HTuple(Convert.ToDouble(Global.topShieldLengthOfTopRegionNegativeB));
            BottomShieldLengthOfTopRegionNegativeB = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfTopRegionNegativeB));
            TopShieldLengthOfBottomRegionNegativeB = new HTuple(Convert.ToDouble(Global.topShieldLengthOfBottomRegionNegativeB));
            BottomShieldLengthOfBottomRegionNegativeB = new HTuple(Convert.ToDouble(Global.bottomShieldLengthOfBottomRegionNegativeB));
            LocationMainLineThreshNegativeB = new HTuple(Convert.ToInt32(Global.locationMainLineThreshNegativeB));
            FilmWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.filmWidthThreshNegativeB));
            FilmWidthOffSetNegativeB = new HTuple(Convert.ToDouble(Global.filmWidthOffSetNegativeB));
            IsUsingFilmMissDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingFilmMissDetectNegativeB));
            WeldWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.weldWidthThreshNegativeB));
            WeldShieldLengthNegativeB = new HTuple(Convert.ToDouble(Global.weldShieldLengthNegativeB));
            FirstDetectPosForTopRegionNegativeB = new HTuple(Convert.ToDouble(Global.firstDetectPosForTopRegionNegativeB));
            SecondDetectPosForTopRegionNegativeB = new HTuple(Convert.ToDouble(Global.secondDetectPosForTopRegionNegativeB));
            FirstDetectPosForBottomRegionNegativeB = new HTuple(Convert.ToDouble(Global.firstDetectPosForBottomRegionNegativeB));
            SecondDetectPosForBottomRegionNegativeB = new HTuple(Convert.ToDouble(Global.secondDetectPosForBottomRegionNegativeB));
            IsUsingHeadAndTailFilmShiftingDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingHeadAndTailFilmShiftingDetectNegativeB));
            HeadAndTailFilmWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.headAndTailFilmWidthThreshNegativeB));
            HeadAndTailFilmShieldLengthNegativeB = new HTuple(Convert.ToDouble(Global.headAndTailFilmShieldLengthNegativeB));
            HeadAndTailFilmDetectRangeNegativeB = new HTuple(Convert.ToDouble(Global.headAndTailFilmDetectRangeNegativeB));
            IsUsingWaferEdgeCalibrationNegativeB = new HTuple(Convert.ToInt32(Global.isUsingWaferEdgeCalibrationNegativeB));
            LocationWaferEdgeThreshNegativeB = new HTuple(Convert.ToInt32(Global.locationWaferEdgeThreshNegativeB));
            WaferEdgeCalibrationRegionDilationPixelNegativeB = new HTuple(Convert.ToInt32(Global.waferEdgeCalibrationRegionDilationPixelNegativeB));
            IsUsingDistanceDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingDistanceDetectNegativeB));
            MinimumDistanceThreshNegativeB = new HTuple(Convert.ToDouble(Global.minimumDistanceThreshNegativeB));
            MaxDistanceThreshNegativeB = new HTuple(Convert.ToDouble(Global.maxDistanceThreshNegativeB));
            ClassDistanceThreshNegativeB = new HTuple(Convert.ToDouble(Global.classDistanceThreshNegativeB));
            IsUsingEdgeDefectDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingEdgeDefectDetectNegativeB));
            EdgeBigDefectWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeBigDefectWidthThreshNegativeB));
            EdgeBigDefectHeightThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeBigDefectHeightThreshNegativeB));
            EdgeSmallDefectDetectDepthNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectDetectDepthNegativeB));
            EdgeSmallDefectGrayThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayThreshNegativeB));
            EdgeSmallDefectWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectWidthThreshNegativeB));
            EdgeSmallDefectHeightThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectHeightThreshNegativeB));
            EdgeSmallDefectGrayMeanThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayMeanThreshNegativeB));
            EdgeSmallDefectGrayDeviationThreshNegativeB = new HTuple(Convert.ToDouble(Global.edgeSmallDefectGrayDeviationThreshNegativeB));
            CornerDefectAreaRatioThreshNegativeB = new HTuple(Convert.ToDouble(Global.cornerDefectAreaRatioThreshNegativeB));
            IsUsingSurfaceDefectDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingSurfaceDefectDetectNegativeB));
            SurfaceDefectGrayThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectGrayThreshNegativeB));
            SurfaceDefectWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectWidthThreshNegativeB));
            SurfaceDefectHeightThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectHeightThreshNegativeB));
            SurfaceDefectDetectIndentDepthNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectDetectIndentDepthNegativeB));
            SurfaceDefectViceLineShieldWidthNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldWidthNegativeB));
            SurfaceDefectViceLineShieldLeftPosOffSetNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldLeftPosOffSetNegativeB));
            SurfaceDefectViceLineShieldRightPosOffSetNegativeB = new HTuple(Convert.ToDouble(Global.surfaceDefectViceLineShieldRightPosOffSetNegativeB));
            IsUsingBrokenLineDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingBrokenLineDetectNegativeB));
            BrokenLineGrayThreshNegativeB = new HTuple(Convert.ToInt32(Global.brokenLineGrayThreshNegativeB));
            BrokenLineWidthThreshNegativeB = new HTuple(Convert.ToDouble(Global.brokenLineWidthThreshNegativeB));
            BrokenLineHeightThreshNegativeB = new HTuple(Convert.ToDouble(Global.brokenLineHeightThreshNegativeB));
            BrokenLineDetectIndentDepthNegativeB = new HTuple(Convert.ToDouble(Global.brokenLineDetectIndentDepthNegativeB));
            IsUsingStartWeldingDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingStartWeldingDetectNegativeB));
            StartWeldingDistanceMaxThreshNegativeB = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMaxThreshNegativeB));
            StartWeldingDistanceMinThreshNegativeB = new HTuple(Convert.ToDouble(Global.startWeldingDistanceMinThreshNegativeB));
            IsUsingSurfaceColorDiffDetectNegativeB = new HTuple(Convert.ToInt32(Global.isUsingSurfaceColorDiffDetectNegativeB));
            SurfaceColorDiffGrayThreshNegativeB = new HTuple(Convert.ToDouble(Global.surfaceColorDiffGrayThreshNegativeB));
            IsSaveNGImage_NegativeB = new HTuple(Convert.ToInt32(Global.isSaveNGImage_NegativeB));
            IsSaveAllImage_NegativeB = new HTuple(Convert.ToInt32(Global.isSaveAllImage_NegativeB));
            IsSaveNGImageWithRoi_NegativeB = new HTuple(Convert.ToInt32(Global.isSaveNGImageWithRoi_NegativeB));
            IsUsingCamera_NegativeB = new HTuple(Convert.ToInt32(Global.isUsingCamera_NegativeB));
            IsUsingAlarmFunction_NegativeB = new HTuple(Convert.ToInt32(Global.isUsingAlarmFunction_NegativeB));
            MaxAlamClusterCount_NegativeB = new HTuple(Convert.ToInt32(Global.maxAlamClusterCount_NegativeB));

            
        }

        //初始化单串Flag数组(所有元素置为false)
        private void ClearSingleClassFlagArrayPositiveA()
        {
            Array.Clear(SingleClassFilmShiftingFlagArrayPositiveA, 0, SingleClassFilmShiftingFlagArrayPositiveA.Length);
            Array.Clear(SingleClassFilmMissFlagArrayPositiveA, 0, SingleClassFilmMissFlagArrayPositiveA.Length);
            Array.Clear(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA, 0, SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA.Length);
            Array.Clear(SingleClassDistanceNGFlagArrayPositiveA, 0, SingleClassDistanceNGFlagArrayPositiveA.Length);
            Array.Clear(SingleClassEdgeDefectFlagArrayPositiveA, 0, SingleClassEdgeDefectFlagArrayPositiveA.Length);
            Array.Clear(SingleClassSurfaceDefectFlagArrayPositiveA, 0, SingleClassSurfaceDefectFlagArrayPositiveA.Length);
            Array.Clear(SingleClassSurfaceScratchFlagArrayPositiveA, 0, SingleClassSurfaceScratchFlagArrayPositiveA.Length);
            Array.Clear(SingleClassBrokenLineFlagArrayPositiveA, 0, SingleClassBrokenLineFlagArrayPositiveA.Length);
            Array.Clear(SingleClassStargingWeldingNGFlagArrayPositiveA, 0, SingleClassStargingWeldingNGFlagArrayPositiveA.Length);
            Array.Clear(SingleClassEmptyPlateFlagArrayPositiveA, 0, SingleClassEmptyPlateFlagArrayPositiveA.Length);
            Array.Clear(SingleClassAlgorithmExceptionNGFlagArrayPositiveA, 0, SingleClassAlgorithmExceptionNGFlagArrayPositiveA.Length);
            Array.Clear(SingleClassCellMissingNGFlagArrayPositiveA, 0, SingleClassCellMissingNGFlagArrayPositiveA.Length);
            SingleClassSurfaceMeanGrayArrayPositiveA.Clear();

        }
        private void ClearSingleClassFlagArrayPositiveB()
        {
            Array.Clear(SingleClassFilmShiftingFlagArrayPositiveB, 0, SingleClassFilmShiftingFlagArrayPositiveB.Length);
            Array.Clear(SingleClassFilmMissFlagArrayPositiveB, 0, SingleClassFilmMissFlagArrayPositiveB.Length);
            Array.Clear(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB, 0, SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB.Length);
            Array.Clear(SingleClassDistanceNGFlagArrayPositiveB, 0, SingleClassDistanceNGFlagArrayPositiveB.Length);
            Array.Clear(SingleClassEdgeDefectFlagArrayPositiveB, 0, SingleClassEdgeDefectFlagArrayPositiveB.Length);
            Array.Clear(SingleClassSurfaceDefectFlagArrayPositiveB, 0, SingleClassSurfaceDefectFlagArrayPositiveB.Length);
            Array.Clear(SingleClassSurfaceScratchFlagArrayPositiveB, 0, SingleClassSurfaceScratchFlagArrayPositiveB.Length);
            Array.Clear(SingleClassBrokenLineFlagArrayPositiveB, 0, SingleClassBrokenLineFlagArrayPositiveB.Length);
            Array.Clear(SingleClassStargingWeldingNGFlagArrayPositiveB, 0, SingleClassStargingWeldingNGFlagArrayPositiveB.Length);
            Array.Clear(SingleClassEmptyPlateFlagArrayPositiveB, 0, SingleClassEmptyPlateFlagArrayPositiveB.Length);
            Array.Clear(SingleClassAlgorithmExceptionNGFlagArrayPositiveB, 0, SingleClassAlgorithmExceptionNGFlagArrayPositiveB.Length);
            Array.Clear(SingleClassCellMissingNGFlagArrayPositiveB, 0, SingleClassCellMissingNGFlagArrayPositiveB.Length);
            SingleClassSurfaceMeanGrayArrayPositiveB.Clear();

        }

        private void ClearSingleClassFlagArrayNegativeA()
        {
            Array.Clear(SingleClassFilmShiftingFlagArrayNegativeA, 0, SingleClassFilmShiftingFlagArrayNegativeA.Length);
            Array.Clear(SingleClassFilmMissFlagArrayNegativeA, 0, SingleClassFilmMissFlagArrayNegativeA.Length);
            Array.Clear(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA, 0, SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA.Length);
            Array.Clear(SingleClassDistanceNGFlagArrayNegativeA, 0, SingleClassDistanceNGFlagArrayNegativeA.Length);
            Array.Clear(SingleClassEdgeDefectFlagArrayNegativeA, 0, SingleClassEdgeDefectFlagArrayNegativeA.Length);
            Array.Clear(SingleClassSurfaceDefectFlagArrayNegativeA, 0, SingleClassSurfaceDefectFlagArrayNegativeA.Length);
            Array.Clear(SingleClassBrokenLineFlagArrayNegativeA, 0, SingleClassBrokenLineFlagArrayNegativeA.Length);
            Array.Clear(SingleClassStargingWeldingNGFlagArrayNegativeA, 0, SingleClassStargingWeldingNGFlagArrayNegativeA.Length);
            Array.Clear(SingleClassEmptyPlateFlagArrayNegativeA, 0, SingleClassEmptyPlateFlagArrayNegativeA.Length);
            SingleClassSurfaceMeanGrayArrayNegativeA.Clear();
        }
        private void ClearSingleClassFlagArrayNegativeB()
        {
            Array.Clear(SingleClassFilmShiftingFlagArrayNegativeB, 0, SingleClassFilmShiftingFlagArrayNegativeB.Length);
            Array.Clear(SingleClassFilmMissFlagArrayNegativeB, 0, SingleClassFilmMissFlagArrayNegativeB.Length);
            Array.Clear(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB, 0, SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB.Length);
            Array.Clear(SingleClassDistanceNGFlagArrayNegativeB, 0, SingleClassDistanceNGFlagArrayNegativeB.Length);
            Array.Clear(SingleClassEdgeDefectFlagArrayNegativeB, 0, SingleClassEdgeDefectFlagArrayNegativeB.Length);
            Array.Clear(SingleClassSurfaceDefectFlagArrayNegativeB, 0, SingleClassSurfaceDefectFlagArrayNegativeB.Length);
            Array.Clear(SingleClassBrokenLineFlagArrayNegativeB, 0, SingleClassBrokenLineFlagArrayNegativeB.Length);
            Array.Clear(SingleClassStargingWeldingNGFlagArrayNegativeB, 0, SingleClassStargingWeldingNGFlagArrayNegativeB.Length);
            Array.Clear(SingleClassEmptyPlateFlagArrayNegativeB, 0, SingleClassEmptyPlateFlagArrayNegativeB.Length);
            SingleClassSurfaceMeanGrayArrayNegativeB.Clear();
        }

        //统计Flag数组中True出现的次数
        private int StaticTrueCountInFlagArray(bool[] flagArray)
        {
            int sum = 0;
            int length = flagArray.Length;
            for (int i = 0; i < length; ++i)
            {
                if (flagArray[i])
                {
                    ++sum;
                }
            }

            return sum;
        }
        //遍历控件
        private void getControlsByKeyForPositiveA(Control objControl, string key, List<Control> controlList)
        {
            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                if (control.Name.Contains(key))
                {
                    controlList.Add(control);
                }
                if (control.Controls.Count > 0)
                    getControlsByKeyForPositiveA(control, key, controlList);
            }
            sortControlListForPositiveA(controlList, key);
        }

        /// 对控件集合升序排序
        private void sortControlListForPositiveA(List<Control> controlList, string key)
        {
            controlList.Sort(
                    delegate (Control control1, Control control2)
                    {
                        int indexOfcontrol1 = Convert.ToInt32(control1.Name.Substring(key.Length));
                        int indexOfcontrol2 = Convert.ToInt32(control2.Name.Substring(key.Length));
                        return indexOfcontrol1.CompareTo(indexOfcontrol2);
                    }
                );
        }

        private void getControlsByKeyForPositiveB(Control objControl, string key, List<Control> controlList)
        {
            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                if (control.Name.Contains(key))
                {
                    controlList.Add(control);
                }
                if (control.Controls.Count > 0)
                    getControlsByKeyForPositiveB(control, key, controlList);
            }
            sortControlListForPositiveB(controlList, key);
        }

        /// 对控件集合升序排序
        private void sortControlListForPositiveB(List<Control> controlList, string key)
        {
            controlList.Sort(
                    delegate(Control control1, Control control2)
                    {
                        int indexOfcontrol1 = Convert.ToInt32(control1.Name.Substring(key.Length));
                        int indexOfcontrol2 = Convert.ToInt32(control2.Name.Substring(key.Length));
                        return indexOfcontrol1.CompareTo(indexOfcontrol2);
                    }
                );
        }
        public void RefreshTcpIPLabelState()
        {
            if (Global.isUpperLink == "1")
            {
                mfPositiveInterface.lblTcpConnectedStateA.Visible = false;
                mfPositiveInterface.lblTcpConnectedStateB.Visible = false;
                mfNegativeInterface.lblTcpConnectedStateA.Visible = false;
                mfNegativeInterface.lblTcpConnectedStateB.Visible = false;
            }
            else
            {
                mfPositiveInterface.lblTcpConnectedStateA.Visible = true;
                mfPositiveInterface.lblTcpConnectedStateB.Visible = true;
                mfNegativeInterface.lblTcpConnectedStateA.Visible = true;
                mfNegativeInterface.lblTcpConnectedStateB.Visible = true;
            }

        }
        private void getControlsByKeyForNegativeA(Control objControl, string key, List<Control> controlList)
        {
            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                if (control.Name.Contains(key))
                {
                    controlList.Add(control);
                }
                if (control.Controls.Count > 0)
                    getControlsByKeyForNegativeA(control, key, controlList);
            }
            sortControlListForNegativeA(controlList, key);
        }

        /// 对控件集合升序排序
        private void sortControlListForNegativeA(List<Control> controlList, string key)
        {
            controlList.Sort(
                    delegate(Control control1, Control control2)
                    {
                        int indexOfcontrol1 = Convert.ToInt32(control1.Name.Substring(key.Length));
                        int indexOfcontrol2 = Convert.ToInt32(control2.Name.Substring(key.Length));
                        return indexOfcontrol1.CompareTo(indexOfcontrol2);
                    }
                );
        }

        private void getControlsByKeyForNegativeB(Control objControl, string key, List<Control> controlList)
        {
            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                if (control.Name.Contains(key))
                {
                    controlList.Add(control);
                }
                if (control.Controls.Count > 0)
                    getControlsByKeyForNegativeB(control, key, controlList);
            }
            sortControlListForNegativeB(controlList, key);
        }

        private void getAllControlsByKeys()
        {
            getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateA", lblPositiveInterfaceCurrentClusterStateAList);
            getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeA", lblPositiveInterfaceCurrentClusterTypeAList);
            getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateB", lblPositiveInterfaceCurrentClusterStateBList);
            getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeB", lblPositiveInterfaceCurrentClusterTypeBList);
            getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateA", lblNegativeInterfaceCurrentClusterStateAList);
            getControlsByKeyForNegativeB(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateB", lblNegativeInterfaceCurrentClusterStateBList);

        }
        /// 对控件集合升序排序
        private void sortControlListForNegativeB(List<Control> controlList, string key)
        {
            controlList.Sort(
                    delegate(Control control1, Control control2)
                    {
                        int indexOfcontrol1 = Convert.ToInt32(control1.Name.Substring(key.Length));
                        int indexOfcontrol2 = Convert.ToInt32(control2.Name.Substring(key.Length));
                        return indexOfcontrol1.CompareTo(indexOfcontrol2);
                    }
                );
        }


        //刷新主界面A侧正面串内片信息Flag
        private void RefreshCurrentClusterStatePositiveA(bool isOk, int index)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateAList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeAList = new List<Control>();
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateA", lblPositiveInterfaceCurrentClusterStateAList);
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeA", lblPositiveInterfaceCurrentClusterTypeAList);
            if (index == 1)
            {
                this.ClearAllCurrentClusterStatePositiveA(2);
            }
            if (isOk)
            {
                lblPositiveInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Lime;
                lblPositiveInterfaceCurrentClusterTypeAList[index - 1].Text = SingleClassNGTypePositiveA.Trim();
            }
            else
            {
                lblPositiveInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Red;
                lblPositiveInterfaceCurrentClusterTypeAList[index - 1].Text = SingleClassNGTypePositiveA.Trim();
                HistoryNGPositiveA[index - 1] = SingleClassNGTypePositiveA.Trim();
            }
        }
        private void ClearCurrentClusterStatePositiveA()
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateAList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeAList = new List<Control>();
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateA", lblPositiveInterfaceCurrentClusterStateAList);
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeA", lblPositiveInterfaceCurrentClusterTypeAList);

            foreach (Control lblPositiveInterfaceCurrentClusterStateA in lblPositiveInterfaceCurrentClusterStateAList)
            {
                lblPositiveInterfaceCurrentClusterStateA.BackColor = Color.Gray;
            }
            foreach (Control lblPositiveInterfaceCurrentClusterTypeA in lblPositiveInterfaceCurrentClusterTypeAList)
            {
                lblPositiveInterfaceCurrentClusterTypeA.Text = "";
            }
        }
        private void ClearCurrentClusterStatePositiveA(int lastID)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateAList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeAList = new List<Control>();
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateA", lblPositiveInterfaceCurrentClusterStateAList);
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeA", lblPositiveInterfaceCurrentClusterTypeAList);
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA1.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA1.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA2.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA2.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA3.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA3.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA4.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA4.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA5.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA5.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA6.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA6.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA7.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA7.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA8.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA8.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA9.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA9.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA10.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA10.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA11.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA11.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA12.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA12.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeA13.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA13.Text;

            for (int i = 1; i < lastID; ++i)
            {
                ResetSingleStatePositiveA(i, lblPositiveInterfaceCurrentClusterStateAList, lblPositiveInterfaceCurrentClusterTypeAList);
            }
        }
        public void ClearAllCurrentClusterStatePositiveA(int firstID)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateAList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeAList = new List<Control>();
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateA", lblPositiveInterfaceCurrentClusterStateAList);
            //getControlsByKeyForPositiveA(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeA", lblPositiveInterfaceCurrentClusterTypeAList);


            for (int i = firstID; i < 25; ++i)
            {
                ResetSingleStatePositiveA(i, lblPositiveInterfaceCurrentClusterStateAList, lblPositiveInterfaceCurrentClusterTypeAList);
            }
        }
        private void ResetSingleStatePositiveA(int index, List<Control> lblPositiveInterfaceCurrentClusterStateAList, List<Control> lblPositiveInterfaceCurrentClusterTypeAList)
        {
            
            lblPositiveInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Gray;
            lblPositiveInterfaceCurrentClusterTypeAList[index - 1].Text = "";
        }

        //刷新主界面B侧正面串内片信息Flag
        private void RefreshCurrentClusterStatePositiveB(bool isOk, int index)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateBList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeBList = new List<Control>();
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateB", lblPositiveInterfaceCurrentClusterStateBList);
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeB", lblPositiveInterfaceCurrentClusterTypeBList);
            if (index ==1 )
            {
                this.ClearAllCurrentClusterStatePositiveB(2);
            }
            if (isOk)
            {
                lblPositiveInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Lime;
                lblPositiveInterfaceCurrentClusterTypeBList[index - 1].Text = SingleClassNGTypePositiveB.Trim();
            }
            else
            {
                lblPositiveInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Red;
                lblPositiveInterfaceCurrentClusterTypeBList[index - 1].Text = SingleClassNGTypePositiveB.Trim();
                HistoryNGPositiveB[index - 1] = SingleClassNGTypePositiveB.Trim();
            }
        }

        //清空主界面B侧正面串内片信息Flag
        private void ClearCurrentClusterStatePositiveB()
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateBList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeBList = new List<Control>();
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateB", lblPositiveInterfaceCurrentClusterStateBList);
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeB", lblPositiveInterfaceCurrentClusterTypeBList);

            foreach (Control lblPositiveInterfaceCurrentClusterStateB in lblPositiveInterfaceCurrentClusterStateBList)
            {
                lblPositiveInterfaceCurrentClusterStateB.BackColor = Color.Gray;
            }
            foreach (Control lblPositiveInterfaceCurrentClusterTypeB in lblPositiveInterfaceCurrentClusterTypeBList)
            {
                lblPositiveInterfaceCurrentClusterTypeB.Text = "";
            }
        }

        private void ClearCurrentClusterStatePositiveB(int lastID)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateBList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeBList = new List<Control>();
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateB", lblPositiveInterfaceCurrentClusterStateBList);
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeB", lblPositiveInterfaceCurrentClusterTypeBList);
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB1.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB1.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB2.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB2.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB3.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB3.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB4.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB4.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB5.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB5.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB6.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB6.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB7.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB7.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB8.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB8.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB9.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB9.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB10.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB10.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB11.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB11.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB12.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB12.Text;
            mfPositiveInterface.lblPositiveInterfaceLastClusterTypeB13.Text = mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB13.Text;
            for (int i = 1; i < lastID; ++i)
            {
                ResetSingleStatePositiveB(i, lblPositiveInterfaceCurrentClusterStateBList, lblPositiveInterfaceCurrentClusterTypeBList);
            }
        }
        public  void ClearAllCurrentClusterStatePositiveB(int firstID)
        {
            //List<Control> lblPositiveInterfaceCurrentClusterStateBList = new List<Control>();
            //List<Control> lblPositiveInterfaceCurrentClusterTypeBList = new List<Control>();
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterStateB", lblPositiveInterfaceCurrentClusterStateBList);
            //getControlsByKeyForPositiveB(this.pnlMainFormContentView, "lblPositiveInterfaceCurrentClusterTypeB", lblPositiveInterfaceCurrentClusterTypeBList);

            for (int i = firstID; i < 25; ++i)
            {
                ResetSingleStatePositiveB(i, lblPositiveInterfaceCurrentClusterStateBList, lblPositiveInterfaceCurrentClusterTypeBList);
            }
        }
        private void ResetSingleStatePositiveB(int index, List<Control> lblPositiveInterfaceCurrentClusterStateBList, List<Control> lblPositiveInterfaceCurrentClusterTypeBList)
        {
            
            lblPositiveInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Gray;
            lblPositiveInterfaceCurrentClusterTypeBList[index - 1].Text = "";
        }

        //刷新主界面A侧背面串内片信息Flag
        private void RefreshCurrentClusterStateNegativeA(bool isOk, int index)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateAList = new List<Control>();
            //getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateA", lblNegativeInterfaceCurrentClusterStateAList);
            if (index == 1)
            {
                this.ClearAllCurrentClusterStateNegativeA(2);
            }
            if (isOk)
            {
                lblNegativeInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Lime;
            }
            else
            {
                lblNegativeInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Red;
                HistoryNGNegativeA[index - 1] = SingleClassNGTypeNegativeA;
            }
        }

        //清空主界面A侧背面串内片信息Flag
        private void ClearCurrentClusterStateNegativeA()
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateAList = new List<Control>();
            //getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateA", lblNegativeInterfaceCurrentClusterStateAList);

            foreach (Control lblNegativeInterfaceCurrentClusterStateA in lblNegativeInterfaceCurrentClusterStateAList)
            {
                lblNegativeInterfaceCurrentClusterStateA.BackColor = Color.Gray;
            }
        }
        private void ClearCurrentClusterStateNegativeA(int lastID)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateAList = new List<Control>();
            //getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateA", lblNegativeInterfaceCurrentClusterStateAList);

            for (int i = 1; i < lastID; ++i)
            {
                ResetSingleStateNegativeA(i, lblNegativeInterfaceCurrentClusterStateAList);
            }
        }
        //清空主界面A侧背面串内片信息Flag
        public void ClearAllCurrentClusterStateNegativeA(int firstID)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateAList = new List<Control>();
            //getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateA", lblNegativeInterfaceCurrentClusterStateAList);

            for (int i = firstID; i < 25; ++i)
            {
                ResetSingleStateNegativeA(i,  lblNegativeInterfaceCurrentClusterStateAList);
            }
        }
        private void ResetSingleStateNegativeA(int index, List<Control> lblNegativeInterfaceCurrentClusterStateAList)
        {
            
            lblNegativeInterfaceCurrentClusterStateAList[index - 1].BackColor = Color.Gray;
        }

        //刷新主界面B侧背面串内片信息Flag
        private void RefreshCurrentClusterStateNegativeB(bool isOk, int index)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateBList = new List<Control>();
            //getControlsByKeyForNegativeB(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateB", lblNegativeInterfaceCurrentClusterStateBList);
            if (index == 1)
            {
                this.ClearAllCurrentClusterStateNegativeB(2);
            }
            if (isOk)
            {
                lblNegativeInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Lime;
            }
            else
            {
                lblNegativeInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Red;
                HistoryNGNegativeB[index - 1] = SingleClassNGTypeNegativeB;
            }
        }

        //清空主界面B侧背面串内片信息Flag
        private void ClearCurrentClusterStateNegativeB()
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateBList = new List<Control>();
            //getControlsByKeyForNegativeB(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateB", lblNegativeInterfaceCurrentClusterStateBList);

            foreach (Control lblNegativeInterfaceCurrentClusterStateB in lblNegativeInterfaceCurrentClusterStateBList)
            {
                lblNegativeInterfaceCurrentClusterStateB.BackColor = Color.Gray;
            }
        }
        private void ClearCurrentClusterStateNegativeB(int lastID)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateBList = new List<Control>();
            //getControlsByKeyForNegativeB(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateB", lblNegativeInterfaceCurrentClusterStateBList);

            for (int i = 1; i < lastID; ++i)
            {
                ResetSingleStateNegativeB(i, lblNegativeInterfaceCurrentClusterStateBList);
            }
        }
        public void ClearAllCurrentClusterStateNegativeB(int firstID)
        {
            //List<Control> lblNegativeInterfaceCurrentClusterStateBList = new List<Control>();
            //getControlsByKeyForNegativeA(this.pnlMainFormContentView, "lblNegativeInterfaceCurrentClusterStateB", lblNegativeInterfaceCurrentClusterStateBList);

            for (int i = firstID; i < 25; ++i)
            {
                ResetSingleStateNegativeB(i, lblNegativeInterfaceCurrentClusterStateBList);
            }
        }
        private void ResetSingleStateNegativeB(int index, List<Control> lblNegativeInterfaceCurrentClusterStateBList)
        {

            lblNegativeInterfaceCurrentClusterStateBList[index - 1].BackColor = Color.Gray;
        }
        private void timer_AutoConnectTcpWithPlc_PositiveA_Tick(object sender, EventArgs e)
        {
            if (_tcpClientPositiveA == null) return;
            ConnectNumPositiveA++;
            if (ConnectNumPositiveA >= 5)
            {
                //_tcpClientPositiveA.Connected = false;
                Invoke(new UpdateForm_dl(() =>
                {
                    if (Global.isEnglish == "0")
                    {
                        mfPositiveInterface.lblTcpConnectedStateA.Text = "A侧正面通信重连中...";
                    }
                    else
                    {
                        mfPositiveInterface.lblTcpConnectedStateA.Text = "A-Comm Reconnecting...";
                    }

                }));
                _tcpClientPositiveA.Connected = true;
            }
        }

        private void timer_AutoConnectTcpWithPlc_PositiveB_Tick(object sender, EventArgs e)
        {
            if (_tcpClientPositiveB == null) return;
            ConnectNumPositiveB++;
            if (ConnectNumPositiveB >= 5)
            {
                //_tcpClientPositiveB.Connected = false;
                Invoke(new UpdateForm_dl(() =>
                {
                    if (Global.isEnglish == "0")
                    {
                        mfPositiveInterface.lblTcpConnectedStateB.Text = "B侧正面通信重连中...";
                    }
                    else
                    {
                        mfPositiveInterface.lblTcpConnectedStateB.Text = "B-Comm Reconnecting...";
                    }

                }));
                _tcpClientPositiveB.Connected = true;
            }
        }

        private void timer_AutoConnectTcpWithPlc_NegativeA_Tick(object sender, EventArgs e)
        {
            if (_tcpClientNegativeA == null) return;
            ConnectNumNegativeA++;
            if (ConnectNumNegativeA >= 5)
            {
                //_tcpClientNegativeA.Connected = false;
                Invoke(new UpdateForm_dl(() =>
                {
                    if (Global.isEnglish == "0")
                    {
                        mfNegativeInterface.lblTcpConnectedStateA.Text = "A侧背面通信重连中...";
                    }
                    else
                    {
                        mfNegativeInterface.lblTcpConnectedStateA.Text = "A-Comm Reconnecting...";
                    }
                    //mfNegativeInterface.lblTcpConnectedStateA.Text = "A侧背面通信重连中...";
                }));
                _tcpClientNegativeA.Connected = true;
            }
        }

        private void btnMainFormRecipe_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = true;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.Lime;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.White;
            mfParameterInterface.cbxMainLineNum_TextChanged(sender, e);
        }

        private void btnMainFormStatistics_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = true;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.Lime;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.White;


        }

        private void btnMainFormNGStatistics_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = true;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.Lime;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.White;
            if (Global.userType == "1")
            {
                mfNGStatisticsInterface.btnClearStaticsPositiveA.Enabled = true;
                mfNGStatisticsInterface.btnClearStaticsPositiveB.Enabled = true;
                mfNGStatisticsInterface.btnClearStaticsNegativeA.Enabled = true;
                mfNGStatisticsInterface.btnClearStaticsNegativeA.Enabled = true;
            }
            else
            {
                mfNGStatisticsInterface.btnClearStaticsPositiveA.Enabled = false;
                mfNGStatisticsInterface.btnClearStaticsPositiveB.Enabled = false;
                mfNGStatisticsInterface.btnClearStaticsNegativeA.Enabled = false;
                mfNGStatisticsInterface.btnClearStaticsNegativeA.Enabled = false;
            }
        }

        private void btnMainFormUserLogin_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = true;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.Lime;
            btnMainFormUserManager.BackColor = Color.White;
        }

        private void btnMainFormUserManager_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = true;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.Lime;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            //string NGbarcode = "111111111111";
            //SendJson2Mes(singleClassNGPositiveAList, "A", NGbarcode);
           RefreshNGIfo(singleClassNGPositiveAList, singleClassNGNegativeAList, "A");
            //RefreshNGIfo(singleClassNGPositiveBList, singleClassNGNegativeBList, "B");
            //string aa = DateTime.Now.ToString("yyyy_MMdd_HH");
            //string destFileName = "D:\\Program Files\\Config\\033\\班次记录" + aa + ".txt";
            //if (System.IO.File.Exists("D:\\Program Files\\Config\\033\\班次记录.txt"))
            //{
            //    System.IO.File.Move("D:\\Program Files\\Config\\033\\班次记录.txt", destFileName);
            //}
            //int a = 10;
            //int b = a / 0;

            //int[] a = new int[5];
            //for (int i = 0; i < 10; i++)
            //{
            //    a[i] = 1;
            //}
        }

        private void pnlLanguage_Leave(object sender, EventArgs e)
        {
            pnlLanguage.Visible = false;
        }

        private void timer_AutoConnectTcpWithPlc_NegativeB_Tick(object sender, EventArgs e)
        {
            if (_tcpClientNegativeB == null) return;
            ConnectNumNegativeB++;
            if (ConnectNumNegativeB >= 5)
            {
                //_tcpClientNegativeB.Connected = false;
                Invoke(new UpdateForm_dl(() =>
                {
                    if (Global.isEnglish == "0")
                    {
                        mfNegativeInterface.lblTcpConnectedStateB.Text = "B侧背面通信重连中...";
                    }
                    else
                    {
                        mfNegativeInterface.lblTcpConnectedStateB.Text = "B-Comm Reconnecting...";
                    }

                    //mfNegativeInterface.lblTcpConnectedStateB.Text = "B侧背面通信重连中...";
                }));
                _tcpClientNegativeB.Connected = true;
            }
        }

        private void btnMainFormPositiveInterface_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = true;
            mfNegativeInterface.Visible = false;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.Lime;
            btnMainFormNegativeInterface.BackColor = Color.White;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.White;
        }

        private void btnMainFormNegativeInterface_Click(object sender, EventArgs e)
        {
            mfPositiveInterface.Visible = false;
            mfNegativeInterface.Visible = true;
            mfParameterInterface.Visible = false;
            mfStatisticsInterface.Visible = false;
            mfNGStatisticsInterface.Visible = false;
            mfLoginInterface.Visible = false;
            mfUserManagerInterface.Visible = false;
            mfNGInfoInterface.Visible = false;

            btnMainFormPositiveInterface.BackColor = Color.White;
            btnMainFormNegativeInterface.BackColor = Color.Lime;
            btnMainFormRecipe.BackColor = Color.White;
            btnMainFormStatistics.BackColor = Color.White;
            btnMainFormNGStatistics.BackColor = Color.White;
            btnMainFormUserLogin.BackColor = Color.White;
            btnMainFormUserManager.BackColor = Color.White;
        }

        public void CalibrationPositiveA( HTuple rowStart, HTuple columnStart, HTuple rowEnd, HTuple columnEnd)
        {
            try
            {
                HFuncPositiveA.CreatModel(ho_MainImagePositiveA, rowStart, columnStart, rowEnd, columnEnd, defaultCalibrationPathPositiveA);
               
                HFuncPositiveA.ReadModel(out ho_ModelContoursPositiveA, defaultCalibrationPathPositiveA, out ho_ModelIDPositiveA);
                mfPositiveInterface.lblCalibrationPositiveA.Text = defaultCalibrationPathPositiveA;
                CalibrationExistPositiveA = true;
                MessageBox.Show("A标定成功");
                mfPositiveInterface.chkCalibrationPositiveA.Checked = false;
            }   
            catch
            {
                MessageBox.Show("A标定失败,请重新标定");
                CalibrationExistPositiveA = false;

            }
            
        }

        public void CalibrationPositiveB(HTuple rowStart, HTuple columnStart, HTuple rowEnd, HTuple columnEnd)
        {
            try
            {
                HFuncPositiveB.CreatModel(ho_MainImagePositiveB, rowStart, columnStart, rowEnd, columnEnd, defaultCalibrationPathPositiveB);

                HFuncPositiveB.ReadModel(out ho_ModelContoursPositiveB, defaultCalibrationPathPositiveB, out ho_ModelIDPositiveB);
                mfPositiveInterface.lblCalibrationPositiveB.Text = defaultCalibrationPathPositiveB;
                CalibrationExistPositiveB = true;
                MessageBox.Show("B标定成功");
                mfPositiveInterface.chkCalibrationPositiveB.Checked = false;
            }
            catch
            {
                MessageBox.Show("B标定失败,请重新标定");
                CalibrationExistPositiveB = false;

            }

        }

        public void InitWindowHandlers()
        {

            
            HFuncPositiveAList.Add(HFuncPositiveA1);
            HFuncPositiveAList.Add(HFuncPositiveA2);
            HFuncPositiveAList.Add(HFuncPositiveA3);
            WindowsHandlePositiveAList.Add(WindowsHandlePositiveA1);
            WindowsHandlePositiveAList.Add(WindowsHandlePositiveA2);
            WindowsHandlePositiveAList.Add(WindowsHandlePositiveA3);
            
            HFuncPositiveBList.Add(HFuncPositiveB1);
            HFuncPositiveBList.Add(HFuncPositiveB2);
            HFuncPositiveBList.Add(HFuncPositiveB3);
            WindowsHandlePositiveBList.Add(WindowsHandlePositiveB1);
            WindowsHandlePositiveBList.Add(WindowsHandlePositiveB2);
            WindowsHandlePositiveBList.Add(WindowsHandlePositiveB3);
        }
      
        public void SetWindowHandlerSize()
        {
            if (Global.stringType == "常规间距" || Global.stringType == "负间距")
            {
                ImagePartNum = 1;
                mfPositiveInterface.hWindowControl1.Height = mfPositiveInterface.hWindowControl3.Height * 3;
                mfPositiveInterface.hWindowControl3.Visible = false;
                mfPositiveInterface.hWindowControl4.Visible = false;

                mfPositiveInterface.hWindowControl2.Height = mfPositiveInterface.hWindowControl5.Height * 3;
                mfPositiveInterface.hWindowControl5.Visible = false;
                mfPositiveInterface.hWindowControl6.Visible = false;
            }

            if (Global.stringType == "小间距")
            {
                ImagePartNum = 3;
                mfPositiveInterface.hWindowControl1.Height = mfPositiveInterface.hWindowControl3.Height;
                mfPositiveInterface.hWindowControl3.Visible = true;
                mfPositiveInterface.hWindowControl4.Visible = true;

                mfPositiveInterface.hWindowControl2.Height = mfPositiveInterface.hWindowControl5.Height;
                mfPositiveInterface.hWindowControl5.Visible = true;
                mfPositiveInterface.hWindowControl6.Visible = true;
            }
        }
        //A侧正面串检检测
        public void ActionPositiveA()
        {
            //保存全部图片

           
            bool IsNextClassA = false;

            if (Convert.ToBoolean(IsSaveAllImage_PositiveA.I))
            {
                HOperatorSet.GenEmptyObj(out tempOriImagePositiveA);
                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempOriImagePositiveA);
                lock (LockObjectOriImageQueuePositiveA)
                {
                    OriImageQueuePositiveA.Enqueue(tempOriImagePositiveA);

                }
            }
#if Dalsa
            //HTuple Width, Height, UsedThreshold;
            //HObject ImageR, ImageG, ImageB, MainImages;
            //HObject Region, RegionOpening, MainImageRegion;
            //HTuple Row, Column, Phi, Length1, Length2;
            ////DALSA图像补黑去除
            //HOperatorSet.GetImageSize(ho_MainImagePositiveA, out Width, out Height);
            //HOperatorSet.Decompose3(ho_MainImagePositiveA, out ImageR, out ImageG, out ImageB);

            //HOperatorSet.BinaryThreshold(ImageR, out Region, "max_separability", "dark", out UsedThreshold);
            //HOperatorSet.OpeningRectangle1(Region, out RegionOpening, Width * 0.07, 100);

            //HOperatorSet.Difference(ImageR, RegionOpening, out MainImageRegion);
            //HOperatorSet.SmallestRectangle2(MainImageRegion, out Row, out Column, out Phi, out Length1, out Length2);
            //HOperatorSet.GenRectangle2(out MainImageRegion, Row, Column, Phi, Length1, Length2);
            //HOperatorSet.ReduceDomain(ho_MainImagePositiveA, MainImageRegion, out MainImages);
            //HOperatorSet.CropDomain(MainImages, out ho_MainImagePositiveA);

#endif
            //显示主图像
            HOperatorSet.GetImageSize(ho_MainImagePositiveA, out ImageWidthPositiveA, out ImageHeightPositiveA);
            //判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
            //20190226 黄浩
            //增大异常图片行数阈值，降低异常图片保存数量，从10改为500
            if (ImageHeightPositiveA <= 500 )
            {
                HOperatorSet.GenEmptyObj(out tempExceptionImagePositiveA);
                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempExceptionImagePositiveA);
                lock (LockObjectExceptionImageQueuePositiveA)
                {
                    ExceptionImageQueuePositiveA.Enqueue(tempExceptionImagePositiveA);
                }
                return;
            }

           

            HTuple Pic1 = ImageHeightPositiveA.I / 3;
          
            

            List<HObject> ImageListA = new List<HObject>();
            List<HTuple> ImageHeightPositiveAList = new List<HTuple>();
            List<HTuple> ImageWidthPositiveAList = new List<HTuple>();
            for (int i = 0; i < ImagePartNum; i++)
            {
                HTuple TempImageWidthPositiveA = null, TempImageHeightPositiveA = null;
                HObject Rectangle1 = null;
                HObject TempImage = null;
                HObject TempImage1 = null;

                if (i == ImagePartNum - 1)
                {
                    HOperatorSet.GenRectangle1(out Rectangle1, Pic1 * i, 0, ImageHeightPositiveA, ImageWidthPositiveA);
                }
                else
                {
                    HOperatorSet.GenRectangle1(out Rectangle1, Pic1 * i, 0, Pic1 * (i + 1), ImageWidthPositiveA);
                }

                HOperatorSet.ReduceDomain(ho_MainImagePositiveA, Rectangle1, out TempImage1);
                HOperatorSet.CropDomain(TempImage1, out TempImage);
                HOperatorSet.GetImageSize(TempImage, out TempImageWidthPositiveA, out TempImageHeightPositiveA);
                //IntPtr wndPtr = hWindowControl1.HalconID;
                //HWindow hWindowIDOne1 = new HWindow(wndPtr);
                HOperatorSet.SetPart(WindowsHandlePositiveAList[i], 0, 0, TempImageHeightPositiveA, TempImageWidthPositiveA);
                HOperatorSet.SetDraw(WindowsHandlePositiveAList[i], "margin");
                HOperatorSet.DispObj(TempImage,WindowsHandlePositiveAList[i]);
                ImageListA.Add(TempImage);
                ImageWidthPositiveAList.Add(TempImageWidthPositiveA);
                ImageHeightPositiveAList.Add(TempImageHeightPositiveA);
                
            }
            
            for (int i = 0; i < ImagePartNum; i++)
            {
                try
                {
                    HTuple hv_IsBackDetect = 0;
                    //局部变量
                    HObject ho_totalFilmShiftingRegion = null;
                    HObject ho_totalFilmMissRegion = null;
                    HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                    HObject ho_totalEdgeDefectRegion = null;
                    HObject ho_totalSurfaceDefectRegion = null;
                    HObject ho_totalBrokenLineRegion = null;

                    HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                    ho_totalFilmShiftingRegion.Dispose();
                    ho_totalFilmMissRegion.Dispose();
                    ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                    ho_totalEdgeDefectRegion.Dispose();
                    ho_totalSurfaceDefectRegion.Dispose();
                    ho_totalBrokenLineRegion.Dispose();

                    HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                    HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                    HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                    HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                    HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                    HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                    HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                    HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                    HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                    HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                    HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                    HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                    HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                    HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
                    var StartMinute = DateTime.Now.Minute;
                    var StartSecond = DateTime.Now.Second;
                    var StartMillisecond = DateTime.Now.Millisecond;
                    var StartTotalTime = StartMillisecond + StartSecond * 1000;
#region 正面检测
                    if (Global.stringType == "负间距")
                    {
#region TR
                        if (!CalibrationExistPositiveA)
                        {
                            MessageBox.Show("请先复测一张图片开始标定A侧模板");
                            return;
                        }
                        //正面串检
                        
                       
                        
                        HFuncPositiveAList[i].ProcessingTRImage(ImageListA[i], ho_ModelContoursPositiveA, out ho_totalFilmShiftingRegion,
                          out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                          out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                          out ho_totalBrokenLineRegion, ImageWidthPositiveAList[i], ImageHeightPositiveAList[i],
                          WindowsHandlePositiveAList[i], MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                          IsUsingWidthResolutionCalibratePositiveA, WidthResolutionPositiveA, WaferWidthPositiveA,
                          IsUsingHeightResolutionCalibratePositiveA, HeightResolutionPositiveA, ViceLineInterval,
                          IsUsingFilmShiftingDetectPositiveA, TopShieldLengthOfTopRegionPositiveA, BottomShieldLengthOfTopRegionPositiveA,
                          TopShieldLengthOfBottomRegionPositiveA, BottomShieldLengthOfBottomRegionPositiveA,
                          LocationMainLineThreshPositiveA, FilmWidthThreshPositiveA, FilmWidthOffSetPositiveA,
                          FirstDetectPosForTopRegionPositiveA, SecondDetectPosForTopRegionPositiveA,
                          FirstDetectPosForBottomRegionPositiveA, SecondDetectPosForBottomRegionPositiveA,
                          IsUsingFilmMissDetectPositiveA, WeldWidthThreshPositiveA,
                          IsUsingHeadAndTailFilmShiftingDetectPositiveA, HeadAndTailFilmWidthThreshPositiveA,
                          HeadAndTailFilmShieldLengthPositiveA, HeadAndTailFilmDetectRangePositiveA,
                          IsUsingWaferEdgeCalibrationPositiveA, LocationWaferEdgeThreshPositiveA, WaferEdgeCalibrationRegionDilationPixelPositiveA,
                          IsUsingDistanceDetectPositiveA, MinimumDistanceThreshPositiveA, MaxDistanceThreshPositiveA,
                          ClassDistanceThreshPositiveA, IsUsingEdgeDefectDetectPositiveA, EdgeBigDefectWidthThreshPositiveA,
                          EdgeBigDefectHeightThreshPositiveA, EdgeSmallDefectDetectDepthPositiveA, EdgeSmallDefectGrayThreshPositiveA,
                          EdgeSmallDefectWidthThreshPositiveA, EdgeSmallDefectHeightThreshPositiveA,
                          EdgeSmallDefectGrayMeanThreshPositiveA, EdgeSmallDefectGrayDeviationThreshPositiveA,
                          CornerDefectAreaRatioThreshPositiveA, IsUsingSurfaceDefectDetectPositiveA,
                          SurfaceDefectGrayThreshPositiveA, SurfaceDefectWidthThreshPositiveA, SurfaceDefectHeightThreshPositiveA,
                          SurfaceDefectDetectIndentDepthPositiveA, SurfaceDefectViceLineShieldWidthPositiveA,
                          SurfaceDefectViceLineShieldLeftPosOffSetPositiveA, SurfaceDefectViceLineShieldRightPosOffSetPositiveA,
                          SurfaceScratchGrayThreshPositiveA, SurfaceScratchWidthThreshPositiveA, SurfaceScratchHeightThreshPositiveA,
                          IsUsingStartWeldingDetectPositiveA, StartWeldingDistanceMaxThreshPositiveA,
                          StartWeldingDistanceMinThreshPositiveA, IsUsingBrokenLineDetectPositiveA,
                          BrokenLineGrayThreshPositiveA, BrokenLineWidthThreshPositiveA, BrokenLineHeightThreshPositiveA,
                          BrokenLineDetectIndentDepthPositiveA, IsUsingSurfaceColorDiffDetectPositiveA,
                          IsEnglish, WeldShieldLengthPositiveA, ho_ModelIDPositiveA, MainLineDistance, out hv_IsException,
                          out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                          out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                          out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                          out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                          out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                          out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                          out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                          out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                          out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                          out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                          out hv_IsStartWeldingNGOfBottomWafer,
                          out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);
                          IsNextClassA = hv_IsNextClass;
#endregion
                    }
                    else
                    {
#region  有片间距
                        HFuncPositiveAList[i].ProcessingImage(ImageListA[i], out ho_totalFilmShiftingRegion,
                          out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                          out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                          out ho_totalBrokenLineRegion, ImageWidthPositiveAList[i], ImageHeightPositiveAList[i],
                          WindowsHandlePositiveAList[i], MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                          IsUsingWidthResolutionCalibratePositiveA, WidthResolutionPositiveA, WaferWidthPositiveA,
                          IsUsingHeightResolutionCalibratePositiveA, HeightResolutionPositiveA, ViceLineInterval,
                          IsUsingFilmShiftingDetectPositiveA, TopShieldLengthOfTopRegionPositiveA, BottomShieldLengthOfTopRegionPositiveA,
                          TopShieldLengthOfBottomRegionPositiveA, BottomShieldLengthOfBottomRegionPositiveA,
                          LocationMainLineThreshPositiveA, FilmWidthThreshPositiveA, FilmWidthOffSetPositiveA,
                          FirstDetectPosForTopRegionPositiveA, SecondDetectPosForTopRegionPositiveA,
                          FirstDetectPosForBottomRegionPositiveA, SecondDetectPosForBottomRegionPositiveA,
                          IsUsingFilmMissDetectPositiveA, WeldWidthThreshPositiveA,
                          IsUsingHeadAndTailFilmShiftingDetectPositiveA, HeadAndTailFilmWidthThreshPositiveA,
                          HeadAndTailFilmShieldLengthPositiveA, HeadAndTailFilmDetectRangePositiveA,
                          IsUsingWaferEdgeCalibrationPositiveA, LocationWaferEdgeThreshPositiveA, WaferEdgeCalibrationRegionDilationPixelPositiveA,
                          IsUsingDistanceDetectPositiveA, MinimumDistanceThreshPositiveA, MaxDistanceThreshPositiveA,
                          ClassDistanceThreshPositiveA, IsUsingEdgeDefectDetectPositiveA, EdgeBigDefectWidthThreshPositiveA,
                          EdgeBigDefectHeightThreshPositiveA, EdgeSmallDefectDetectDepthPositiveA, EdgeSmallDefectGrayThreshPositiveA,
                          EdgeSmallDefectWidthThreshPositiveA, EdgeSmallDefectHeightThreshPositiveA,
                          EdgeSmallDefectGrayMeanThreshPositiveA, EdgeSmallDefectGrayDeviationThreshPositiveA,
                          CornerDefectAreaRatioThreshPositiveA, IsUsingSurfaceDefectDetectPositiveA,
                          SurfaceDefectGrayThreshPositiveA, SurfaceDefectWidthThreshPositiveA, SurfaceDefectHeightThreshPositiveA,
                          SurfaceDefectDetectIndentDepthPositiveA, SurfaceDefectViceLineShieldWidthPositiveA,
                          SurfaceDefectViceLineShieldLeftPosOffSetPositiveA, SurfaceDefectViceLineShieldRightPosOffSetPositiveA,
                          SurfaceScratchGrayThreshPositiveA, SurfaceScratchWidthThreshPositiveA, SurfaceScratchHeightThreshPositiveA,
                          IsUsingStartWeldingDetectPositiveA, StartWeldingDistanceMaxThreshPositiveA,
                          StartWeldingDistanceMinThreshPositiveA, IsUsingBrokenLineDetectPositiveA,
                          BrokenLineGrayThreshPositiveA, BrokenLineWidthThreshPositiveA, BrokenLineHeightThreshPositiveA,
                          BrokenLineDetectIndentDepthPositiveA, IsUsingSurfaceColorDiffDetectPositiveA,
                          IsEnglish, WeldShieldLengthPositiveA, GrayOpenHeight, MainLineDistance, out hv_IsException,
                          out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                          out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                          out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                          out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                          out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                          out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                          out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                          out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                          out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                          out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                          out hv_IsStartWeldingNGOfBottomWafer,
                          out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);
                          IsNextClassA = hv_IsNextClass;
#endregion
                    }
                    var EndSecond = DateTime.Now.Second;
                    var EndMillisecond = DateTime.Now.Millisecond;
                    var EndTotalTime = EndMillisecond + EndSecond * 1000;
                    var SubTime = EndTotalTime - StartTotalTime;
                    //Global.SaveLog("D:\\Program Files\\Config\\033\\A时间.txt",
                    //                      DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") +"---" +Convert.ToString( SubTime));
                    //MBB头尾膜偏信息整理
                    //if (Convert.ToInt32(Global.mainLineNum) >= 9)
                    //{
                    //    int WaferCount = hv_IsTopWaferNG.Length;
                    //    long[] TopWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] BottomWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] HeadOfWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] TailOfWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    if (Convert.ToBoolean(hv_IsTopWaferExist.I) && hv_IsBottomWaferNG.Length != 0 && hv_IsTailOfWaferNG.Length != 0)
                    //    {

                    //        BottomWaferNG = hv_IsBottomWaferNG.LArr;
                    //        TailOfWaferNG = hv_IsTailOfWaferNG.LArr;
                    //    }
                    //    else
                    //    {
                    //        for (int i = 0; i < Convert.ToInt32(Global.mainLineNum) - 1; i++)
                    //        {
                    //            BottomWaferNG[i] = 0;
                    //            TailOfWaferNG[i] = 0;
                    //        }
                    //    }
                    //    if (Convert.ToBoolean(hv_IsBottomWaferExist.I) && hv_IsTopWaferNG.Length != 0 && hv_IsHeadOfWaferNG != 0)
                    //    {

                    //        TopWaferNG = hv_IsTopWaferNG.LArr;

                    //        HeadOfWaferNG = hv_IsHeadOfWaferNG.LArr;
                    //    }
                    //    else
                    //    {
                    //        for (int i = 0; i < Convert.ToInt32(Global.mainLineNum) - 1; i++)
                    //        {
                    //            TopWaferNG[i] = 0;
                    //            HeadOfWaferNG[i] = 0;
                    //        }
                    //    }
                    //    //MBBFilmShiftingInfStatistics(TopWaferNG, BottomWaferNG, HeadOfWaferNG, TailOfWaferNG, Convert.ToInt32(Global.waferCountPerClass), "A");
                    //}

                    ////显示结果
                    //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                    //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                    //  WindowsHandlePositiveA, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                    //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                    //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                    //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                    //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                    //只有在运行状态时才需要统计串信息  bl_IsRunPositive
                    if (bl_IsRunPositive)
                    {
                        //清空NG类型变量
                        SingleClassFilmShiftingTypePositiveA = "";
                        SingleClassFilmMissTypePositiveA = "";
                        SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "";
                        SingleClassDistanceNGTypePositiveA = "";
                        SingleClassEdgeDefectTypePositiveA = "";
                        SingleClassSurfaceDefectTypePositiveA = "";
                        SingleClassSurfaceScratchTypePositiveA = "";
                        SingleClassBrokenLineTypePositiveA = "";
                        SingleClassStargingWeldingNGTypePositiveA = "";
                        SingleClassSurfaceMeanGrayNGTypePositiveA = "";
#region 串信息统计
                        //平台空的情况
                        if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (IsCellLackA)
                            {
                                if (WaferIDPositiveA <= WaferCountPerClass)
                                    ++WaferIDPositiveA;
                                if(Global.isUpperLink=="1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                    }
                                } 
                                else
                                {
                                    tellPlcCurrentStatePositiveA = "2";
                                }
                                
                                
                                if (Global.isEnglish == "0")
                                {
                                    SingleClassDistanceNGTypePositiveA = "少片";
                                }
                                else
                                {
                                    SingleClassDistanceNGTypePositiveA = "Cell Lack";
                                }
                                //SingleClassCellMissingNGFlagArrayPositiveA[WaferIDPositiveA - 2] = true;
                                SingleClassNGTypePositiveA = SingleClassFilmShiftingTypePositiveA + " " + SingleClassFilmMissTypePositiveA + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveA + " " + SingleClassDistanceNGTypePositiveA + " " + SingleClassEdgeDefectTypePositiveA + " " + SingleClassSurfaceDefectTypePositiveA + " " + SingleClassSurfaceScratchTypePositiveA + " " + SingleClassBrokenLineTypePositiveA + " " + SingleClassStargingWeldingNGTypePositiveA + " " + SingleClassSurfaceMeanGrayNGTypePositiveA;
                                this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);
                                //HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveA);
                                //HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempCellMissImagePositiveA);
                                //lock (LockObjectCellMissImageQueuePositiveA)
                                //{
                                //    saveImageWaferIDPositiveA = WaferIDPositiveA;
                                //    CellMissImageQueuePositiveA.Enqueue(tempCellMissImagePositiveA);
                                //}
                                //HistoryNGPositiveAList.Add(HistoryNGPositiveA);
                                //Thread.Sleep(100);



                                //等待存图线程

                                //Thread.Sleep(200);
                                //singleClassNGPositiveA.Id = idOfPositiveA;
                                //singleClassNGPositiveA.Info = HistoryNGPositiveA;
                                
                                //string singleClassNGPositiveAStr = null;
                                //foreach (string str in singleClassNGPositiveA.Info)
                                //{
                                //    if (str != null)
                                //    {
                                //        singleClassNGPositiveAStr = str;
                                //        break;
                                //    }
                                //}
                                //if (singleClassNGPositiveAStr != null)
                                //{
                                //    idOfPositiveA++;
                                //    singleClassNGPositiveA.UpdateDone = true;
                                //    singleClassNGPositiveAList.Add(singleClassNGPositiveA);
                                //}
                                singleClassNGPositiveA = new SingleClassNG();


#region 如果上片少片下片是空平台 ，认为是下一串开始了 ，整理串信息
                                //TotalAlgorithmExceptionCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassAlgorithmExceptionNGFlagArrayPositiveA);
                                //TotalCellMissingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassCellMissingNGFlagArrayPositiveA);
                                //TotalFilmShiftingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayPositiveA);
                                //TotalFilmMissCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayPositiveA);
                                //TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA);
                                //TotalDistanceNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayPositiveA);
                                //TotalEdgeDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayPositiveA);
                                //TotalSurfaceDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayPositiveA) + StaticTrueCountInFlagArray(SingleClassSurfaceScratchFlagArrayPositiveA);
                                //TotalBrokenLineCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayPositiveA);
                                //TotalStartingWeldingNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayPositiveA);
                                //TotalEmptyPlateCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayPositiveA);

                                //++TotalCountPositiveA;

                                //if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 0
                                //    || (SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA
                                //    )
                                //{

                                //    ++NGTotalCountPositiveA;
                                //    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 1)
                                //    {
                                //        ++MajorFailureCountPositiveA;
                                //    }
                                //    //暂时先用背面片间距计数代替正面异常计数
                                //    if (TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalDistanceNGCountNegativeA;
                                //    }
                                //    //用背面头尾计数代替正面少片计数
                                //    if (TotalCellMissingCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                //    }
                                //    if (TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingCountPositiveA;
                                //    }
                                //    if (TotalFilmMissCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmMissCountPositiveA;
                                //    }
                                //    if (TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountPositiveA;
                                //    }
                                //    if (TotalDistanceNGCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalDistanceNGCountPositiveA;
                                //    }
                                //    if (TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalEdgeDefectCountPositiveA;
                                //    }
                                //    if (TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalSurfaceDefectCountPositiveA;
                                //    }
                                //    if (TotalBrokenLineCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalBrokenLineCountPositiveA;
                                //    }
                                //    if (TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalStartingWeldingNGCountPositiveA;
                                //    }
                                //    if (TotalEmptyPlateCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalEmptyPlateCountPositiveA;
                                //    }
                                //    //if ((SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA)
                                //    //{
                                //    //    ++TotalSurfaceColorDiffCountPositiveA;
                                //    //}
                                //}


                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveA(WaferIDPositiveA - 1);
                                //初始化单串硅片编号
                                WaferIDPositiveA = 1;
                                isTopAndBottomNGPositiveA = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveA();
#endregion
                                IsCellLackA = false;
                                
                                //RefreshNGIfo(0, HistoryNGAList);
                                HistoryNGPositiveA = new string[WaferCountPerClass + 3];
                                
                            }
                            else
                            {
                                //未检测到首串首片,平台空
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "0";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = ResultEmptyPositiveA;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveA = "8";
                                }
                                
                                IsCellLackA = false;
                            }

                        }
                        //下半片不存在（少片）
                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (WaferIDPositiveA <= WaferCountPerClass)
                                ++WaferIDPositiveA;

                            //判断上半片是否NG
                            SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                            SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                            SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                            SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                            SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                            SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                            SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                            //将上半片平均灰度值加入数组
                            SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfTopWafer);


                            //给PLC发送结果
                            if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2]
                                || SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2])
                            //|| (SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA)

                            {

                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveA = "2";
                                }
                                //整理Ng类型文档
                                if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmShiftingTypePositiveA = "膜偏|露白";
                                    }
                                    else
                                    {
                                        SingleClassFilmShiftingTypePositiveA = "Film Offset | Ribbon Offset";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmShiftingTypePositiveA = "";
                                }

                                if (SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmMissTypePositiveA = "膜短|膜失";
                                    }
                                    else
                                    {
                                        SingleClassFilmMissTypePositiveA = "Film Short | Film Missing";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmMissTypePositiveA = "";
                                }

                                if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "头尾膜偏|露白";
                                    }
                                    else
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "H/T Film Offset | Ribbon Offset";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "";
                                }



                                if (SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassEdgeDefectTypePositiveA = "边角破损";
                                    }
                                    else
                                    {
                                        SingleClassEdgeDefectTypePositiveA = "Edge/Corner Damage";
                                    }

                                }
                                else
                                {
                                    SingleClassEdgeDefectTypePositiveA = "";
                                }

                                if (SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassSurfaceDefectTypePositiveA = "表面缺陷";
                                    }
                                    else
                                    {
                                        SingleClassSurfaceDefectTypePositiveA = "Surface Defects";
                                    }

                                }
                                else
                                {
                                    SingleClassSurfaceDefectTypePositiveA = "";
                                }
                                if (SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassSurfaceScratchTypePositiveA = "划痕";
                                    }
                                    else
                                    {
                                        SingleClassSurfaceScratchTypePositiveA = "Surface Scratchs";
                                    }

                                }
                                else
                                {
                                    SingleClassSurfaceScratchTypePositiveA = "";
                                }
                                if (SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassBrokenLineTypePositiveA = "断栅";
                                    }
                                    else
                                    {
                                        SingleClassBrokenLineTypePositiveA = "Broken Finger";
                                    }

                                }
                                else
                                {
                                    SingleClassBrokenLineTypePositiveA = "";
                                }

                                if (SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassStargingWeldingNGTypePositiveA = "起焊点异常";
                                    }
                                    else
                                    {
                                        SingleClassStargingWeldingNGTypePositiveA = "Cell To Rib Head Dist Error";
                                    }

                                }
                                else
                                {
                                    SingleClassStargingWeldingNGTypePositiveA = "";
                                }

                                SingleClassSurfaceMeanGrayNGTypePositiveA = "";
                                //刷新显示

                                SingleClassNGTypePositiveA= SingleClassFilmShiftingTypePositiveA + " " + SingleClassFilmMissTypePositiveA + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveA + " " + SingleClassDistanceNGTypePositiveA + " " + SingleClassEdgeDefectTypePositiveA + " " + SingleClassSurfaceDefectTypePositiveA + " " + SingleClassSurfaceScratchTypePositiveA + " " + SingleClassBrokenLineTypePositiveA + " " + SingleClassStargingWeldingNGTypePositiveA + " " + SingleClassSurfaceMeanGrayNGTypePositiveA;

                                this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);

                                singleClassNGPositiveA.Id = idOfPositiveA;
                                singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                saveImageWaferIDPositiveA = WaferIDPositiveA;
                            }
                            else
                            {
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "0";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = ResultOKPositiveA;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveA = "1";
                                }
                                
                                SingleClassNGTypePositiveA = "";
                                this.RefreshCurrentClusterStatePositiveA(true, WaferIDPositiveA - 1);
                                //保存OK图片

                                //if (Convert.ToBoolean(IsSaveAllImage_PositiveA.I))
                                //{
                                //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveA);
                                //    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempOriImagePositiveA);
                                //    lock (LockObjectOriImageQueuePositiveA)
                                //    {
                                //        OriImageQueuePositiveA.Enqueue(tempOriImagePositiveA);

                                //    }
                                //}
                            }

                            IsCellLackA = true;
                            SingleClassCellMissingNGFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                            if (WaferIDPositiveA == WaferCountPerClass+1)
                            {
                                #region 上串检测数据统计汇总
                                //TotalAlgorithmExceptionCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassAlgorithmExceptionNGFlagArrayPositiveA);
                                //TotalCellMissingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassCellMissingNGFlagArrayPositiveA);
                                //TotalFilmShiftingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayPositiveA);
                                //TotalFilmMissCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayPositiveA);
                                //TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA);
                                //TotalDistanceNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayPositiveA);
                                //TotalEdgeDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayPositiveA);
                                //TotalSurfaceDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayPositiveA) + StaticTrueCountInFlagArray(SingleClassSurfaceScratchFlagArrayPositiveA);
                                //TotalBrokenLineCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayPositiveA);
                                //TotalStartingWeldingNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayPositiveA);
                                //TotalEmptyPlateCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayPositiveA);

                                //++TotalCountPositiveA;

                                //if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 0
                                //    || (SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA
                                //    )
                                //{
                                //    HistoryNGPositiveAList.Add(HistoryNGPositiveA);
                                //    //AddNGHistoryRow("A", HistoryNGPositiveA);
                                //    //RefreshNGIfo(0, HistoryNGAList);
                                //    HistoryNGPositiveA = new string[WaferCountPerClass + 3];
                                //    ++NGTotalCountPositiveA;
                                //    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 1)
                                //    {
                                //        ++MajorFailureCountPositiveA;
                                //    }
                                //    //暂时先用背面片间距计数代替正面异常计数
                                //    if (TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalDistanceNGCountNegativeA;
                                //    }
                                //    //用背面头尾计数代替正面少片计数
                                //    if (TotalCellMissingCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                //    }
                                //    if (TotalFilmShiftingCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingCountPositiveA;
                                //    }
                                //    if (TotalFilmMissCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmMissCountPositiveA;
                                //    }
                                //    if (TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountPositiveA;
                                //    }
                                //    if (TotalDistanceNGCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalDistanceNGCountPositiveA;
                                //    }
                                //    if (TotalEdgeDefectCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalEdgeDefectCountPositiveA;
                                //    }
                                //    if (TotalSurfaceDefectCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalSurfaceDefectCountPositiveA;
                                //    }
                                //    if (TotalBrokenLineCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalBrokenLineCountPositiveA;
                                //    }
                                //    if (TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalStartingWeldingNGCountPositiveA;
                                //    }
                                //    if (TotalEmptyPlateCountPerClassPositiveA > 0)
                                //    {
                                //        ++TotalEmptyPlateCountPositiveA;
                                //    }
                                //    if ((SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA)
                                //    {
                                //        ++TotalSurfaceColorDiffCountPositiveA;
                                //    }
                                //}
                                //idOfPositiveA++;
                                //WaferIDPositiveA = 1;
                                #endregion
                            }
                            //HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveA);
                            //HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempCellMissImagePositiveA);
                            //lock (LockObjectCellMissImageQueuePositiveA)
                            //{
                            //    CellMissImageQueuePositiveA.Enqueue(tempCellMissImagePositiveA);
                            //}
                        }
                        //上半片无，下半片有，认为是首串首片
                        else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (IsCellLackA)
                            {
                                if (WaferIDPositiveA <= WaferCountPerClass)
                                    ++WaferIDPositiveA;
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveA = "2";
                                }
                                if (Global.isEnglish == "0")
                                {
                                    SingleClassDistanceNGTypePositiveA = "少片";
                                }
                                else
                                {
                                    SingleClassDistanceNGTypePositiveA = "Cell Lack";
                                }
                                SingleClassCellMissingNGFlagArrayPositiveA[WaferIDPositiveA - 2] = true;
                                SingleClassNGTypePositiveA = SingleClassFilmShiftingTypePositiveA + " " + SingleClassFilmMissTypePositiveA + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveA + " " + SingleClassDistanceNGTypePositiveA + " " + SingleClassEdgeDefectTypePositiveA + " " + SingleClassSurfaceDefectTypePositiveA + " " + SingleClassSurfaceScratchTypePositiveA + " " + SingleClassBrokenLineTypePositiveA + " " + SingleClassStargingWeldingNGTypePositiveA + " " + SingleClassSurfaceMeanGrayNGTypePositiveA;
                                this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);

                                singleClassNGPositiveA.Id = idOfPositiveA;
                                singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                saveImageWaferIDPositiveA = WaferIDPositiveA;

                                HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempCellMissImagePositiveA);
                                lock (LockObjectCellMissImageQueuePositiveA)
                                {
                                    CellMissImageQueuePositiveA.Enqueue(tempCellMissImagePositiveA);
                                }
                                IsCellLackA = false;
                            }
                            else
                            {
                                IsCellLackA = false;
                                //初始化单串硅片编号
                                WaferIDPositiveA = 1;
                                isTopAndBottomNGPositiveA = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveA();
                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveA();

                                //根据数据结果进行相应赋值
                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                {
                                    SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                {
                                    SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                {
                                    SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                {
                                    SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                {
                                    SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                {
                                    SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                //将下半片平均灰度加入数组
                                SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfBottomWafer);
                            }
                        }
                        //上下半片都存在，认为不是首串首片，也不是末串末片
                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            //电池片序号自增
                            if (WaferIDPositiveA <= WaferCountPerClass)
                                ++WaferIDPositiveA;
                            
#region 下一串
                            if (Convert.ToBoolean(hv_IsNextClass.I))
                            {

                                //抵达串间区域
                                //判断是否异常
                                if (Convert.ToBoolean(hv_IsException.I))
                                {
                                    if (Global.isUpperLink == "1")
                                    {
                                        if (Global.stringType == "小间距" && MainLineNum == 10)
                                        {
                                            tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                        }
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = "2";
                                    }

                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassNGTypePositiveA = "算法异常";
                                    }
                                    else
                                    {
                                        SingleClassNGTypePositiveA = "Algorithm Exception";
                                    }
                                    this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);
                                    //if (framePositiveA != null)
                                    //{


                                    //    string length = ImageRealTime + Convert.ToString(framePositiveA.Height);
                                    //    string path = "D:/源数据A/" + length + ".bin";
                                    //    byte[] bt = framePositiveA.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveA = null;
                                    //}
                                    singleClassNGPositiveA.Id = idOfPositiveA;
                                    singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                    saveImageWaferIDPositiveA = WaferIDPositiveA;

                                    HOperatorSet.GenEmptyObj(out tempAlgorithmExceptionImagePositiveA);
                                    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempAlgorithmExceptionImagePositiveA);
                                    lock (LockObjectAlgorithmExceptionImageQueuePositiveA)
                                    {
                                        AlgorithmExceptionImageQueuePositiveA.Enqueue(tempAlgorithmExceptionImagePositiveA);
                                    }
                                    SingleClassAlgorithmExceptionNGFlagArrayPositiveA[WaferIDPositiveA - 2] = true;
                                    Global.SaveLog("D:\\Program Files\\Config\\033\\算法异常A.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + hv_ExceptionInfo);

                                }
                                //判断当前串电池片数是否达到最低限度，即3片
                                else if (WaferIDPositiveA >= 3)
                                {
                                    //上串尾片数据处理
                                    SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                    SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                    SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                    SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                    SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                    SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                    //将上半片平均灰度值加入数组
                                    SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfTopWafer);


                                    //给PLC发送结果
                                    if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        //|| SingleClassDistanceNGFlagArrayPositiveA[WaferIDPositiveA - 3]
                                        || SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2])
                                    //|| (SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA)

                                    {

                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = "2";
                                        }
                                        //整理Ng类型文档
                                        if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingTypePositiveA = "膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingTypePositiveA = "Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingTypePositiveA = "";
                                        }

                                        if (SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmMissTypePositiveA = "膜短|膜失";
                                            }
                                            else
                                            {
                                                SingleClassFilmMissTypePositiveA = "Film Short | Film Missing";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmMissTypePositiveA = "";
                                        }

                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "头尾膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "H/T Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "";
                                        }

                                        //if (SingleClassDistanceNGFlagArrayPositiveA[WaferIDPositiveA - 3])
                                        //{
                                        //    if (Global.isEnglish == "0")
                                        //    {
                                        //        SingleClassDistanceNGTypePositiveA = "片间距异常";
                                        //    }
                                        //    else
                                        //    {
                                        //        SingleClassDistanceNGTypePositiveA = "Cell Spacing Error";
                                        //    }

                                        //}
                                        //else
                                        //{
                                        //    SingleClassDistanceNGTypePositiveA = "";
                                        //}

                                        if (SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassEdgeDefectTypePositiveA = "边角破损";
                                            }
                                            else
                                            {
                                                SingleClassEdgeDefectTypePositiveA = "Edge/Corner Damage";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassEdgeDefectTypePositiveA = "";
                                        }

                                        if (SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceDefectTypePositiveA = "表面缺陷";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceDefectTypePositiveA = "Surface Defects";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceDefectTypePositiveA = "";
                                        }
                                        if (SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceScratchTypePositiveA = "划痕";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceScratchTypePositiveA = "Surface Scratchs";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceScratchTypePositiveA = "";
                                        }
                                        if (SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassBrokenLineTypePositiveA = "断栅";
                                            }
                                            else
                                            {
                                                SingleClassBrokenLineTypePositiveA = "Broken Finger";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassBrokenLineTypePositiveA = "";
                                        }

                                        if (SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassStargingWeldingNGTypePositiveA = "起焊点异常";
                                            }
                                            else
                                            {
                                                SingleClassStargingWeldingNGTypePositiveA = "Cell To Rib Head Dist Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassStargingWeldingNGTypePositiveA = "";
                                        }

                                        SingleClassSurfaceMeanGrayNGTypePositiveA = "";
                                        //刷新显示

                                        SingleClassNGTypePositiveA = SingleClassFilmShiftingTypePositiveA + " " + SingleClassFilmMissTypePositiveA + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveA + " " + SingleClassDistanceNGTypePositiveA + " " + SingleClassEdgeDefectTypePositiveA + " " + SingleClassSurfaceDefectTypePositiveA + " " + SingleClassSurfaceScratchTypePositiveA + " " + SingleClassBrokenLineTypePositiveA + " " + SingleClassStargingWeldingNGTypePositiveA + " " + SingleClassSurfaceMeanGrayNGTypePositiveA;
                                        this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);

                                        //HistoryNGPositiveAList.Add(HistoryNGPositiveA);
                                        //AddNGHistoryRow("A", HistoryNGPositiveA);
                                        ////RefreshNGIfo(0, HistoryNGAList);
                                        //HistoryNGPositiveA = new string[12];

                                        singleClassNGPositiveA.Id = idOfPositiveA;
                                        singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                        saveImageWaferIDPositiveA = WaferIDPositiveA;
                                        tempSaveImageWaferIDPositiveA = WaferIDPositiveA;
                                    }
                                    else
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "0";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveA = ResultOKPositiveA;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = "1";
                                        }
                                        
                                        SingleClassNGTypePositiveA = "";
                                        this.RefreshCurrentClusterStatePositiveA(true, WaferIDPositiveA - 1);
                                        //保存OK图片

                                        //if (Convert.ToBoolean(IsSaveAllImage_PositiveA.I))
                                        //{
                                        //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveA);
                                        //    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempOriImagePositiveA);
                                        //    lock (LockObjectOriImageQueuePositiveA)
                                        //    {
                                        //        OriImageQueuePositiveA.Enqueue(tempOriImagePositiveA);

                                        //    }
                                        //}

                                    }

                                    //上串检测数据统计汇总
                                    TotalAlgorithmExceptionCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassAlgorithmExceptionNGFlagArrayPositiveA);
                                    TotalCellMissingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassCellMissingNGFlagArrayPositiveA);
                                    TotalFilmShiftingCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayPositiveA);
                                    TotalFilmMissCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayPositiveA);
                                    TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA);
                                    TotalDistanceNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayPositiveA);
                                    TotalEdgeDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayPositiveA);
                                    TotalSurfaceDefectCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayPositiveA) + StaticTrueCountInFlagArray(SingleClassSurfaceScratchFlagArrayPositiveA);
                                    TotalBrokenLineCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayPositiveA);
                                    TotalStartingWeldingNGCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayPositiveA);
                                    TotalEmptyPlateCountPerClassPositiveA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayPositiveA);

                                    ++TotalCountPositiveA;

                                    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 0
                                        || (SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA
                                        )
                                    {
                                        HistoryNGPositiveAList.Add(HistoryNGPositiveA);
                                        //AddNGHistoryRow("A", HistoryNGPositiveA);
                                        //RefreshNGIfo(0, HistoryNGAList);
                                        HistoryNGPositiveA = new string[WaferCountPerClass + 3];
                                        ++NGTotalCountPositiveA;
                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalFilmMissCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalCellMissingCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveA > 0)) > 1)
                                        {
                                            ++MajorFailureCountPositiveA;
                                        }
                                        //暂时先用背面片间距计数代替正面异常计数
                                        if (TotalAlgorithmExceptionCountPerClassPositiveA > 0)
                                        {
                                            ++TotalDistanceNGCountNegativeA;
                                        }
                                        //用背面头尾计数代替正面少片计数
                                        if (TotalCellMissingCountPerClassPositiveA > 0)
                                        {
                                            ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                        }
                                        if (TotalFilmShiftingCountPerClassPositiveA > 0)
                                        {
                                            ++TotalFilmShiftingCountPositiveA;
                                        }
                                        if (TotalFilmMissCountPerClassPositiveA > 0)
                                        {
                                            ++TotalFilmMissCountPositiveA;
                                        }
                                        if (TotalFilmShiftingOfHeadAndTailCountPerClassPositiveA > 0)
                                        {
                                            ++TotalFilmShiftingOfHeadAndTailCountPositiveA;
                                        }
                                        if (TotalDistanceNGCountPerClassPositiveA > 0)
                                        {
                                            ++TotalDistanceNGCountPositiveA;
                                        }
                                        if (TotalEdgeDefectCountPerClassPositiveA > 0)
                                        {
                                            ++TotalEdgeDefectCountPositiveA;
                                        }
                                        if (TotalSurfaceDefectCountPerClassPositiveA > 0)
                                        {
                                            ++TotalSurfaceDefectCountPositiveA;
                                        }
                                        if (TotalBrokenLineCountPerClassPositiveA > 0)
                                        {
                                            ++TotalBrokenLineCountPositiveA;
                                        }
                                        if (TotalStartingWeldingNGCountPerClassPositiveA > 0)
                                        {
                                            ++TotalStartingWeldingNGCountPositiveA;
                                        }
                                        if (TotalEmptyPlateCountPerClassPositiveA > 0)
                                        {
                                            ++TotalEmptyPlateCountPositiveA;
                                        }
                                        if ((SingleClassSurfaceMeanGrayArrayPositiveA.Max() - SingleClassSurfaceMeanGrayArrayPositiveA.Min()) >= SurfaceColorDiffGrayThreshPositiveA)
                                        {
                                            ++TotalSurfaceColorDiffCountPositiveA;
                                        }
                                    }
                                }





                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveA(WaferIDPositiveA - 1);
                                //初始化单串硅片编号
                                WaferIDPositiveA = 1;
                                isTopAndBottomNGPositiveA = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveA();
                                
                                //根据数据结果进行相应赋值
                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                {
                                    SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                {
                                    SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                {
                                    SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                {
                                    SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                {
                                    SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                {
                                    SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                }
                                //将下半片平均灰度值加入数组
                                SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfBottomWafer);
                            }
#endregion
                            //未到串与串之间
                            else
                            {
                                //未抵达串间区域
                                //判断是否异常
                                if (Convert.ToBoolean(hv_IsException.I))
                                {
                                    if (Global.isUpperLink == "1")
                                    {
                                        if (Global.stringType == "小间距" && MainLineNum == 10)
                                        {
                                            tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                        }
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveA = "2";
                                    }
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassNGTypePositiveA = "算法异常";
                                    }
                                    else
                                    {
                                        SingleClassNGTypePositiveA = "Algorithm Exception";
                                    }
                                    //if (framePositiveA != null)
                                    //{
                                    //    string length = ImageRealTime + Convert.ToString(framePositiveA.Height);
                                    //    string path = "D:/源数据A/" + length + ".bin";
                                    //    byte[] bt = framePositiveA.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveA = null;
                                    //}
                                    this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);

                                    singleClassNGPositiveA.Id = idOfPositiveA;
                                    singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                    saveImageWaferIDPositiveA = WaferIDPositiveA;

                                    HOperatorSet.GenEmptyObj(out tempAlgorithmExceptionImagePositiveA);
                                    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempAlgorithmExceptionImagePositiveA);
                                    lock (LockObjectAlgorithmExceptionImageQueuePositiveA)
                                    {
                                        AlgorithmExceptionImageQueuePositiveA.Enqueue(tempAlgorithmExceptionImagePositiveA);
                                    }
                                    SingleClassAlgorithmExceptionNGFlagArrayPositiveA[WaferIDPositiveA - 2] = true;
                                    Global.SaveLog("D:\\Program Files\\Config\\033\\算法异常A.txt",
                                          DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + hv_ExceptionInfo);
                                }
                                else
                                //没有异常
                                {
                                    //上半片膜偏处理
                                    SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                    //下半片膜偏处理
                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                    {
                                        SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //上半片膜失处理
                                    SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                    //下半片膜失处理
                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                    {
                                        SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //上半片头尾膜偏处理
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                    //下半片头尾膜偏处理
                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //片间距处理
                                    if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                    {
                                        SingleClassDistanceNGFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //上半片边角缺陷处理
                                    SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                    //下半片边角缺陷处理
                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                    {
                                        SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //上半片表面缺陷处理
                                    SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                    //下半片表面缺陷处理
                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                    {
                                        SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //上半片表面划痕处理
                                    SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                    //下半片表面划痕处理
                                    if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                    {
                                        SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }

                                    //上半片断栅处理
                                    SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] = SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                    //下半片断栅处理
                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                    {
                                        SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //下半片起焊点异常处理
                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                    {
                                        SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 1] = true;
                                    }
                                    //将上下半片平均灰度值加入数组
                                    SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfTopWafer);
                                    SingleClassSurfaceMeanGrayArrayPositiveA.Add(hv_SurfaceMeanGrayOfBottomWafer);
                                    //判断是否有色差
                                    if ((hv_SurfaceMeanGrayOfTopWafer - hv_SurfaceMeanGrayOfBottomWafer) >= SurfaceColorDiffGrayThreshPositiveA || (hv_SurfaceMeanGrayOfTopWafer - hv_SurfaceMeanGrayOfBottomWafer) <= -SurfaceColorDiffGrayThreshPositiveA)
                                    {
                                        SingleClassSurfaceMeanGrayFlagPositiveA = true;
                                    }
                                    else
                                    {
                                        SingleClassSurfaceMeanGrayFlagPositiveA = false;
                                    }

                                    if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                    {
                                        SingleClassEmptyPlateFlagArrayPositiveA[WaferIDPositiveA - 2] = true;
                                    }

                                    //给PLC发送结果
                                    if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassDistanceNGFlagArrayPositiveA[WaferIDPositiveA - 1]
                                        || SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2]
                                        || SingleClassSurfaceMeanGrayFlagPositiveA)
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = "2";
                                        }
                                        //整理Ng类型文档
                                        if (SingleClassFilmShiftingFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingTypePositiveA = "膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingTypePositiveA = "Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingTypePositiveA = "";
                                        }

                                        if (SingleClassFilmMissFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmMissTypePositiveA = "膜短|膜失";
                                            }
                                            else
                                            {
                                                SingleClassFilmMissTypePositiveA = "Film Short | Film Missing";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmMissTypePositiveA = "";
                                        }

                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "头尾膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "H/T Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingOfHeadAndTailTypePositiveA = "";
                                        }

                                        if (SingleClassDistanceNGFlagArrayPositiveA[WaferIDPositiveA - 1])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassDistanceNGTypePositiveA = "片间距异常";
                                            }
                                            else
                                            {
                                                SingleClassDistanceNGTypePositiveA = "Cell Spacing Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassDistanceNGTypePositiveA = "";
                                        }

                                        if (SingleClassEdgeDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassEdgeDefectTypePositiveA = "边角破损";
                                            }
                                            else
                                            {
                                                SingleClassEdgeDefectTypePositiveA = "Edge/Corner Damage";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassEdgeDefectTypePositiveA = "";
                                        }

                                        if (SingleClassSurfaceDefectFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceDefectTypePositiveA = "表面缺陷";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceDefectTypePositiveA = "Surface Defects";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceDefectTypePositiveA = "";
                                        }
                                        if (SingleClassSurfaceScratchFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceScratchTypePositiveA = "划痕";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceScratchTypePositiveA = "Surface Scratchs";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceScratchTypePositiveA = "";
                                        }

                                        if (SingleClassBrokenLineFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassBrokenLineTypePositiveA = "断栅";
                                            }
                                            else
                                            {
                                                SingleClassBrokenLineTypePositiveA = "Broken Finger";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassBrokenLineTypePositiveA = "";
                                        }

                                        if (SingleClassStargingWeldingNGFlagArrayPositiveA[WaferIDPositiveA - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassStargingWeldingNGTypePositiveA = "起焊点异常";
                                            }
                                            else
                                            {
                                                SingleClassStargingWeldingNGTypePositiveA = "Cell To Rib Head Dist Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassStargingWeldingNGTypePositiveA = "";
                                        }

                                        if (SingleClassSurfaceMeanGrayFlagPositiveA)
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceMeanGrayNGTypePositiveA = "色差";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceMeanGrayNGTypePositiveA = "Color Diff";
                                            }



                                        }
                                        else
                                        {
                                            SingleClassSurfaceMeanGrayNGTypePositiveA = "";
                                        }

                                        SingleClassNGTypePositiveA = SingleClassFilmShiftingTypePositiveA + " " + SingleClassFilmMissTypePositiveA + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveA + " " + SingleClassDistanceNGTypePositiveA + " " + SingleClassEdgeDefectTypePositiveA + " " + SingleClassSurfaceDefectTypePositiveA + " " + SingleClassSurfaceScratchTypePositiveA + " " + SingleClassBrokenLineTypePositiveA + " " + SingleClassStargingWeldingNGTypePositiveA + " " + SingleClassSurfaceMeanGrayNGTypePositiveA;
                                        this.RefreshCurrentClusterStatePositiveA(false, WaferIDPositiveA - 1);


                                        singleClassNGPositiveA.Id = idOfPositiveA;
                                        singleClassNGPositiveA.Info[WaferIDPositiveA - 2] = SingleClassNGTypePositiveA.Trim();
                                        saveImageWaferIDPositiveA = WaferIDPositiveA;
                                        // RefreshNGIfo(ClassNGNumA, HistoryNGA);
                                    }
                                    else
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "0";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveA = ResultOKPositiveA;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveA = "1";
                                        }
                                      
                                        SingleClassNGTypePositiveA = "";
                                        this.RefreshCurrentClusterStatePositiveA(true, WaferIDPositiveA - 1);
                                        //保存OK图片

                                        //if (Convert.ToBoolean(IsSaveAllImage_PositiveA.I))
                                        //{
                                        //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveA);
                                        //    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempOriImagePositiveA);
                                        //    lock (LockObjectOriImageQueuePositiveA)
                                        //    {
                                        //        OriImageQueuePositiveA.Enqueue(tempOriImagePositiveA);

                                        //    }
                                        //}
                                    }
                                }
                            }
                        }
#endregion
                    }



                    //宽度分辨率校准赋值
                    if (hv_IsWidthResolutionCalibrateFinish)
                    {
                        IsUsingWidthResolutionCalibratePositiveA = 0;
                        Global.isUsingWidthResolutionCalibratePositiveA = "0";
                        WidthResolutionPositiveA = hv_WidthResolutionOut;
                        Global.widthResolutionPositiveA = WidthResolutionPositiveA.ToString();
                        Config.WriteIniData("Config", "IsUsingWidthResolutionCalibratePositiveA", Global.isUsingWidthResolutionCalibratePositiveA, defaultRecipePath);
                        Config.WriteIniData("Config", "WidthResolutionPositiveA", Global.widthResolutionPositiveA, defaultRecipePath);
                        mfParameterInterface.chkIsUsingWidthResolutionCalibrate_PositiveA.Checked = false;
                        mfParameterInterface.txtWidthResolution_PositiveA.Text = WidthResolutionPositiveA.ToString();
                    }   

                    //高度分辨率校准赋值
                    if (hv_IsHeightResolutionCalibrateFinish)
                    {
                        IsUsingHeightResolutionCalibratePositiveA = 0;
                        Global.isUsingHeightResolutionCalibratePositiveA = "0";
                        HeightResolutionPositiveA = hv_HeightResolutionOut;
                        Global.heightResolutionPositiveA = HeightResolutionPositiveA.ToString();
                        Config.WriteIniData("Config", "IsUsingHeightResolutionCalibratePositiveA", Global.isUsingHeightResolutionCalibratePositiveA, defaultRecipePath);
                        Config.WriteIniData("Config", "HeightResolutionPositiveA", Global.heightResolutionPositiveA, defaultRecipePath);
                        mfParameterInterface.chkIsUsingHeightResolutionCalibrate_PositiveA.Checked = false;
                        mfParameterInterface.txtHeightResolution_PositiveA.Text = HeightResolutionPositiveA.ToString();
                    }
                    lock (LockObjectNextClassPositiveA)
                    {
                        bool isTopNG = false;
                        bool isBottomNG = false;

                        if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                        {
                            isTopNG = true;
                        }

                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                        {
                            isBottomNG = true;
                        }
                        if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                        {
                            isTopAndBottomNGPositiveA[WaferIDPositiveA] = true;
                        }

                        if (WaferIDPositiveA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                        {
                            if (isTopNG)
                                isTopAndBottomNGPositiveA[WaferIDPositiveA] = true;
                            string singleClassNGPositiveAStr = null;
                            foreach (string str in singleClassNGPositiveA.Info)
                            {
                                if (str != null)
                                {
                                    singleClassNGPositiveAStr = str;
                                    break;
                                }
                            }
                            if (singleClassNGPositiveAStr != null)
                                idOfPositiveA++;
                            isNextClassFlagPositiveA = true;
                            //tempSingleClassNGPositiveA = new SingleClassNG();
                            //tempSingleClassNGPositiveA.Id = idOfPositiveA;
                        }


                        //保存NG图片

                        if (Convert.ToBoolean(IsSaveNGImage_PositiveA.I))
                        {

                            //#region 增加保存最近10张
                            //HOperatorSet.GenEmptyObj(out tempNGImagePositiveA);
                            //HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempNGImagePositiveA);
                            ////Thread.Sleep(10);

                            //NGImageQueueA.Enqueue(tempNGImagePositiveA);

                            ////保存ROI图片

                            //HOperatorSet.GenEmptyObj(out tempRoiNGImagePositiveA);
                            //HOperatorSet.DumpWindowImage(out tempRoiNGImagePositiveA, WindowsHandlePositiveA);

                            //RoiNGImageQueueA.Enqueue(tempRoiNGImagePositiveA);

                            //#endregion


                            if (SingleClassSurfaceMeanGrayFlagPositiveA)
                            {
                                HOperatorSet.GenEmptyObj(out tempSurfaceMeanGrayImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempSurfaceMeanGrayImagePositiveA);
                                lock (LockObjectSurfaceMeanGrayImageQueuePositiveA)
                                {
                                    saveImageWaferIDPositiveA = WaferIDPositiveA+1;
                                    SurfaceMeanGrayImageQueuePositiveA.Enqueue(tempSurfaceMeanGrayImagePositiveA);
                                }
                            }
                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempFilmShiftingImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempFilmShiftingImagePositiveA);
                                //Thread.Sleep(10);
                                lock (LockObjectFilmShiftingImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    FilmShiftingImageQueuePositiveA.Enqueue(tempFilmShiftingImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiFilmShiftingImageQueuePositiveA)
                                    {
                                        RoiFilmShiftingImageQueuePositiveA.Enqueue(tempRoiFilmShiftingImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempFilmMissImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempFilmMissImagePositiveA);
                                lock (LockObjectFilmMissImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    FilmMissImageQueuePositiveA.Enqueue(tempFilmMissImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiFilmMissImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiFilmMissImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiFilmMissImageQueuePositiveA)
                                    {
                                        RoiFilmMissImageQueuePositiveA.Enqueue(tempRoiFilmMissImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempHeadAndTailFilmShiftingImagePositiveA);
                                lock (LockObjectHeadAndTailFilmShiftingImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    HeadAndTailFilmShiftingImageQueuePositiveA.Enqueue(tempHeadAndTailFilmShiftingImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiHeadAndTailFilmShiftingImageQueuePositiveA)
                                    {
                                        RoiHeadAndTailFilmShiftingImageQueuePositiveA.Enqueue(tempRoiHeadAndTailFilmShiftingImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempEdgeDefectImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempEdgeDefectImagePositiveA);
                                lock (LockObjectEdgeDefectImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    EdgeDefectImageQueuePositiveA.Enqueue(tempEdgeDefectImagePositiveA);


                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiEdgeDefectImageQueuePositiveA)
                                    {
                                        RoiEdgeDefectImageQueuePositiveA.Enqueue(tempRoiEdgeDefectImagePositiveA);
                                    }
                                }
                            }
                            
                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempSurfaceDefectImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempSurfaceDefectImagePositiveA);
                                lock (LockObjectSurfaceDefectImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    SurfaceDefectImageQueuePositiveA.Enqueue(tempSurfaceDefectImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiSurfaceDefectImageQueuePositiveA)
                                    {
                                        RoiSurfaceDefectImageQueuePositiveA.Enqueue(tempRoiSurfaceDefectImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempBrokenLineImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempBrokenLineImagePositiveA);
                                lock (LockObjectBrokenLineImageQueuePositiveA)
                                {
                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                        saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    BrokenLineImageQueuePositiveA.Enqueue(tempBrokenLineImagePositiveA);

                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiBrokenLineImageQueuePositiveA)
                                    {
                                        RoiBrokenLineImageQueuePositiveA.Enqueue(tempRoiBrokenLineImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempStartWeldingNGImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempStartWeldingNGImagePositiveA);
                                lock (LockObjectStartWeldingNGImageQueuePositiveA)
                                {
                                    //isStartWeldingNGPositiveA[WaferIDPositiveA + 1] = true ;
                                    saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    StartWeldingNGImageQueuePositiveA.Enqueue(tempStartWeldingNGImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiStartWeldingNGImageQueuePositiveA)
                                    {
                                        RoiStartWeldingNGImageQueuePositiveA.Enqueue(tempRoiStartWeldingNGImagePositiveA);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsDistanceNG.I))
                            {
                                isTopAndBottomNGPositiveA[WaferIDPositiveA] = true;
                                HOperatorSet.GenEmptyObj(out tempDistanceNGImagePositiveA);
                                HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempDistanceNGImagePositiveA);
                                lock (LockObjectDistanceNGImageQueuePositiveA)
                                {
                                    saveImageWaferIDPositiveA = WaferIDPositiveA + 1;
                                    DistanceNGImageQueuePositiveA.Enqueue(tempDistanceNGImagePositiveA);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveA.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImagePositiveA);
                                    HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImagePositiveA, WindowsHandlePositiveA);
                                    lock (LockObjectRoiDistanceNGImageQueuePositiveA)
                                    {
                                        RoiDistanceNGImageQueuePositiveA.Enqueue(tempRoiDistanceNGImagePositiveA);
                                    }

                                }
                            }
                        }

                        if (WaferIDPositiveA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                        {
                            string singleClassNGPositiveAStr = null;
                            foreach (string str in singleClassNGPositiveA.Info)
                            {
                                if (str != null)
                                {
                                    singleClassNGPositiveAStr = str;
                                    break;
                                }
                            }
                            if (singleClassNGPositiveAStr != null)
                            {
                                isSingleClassOKPositiveA = false;
                                singleClassNGPositiveA.UpdateDone = false;
                                singleClassNGPositiveAList.Add(singleClassNGPositiveA);

                            }
                            else
                            {
                                isSingleClassOKPositiveA = true;
                            }

                            singleClassNGPositiveA = new SingleClassNG();
                        }
                    }
                    //容错报警串数功能启用
                    //待定
                    //ImageQueuePositiveA.Enqueue(ho_MainImagePositiveA);
                    
                    if (Global.isUpperLink=="1")
                    {
                        lock (Result2PLC)
                        {
                            Result2PLC.Enqueue(tellPlcCurrentStatePositiveA);
                        }
                    }
                    else
                    {
                        lock (ResultPositiveA)
                        {
                            ResultPositiveA.Enqueue(tellPlcCurrentStatePositiveA);
                        }
                    }

#endregion
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                    if (IsNextClassA)
                    {
                        ++NGTotalCountPositiveA;
                    }
                    Global.SaveLog("D:\\Program Files\\Config\\033\\异常A.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImagePositiveA);
                    HOperatorSet.CopyImage(ho_MainImagePositiveA, out tempExceptionImagePositiveA);
                    lock (LockObjectExceptionImageQueuePositiveA)
                    {
                        ExceptionImageQueuePositiveA.Enqueue(tempExceptionImagePositiveA);


                    }
                    //if (framePositiveA != null)
                    //{
                    //    string length = ImageRealTime+ Convert.ToString(framePositiveA.Height);
                    //    string path = "D:/源数据A/" +  length + ".bin";
                    //    byte[] bt = framePositiveA.Image;
                    //    MemoryStream ms = new MemoryStream(bt);
                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                    //    ms.WriteTo(fs);
                    //    ms.Close();
                    //    fs.Close();
                    //    framePositiveA = null;
                    //}
                    //重置检测，防止出现索引报错
                    //初始化单串硅片编号
                    WaferIDPositiveA = 1;
                    isTopAndBottomNGPositiveA = new bool[30];
                    //初始化单串Flag数组(所有元素置为false)
                    this.ClearSingleClassFlagArrayPositiveA();
                    //给PLC反馈结果，发送NG
                    if (Global.isUpperLink == "1")
                    {
                        if (Global.stringType == "小间距" && MainLineNum == 10)
                        {
                            tellPlcCurrentStatePositiveA = "WRS EM2620 2" + " " + (i + 1) + " " + "1";
                        }
                        else
                        {
                            tellPlcCurrentStatePositiveA = ResultNGPositiveA;
                        }
                    }
                    else
                    {
                        tellPlcCurrentStatePositiveA = "2";
                    }
                    
                    if (Global.isUpperLink=="1")
                    {
                        lock (Result2PLC)
                        {
                            Result2PLC.Enqueue(tellPlcCurrentStatePositiveA);
                        }
                    }
                    else
                    {
                        lock (ResultPositiveA)
                        {
                            ResultPositiveA.Enqueue(tellPlcCurrentStatePositiveA);
                        }
                    }
                    mfPositiveInterface.lblPositiveInterfaceCurrentClusterStateA1.BackColor = Color.Red;
                    mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeA1.Text = "异常";

                    string singleClassNGPositiveAStr = null;
                    foreach (string str in singleClassNGPositiveA.Info)
                    {
                        if (str != null)
                        {
                            singleClassNGPositiveAStr = str;
                            break;
                        }
                    }
                    if (singleClassNGPositiveAStr != null)
                    {
                        idOfPositiveA++;
                        singleClassNGPositiveA.UpdateDone = true;
                        singleClassNGPositiveAList.Add(singleClassNGPositiveA);
                    }

                    singleClassNGPositiveA = new SingleClassNG();
                }
            }
            
        }

        //B侧正面串检检测
        public void ActionPositiveB()
        {
            bool IsNextClassB = false;
            if (Convert.ToBoolean(IsSaveAllImage_PositiveB.I))
            {
                HOperatorSet.GenEmptyObj(out tempOriImagePositiveB);
                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempOriImagePositiveB);
                lock (LockObjectOriImageQueuePositiveB)
                {
                    OriImageQueuePositiveB.Enqueue(tempOriImagePositiveB);
                }
            }
#if Dalsa
            //HTuple Width, Height, UsedThreshold;
            //HObject ImageR, ImageG, ImageB, MainImages;
            //HObject Region, RegionOpening, MainImageRegion;
            //HTuple Row, Column, Phi, Length1, Length2;
            ////图像补黑去除
            //HOperatorSet.GetImageSize(ho_MainImagePositiveB, out Width, out Height);
            //HOperatorSet.Decompose3(ho_MainImagePositiveB, out ImageR, out ImageG, out ImageB);

            //HOperatorSet.BinaryThreshold(ImageR, out Region, "max_separability", "dark", out UsedThreshold);
            //HOperatorSet.OpeningRectangle1(Region, out RegionOpening, Width * 0.07, 100);

            //HOperatorSet.Difference(ImageR, RegionOpening, out MainImageRegion);
            //HOperatorSet.SmallestRectangle2(MainImageRegion, out Row, out Column, out Phi, out Length1, out Length2);
            //HOperatorSet.GenRectangle2(out MainImageRegion, Row, Column, Phi, Length1, Length2);
            //HOperatorSet.ReduceDomain(ho_MainImagePositiveB, MainImageRegion, out MainImages);
            //HOperatorSet.CropDomain(MainImages, out ho_MainImagePositiveB);
#endif
            //显示主图像
            HOperatorSet.GetImageSize(ho_MainImagePositiveB, out ImageWidthPositiveB, out ImageHeightPositiveB);
            //判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
            //20190226 黄浩
            //增大异常图片行数阈值，降低异常图片保存数量，从10改为500
            if (ImageHeightPositiveB <= 500 )
            {
                HOperatorSet.GenEmptyObj(out tempExceptionImagePositiveB);
                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempExceptionImagePositiveB);
                lock (LockObjectExceptionImageQueuePositiveB)
                {
                    ExceptionImageQueuePositiveB.Enqueue(tempExceptionImagePositiveB);
                }
                return;
            }

          
            HTuple Pic1 = ImageHeightPositiveB / 3;
           
            

            List<HObject> ImageListB = new List<HObject>();
            List<HTuple> ImageHeightPositiveBList = new List<HTuple>();
            List<HTuple> ImageWidthPositiveBList = new List<HTuple>();
            for (int i = 0; i < ImagePartNum; i++)
            {
                HTuple TempImageWidthPositiveB = null, TempImageHeightPositiveB = null;
                HObject Rectangle1 = null;
               
                HObject TempImage = null;
                HObject TempImage1 = null;
                if (i == ImagePartNum - 1)
                {
                    HOperatorSet.GenRectangle1(out Rectangle1, Pic1 * i, 0, ImageHeightPositiveB, ImageWidthPositiveB);
                }
                else
                {
                    HOperatorSet.GenRectangle1(out Rectangle1, Pic1 * i, 0, Pic1 * (i + 1), ImageWidthPositiveB);
                }

                HOperatorSet.ReduceDomain(ho_MainImagePositiveB, Rectangle1, out TempImage1);
                HOperatorSet.CropDomain(TempImage1, out TempImage);
                HOperatorSet.GetImageSize(TempImage, out TempImageWidthPositiveB, out TempImageHeightPositiveB);
                HOperatorSet.SetPart(WindowsHandlePositiveBList[i], 0, 0, TempImageHeightPositiveB, TempImageWidthPositiveB);
                HOperatorSet.SetDraw(WindowsHandlePositiveBList[i], "margin");
                HOperatorSet.DispObj(TempImage, WindowsHandlePositiveBList[i]);
                ImageListB.Add(TempImage);
                ImageWidthPositiveBList.Add(TempImageWidthPositiveB);
                ImageHeightPositiveBList.Add(TempImageHeightPositiveB);
            }
           
            for (int i = 0; i < ImagePartNum; i++)
            {
                try
                {
                    HTuple hv_IsBackDetect = 0;
                    var StartMinute = DateTime.Now.Minute;
                    var StartSecond = DateTime.Now.Second;
                    var StartMillisecond = DateTime.Now.Millisecond;
                    var StartTotalTime = StartMillisecond + StartSecond * 1000;

                    //局部变量
                    HObject ho_totalFilmShiftingRegion = null;
                    HObject ho_totalFilmMissRegion = null;
                    HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                    HObject ho_totalEdgeDefectRegion = null;
                    HObject ho_totalSurfaceDefectRegion = null;
                    HObject ho_totalBrokenLineRegion = null;

                    HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                    HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                    ho_totalFilmShiftingRegion.Dispose();
                    ho_totalFilmMissRegion.Dispose();
                    ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                    ho_totalEdgeDefectRegion.Dispose();
                    ho_totalSurfaceDefectRegion.Dispose();
                    ho_totalBrokenLineRegion.Dispose();

                    HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                    HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                    HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                    HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                    HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                    HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                    HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                    HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                    HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                    HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                    HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                    HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                    HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                    HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
#region 正面检测

                    if (Global.stringType == "负间距")
                    {
#region  TR
                        if (!CalibrationExistPositiveB)
                        {
                            MessageBox.Show("请先复测一张图片开始标定B侧模板");
                            return;
                        }
                        //正面串检
                       
                        HFuncPositiveBList[i].ProcessingTRImage(ImageListB[i], ho_ModelContoursPositiveB, out ho_totalFilmShiftingRegion,
                          out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                          out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                          out ho_totalBrokenLineRegion, ImageWidthPositiveBList[i], ImageHeightPositiveBList[i],
                          WindowsHandlePositiveBList[i], MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                          IsUsingWidthResolutionCalibratePositiveB, WidthResolutionPositiveB, WaferWidthPositiveB,
                          IsUsingHeightResolutionCalibratePositiveB, HeightResolutionPositiveB, ViceLineInterval,
                          IsUsingFilmShiftingDetectPositiveB, TopShieldLengthOfTopRegionPositiveB, BottomShieldLengthOfTopRegionPositiveB,
                          TopShieldLengthOfBottomRegionPositiveB, BottomShieldLengthOfBottomRegionPositiveB,
                          LocationMainLineThreshPositiveB, FilmWidthThreshPositiveB, FilmWidthOffSetPositiveB,
                          FirstDetectPosForTopRegionPositiveB, SecondDetectPosForTopRegionPositiveB,
                          FirstDetectPosForBottomRegionPositiveB, SecondDetectPosForBottomRegionPositiveB,
                          IsUsingFilmMissDetectPositiveB, WeldWidthThreshPositiveB,
                          IsUsingHeadAndTailFilmShiftingDetectPositiveB, HeadAndTailFilmWidthThreshPositiveB,
                          HeadAndTailFilmShieldLengthPositiveB, HeadAndTailFilmDetectRangePositiveB,
                          IsUsingWaferEdgeCalibrationPositiveB, LocationWaferEdgeThreshPositiveB, WaferEdgeCalibrationRegionDilationPixelPositiveB,
                          IsUsingDistanceDetectPositiveB, MinimumDistanceThreshPositiveB, MaxDistanceThreshPositiveB,
                          ClassDistanceThreshPositiveB, IsUsingEdgeDefectDetectPositiveB, EdgeBigDefectWidthThreshPositiveB,
                          EdgeBigDefectHeightThreshPositiveB, EdgeSmallDefectDetectDepthPositiveB, EdgeSmallDefectGrayThreshPositiveB,
                          EdgeSmallDefectWidthThreshPositiveB, EdgeSmallDefectHeightThreshPositiveB,
                          EdgeSmallDefectGrayMeanThreshPositiveB, EdgeSmallDefectGrayDeviationThreshPositiveB,
                          CornerDefectAreaRatioThreshPositiveB, IsUsingSurfaceDefectDetectPositiveB,
                          SurfaceDefectGrayThreshPositiveB, SurfaceDefectWidthThreshPositiveB, SurfaceDefectHeightThreshPositiveB,
                          SurfaceDefectDetectIndentDepthPositiveB, SurfaceDefectViceLineShieldWidthPositiveB,
                          SurfaceDefectViceLineShieldLeftPosOffSetPositiveB, SurfaceDefectViceLineShieldRightPosOffSetPositiveB,
                          SurfaceScratchGrayThreshPositiveB, SurfaceScratchWidthThreshPositiveB, SurfaceScratchHeightThreshPositiveB,
                          IsUsingStartWeldingDetectPositiveB, StartWeldingDistanceMaxThreshPositiveB,
                          StartWeldingDistanceMinThreshPositiveB, IsUsingBrokenLineDetectPositiveB,
                          BrokenLineGrayThreshPositiveB, BrokenLineWidthThreshPositiveB, BrokenLineHeightThreshPositiveB,
                          BrokenLineDetectIndentDepthPositiveB, IsUsingSurfaceColorDiffDetectPositiveB,
                          IsEnglish, WeldShieldLengthPositiveB, ho_ModelIDPositiveB, MainLineDistance, out hv_IsException,
                          out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                          out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                          out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                          out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                          out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                          out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                          out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                          out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                          out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                          out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                          out hv_IsStartWeldingNGOfBottomWafer,
                          out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);
                          IsNextClassB = hv_IsNextClass;
#endregion

                    }
                    else
                    {
#region 有片间距
                        HFuncPositiveBList[i].ProcessingImage(ImageListB[i], out ho_totalFilmShiftingRegion,
                          out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                          out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                          out ho_totalBrokenLineRegion, ImageWidthPositiveBList[i], ImageHeightPositiveBList[i],
                          WindowsHandlePositiveBList[i], MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                          IsUsingWidthResolutionCalibratePositiveB, WidthResolutionPositiveB, WaferWidthPositiveB,
                          IsUsingHeightResolutionCalibratePositiveB, HeightResolutionPositiveB, ViceLineInterval,
                          IsUsingFilmShiftingDetectPositiveB, TopShieldLengthOfTopRegionPositiveB, BottomShieldLengthOfTopRegionPositiveB,
                          TopShieldLengthOfBottomRegionPositiveB, BottomShieldLengthOfBottomRegionPositiveB,
                          LocationMainLineThreshPositiveB, FilmWidthThreshPositiveB, FilmWidthOffSetPositiveB,
                          FirstDetectPosForTopRegionPositiveB, SecondDetectPosForTopRegionPositiveB,
                          FirstDetectPosForBottomRegionPositiveB, SecondDetectPosForBottomRegionPositiveB,
                          IsUsingFilmMissDetectPositiveB, WeldWidthThreshPositiveB,
                          IsUsingHeadAndTailFilmShiftingDetectPositiveB, HeadAndTailFilmWidthThreshPositiveB,
                          HeadAndTailFilmShieldLengthPositiveB, HeadAndTailFilmDetectRangePositiveB,
                          IsUsingWaferEdgeCalibrationPositiveB, LocationWaferEdgeThreshPositiveB, WaferEdgeCalibrationRegionDilationPixelPositiveB,
                          IsUsingDistanceDetectPositiveB, MinimumDistanceThreshPositiveB, MaxDistanceThreshPositiveB,
                          ClassDistanceThreshPositiveB, IsUsingEdgeDefectDetectPositiveB, EdgeBigDefectWidthThreshPositiveB,
                          EdgeBigDefectHeightThreshPositiveB, EdgeSmallDefectDetectDepthPositiveB, EdgeSmallDefectGrayThreshPositiveB,
                          EdgeSmallDefectWidthThreshPositiveB, EdgeSmallDefectHeightThreshPositiveB,
                          EdgeSmallDefectGrayMeanThreshPositiveB, EdgeSmallDefectGrayDeviationThreshPositiveB,
                          CornerDefectAreaRatioThreshPositiveB, IsUsingSurfaceDefectDetectPositiveB,
                          SurfaceDefectGrayThreshPositiveB, SurfaceDefectWidthThreshPositiveB, SurfaceDefectHeightThreshPositiveB,
                          SurfaceDefectDetectIndentDepthPositiveB, SurfaceDefectViceLineShieldWidthPositiveB,
                          SurfaceDefectViceLineShieldLeftPosOffSetPositiveB, SurfaceDefectViceLineShieldRightPosOffSetPositiveB,
                          SurfaceScratchGrayThreshPositiveB, SurfaceScratchWidthThreshPositiveB, SurfaceScratchHeightThreshPositiveB,
                          IsUsingStartWeldingDetectPositiveB, StartWeldingDistanceMaxThreshPositiveB,
                          StartWeldingDistanceMinThreshPositiveB, IsUsingBrokenLineDetectPositiveB,
                          BrokenLineGrayThreshPositiveB, BrokenLineWidthThreshPositiveB, BrokenLineHeightThreshPositiveB,
                          BrokenLineDetectIndentDepthPositiveB, IsUsingSurfaceColorDiffDetectPositiveB,
                          IsEnglish, WeldShieldLengthPositiveB,GrayOpenHeight, MainLineDistance, out hv_IsException,
                          out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                          out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                          out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                          out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                          out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                          out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                          out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                          out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                          out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                          out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                          out hv_IsStartWeldingNGOfBottomWafer,
                          out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);
                        IsNextClassB = hv_IsNextClass;
#endregion
                    }

                    var EndSecond = DateTime.Now.Second;
                    var EndMillisecond = DateTime.Now.Millisecond;
                    var EndTotalTime = EndMillisecond + EndSecond * 1000;
                    var SubTime = EndTotalTime - StartTotalTime;
                    label1.Text = SubTime.ToString();
                    //Global.SaveLog("D:\\Program Files\\Config\\033\\B时间.txt",
                    //                      DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "---" + Convert.ToString(SubTime));

                    //if (Convert.ToInt32(Global.mainLineNum) >= 9)
                    //{
                    //    int WaferCount = hv_IsTopWaferNG.Length;
                    //    long[] TopWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] BottomWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] HeadOfWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    long[] TailOfWaferNG = new long[Convert.ToInt32(Global.mainLineNum)];
                    //    if (Convert.ToBoolean(hv_IsTopWaferExist.I))
                    //    {

                    //        BottomWaferNG = hv_IsBottomWaferNG.LArr;
                    //        TailOfWaferNG = hv_IsTailOfWaferNG.LArr;
                    //    }
                    //    else
                    //    {
                    //        for (int i = 0; i < Convert.ToInt32(Global.mainLineNum) - 1; i++)
                    //        {
                    //            TopWaferNG[i] = 0;
                    //            TailOfWaferNG[i] = 0;
                    //        }
                    //    }
                    //    if (Convert.ToBoolean(hv_IsBottomWaferExist.I))
                    //    {

                    //        TopWaferNG = hv_IsTopWaferNG.LArr;

                    //        HeadOfWaferNG = hv_IsHeadOfWaferNG.LArr;
                    //    }
                    //    else
                    //    {
                    //        for (int i = 0; i < Convert.ToInt32(Global.mainLineNum) - 1; i++)
                    //        {
                    //            BottomWaferNG[i] = 0;
                    //            HeadOfWaferNG[i] = 0;
                    //        }
                    //    }
                    //    //MBBFilmShiftingInfStatistics(TopWaferNG, BottomWaferNG, HeadOfWaferNG, TailOfWaferNG, Convert.ToInt32(Global.waferCountPerClass), "B");
                    //}
                    ////显示结果
                    //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                    //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                    //  WindowsHandlePositiveB, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                    //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                    //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                    //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                    //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                    //只有在运行状态时才需要统计串信息  bl_IsRunPositive
                    if (bl_IsRunPositive)
                    {
                        //清空类型
                        SingleClassFilmShiftingTypePositiveB = "";
                        SingleClassFilmMissTypePositiveB = "";
                        SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "";
                        SingleClassDistanceNGTypePositiveB = "";
                        SingleClassEdgeDefectTypePositiveB = "";
                        SingleClassSurfaceDefectTypePositiveB = "";
                        SingleClassSurfaceScratchTypePositiveB = "";
                        SingleClassBrokenLineTypePositiveB = "";
                        SingleClassStargingWeldingNGTypePositiveB = "";
                        SingleClassSurfaceMeanGrayNGTypePositiveB = "";
#region 串信息统计
                        //平台空的情况
                        if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (IsCellLackB)
                            {
                                if (WaferIDPositiveB <= WaferCountPerClass)
                                    ++WaferIDPositiveB;
                                if(Global.isUpperLink=="1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveB = "2";
                                }
                                
                                
                                if (Global.isEnglish == "0")
                                {
                                    SingleClassDistanceNGTypePositiveB = "少片";
                                }
                                else
                                {
                                    SingleClassDistanceNGTypePositiveB = "Cell Lack";
                                }
                               // SingleClassCellMissingNGFlagArrayPositiveB[WaferIDPositiveB - 2] = true;
                                SingleClassNGTypePositiveB = SingleClassFilmShiftingTypePositiveB + " " + SingleClassFilmMissTypePositiveB + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveB + " " + SingleClassDistanceNGTypePositiveB + " " + SingleClassEdgeDefectTypePositiveB + " " + SingleClassSurfaceDefectTypePositiveB + " " + SingleClassSurfaceScratchTypePositiveB + " " + SingleClassBrokenLineTypePositiveB + " " + SingleClassStargingWeldingNGTypePositiveB + " " + SingleClassSurfaceMeanGrayNGTypePositiveB;
                                this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);
                                //HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveB);
                                //HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempCellMissImagePositiveB);
                                //lock (LockObjectCellMissImageQueuePositiveB)
                                //{
                                //    saveImageWaferIDPositiveB = WaferIDPositiveB;
                                //    CellMissImageQueuePositiveB.Enqueue(tempCellMissImagePositiveB);
                                //}
                                //Thread.Sleep(200);
                                ////HistoryNGPositiveBList.Add(HistoryNGPositiveB);
                                
                                //singleClassNGPositiveB.Id = idOfPositiveB;
                                //singleClassNGPositiveB.Info = HistoryNGPositiveB;
                                //string singleClassNGPositiveBStr = null;
                                //foreach (string str in singleClassNGPositiveB.Info)
                                //{
                                //    if (str != null)
                                //    {
                                //        singleClassNGPositiveBStr = str;
                                //        break;
                                //    }
                                //}
                                //if (singleClassNGPositiveBStr != null)
                                //{
                                //    idOfPositiveB++;
                                //    singleClassNGPositiveB.UpdateDone = true ;
                                //    singleClassNGPositiveBList.Add(singleClassNGPositiveB);
                                //}
                                singleClassNGPositiveB = new SingleClassNG();
                                //RefreshNGIfo(0, HistoryNGAList);
                                HistoryNGPositiveB = new string[WaferCountPerClass + 3];

#region 如果上片少片下片是空平台 ，认为是下一串开始了 ，整理串信息
                                //TotalAlgorithmExceptionCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassAlgorithmExceptionNGFlagArrayPositiveB);
                                //TotalCellMissingCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassCellMissingNGFlagArrayPositiveB);
                                //TotalFilmShiftingCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayPositiveB);
                                //TotalFilmMissCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayPositiveB);
                                //TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB);
                                //TotalDistanceNGCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayPositiveB);
                                //TotalEdgeDefectCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayPositiveB);
                                //TotalSurfaceDefectCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayPositiveB) + StaticTrueCountInFlagArray(SingleClassSurfaceScratchFlagArrayPositiveB);
                                //TotalBrokenLineCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayPositiveB);
                                //TotalStartingWeldingNGCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayPositiveB);
                                //TotalEmptyPlateCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayPositiveB);

                                //++TotalCountPositiveB;

                                //if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveB > 0)) > 0
                                //    || (SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB
                                //    )
                                //{

                                //    ++NGTotalCountPositiveB;
                                //    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalFilmMissCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalCellMissingCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                //    + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveB > 0)) > 1)
                                //    {
                                //        ++MajorFailureCountPositiveB;
                                //    }
                                //    //暂时先用背面片间距计数代替正面异常计数
                                //    if (TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalDistanceNGCountNegativeB;
                                //    }
                                //    //用背面头尾计数代替正面少片计数
                                //    if (TotalCellMissingCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                //    }
                                //    if (TotalFilmShiftingCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalFilmShiftingCountPositiveB;
                                //    }
                                //    if (TotalFilmMissCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalFilmMissCountPositiveB;
                                //    }
                                //    if (TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalFilmShiftingOfHeadAndTailCountPositiveB;
                                //    }
                                //    if (TotalDistanceNGCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalDistanceNGCountPositiveB;
                                //    }
                                //    if (TotalEdgeDefectCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalEdgeDefectCountPositiveB;
                                //    }
                                //    if (TotalSurfaceDefectCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalSurfaceDefectCountPositiveB;
                                //    }
                                //    if (TotalBrokenLineCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalBrokenLineCountPositiveB;
                                //    }
                                //    if (TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalStartingWeldingNGCountPositiveB;
                                //    }
                                //    if (TotalEmptyPlateCountPerClassPositiveB > 0)
                                //    {
                                //        ++TotalEmptyPlateCountPositiveB;
                                //    }
                                //    //if ((SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB)
                                //    //{
                                //    //    ++TotalSurfaceColorDiffCountPositiveB;
                                //    //}
                                //}


                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveB(WaferIDPositiveB - 1);
                                //初始化单串硅片编号
                                WaferIDPositiveB = 1;
                                isTopAndBottomNGPositiveB = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveB();
#endregion
                                IsCellLackB = false;
                            }
                            else
                            {
                                //未检测到首串首片,平台空
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "0";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = ResultEmptyPositiveB;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveB = "8";
                                }
                                IsCellLackB = false;
                            }
                        }
                        //下半片不存在（少片）
                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (WaferIDPositiveB <= WaferCountPerClass)
                                ++WaferIDPositiveB;

                            //判断上半片是否NG
                            SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                            SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                            SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                            SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                            SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                            SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                            SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                            //将上半片平均灰度值加入数组
                            SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfTopWafer);


                            //给PLC发送结果
                            if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2]
                                || SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2])
                            //|| (SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB)

                            {

                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveB = "2";
                                }
                                //整理Ng类型文档
                                if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmShiftingTypePositiveB = "膜偏|露白";
                                    }
                                    else
                                    {
                                        SingleClassFilmShiftingTypePositiveB = "Film Offset | Ribbon Offset";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmShiftingTypePositiveB = "";
                                }

                                if (SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmMissTypePositiveB = "膜短|膜失";
                                    }
                                    else
                                    {
                                        SingleClassFilmMissTypePositiveB = "Film Short | Film Missing";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmMissTypePositiveB = "";
                                }

                                if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "头尾膜偏|露白";
                                    }
                                    else
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "H/T Film Offset | Ribbon Offset";
                                    }

                                }
                                else
                                {
                                    SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "";
                                }



                                if (SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassEdgeDefectTypePositiveB = "边角破损";
                                    }
                                    else
                                    {
                                        SingleClassEdgeDefectTypePositiveB = "Edge/Corner Damage";
                                    }

                                }
                                else
                                {
                                    SingleClassEdgeDefectTypePositiveB = "";
                                }

                                if (SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassSurfaceDefectTypePositiveB = "表面缺陷";
                                    }
                                    else
                                    {
                                        SingleClassSurfaceDefectTypePositiveB = "Surface Defects";
                                    }

                                }
                                else
                                {
                                    SingleClassSurfaceDefectTypePositiveB = "";
                                }

                                if (SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassSurfaceScratchTypePositiveB = "划痕";
                                    }
                                    else
                                    {
                                        SingleClassSurfaceScratchTypePositiveB = "Surface Scratchs";
                                    }

                                }
                                else
                                {
                                    SingleClassSurfaceScratchTypePositiveB = "";
                                }

                                if (SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassBrokenLineTypePositiveB = "断栅";
                                    }
                                    else
                                    {
                                        SingleClassBrokenLineTypePositiveB = "Broken Finger";
                                    }

                                }
                                else
                                {
                                    SingleClassBrokenLineTypePositiveB = "";
                                }

                                if (SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2])
                                {
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassStargingWeldingNGTypePositiveB = "起焊点异常";
                                    }
                                    else
                                    {
                                        SingleClassStargingWeldingNGTypePositiveB = "Cell To Rib Head Dist Error";
                                    }

                                }
                                else
                                {
                                    SingleClassStargingWeldingNGTypePositiveB = "";
                                }

                                SingleClassSurfaceMeanGrayNGTypePositiveB = "";
                                //刷新显示

                                SingleClassNGTypePositiveB = SingleClassFilmShiftingTypePositiveB + " " + SingleClassFilmMissTypePositiveB + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveB + " " + SingleClassDistanceNGTypePositiveB + " " + SingleClassEdgeDefectTypePositiveB + " " + SingleClassSurfaceDefectTypePositiveB + " " + SingleClassSurfaceScratchTypePositiveB + " " + SingleClassBrokenLineTypePositiveB + " " + SingleClassStargingWeldingNGTypePositiveB + " " + SingleClassSurfaceMeanGrayNGTypePositiveB;
                                this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);

                                singleClassNGPositiveB.Id = idOfPositiveB;
                                singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                saveImageWaferIDPositiveB = WaferIDPositiveB;

                            }
                            else
                            {
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "0";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = ResultOKPositiveB;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveB = "1";
                                }
                                SingleClassNGTypePositiveB = "";
                                this.RefreshCurrentClusterStatePositiveB(true, WaferIDPositiveB - 1);
                                //保存OK图片
                                //if (Convert.ToBoolean(IsSaveAllImage_PositiveB.I))
                                //{
                                //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveB);
                                //    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempOriImagePositiveB);
                                //    lock (LockObjectOriImageQueuePositiveB)
                                //    {
                                //        OriImageQueuePositiveB.Enqueue(tempOriImagePositiveB);
                                //    }
                                //}
                            }

                            IsCellLackB = true;
                            SingleClassCellMissingNGFlagArrayPositiveB[WaferIDPositiveB - 1] = true;

                            //HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveB);
                            //HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempCellMissImagePositiveB);
                            //lock (LockObjectCellMissImageQueuePositiveB)
                            //{
                            //    CellMissImageQueuePositiveB.Enqueue(tempCellMissImagePositiveB);
                            //}
                        }
                        //上半片无，下半片有，认为是首串首片
                        else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            if (IsCellLackB)
                            {
                                if (WaferIDPositiveB <= WaferCountPerClass)
                                    ++WaferIDPositiveB;
                                if (Global.isUpperLink == "1")
                                {
                                    if (Global.stringType == "小间距" && MainLineNum == 10)
                                    {
                                        tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                    }
                                }
                                else
                                {
                                    tellPlcCurrentStatePositiveB = "2";
                                }
                                if (Global.isEnglish == "0")
                                {
                                    SingleClassDistanceNGTypePositiveB = "少片";
                                }
                                else
                                {
                                    SingleClassDistanceNGTypePositiveB = "Cell Lack";
                                }
                                SingleClassCellMissingNGFlagArrayPositiveB[WaferIDPositiveB - 2] = true;
                                SingleClassNGTypePositiveB = SingleClassFilmShiftingTypePositiveB + " " + SingleClassFilmMissTypePositiveB + " " + SingleClassFilmShiftingOfHeadAndTailTypePositiveB + " " + SingleClassDistanceNGTypePositiveB + " " + SingleClassEdgeDefectTypePositiveB + " " + SingleClassSurfaceDefectTypePositiveB + " " + SingleClassSurfaceScratchTypePositiveB + " " + SingleClassBrokenLineTypePositiveB + " " + SingleClassStargingWeldingNGTypePositiveB + " " + SingleClassSurfaceMeanGrayNGTypePositiveB;
                                this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);

                                singleClassNGPositiveB.Id = idOfPositiveB;
                                singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                saveImageWaferIDPositiveB = WaferIDPositiveB;

                                HOperatorSet.GenEmptyObj(out tempCellMissImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempCellMissImagePositiveB);
                                lock (LockObjectCellMissImageQueuePositiveB)
                                {
                                    CellMissImageQueuePositiveB.Enqueue(tempCellMissImagePositiveB);
                                }
                                IsCellLackB = false;
                            }
                            else
                            {
                                IsCellLackB = false;
                                //初始化单串硅片编号
                                WaferIDPositiveB = 1;
                                isTopAndBottomNGPositiveB = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveB();
                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveB();

                                //根据数据结果进行相应赋值
                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                {
                                    SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                {
                                    SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                {
                                    SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                {
                                    SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                {
                                    SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                {
                                    SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                //将下半片平均灰度加入数组
                                SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfBottomWafer);
                            }
                        }
                        //上下半片都存在，认为不是首串首片，也不是末串末片
                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                        {
                            //电池片序号自增
                            if (WaferIDPositiveB <= WaferCountPerClass)
                                ++WaferIDPositiveB;
                            if (Convert.ToBoolean(hv_IsNextClass.I))
                            {

                                //抵达串间区域
                                //判断是否异常
                                if (Convert.ToBoolean(hv_IsException.I))
                                {
                                    if (Global.isUpperLink == "1")
                                    {
                                        if (Global.stringType == "小间距" && MainLineNum == 10)
                                        {
                                            tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                        }
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = "2";
                                    }
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassNGTypePositiveB = "算法异常";
                                    }
                                    else
                                    {
                                        SingleClassNGTypePositiveB = "Algorithm Exception";
                                    }
                                    //if (framePositiveB != null)
                                    //{
                                    //    string length = ImageRealTime + Convert.ToString(framePositiveB.Height);
                                    //    string path = "D:/源数据B/" + length + ".bin";
                                    //    byte[] bt = framePositiveB.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveB = null;
                                    //}
                                    this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);
                                    singleClassNGPositiveB.Id = idOfPositiveB;
                                    singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                    saveImageWaferIDPositiveB = WaferIDPositiveB;
                                    HOperatorSet.GenEmptyObj(out tempAlgorithmExceptionImagePositiveB);
                                    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempAlgorithmExceptionImagePositiveB);
                                    lock (LockObjectAlgorithmExceptionImageQueuePositiveB)
                                    {
                                        AlgorithmExceptionImageQueuePositiveB.Enqueue(tempAlgorithmExceptionImagePositiveB);
                                    }
                                    SingleClassAlgorithmExceptionNGFlagArrayPositiveB[WaferIDPositiveB - 2] = true;
                                    Global.SaveLog("D:\\Program Files\\Config\\033\\算法异常B.txt",
                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + hv_ExceptionInfo);

                                }
                                //判断当前串电池片数是否达到最低限度，即3片
                                else if (WaferIDPositiveB >= 3)
                                {
                                    //上串尾片数据处理
                                    SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                    SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                    SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                    SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                    SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                    SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                    //将上半片平均灰度值加入数组
                                    SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfTopWafer);


                                    //给PLC发送结果
                                    if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        //|| SingleClassDistanceNGFlagArrayPositiveB[WaferIDPositiveB - 3]
                                        || SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2]
                                         )
                                    //|| (SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = "2";
                                        }
                                        //整理Ng类型文档
                                        if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingTypePositiveB = "膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingTypePositiveB = "Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingTypePositiveB = "";
                                        }

                                        if (SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmMissTypePositiveB = "膜短|膜失";
                                            }
                                            else
                                            {
                                                SingleClassFilmMissTypePositiveB = "Film Short | Film Missing";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmMissTypePositiveB = "";
                                        }

                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "头尾膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "H/T Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "";
                                        }

                                        //if (SingleClassDistanceNGFlagArrayPositiveB[WaferIDPositiveB - 3])
                                        //{
                                        //    if (Global.isEnglish == "0")
                                        //    {
                                        //        SingleClassDistanceNGTypePositiveB = "片间距异常";
                                        //    }
                                        //    else
                                        //    {
                                        //        SingleClassDistanceNGTypePositiveB = "Cell Spacing Error";
                                        //    }

                                        //}
                                        //else
                                        //{
                                        //    SingleClassDistanceNGTypePositiveB = "";
                                        //}

                                        if (SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassEdgeDefectTypePositiveB = "边角破损";
                                            }
                                            else
                                            {
                                                SingleClassEdgeDefectTypePositiveB = "Edge/Corner Damage";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassEdgeDefectTypePositiveB = "";
                                        }

                                        if (SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceDefectTypePositiveB = "表面缺陷";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceDefectTypePositiveB = "Surface Defects";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceDefectTypePositiveB = "";
                                        }

                                        if (SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceScratchTypePositiveB = "划痕";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceScratchTypePositiveB = "Surface Scratchs";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceScratchTypePositiveB = "";
                                        }

                                        if (SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassBrokenLineTypePositiveB = "断栅";
                                            }
                                            else
                                            {
                                                SingleClassBrokenLineTypePositiveB = "Broken Finger";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassBrokenLineTypePositiveB = "";
                                        }

                                        if (SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassStargingWeldingNGTypePositiveB = "起焊点异常";
                                            }
                                            else
                                            {
                                                SingleClassStargingWeldingNGTypePositiveB = "Cell To Rib Head Dist Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassStargingWeldingNGTypePositiveB = "";
                                        }
                                        SingleClassSurfaceMeanGrayNGTypePositiveB = "";
                                        SingleClassNGTypePositiveB = SingleClassFilmShiftingTypePositiveB + "" + SingleClassFilmMissTypePositiveB + "" + SingleClassFilmShiftingOfHeadAndTailTypePositiveB + "" + SingleClassDistanceNGTypePositiveB + "" + SingleClassEdgeDefectTypePositiveB + "" + SingleClassSurfaceDefectTypePositiveB + " " + SingleClassSurfaceScratchTypePositiveB + "" + SingleClassBrokenLineTypePositiveB + "" + SingleClassStargingWeldingNGTypePositiveB + "" + SingleClassSurfaceMeanGrayNGTypePositiveB;
                                        this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);

                                        singleClassNGPositiveB.Id = idOfPositiveB;
                                        singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                        saveImageWaferIDPositiveB = WaferIDPositiveB;
                                        tempSaveImageWaferIDPositiveB = WaferIDPositiveB;
                                    }
                                    else
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "0";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveB = ResultOKPositiveB;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = "1";
                                        }
                                        SingleClassNGTypePositiveB = "";
                                        this.RefreshCurrentClusterStatePositiveB(true, WaferIDPositiveB - 1);
                                        //保存OK图片
                                        //if (Convert.ToBoolean(IsSaveAllImage_PositiveB.I))
                                        //{
                                        //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveB);
                                        //    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempOriImagePositiveB);
                                        //    lock (LockObjectOriImageQueuePositiveB)
                                        //    {
                                        //        OriImageQueuePositiveB.Enqueue(tempOriImagePositiveB);
                                        //    }
                                        //}
                                    }

                                    //上串检测数据统计汇总
                                    TotalAlgorithmExceptionCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassAlgorithmExceptionNGFlagArrayPositiveB);
                                    TotalCellMissingCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassCellMissingNGFlagArrayPositiveB);
                                    TotalFilmShiftingCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayPositiveB);
                                    TotalFilmMissCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayPositiveB);
                                    TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB);
                                    TotalDistanceNGCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayPositiveB);
                                    TotalEdgeDefectCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayPositiveB);
                                    TotalSurfaceDefectCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayPositiveB) + StaticTrueCountInFlagArray(SingleClassSurfaceScratchFlagArrayPositiveB);
                                    TotalBrokenLineCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayPositiveB);
                                    TotalStartingWeldingNGCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayPositiveB);
                                    TotalEmptyPlateCountPerClassPositiveB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayPositiveB);

                                    ++TotalCountPositiveB;
                                    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalFilmMissCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalCellMissingCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveB > 0)) > 0
                                        || (SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB
                                        )
                                    {
                                        HistoryNGPositiveBList.Add(HistoryNGPositiveB);
                                        //AddNGHistoryRow("B", HistoryNGPositiveB);
                                        //RefreshNGIfo(0, HistoryNGPositiveBList);
                                        HistoryNGPositiveB = new string[WaferCountPerClass + 3];
                                        ++NGTotalCountPositiveB;
                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalFilmMissCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalDistanceNGCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalBrokenLineCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalCellMissingCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassPositiveB > 0)) > 1)
                                        {
                                            ++MajorFailureCountPositiveB;
                                        }
                                        //暂时先用背面片间距计数代替正面异常计数
                                        if (TotalAlgorithmExceptionCountPerClassPositiveB > 0)
                                        {
                                            ++TotalDistanceNGCountNegativeB;
                                        }
                                        //用背面膜缺失计数代替正面少片计数
                                        if (TotalCellMissingCountPerClassPositiveB > 0)
                                        {
                                            ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                        }
                                        if (TotalFilmShiftingCountPerClassPositiveB > 0)
                                        {
                                            ++TotalFilmShiftingCountPositiveB;
                                        }
                                        if (TotalFilmMissCountPerClassPositiveB > 0)
                                        {
                                            ++TotalFilmMissCountPositiveB;
                                        }
                                        if (TotalFilmShiftingOfHeadAndTailCountPerClassPositiveB > 0)
                                        {
                                            ++TotalFilmShiftingOfHeadAndTailCountPositiveB;
                                        }
                                        if (TotalDistanceNGCountPerClassPositiveB > 0)
                                        {
                                            ++TotalDistanceNGCountPositiveB;
                                        }
                                        if (TotalEdgeDefectCountPerClassPositiveB > 0)
                                        {
                                            ++TotalEdgeDefectCountPositiveB;
                                        }
                                        if (TotalSurfaceDefectCountPerClassPositiveB > 0)
                                        {
                                            ++TotalSurfaceDefectCountPositiveB;
                                        }
                                        if (TotalBrokenLineCountPerClassPositiveB > 0)
                                        {
                                            ++TotalBrokenLineCountPositiveB;
                                        }
                                        if (TotalStartingWeldingNGCountPerClassPositiveB > 0)
                                        {
                                            ++TotalStartingWeldingNGCountPositiveB;
                                        }
                                        if (TotalEmptyPlateCountPerClassPositiveB > 0)
                                        {
                                            ++TotalEmptyPlateCountPositiveB;
                                        }
                                        if ((SingleClassSurfaceMeanGrayArrayPositiveB.Max() - SingleClassSurfaceMeanGrayArrayPositiveB.Min()) >= SurfaceColorDiffGrayThreshPositiveB)
                                        {
                                            ++TotalSurfaceColorDiffCountPositiveB;
                                        }
                                    }
                                }

                                //清空主界面当前串内片信息Flag
                                this.ClearCurrentClusterStatePositiveB(WaferIDPositiveB - 1);
                                //初始化单串硅片编号
                                WaferIDPositiveB = 1;
                                isTopAndBottomNGPositiveB = new bool[30];
                                //初始化单串Flag数组(所有元素置为false)
                                this.ClearSingleClassFlagArrayPositiveB();


                                //根据数据结果进行相应赋值
                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                {
                                    SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                {
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                {
                                    SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                {
                                    SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                {
                                    SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                {
                                    SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                {
                                    SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                }
                                //将下半片平均灰度值加入数组
                                SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfBottomWafer);
                            }
                            //未到串与串之间
                            else
                            {
                                //未抵达串间区域
                                //判断是否异常
                                if (Convert.ToBoolean(hv_IsException.I))
                                {
                                    if (Global.isUpperLink == "1")
                                    {
                                        if (Global.stringType == "小间距" && MainLineNum == 10)
                                        {
                                            tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                        }
                                    }
                                    else
                                    {
                                        tellPlcCurrentStatePositiveB = "2";
                                    }
                                    if (Global.isEnglish == "0")
                                    {
                                        SingleClassNGTypePositiveB = "算法异常";
                                    }
                                    else
                                    {
                                        SingleClassNGTypePositiveB = "Algorithm Exception";
                                    }
                                    //if (framePositiveB != null)
                                    //{
                                    //    string length = Convert.ToString(framePositiveB.Height);
                                    //    string path = "D:/源数据B/" + length + ".bin";
                                    //    byte[] bt = framePositiveB.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveB = null;
                                    //}

                                    this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);
                                    singleClassNGPositiveB.Id = idOfPositiveB;
                                    singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                    saveImageWaferIDPositiveB = WaferIDPositiveB;
                                    HOperatorSet.GenEmptyObj(out tempAlgorithmExceptionImagePositiveB);
                                    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempAlgorithmExceptionImagePositiveB);
                                    lock (LockObjectAlgorithmExceptionImageQueuePositiveB)
                                    {
                                        AlgorithmExceptionImageQueuePositiveB.Enqueue(tempAlgorithmExceptionImagePositiveB);
                                    }
                                    SingleClassAlgorithmExceptionNGFlagArrayPositiveB[WaferIDPositiveB - 2] = true;
                                    Global.SaveLog("D:\\Program Files\\Config\\033\\算法异常B.txt",
                    DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + hv_ExceptionInfo);

                                }
                                else
                                //没有异常
                                {
                                    //上半片膜偏处理
                                    SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                    //下半片膜偏处理
                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                    {
                                        SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片膜失处理
                                    SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                    //下半片膜失处理
                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                    {
                                        SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片头尾膜偏处理
                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                    //下半片头尾膜偏处理
                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                    {
                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //片间距处理
                                    if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                    {
                                        SingleClassDistanceNGFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片边角缺陷处理
                                    SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                    //下半片边角缺陷处理
                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                    {
                                        SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片表面缺陷处理
                                    SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                    //下半片表面缺陷处理
                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                    {
                                        SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片表面划痕处理
                                    SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                    //下半片表面划痕处理
                                    if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                    {
                                        SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //上半片断栅处理
                                    SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] = SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                    //下半片断栅处理
                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                    {
                                        SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //下半片起焊点异常处理
                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                    {
                                        SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 1] = true;
                                    }
                                    //将上下半片平均灰度值加入数组
                                    SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfTopWafer);
                                    SingleClassSurfaceMeanGrayArrayPositiveB.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                    //判断是否有色差
                                    if ((hv_SurfaceMeanGrayOfTopWafer - hv_SurfaceMeanGrayOfBottomWafer) >= SurfaceColorDiffGrayThreshPositiveB || (hv_SurfaceMeanGrayOfTopWafer - hv_SurfaceMeanGrayOfBottomWafer) <= -SurfaceColorDiffGrayThreshPositiveB)
                                    {
                                        SingleClassSurfaceMeanGrayFlagPositiveB = true;
                                    }
                                    else
                                    {
                                        SingleClassSurfaceMeanGrayFlagPositiveB = false;
                                    }


                                    if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                    {
                                        SingleClassEmptyPlateFlagArrayPositiveB[WaferIDPositiveB - 2] = true;
                                    }

                                    //给PLC发送结果
                                    if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassDistanceNGFlagArrayPositiveB[WaferIDPositiveB - 1]
                                        || SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2]
                                        || SingleClassSurfaceMeanGrayFlagPositiveB)
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = "2";
                                        }

                                        //整理Ng类型文档
                                        if (SingleClassFilmShiftingFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingTypePositiveB = "膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingTypePositiveB = "Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingTypePositiveB = "";
                                        }

                                        if (SingleClassFilmMissFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmMissTypePositiveB = "膜短|膜失";
                                            }
                                            else
                                            {
                                                SingleClassFilmMissTypePositiveB = "Film Short | Film Missing";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmMissTypePositiveB = "";
                                        }

                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "头尾膜偏|露白";
                                            }
                                            else
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "H/T Film Offset | Ribbon Offset";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassFilmShiftingOfHeadAndTailTypePositiveB = "";
                                        }

                                        if (SingleClassDistanceNGFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassDistanceNGTypePositiveB = "片间距异常";
                                            }
                                            else
                                            {
                                                SingleClassDistanceNGTypePositiveB = "Cell Spacing Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassDistanceNGTypePositiveB = "";
                                        }

                                        if (SingleClassEdgeDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassEdgeDefectTypePositiveB = "边角破损";
                                            }
                                            else
                                            {
                                                SingleClassEdgeDefectTypePositiveB = "Edge/Corner Damage";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassEdgeDefectTypePositiveB = "";
                                        }

                                        if (SingleClassSurfaceDefectFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceDefectTypePositiveB = "表面缺陷";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceDefectTypePositiveB = "Surface Defects";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceDefectTypePositiveB = "";
                                        }

                                        if (SingleClassSurfaceScratchFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceScratchTypePositiveB = "划痕";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceScratchTypePositiveB = "Surface Scratchs";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceScratchTypePositiveB = "";
                                        }

                                        if (SingleClassBrokenLineFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassBrokenLineTypePositiveB = "断栅";
                                            }
                                            else
                                            {
                                                SingleClassBrokenLineTypePositiveB = "Broken Finger";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassBrokenLineTypePositiveB = "";
                                        }

                                        if (SingleClassStargingWeldingNGFlagArrayPositiveB[WaferIDPositiveB - 2])
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassStargingWeldingNGTypePositiveB = "起焊点异常";
                                            }
                                            else
                                            {
                                                SingleClassStargingWeldingNGTypePositiveB = "Cell To Rib Head Dist Error";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassStargingWeldingNGTypePositiveB = "";
                                        }

                                        if (SingleClassSurfaceMeanGrayFlagPositiveB)
                                        {
                                            if (Global.isEnglish == "0")
                                            {
                                                SingleClassSurfaceMeanGrayNGTypePositiveB = "色差";
                                            }
                                            else
                                            {
                                                SingleClassSurfaceMeanGrayNGTypePositiveB = "Color Diff";
                                            }

                                        }
                                        else
                                        {
                                            SingleClassSurfaceMeanGrayNGTypePositiveB = "";
                                        }
                                        SingleClassNGTypePositiveB = SingleClassFilmShiftingTypePositiveB + "" + SingleClassFilmMissTypePositiveB + "" + SingleClassFilmShiftingOfHeadAndTailTypePositiveB + "" + SingleClassDistanceNGTypePositiveB + "" + SingleClassEdgeDefectTypePositiveB + "" + SingleClassSurfaceDefectTypePositiveB + " " + SingleClassSurfaceScratchTypePositiveB + "" + SingleClassBrokenLineTypePositiveB + "" + SingleClassStargingWeldingNGTypePositiveB + "" + SingleClassSurfaceMeanGrayNGTypePositiveB;
                                        this.RefreshCurrentClusterStatePositiveB(false, WaferIDPositiveB - 1);

                                        singleClassNGPositiveB.Id = idOfPositiveB;
                                        singleClassNGPositiveB.Info[WaferIDPositiveB - 2] = SingleClassNGTypePositiveB.Trim();
                                        saveImageWaferIDPositiveB = WaferIDPositiveB;
                                    }
                                    else
                                    {
                                        if (Global.isUpperLink == "1")
                                        {
                                            if (Global.stringType == "小间距" && MainLineNum == 10)
                                            {
                                                tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "0";
                                            }
                                            else
                                            {
                                                tellPlcCurrentStatePositiveB = ResultOKPositiveB;
                                            }
                                        }
                                        else
                                        {
                                            tellPlcCurrentStatePositiveB = "1";
                                        }
                                        SingleClassNGTypePositiveB = "";
                                        this.RefreshCurrentClusterStatePositiveB(true, WaferIDPositiveB - 1);
                                        //保存OK图片
                                        //if (Convert.ToBoolean(IsSaveAllImage_PositiveB.I))
                                        //{
                                        //    HOperatorSet.GenEmptyObj(out tempOriImagePositiveB);
                                        //    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempOriImagePositiveB);
                                        //    lock (LockObjectOriImageQueuePositiveB)
                                        //    {
                                        //        OriImageQueuePositiveB.Enqueue(tempOriImagePositiveB);
                                        //    }
                                        //}
                                    }
                                }
                            }
                        }
#endregion
                    }

                    //宽度分辨率校准赋值
                    if (hv_IsWidthResolutionCalibrateFinish)
                    {
                        IsUsingWidthResolutionCalibratePositiveB = 0;
                        Global.isUsingWidthResolutionCalibratePositiveB = "0";
                        WidthResolutionPositiveB = hv_WidthResolutionOut;
                        Global.widthResolutionPositiveB = WidthResolutionPositiveB.ToString();
                        Config.WriteIniData("Config", "IsUsingWidthResolutionCalibratePositiveB", Global.isUsingWidthResolutionCalibratePositiveB, defaultRecipePath);
                        Config.WriteIniData("Config", "WidthResolutionPositiveB", Global.widthResolutionPositiveB, defaultRecipePath);
                        mfParameterInterface.chkIsUsingWidthResolutionCalibrate_PositiveB.Checked = false;
                        mfParameterInterface.txtWidthResolution_PositiveB.Text = WidthResolutionPositiveB.ToString();
                    }

                    //高度分辨率校准赋值
                    if (hv_IsHeightResolutionCalibrateFinish)
                    {
                        IsUsingHeightResolutionCalibratePositiveB = 0;
                        Global.isUsingHeightResolutionCalibratePositiveB = "0";
                        HeightResolutionPositiveB = hv_HeightResolutionOut;
                        Global.heightResolutionPositiveB = HeightResolutionPositiveB.ToString();
                        Config.WriteIniData("Config", "IsUsingHeightResolutionCalibratePositiveB", Global.isUsingHeightResolutionCalibratePositiveB, defaultRecipePath);
                        Config.WriteIniData("Config", "HeightResolutionPositiveB", Global.heightResolutionPositiveB, defaultRecipePath);
                        mfParameterInterface.chkIsUsingHeightResolutionCalibrate_PositiveB.Checked = false;
                        mfParameterInterface.txtHeightResolution_PositiveB.Text = HeightResolutionPositiveB.ToString();
                    }


                    lock (LockObjectNextClassPositiveB)
                    {
                        bool isTopNG = false;
                        bool isBottomNG = false;

                        if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                           Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                        {
                            isTopNG = true;
                        }

                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                           Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                        {
                            isBottomNG = true;
                        }
                        if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                        {
                            isTopAndBottomNGPositiveB[WaferIDPositiveB] = true;
                        }

                        if (WaferIDPositiveB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                        {
                            if (isTopNG)
                                isTopAndBottomNGPositiveB[WaferIDPositiveB] = true;
                            string singleClassNGPositiveBStr = null;
                            foreach (string str in singleClassNGPositiveB.Info)
                            {
                                if (str != null)
                                {
                                    singleClassNGPositiveBStr = str;
                                    break;
                                }
                            }
                            if (singleClassNGPositiveBStr != null)
                                idOfPositiveB++;
                            isNextClassFlagPositiveB = true;
                            //tempSingleClassNGPositiveB = new SingleClassNG();
                            //tempSingleClassNGPositiveB.Id = idOfPositiveB;
                        }

                        //保存NG图片
                        if (Convert.ToBoolean(IsSaveNGImage_PositiveB.I))
                        {
                            //#region 增加保存最近10张
                            //HOperatorSet.GenEmptyObj(out tempNGImagePositiveB);
                            //HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempNGImagePositiveB);
                            ////Thread.Sleep(10);

                            //NGImageQueueB.Enqueue(tempNGImagePositiveB);

                            ////保存ROI图片

                            //HOperatorSet.GenEmptyObj(out tempRoiNGImagePositiveB);
                            //HOperatorSet.DumpWindowImage(out tempRoiNGImagePositiveB, WindowsHandlePositiveB);

                            //RoiNGImageQueueB.Enqueue(tempRoiNGImagePositiveB);

                            //#endregion

                            if (SingleClassSurfaceMeanGrayFlagPositiveB)
                            {
                                HOperatorSet.GenEmptyObj(out tempSurfaceMeanGrayImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempSurfaceMeanGrayImagePositiveB);
                                lock (LockObjectSurfaceMeanGrayImageQueuePositiveB)
                                {
                                    saveImageWaferIDPositiveB = WaferIDPositiveB+1;
                                    SurfaceMeanGrayImageQueuePositiveB.Enqueue(tempSurfaceMeanGrayImagePositiveB);
                                }
                            }
                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempFilmShiftingImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempFilmShiftingImagePositiveB);
                                lock (LockObjectFilmShiftingImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    FilmShiftingImageQueuePositiveB.Enqueue(tempFilmShiftingImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiFilmShiftingImageQueuePositiveB)
                                    {
                                        RoiFilmShiftingImageQueuePositiveB.Enqueue(tempRoiFilmShiftingImagePositiveB);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempFilmMissImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempFilmMissImagePositiveB);
                                lock (LockObjectFilmMissImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    FilmMissImageQueuePositiveB.Enqueue(tempFilmMissImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiFilmMissImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiFilmMissImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiFilmMissImageQueuePositiveB)
                                    {
                                        RoiFilmMissImageQueuePositiveB.Enqueue(tempRoiFilmMissImagePositiveB);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempHeadAndTailFilmShiftingImagePositiveB);
                                lock (LockObjectHeadAndTailFilmShiftingImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    HeadAndTailFilmShiftingImageQueuePositiveB.Enqueue(tempHeadAndTailFilmShiftingImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiHeadAndTailFilmShiftingImageQueuePositiveB)
                                    {
                                        RoiHeadAndTailFilmShiftingImageQueuePositiveB.Enqueue(tempRoiHeadAndTailFilmShiftingImagePositiveB);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempEdgeDefectImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempEdgeDefectImagePositiveB);
                                lock (LockObjectEdgeDefectImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    EdgeDefectImageQueuePositiveB.Enqueue(tempEdgeDefectImagePositiveB);

                                    //增加保存相机数据流文件
                                    //if (framePositiveB != null)
                                    //{
                                    //    string length = ImageRealTime + Convert.ToString(framePositiveB.Height);
                                    //    string path = "D:/源数据B/" + length + ".bin";
                                    //    byte[] bt = framePositiveB.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveB = null;
                                    //}
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiEdgeDefectImageQueuePositiveB)
                                    {
                                        RoiEdgeDefectImageQueuePositiveB.Enqueue(tempRoiEdgeDefectImagePositiveB);
                                    }
                                }
                            }
                            
                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempSurfaceDefectImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempSurfaceDefectImagePositiveB);
                                lock (LockObjectSurfaceDefectImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    SurfaceDefectImageQueuePositiveB.Enqueue(tempSurfaceDefectImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiSurfaceDefectImageQueuePositiveB)
                                    {
                                        RoiSurfaceDefectImageQueuePositiveB.Enqueue(tempRoiSurfaceDefectImagePositiveB);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempBrokenLineImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempBrokenLineImagePositiveB);
                                lock (LockObjectBrokenLineImageQueuePositiveB)
                                {
                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                        saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    BrokenLineImageQueuePositiveB.Enqueue(tempBrokenLineImagePositiveB);
                                    //if (framePositiveB != null)
                                    //{
                                    //    string length = ImageRealTime + Convert.ToString(framePositiveB.Height);
                                    //    string path = "D:/源数据B/" + length + ".bin";
                                    //    byte[] bt = framePositiveB.Image;
                                    //    MemoryStream ms = new MemoryStream(bt);
                                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                                    //    ms.WriteTo(fs);
                                    //    ms.Close();
                                    //    fs.Close();
                                    //    framePositiveB = null;
                                    //}
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiBrokenLineImageQueuePositiveB)
                                    {
                                        RoiBrokenLineImageQueuePositiveB.Enqueue(tempRoiBrokenLineImagePositiveB);
                                    }
                                }
                            }
                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                            {
                                HOperatorSet.GenEmptyObj(out tempStartWeldingNGImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempStartWeldingNGImagePositiveB);
                                lock (LockObjectStartWeldingNGImageQueuePositiveB)
                                {
                                    saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    StartWeldingNGImageQueuePositiveB.Enqueue(tempStartWeldingNGImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiStartWeldingNGImageQueuePositiveB)
                                    {
                                        RoiStartWeldingNGImageQueuePositiveB.Enqueue(tempRoiStartWeldingNGImagePositiveB);
                                    }
                                }
                            }

                            if (Convert.ToBoolean(hv_IsDistanceNG.I))
                            {
                                isTopAndBottomNGPositiveB[WaferIDPositiveB] = true;
                                HOperatorSet.GenEmptyObj(out tempDistanceNGImagePositiveB);
                                HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempDistanceNGImagePositiveB);
                                lock (LockObjectDistanceNGImageQueuePositiveB)
                                {
                                    saveImageWaferIDPositiveB = WaferIDPositiveB + 1;
                                    DistanceNGImageQueuePositiveB.Enqueue(tempDistanceNGImagePositiveB);
                                }
                                //保存ROI图片
                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_PositiveB.I))
                                {
                                    HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImagePositiveB);
                                    HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImagePositiveB, WindowsHandlePositiveB);
                                    lock (LockObjectRoiDistanceNGImageQueuePositiveB)
                                    {
                                        RoiDistanceNGImageQueuePositiveB.Enqueue(tempRoiDistanceNGImagePositiveB);
                                    }
                                }
                            }
                        }

                        if (WaferIDPositiveB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                        {
                            string singleClassNGPositiveBStr = null;
                            foreach (string str in singleClassNGPositiveB.Info)
                            {
                                if (str != null)
                                {
                                    singleClassNGPositiveBStr = str;
                                    break;
                                }
                            }
                            if (singleClassNGPositiveBStr != null)
                            {
                                isSingleClassOKPositiveB = false;
                                singleClassNGPositiveB.UpdateDone = false;
                                singleClassNGPositiveBList.Add(singleClassNGPositiveB);
                            }
                            else
                            {
                                isSingleClassOKPositiveB = true;
                            }
                            singleClassNGPositiveB = new SingleClassNG();
                        }

                    }




                    //容错报警串数功能启用
                    //待定
                    //ImageQueuePositiveB.Enqueue(ho_MainImagePositiveB);
                    
                    if(Global.isUpperLink=="1")
                    {
                        lock (Result2PLC)
                        {
                            Result2PLC.Enqueue(tellPlcCurrentStatePositiveB);
                        }
                    }
                    else
                    {
                        lock (ResultPositiveB)
                        {
                            ResultPositiveB.Enqueue(tellPlcCurrentStatePositiveB);
                        }
                    }
                    
                    
#endregion
                }
                catch (Exception ex)
                {
                    if (IsNextClassB)
                    {
                        ++NGTotalCountPositiveB;
                    }
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\异常B.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImagePositiveB);
                    HOperatorSet.CopyImage(ho_MainImagePositiveB, out tempExceptionImagePositiveB);
                    lock (LockObjectExceptionImageQueuePositiveB)
                    {
                        ExceptionImageQueuePositiveB.Enqueue(tempExceptionImagePositiveB);


                    }

                    //if (framePositiveB != null)
                    //{
                    //    string length = ImageRealTime + Convert.ToString(framePositiveB.Height);
                    //    string path = "D:/源数据B/" + length + ".bin";
                    //    byte[] bt = framePositiveB.Image;
                    //    MemoryStream ms = new MemoryStream(bt);
                    //    FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite);
                    //    ms.WriteTo(fs);
                    //    ms.Close();
                    //    fs.Close();
                    //    framePositiveB = null;
                    //}
                    //重置检测，防止出现索引报错
                    //初始化单串硅片编号
                    WaferIDPositiveB = 1;
                    isTopAndBottomNGPositiveB = new bool[30];
                    //初始化单串Flag数组(所有元素置为false)
                    this.ClearSingleClassFlagArrayPositiveB();
                    if (Global.isUpperLink == "1")
                    {
                        if (Global.stringType == "小间距" && MainLineNum == 10)
                        {
                            tellPlcCurrentStatePositiveB = "WRS EM2630 2" + " " + (i + 1) + " " + "1";
                        }
                        else
                        {
                            tellPlcCurrentStatePositiveB = ResultNGPositiveB;
                        }
                    }
                    else
                    {
                        tellPlcCurrentStatePositiveB = "2";
                    }
                    if (Global.isUpperLink == "1")
                    {
                        lock (Result2PLC)
                        {
                            Result2PLC.Enqueue(tellPlcCurrentStatePositiveB);
                        }
                    }
                    else
                    {
                        lock (ResultPositiveB)
                        {
                            ResultPositiveB.Enqueue(tellPlcCurrentStatePositiveB);
                        }
                    }
                    mfPositiveInterface.lblPositiveInterfaceCurrentClusterStateB1.BackColor = Color.Red;
                    mfPositiveInterface.lblPositiveInterfaceCurrentClusterTypeB1.Text = "异常";


                    string singleClassNGPositiveBStr = null;
                    foreach (string str in singleClassNGPositiveB.Info)
                    {
                        if (str != null)
                        {
                            singleClassNGPositiveBStr = str;
                            break;
                        }
                    }
                    if (singleClassNGPositiveBStr != null)
                    {
                        idOfPositiveB++;
                        singleClassNGPositiveB.UpdateDone = true;
                        singleClassNGPositiveBList.Add(singleClassNGPositiveB);
                    }
                    singleClassNGPositiveB = new SingleClassNG();

                }
            }
            
        }

        //A侧背面串检检测
        public void ActionNegativeA()
        {
           
                //显示主图像
                HOperatorSet.GetImageSize(ho_MainImageNegativeA, out ImageWidthNegativeA, out ImageHeightNegativeA);
                //判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
                //20190226 黄浩
                //增大异常图片行数阈值，降低异常图片保存数量，从10改为500
                if (ImageHeightNegativeA <= 500 )
                {
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeA);
                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempExceptionImageNegativeA);
                    lock (LockObjectExceptionImageQueueNegativeA)
                    {
                        ExceptionImageQueueNegativeA.Enqueue(tempExceptionImageNegativeA);
                    }
                    return;
                }
                HOperatorSet.SetPart(WindowsHandleNegativeA, 0, 0, ImageHeightNegativeA, ImageWidthNegativeA);
                HOperatorSet.SetDraw(WindowsHandleNegativeA, "margin");
                HOperatorSet.DispObj(ho_MainImageNegativeA, WindowsHandleNegativeA);

                //背面串检
                HTuple hv_IsBackDetect = 1;
               
                if (Global.stringType == "常规间距")
                {
#region 正常片间距
                                    try
                                    {
                    
                                        //局部变量
                                        HObject ho_totalFilmShiftingRegion = null;
                                        HObject ho_totalFilmMissRegion = null;
                                        HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                        HObject ho_totalEdgeDefectRegion = null;
                                        HObject ho_totalSurfaceDefectRegion = null;
                                        HObject ho_totalBrokenLineRegion = null;

                                        HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                                        ho_totalFilmShiftingRegion.Dispose();
                                        ho_totalFilmMissRegion.Dispose();
                                        ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                        ho_totalEdgeDefectRegion.Dispose();
                                        ho_totalSurfaceDefectRegion.Dispose();
                                        ho_totalBrokenLineRegion.Dispose();

                                        HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                        HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                        HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                        HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                        HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                        HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                        HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                        HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                        HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                        HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                        HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                                        HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
                                        HFuncNegativeA.ProcessingImage(ho_MainImageNegativeA, out ho_totalFilmShiftingRegion,
                                      out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                      out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                      out ho_totalBrokenLineRegion, ImageWidthNegativeA, ImageHeightNegativeA,
                                      WindowsHandleNegativeA, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                      IsUsingWidthResolutionCalibrateNegativeA, WidthResolutionNegativeA, WaferWidthNegativeA,
                                      IsUsingHeightResolutionCalibrateNegativeA, HeightResolutionNegativeA, ViceLineInterval,
                                      IsUsingFilmShiftingDetectNegativeA, TopShieldLengthOfTopRegionNegativeA, BottomShieldLengthOfTopRegionNegativeA,
                                      TopShieldLengthOfBottomRegionNegativeA, BottomShieldLengthOfBottomRegionNegativeA,
                                      LocationMainLineThreshNegativeA, FilmWidthThreshNegativeA, FilmWidthOffSetNegativeA,
                                      FirstDetectPosForTopRegionNegativeA, SecondDetectPosForTopRegionNegativeA,
                                      FirstDetectPosForBottomRegionNegativeA, SecondDetectPosForBottomRegionNegativeA,
                                      IsUsingFilmMissDetectNegativeA, WeldWidthThreshNegativeA,
                                      IsUsingHeadAndTailFilmShiftingDetectNegativeA, HeadAndTailFilmWidthThreshNegativeA,
                                      HeadAndTailFilmShieldLengthNegativeA, HeadAndTailFilmDetectRangeNegativeA,
                                      IsUsingWaferEdgeCalibrationNegativeA, LocationWaferEdgeThreshNegativeA, WaferEdgeCalibrationRegionDilationPixelNegativeA,
                                      IsUsingDistanceDetectNegativeA, MinimumDistanceThreshNegativeA, MaxDistanceThreshNegativeA,
                                      ClassDistanceThreshNegativeA, IsUsingEdgeDefectDetectNegativeA, EdgeBigDefectWidthThreshNegativeA,
                                      EdgeBigDefectHeightThreshNegativeA, EdgeSmallDefectDetectDepthNegativeA, EdgeSmallDefectGrayThreshNegativeA,
                                      EdgeSmallDefectWidthThreshNegativeA, EdgeSmallDefectHeightThreshNegativeA,
                                      EdgeSmallDefectGrayMeanThreshNegativeA, EdgeSmallDefectGrayDeviationThreshNegativeA,
                                      CornerDefectAreaRatioThreshNegativeA, IsUsingSurfaceDefectDetectNegativeA,
                                      SurfaceDefectGrayThreshNegativeA, SurfaceDefectWidthThreshNegativeA, SurfaceDefectHeightThreshNegativeA,
                                      SurfaceDefectDetectIndentDepthNegativeA, SurfaceDefectViceLineShieldWidthNegativeA,
                                      SurfaceDefectViceLineShieldLeftPosOffSetNegativeA, SurfaceDefectViceLineShieldRightPosOffSetNegativeA,
                                      SurfaceScratchGrayThreshNegativeA, SurfaceScratchWidthThreshNegativeA, SurfaceScratchHeightThreshNegativeA,
                                      IsUsingStartWeldingDetectNegativeA, StartWeldingDistanceMaxThreshNegativeA,
                                      StartWeldingDistanceMinThreshNegativeA, IsUsingBrokenLineDetectNegativeA,
                                      BrokenLineGrayThreshNegativeA, BrokenLineWidthThreshNegativeA, BrokenLineHeightThreshNegativeA,
                                      BrokenLineDetectIndentDepthNegativeA, IsUsingSurfaceColorDiffDetectNegativeA,
                                      IsEnglish, WeldShieldLengthNegativeA, GrayOpenHeight, MainLineDistance, out hv_IsException,
                                      out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                      out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                      out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                      out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                      out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                      out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                      out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                      out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                      out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                      out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                      out hv_IsStartWeldingNGOfBottomWafer,
                                      out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);


                                        if (bl_IsRunNegative)
                                        {
#region 串信息统计
                                            //平台空的情况
                                            if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //未检测到首串首片,平台空
                                                if (Global.isUpperLink=="1")
                                                {
                                                    tellPlcCurrentStateNegativeA = ResultEmptyNegativeA;
                                                }
                                                else
                                                {
                                                    tellPlcCurrentStateNegativeA = "8";
                                                }
                            
                                            }
                                            //上半片无，下半片有，认为是首串首片
                                            else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //初始化单串硅片编号
                                                WaferIDNegativeA = 1;
                                                //初始化单串Flag数组(所有元素置为false)
                                                this.ClearSingleClassFlagArrayNegativeA();
                                                //清空主界面当前串内片信息Flag
                                                this.ClearCurrentClusterStateNegativeA();

                                                //根据数据结果进行相应赋值
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                //将下半片平均灰度加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);
                                            }
                                            //上下半片都存在，认为不是首串首片，也不是末串末片
                                            else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //电池片序号自增
                                                if (WaferIDNegativeA <= WaferCountPerClass)
                                                    ++WaferIDNegativeA;
                                                if (Convert.ToBoolean(hv_IsNextClass.I))
                                                {
                                                    //抵达串间区域
                                                    //判断当前串电池片数是否达到最低限度，即3片
                                                    if (WaferIDNegativeA >= 3)
                                                    {
                                                        //上串尾片数据处理
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                        //将上半片平均灰度值加入数组
                                                        SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                        //给PLC发送结果
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3]
                                                            || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {
                                       
                                                            if(Global.isUpperLink=="1")
                                                            {
                                                                tellPlcCurrentStateNegativeA = ResultNGNegativeA;
                                                            }
                                                            else
                                                            {
                                                                tellPlcCurrentStateNegativeA = "2";
                                                            }

                                      
                                                            //整理Ng类型文档
                                                            if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                if (Global.isEnglish == "0")
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                                }
                                                                else
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }

                                                            if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3])
                                                            {
                                                                SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                                //SingleClassDistanceNGTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassDistanceNGTypeNegativeA = "";
                                                            }

                                                            if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }

                                                            if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                                SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }

                                                            if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }

                                                            if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }

                                                            //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                            SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                            this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA - 1);

                                                            singleClassNGNegativeA.Id = idOfNegativeA;
                                                            singleClassNGNegativeA.Info[WaferIDNegativeA - 2] = SingleClassNGTypeNegativeA;
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                            tempSaveImageWaferIDNegativeA = WaferIDNegativeA;
                                                        }
                                                        else
                                                        {
                                                            if (Global.isUpperLink == "1")
                                                            {
                                                                tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                            }
                                                            else
                                                            {
                                                                tellPlcCurrentStateNegativeA = "1";
                                                            }
                                                            this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA - 1);
                                                            //保存OK图片
                                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                                lock (LockObjectOriImageQueueNegativeA)
                                                                {
                                                                    OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                                }
                                                            }
                                                        }

                                                        //上串检测数据统计汇总
                                                        TotalFilmShiftingCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeA);
                                                        TotalFilmMissCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeA);
                                                        TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA);
                                                        TotalDistanceNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeA);
                                                        TotalEdgeDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeA);
                                                        TotalSurfaceDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeA);
                                                        TotalBrokenLineCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeA);
                                                        TotalStartingWeldingNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeA);
                                                        TotalEmptyPlateCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeA);

                                                        ++TotalCountNegativeA;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 0
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {

                                                            HistoryNGNegativeAList.Add(HistoryNGNegativeA);
                                                            //RefreshNGIfo(0, HistoryNGNegativeAList);
                                                            //RefreshNGIfo(0, HistoryNGPositiveAList, HistoryNGNegativeAList);
                                                            HistoryNGNegativeA = new string[WaferCountPerClass + 3];
                                                            ++NGTotalCountNegativeA;
                                                            if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 1)
                                                            {
                                                                ++MajorFailureCountNegativeA;
                                                            }
                                                            if (TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingCountNegativeA;
                                                            }
                                                            //if (TotalFilmMissCountPerClassNegativeA > 0)
                                                            //{
                                                            //    ++TotalFilmMissCountNegativeA;
                                                            //}
                                                            if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                                            }
                                                            if (TotalDistanceNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalDistanceNGCountNegativeA;
                                                            }
                                                            if (TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEdgeDefectCountNegativeA;
                                                            }
                                                            if (TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalSurfaceDefectCountNegativeA;
                                                            }
                                                            if (TotalBrokenLineCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalBrokenLineCountNegativeA;
                                                            }
                                                            if (TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalStartingWeldingNGCountNegativeA;
                                                            }
                                                            if (TotalEmptyPlateCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEmptyPlateCountNegativeA;
                                                            }
                                                            if ((SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                            {
                                                                ++TotalSurfaceColorDiffCountNegativeA;
                                                            }
                                                        }
                                                    }

                                                    //清空主界面当前串内片信息Flag
                                                    this.ClearCurrentClusterStateNegativeA(WaferIDNegativeA - 1);
                                                    //初始化单串硅片编号
                                                    WaferIDNegativeA = 1;
                                                    //初始化单串Flag数组(所有元素置为false)
                                                    this.ClearSingleClassFlagArrayNegativeA();


                                                    //根据数据结果进行相应赋值
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    {
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                    {
                                                        SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //将下半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);
                                                }
                                                //未到串与串之间
                                                else
                                                {
                                                    //未抵达串间区域
                                                    //上半片膜偏处理
                                                    SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                    //下半片膜偏处理
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //上半片膜失处理
                                                    SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                    //下半片膜失处理
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //上半片头尾膜偏处理
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                    //下半片头尾膜偏处理
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //片间距处理
                                                    if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                    {
                                                        SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 2] = true;
                                                    }
                                                    //上半片边角缺陷处理
                                                    SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                    //下半片边角缺陷处理
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //上半片表面缺陷处理
                                                    SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                    //下半片表面缺陷处理
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //上半片断栅处理
                                                    SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                    //下半片断栅处理
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    {
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //下半片起焊点异常处理
                                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                    {
                                                        SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //将上下半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                                    if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                                    {
                                                        SingleClassEmptyPlateFlagArrayNegativeA[WaferIDNegativeA - 2] = true;
                                                    }

                                                    //给PLC发送结果
                                                    if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                    {
                                                        if (Global.isUpperLink == "1")
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultNGNegativeA;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeA = "2";
                                                        }
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeA = "";
                                                        }

                                                        if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                            SingleClassFilmMissTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmMissTypeNegativeA = "";
                                                        }

                                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                        }

                                                        if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                            //SingleClassDistanceNGTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassDistanceNGTypeNegativeA = "";
                                                        }

                                                        if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                            SingleClassEdgeDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassEdgeDefectTypeNegativeA = "";
                                                        }

                                                        if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                            SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }

                                                        if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                            SingleClassBrokenLineTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassBrokenLineTypeNegativeA = "";
                                                        }

                                                        if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                            SingleClassStargingWeldingNGTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassStargingWeldingNGTypeNegativeA = "";
                                                        }

                                                        //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                        SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                        this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA - 1);

                                                        singleClassNGNegativeA.Id = idOfNegativeA;
                                                        singleClassNGNegativeA.Info[WaferIDNegativeA - 2] = SingleClassNGTypeNegativeA;
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                    }
                                                    else
                                                    {
                                                        if (Global.isUpperLink == "1")
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeA = "1";
                                                        }
                                                        this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA - 1);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                            lock (LockObjectOriImageQueueNegativeA)
                                                            {
                                                                OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
#endregion
                                        }

                                        //宽度分辨率校准赋值
                                        if (hv_IsWidthResolutionCalibrateFinish)
                                        {
                                            IsUsingWidthResolutionCalibrateNegativeA = 0;
                                            Global.isUsingWidthResolutionCalibrateNegativeA = "0";
                                            WidthResolutionNegativeA = hv_WidthResolutionOut;
                                            Global.widthResolutionNegativeA = WidthResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeA", Global.isUsingWidthResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "WidthResolutionNegativeA", Global.widthResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtWidthResolution_NegativeA.Text = WidthResolutionNegativeA.ToString();
                                        }

                                        //高度分辨率校准赋值
                                        if (hv_IsHeightResolutionCalibrateFinish)
                                        {
                                            IsUsingHeightResolutionCalibrateNegativeA = 0;
                                            Global.isUsingHeightResolutionCalibrateNegativeA = "0";
                                            HeightResolutionNegativeA = hv_HeightResolutionOut;
                                            Global.heightResolutionNegativeA = HeightResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeA", Global.isUsingHeightResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "HeightResolutionNegativeA", Global.heightResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtHeightResolution_NegativeA.Text = HeightResolutionNegativeA.ToString();
                                        }



                                        lock (LockObjectNextClassNegativeA)
                                        {
                                            bool isTopNG = false;
                                            bool isBottomNG = false;

                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                            {
                                                isTopNG = true;
                                            }

                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                isBottomNG = true;
                                            }
                                            if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                                            {
                                                isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                            }

                                            if (WaferIDNegativeA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                            {
                                                if (isTopNG)
                                                    isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                                string singleClassNGNegativeAStr = null;
                                                foreach (string str in singleClassNGNegativeA.Info)
                                                {
                                                    if (str != null)
                                                    {
                                                        singleClassNGNegativeAStr = str;
                                                        break;
                                                    }
                                                }
                                                if (singleClassNGNegativeAStr != null)
                                                    idOfNegativeA++;
                                                isNextClassFlagNegativeA = true;
                                                //tempSingleClassNGNegativeA = new SingleClassNG();
                                                //tempSingleClassNGNegativeA.Id = idOfNegativeA;
                                            }

                                            //保存全部图片
                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                lock (LockObjectOriImageQueueNegativeA)
                                                {
                                                    OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                }
                                            }
                                            //保存NG图片
                                            if (Convert.ToBoolean(IsSaveNGImage_NegativeA.I))
                                            {
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmShiftingImageNegativeA);
                                                    lock (LockObjectFilmShiftingImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        FilmShiftingImageQueueNegativeA.Enqueue(tempFilmShiftingImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiFilmShiftingImageQueueNegativeA)
                                                        {
                                                            RoiFilmShiftingImageQueueNegativeA.Enqueue(tempRoiFilmShiftingImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempFilmMissImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmMissImageNegativeA);
                                                    lock (LockObjectFilmMissImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        FilmMissImageQueueNegativeA.Enqueue(tempFilmMissImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiFilmMissImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiFilmMissImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiFilmMissImageQueueNegativeA)
                                                        {
                                                            RoiFilmMissImageQueueNegativeA.Enqueue(tempRoiFilmMissImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempHeadAndTailFilmShiftingImageNegativeA);
                                                    lock (LockObjectHeadAndTailFilmShiftingImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        HeadAndTailFilmShiftingImageQueueNegativeA.Enqueue(tempHeadAndTailFilmShiftingImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeA)
                                                        {
                                                            RoiHeadAndTailFilmShiftingImageQueueNegativeA.Enqueue(tempRoiHeadAndTailFilmShiftingImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempEdgeDefectImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempEdgeDefectImageNegativeA);
                                                    lock (LockObjectEdgeDefectImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        EdgeDefectImageQueueNegativeA.Enqueue(tempEdgeDefectImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiEdgeDefectImageQueueNegativeA)
                                                        {
                                                            RoiEdgeDefectImageQueueNegativeA.Enqueue(tempRoiEdgeDefectImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempDistanceNGImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempDistanceNGImageNegativeA);
                                                    lock (LockObjectDistanceNGImageQueueNegativeA)
                                                    {
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                        DistanceNGImageQueueNegativeA.Enqueue(tempDistanceNGImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiDistanceNGImageQueueNegativeA)
                                                        {
                                                            RoiDistanceNGImageQueueNegativeA.Enqueue(tempRoiDistanceNGImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                                    || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempSurfaceDefectImageNegativeA);
                                                    lock (LockObjectSurfaceDefectImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        SurfaceDefectImageQueueNegativeA.Enqueue(tempSurfaceDefectImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiSurfaceDefectImageQueueNegativeA)
                                                        {
                                                            RoiSurfaceDefectImageQueueNegativeA.Enqueue(tempRoiSurfaceDefectImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempBrokenLineImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempBrokenLineImageNegativeA);
                                                    lock (LockObjectBrokenLineImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        BrokenLineImageQueueNegativeA.Enqueue(tempBrokenLineImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiBrokenLineImageQueueNegativeA)
                                                        {
                                                            RoiBrokenLineImageQueueNegativeA.Enqueue(tempRoiBrokenLineImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempStartWeldingNGImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempStartWeldingNGImageNegativeA);
                                                    lock (LockObjectStartWeldingNGImageQueueNegativeA)
                                                    {
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        StartWeldingNGImageQueueNegativeA.Enqueue(tempStartWeldingNGImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiStartWeldingNGImageQueueNegativeA)
                                                        {
                                                            RoiStartWeldingNGImageQueueNegativeA.Enqueue(tempRoiStartWeldingNGImageNegativeA);
                                                        }
                                                    }
                                                }
                                            }


                                            if (WaferIDNegativeA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                            {
                                                string singleClassNGNegativeAStr = null;
                                                foreach (string str in singleClassNGNegativeA.Info)
                                                {
                                                    if (str != null)
                                                    {
                                                        singleClassNGNegativeAStr = str;
                                                        break;
                                                    }
                                                }
                                                if (singleClassNGNegativeAStr != null)
                                                {
                                                    singleClassNGNegativeA.UpdateDone = false;
                                                    singleClassNGNegativeAList.Add(singleClassNGNegativeA);

                                                    //if (isSingleClassOKNegativeA)
                                                    //{
                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                    //}

                                                }
                                                else
                                                {
                                                    //if (!isSingleClassOKNegativeA)
                                                    //{
                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                    //}
                                                }
                                                singleClassNGNegativeA = new SingleClassNG();
                                            }

                                        }

                                        //容错报警串数功能启用
                                        //待定
                                        //ImageQueueNegativeA.Enqueue(ho_MainImageNegativeA);
                                        if (Global.isUpperLink == "1")
                                        {
                                            lock (Result2PLC)
                                            {
                                                Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                            }
                                        }
                                        else
                                        {
                                            lock (ResultNegativeA)
                                            {
                                                ResultNegativeA.Enqueue(tellPlcCurrentStateNegativeA);
                                            }
                                        }
                   
                    
                                    }
                                    catch (Exception ex)
                                    {
                                        //MessageBox.Show(ex.Message);
                                        Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常A.txt",
                                         DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                                        //保存异常图片
                                        HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeA);
                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempExceptionImageNegativeA);
                                        lock (LockObjectExceptionImageQueueNegativeA)
                                        {
                                            ExceptionImageQueueNegativeA.Enqueue(tempExceptionImageNegativeA);
                                        }

                                        //重置检测，防止出现索引报错
                                        //初始化单串硅片编号
                                        WaferIDNegativeA = 1;
                                        //初始化单串Flag数组(所有元素置为false)
                                        this.ClearSingleClassFlagArrayNegativeA();
                                        //给PLC反馈结果，暂定NG
                                        if (Global.isUpperLink == "1")
                                        {
                                            tellPlcCurrentStateNegativeA=ResultNGNegativeA;
                        
                                        }
                                        else
                                        {
                                            tellPlcCurrentStateNegativeA = "2";
                                        }
                                        if (Global.isUpperLink == "1")
                                        {
                                            lock (Result2PLC)
                                            {
                                                Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                            }
                                        }
                                        else
                                        {
                                            lock (ResultNegativeA)
                                            {
                                                ResultNegativeA.Enqueue(tellPlcCurrentStateNegativeA);
                                            }
                                        }

                                        string singleClassNGNegativeAStr = null;
                                        foreach (string str in singleClassNGNegativeA.Info)
                                        {
                                            if (str != null)
                                            {
                                                singleClassNGNegativeAStr = str;
                                                break;
                                            }
                                        }
                                        if (singleClassNGNegativeAStr != null)
                                        {
                                            idOfNegativeA++;
                                            singleClassNGNegativeA.UpdateDone = false;
                                            singleClassNGNegativeAList.Add(singleClassNGNegativeA);
                                        }
                                        singleClassNGNegativeA = new SingleClassNG();
                                    }
#endregion
                }
                else if (Global.stringType == "小间距" && MainLineNum == 10)
                {

#region 小间距 发送信息上位链路 
                                    try
                                    {
#region
                                        //局部变量
                                        HObject ho_totalFilmShiftingRegion = null;
                                        HObject ho_totalFilmMissRegion = null;
                                        HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                        HObject ho_totalEdgeDefectRegion = null;
                                        HObject ho_totalSurfaceDefectRegion = null;
                                        HObject ho_totalBrokenLineRegion = null;

                                        HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                                        ho_totalFilmShiftingRegion.Dispose();
                                        ho_totalFilmMissRegion.Dispose();
                                        ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                        ho_totalEdgeDefectRegion.Dispose();
                                        ho_totalSurfaceDefectRegion.Dispose();
                                        ho_totalBrokenLineRegion.Dispose();

                                        HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                        HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                        HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                        HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                        HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                        HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                        HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                        HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                        HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                        HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                        HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG, hv_BackInfo;
                                        HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
                                        ////显示主图像
                                        //HOperatorSet.GetImageSize(ho_MainImageNegativeA, out ImageWidthNegativeA, out ImageHeightNegativeA);
                                        ////判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
                                        ////20190226 黄浩
                                        ////增大异常图片行数阈值，降低异常图片保存数量，从10改为500
                                        //if (ImageHeightNegativeA <= 500 || ImageWidthNegativeA < 4096)
                                        //{
                                        //    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeA);
                                        //    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempExceptionImageNegativeA);
                                        //    lock (LockObjectExceptionImageQueueNegativeA)
                                        //    {
                                        //        ExceptionImageQueueNegativeA.Enqueue(tempExceptionImageNegativeA);
                                        //    }
                                        //    return;
                                        //}
                                        //HOperatorSet.SetPart(WindowsHandleNegativeA, 0, 0, ImageHeightNegativeA, ImageWidthNegativeA);
                                        //HOperatorSet.SetDraw(WindowsHandleNegativeA, "margin");
                                        //HOperatorSet.DispObj(ho_MainImageNegativeA, WindowsHandleNegativeA);

                                        //背面串检

                                        HFuncNegativeA.ProcessingBackTenMainLineImage(ho_MainImageNegativeA, out ho_totalFilmShiftingRegion,
                                          out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                          out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                          out ho_totalBrokenLineRegion, ImageWidthNegativeA, ImageHeightNegativeA,
                                          WindowsHandleNegativeA, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                          IsUsingWidthResolutionCalibrateNegativeA, WidthResolutionNegativeA, WaferWidthNegativeA,
                                          IsUsingHeightResolutionCalibrateNegativeA, HeightResolutionNegativeA, ViceLineInterval,
                                          IsUsingFilmShiftingDetectNegativeA, TopShieldLengthOfTopRegionNegativeA, BottomShieldLengthOfTopRegionNegativeA,
                                          TopShieldLengthOfBottomRegionNegativeA, BottomShieldLengthOfBottomRegionNegativeA,
                                          LocationMainLineThreshNegativeA, FilmWidthThreshNegativeA, FilmWidthOffSetNegativeA,
                                          FirstDetectPosForTopRegionNegativeA, SecondDetectPosForTopRegionNegativeA,
                                          FirstDetectPosForBottomRegionNegativeA, SecondDetectPosForBottomRegionNegativeA,
                                          IsUsingFilmMissDetectNegativeA, WeldWidthThreshNegativeA,
                                          IsUsingHeadAndTailFilmShiftingDetectNegativeA, HeadAndTailFilmWidthThreshNegativeA,
                                          HeadAndTailFilmShieldLengthNegativeA, HeadAndTailFilmDetectRangeNegativeA,
                                          IsUsingWaferEdgeCalibrationNegativeA, LocationWaferEdgeThreshNegativeA, WaferEdgeCalibrationRegionDilationPixelNegativeA,
                                          IsUsingDistanceDetectNegativeA, MinimumDistanceThreshNegativeA, MaxDistanceThreshNegativeA,
                                          ClassDistanceThreshNegativeA, IsUsingEdgeDefectDetectNegativeA, EdgeBigDefectWidthThreshNegativeA,
                                          EdgeBigDefectHeightThreshNegativeA, EdgeSmallDefectDetectDepthNegativeA, EdgeSmallDefectGrayThreshNegativeA,
                                          EdgeSmallDefectWidthThreshNegativeA, EdgeSmallDefectHeightThreshNegativeA,
                                          EdgeSmallDefectGrayMeanThreshNegativeA, EdgeSmallDefectGrayDeviationThreshNegativeA,
                                          CornerDefectAreaRatioThreshNegativeA, IsUsingSurfaceDefectDetectNegativeA,
                                          SurfaceDefectGrayThreshNegativeA, SurfaceDefectWidthThreshNegativeA, SurfaceDefectHeightThreshNegativeA,
                                          SurfaceDefectDetectIndentDepthNegativeA, SurfaceDefectViceLineShieldWidthNegativeA,
                                          SurfaceDefectViceLineShieldLeftPosOffSetNegativeA, SurfaceDefectViceLineShieldRightPosOffSetNegativeA,
                                          SurfaceScratchGrayThreshNegativeA, SurfaceScratchWidthThreshNegativeA, SurfaceScratchHeightThreshNegativeA,
                                          IsUsingStartWeldingDetectNegativeA, StartWeldingDistanceMaxThreshNegativeA,
                                          StartWeldingDistanceMinThreshNegativeA, IsUsingBrokenLineDetectNegativeA,
                                          BrokenLineGrayThreshNegativeA, BrokenLineWidthThreshNegativeA, BrokenLineHeightThreshNegativeA,
                                          BrokenLineDetectIndentDepthNegativeA, IsUsingSurfaceColorDiffDetectNegativeA,
                                          IsEnglish, out hv_IsException,
                                          out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                          out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                          out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                          out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                          out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                          out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                          out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                          out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                          out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                          out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                          out hv_IsStartWeldingNGOfBottomWafer,
                                          out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer, out hv_BackInfo);

                  
                                        ////显示结果
                                        //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                                        //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                                        //  WindowsHandleNegativeA, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                                        //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                                        //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                                        //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                                        //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                                        long[] ResultNegativeA = new long[hv_BackInfo.Length];
                                        if (hv_BackInfo != null)
                                        {
                                            ResultNegativeA = hv_BackInfo.LArr;
                                        }
                                        List<long[]> ResultNegativeAList = new List<long[]>();

                                        int CellNum = 0;
                                        if (bl_IsRunNegative)
                                        {
                                            for (int i = 0; i < ResultNegativeA.Length / 4; i++)
                                            {
                                                long[] ResultNegativeATemp = new long[4];
                                                Array.ConstrainedCopy(ResultNegativeA, 4 * i, ResultNegativeATemp, 0, 4);
                                                ResultNegativeAList.Add(ResultNegativeATemp);
                                                //0--空 1--半个  2--完整
                                                //平台空
                                                if (Convert.ToString(ResultNegativeAList[i][0]) == "0")
                                                {
                                                    if (i == 0)
                                                    {
                                                        WaferIDNegativeA = 1;
                                                    }

                                                }
                                                //半个电池片
                                                if (Convert.ToString(ResultNegativeAList[i][0]) == "1")
                                                {
                                                    ++WaferIDNegativeA;
                                                    ++CellNum;
                                                    if (i == 0)
                                                    {
                                                        //串间距
                                                        //抵达串间区域
                                                        //判断当前串电池片数是否达到最低限度，即3片
                                                        if (WaferIDNegativeA >= 3)
                                                        {
                                                            //上串尾片数据处理
                                                            SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(ResultNegativeAList[i][1]);
                                                            //SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                            //SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                            //SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                            SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(ResultNegativeAList[i][2]);
                                                            // SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                            //将上半片平均灰度值加入数组
                                                            //SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                            //给PLC发送结果
                                                            if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                                //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                                //|| SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                                //|| SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3]
                                                                //|| SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                                || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            //|| SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                            {
                                                                tellPlcCurrentStateNegativeA = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "1";
                                                                lock (Result2PLC)
                                                                {
                                                                    Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                                                }
                                                                if (Convert.ToBoolean(IsSaveNGImage_NegativeA.I))
                                                                {

                                                                    if (Convert.ToBoolean(ResultNegativeAList[i][1]))
                                                                    {
                                                                        HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeA);
                                                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmShiftingImageNegativeA);
                                                                        lock (LockObjectFilmShiftingImageQueueNegativeA)
                                                                        {
                                                                            FilmShiftingImageQueueNegativeA.Enqueue(tempFilmShiftingImageNegativeA);
                                                                        }
                                                                        //保存ROI图片
                                                                        if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                                        {
                                                                            HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeA);
                                                                            HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                                            lock (LockObjectRoiFilmShiftingImageQueueNegativeA)
                                                                            {
                                                                                RoiFilmShiftingImageQueueNegativeA.Enqueue(tempRoiFilmShiftingImageNegativeA);
                                                                            }
                                                                        }
                                                                    }

                                                                    if (Convert.ToBoolean(ResultNegativeAList[i][2]))
                                                                    {
                                                                        HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeA);
                                                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempSurfaceDefectImageNegativeA);
                                                                        lock (LockObjectSurfaceDefectImageQueueNegativeA)
                                                                        {

                                                                            SurfaceDefectImageQueueNegativeA.Enqueue(tempSurfaceDefectImageNegativeA);
                                                                        }
                                                                        //保存ROI图片
                                                                        if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                                        {
                                                                            HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeA);
                                                                            HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeA, WindowsHandleNegativeA);
                                                                            lock (LockObjectRoiSurfaceDefectImageQueueNegativeA)
                                                                            {
                                                                                RoiSurfaceDefectImageQueueNegativeA.Enqueue(tempRoiSurfaceDefectImageNegativeA);
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                                //整理Ng类型文档
                                                                if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                                {
                                                                    if (Global.isEnglish == "0")
                                                                    {
                                                                        SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                                    }
                                                                    else
                                                                    {
                                                                        SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "";
                                                                }



                                                                if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                                {
                                                                    //SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                                    SingleClassSurfaceDefectTypeNegativeA = "";
                                                                }
                                                                else
                                                                {
                                                                    SingleClassSurfaceDefectTypeNegativeA = "";
                                                                }



                                                                //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                                SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA;

                                                                this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA - 1);

                                                                singleClassNGNegativeA.Id = idOfNegativeA;
                                                                singleClassNGNegativeA.Info[WaferIDNegativeA - 2] = SingleClassNGTypeNegativeA;
                                                                saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                                tempSaveImageWaferIDNegativeA = WaferIDNegativeA;
                                                            }
                                                            else
                                                            {
                                                                tellPlcCurrentStateNegativeA = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "0";
                                                                lock (Result2PLC)
                                                                {
                                                                    Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                                                }
                                                                this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA - 1);
                                                                //保存OK图片
                                                                if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                                {
                                                                    HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                                    lock (LockObjectOriImageQueueNegativeA)
                                                                    {
                                                                        OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                                    }
                                                                }
                                                            }

                                                            //上串检测数据统计汇总
                                                            TotalFilmShiftingCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeA);
                                                            TotalFilmMissCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeA);
                                                            TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA);
                                                            TotalDistanceNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeA);
                                                            TotalEdgeDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeA);
                                                            TotalSurfaceDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeA);
                                                            TotalBrokenLineCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeA);
                                                            TotalStartingWeldingNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeA);
                                                            TotalEmptyPlateCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeA);

                                                            ++TotalCountNegativeA;
                                                            if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 0
                                                                )
                                                            {

                                                                HistoryNGNegativeAList.Add(HistoryNGNegativeA);
                                                                //RefreshNGIfo(0, HistoryNGNegativeAList);
                                                                //RefreshNGIfo(0, HistoryNGPositiveAList, HistoryNGNegativeAList);
                                                                HistoryNGNegativeA = new string[WaferCountPerClass + 3];
                                                                ++NGTotalCountNegativeA;
                                                                if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                                //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                                + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 1)
                                                                {
                                                                    ++MajorFailureCountNegativeA;
                                                                }
                                                                if (TotalFilmShiftingCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalFilmShiftingCountNegativeA;
                                                                }
                                                                //if (TotalFilmMissCountPerClassNegativeA > 0)
                                                                //{
                                                                //    ++TotalFilmMissCountNegativeA;
                                                                //}
                                                                if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                                                }
                                                                if (TotalDistanceNGCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalDistanceNGCountNegativeA;
                                                                }
                                                                if (TotalEdgeDefectCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalEdgeDefectCountNegativeA;
                                                                }
                                                                if (TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalSurfaceDefectCountNegativeA;
                                                                }
                                                                if (TotalBrokenLineCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalBrokenLineCountNegativeA;
                                                                }
                                                                if (TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalStartingWeldingNGCountNegativeA;
                                                                }
                                                                if (TotalEmptyPlateCountPerClassNegativeA > 0)
                                                                {
                                                                    ++TotalEmptyPlateCountNegativeA;
                                                                }
                                                                if ((SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                                {
                                                                    ++TotalSurfaceColorDiffCountNegativeA;
                                                                }
                                                            }
                                                        }
#region 整理信息和保存图片
                                                        lock (LockObjectNextClassNegativeA)
                                                        {
                                                            bool isTopNG = false;
                                                            bool isBottomNG = false;

                                                            //if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                                            //{
                                                            //    isTopNG = true;
                                                            //}

                                                            //if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                                            //   Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                            //{
                                                            //    isBottomNG = true;
                                                            //}
                                                            if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                                                string singleClassNGNegativeAStr = null;
                                                                foreach (string str in singleClassNGNegativeA.Info)
                                                                {
                                                                    if (str != null)
                                                                    {
                                                                        singleClassNGNegativeAStr = str;
                                                                        break;
                                                                    }
                                                                }
                                                                if (singleClassNGNegativeAStr != null)
                                                                    idOfNegativeA++;
                                                                isNextClassFlagNegativeA = true;
                                                                //tempSingleClassNGNegativeA = new SingleClassNG();
                                                                //tempSingleClassNGNegativeA.Id = idOfNegativeA;
                                                            }


                                                            if (true)
                                                            {
                                                                string singleClassNGNegativeAStr = null;
                                                                foreach (string str in singleClassNGNegativeA.Info)
                                                                {
                                                                    if (str != null)
                                                                    {
                                                                        singleClassNGNegativeAStr = str;
                                                                        break;
                                                                    }
                                                                }
                                                                if (singleClassNGNegativeAStr != null)
                                                                {
                                                                    singleClassNGNegativeA.UpdateDone = false;
                                                                    singleClassNGNegativeAList.Add(singleClassNGNegativeA);

                                                                    //if (isSingleClassOKNegativeA)
                                                                    //{
                                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                                    //}

                                                                }
                                                                else
                                                                {
                                                                    //if (!isSingleClassOKNegativeA)
                                                                    //{
                                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                                    //}
                                                                }
                                                                singleClassNGNegativeA = new SingleClassNG();
                                                            }

                                                        }
#endregion
                                                        //清空主界面当前串内片信息Flag
                                                        this.ClearCurrentClusterStateNegativeA(WaferIDNegativeA - 1);
                                                        //初始化单串硅片编号
                                                        WaferIDNegativeA = 1;
                                                        //初始化单串Flag数组(所有元素置为false)
                                                        this.ClearSingleClassFlagArrayNegativeA();


                                                    }
                                                    else
                                                    {
                                                        //未抵达串间区域
                                                        //下半片膜偏处理
                                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                        {
                                                            SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                        }
                                                        //下半片表面缺陷处理
                                                        if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                        {
                                                            SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                        }
                                                    }

                                                }
                                                //完整电池片
                                                if (Convert.ToString(ResultNegativeAList[i][0]) == "2")
                                                {
                                                    ++WaferIDNegativeA;
                                                    ++CellNum;
                                                    SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] = Convert.ToBoolean(ResultNegativeAList[i][1]);
                                                    SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = Convert.ToBoolean(ResultNegativeAList[i][2]);
                                                    if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                    //|| SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                    //|| SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                    {
                                                        tellPlcCurrentStateNegativeA = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "1";
                                                        lock (Result2PLC)
                                                        {
                                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                                        }
                                                        if (Convert.ToBoolean(IsSaveNGImage_NegativeA.I))
                                                        {

                                                            if (Convert.ToBoolean(ResultNegativeAList[i][1]))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeA);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmShiftingImageNegativeA);
                                                                lock (LockObjectFilmShiftingImageQueueNegativeA)
                                                                {
                                                                    FilmShiftingImageQueueNegativeA.Enqueue(tempFilmShiftingImageNegativeA);
                                                                }
                                                                //保存ROI图片
                                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                                {
                                                                    HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeA);
                                                                    HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                                    lock (LockObjectRoiFilmShiftingImageQueueNegativeA)
                                                                    {
                                                                        RoiFilmShiftingImageQueueNegativeA.Enqueue(tempRoiFilmShiftingImageNegativeA);
                                                                    }
                                                                }
                                                            }

                                                            if (Convert.ToBoolean(ResultNegativeAList[i][2]))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeA);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempSurfaceDefectImageNegativeA);
                                                                lock (LockObjectSurfaceDefectImageQueueNegativeA)
                                                                {

                                                                    SurfaceDefectImageQueueNegativeA.Enqueue(tempSurfaceDefectImageNegativeA);
                                                                }
                                                                //保存ROI图片
                                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                                {
                                                                    HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeA);
                                                                    HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeA, WindowsHandleNegativeA);
                                                                    lock (LockObjectRoiSurfaceDefectImageQueueNegativeA)
                                                                    {
                                                                        RoiSurfaceDefectImageQueueNegativeA.Enqueue(tempRoiSurfaceDefectImageNegativeA);
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeA = "";
                                                        }


                                                        if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            //SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                            SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }



                                                        SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA;

                                                        this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA - 1);

                                                        singleClassNGNegativeA.Id = idOfNegativeA;
                                                        singleClassNGNegativeA.Info[WaferIDNegativeA - 2] = SingleClassNGTypeNegativeA;
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeA = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "0";
                                                        lock (Result2PLC)
                                                        {
                                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                                        }
                                                        this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA - 1);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                            lock (LockObjectOriImageQueueNegativeA)
                                                            {
                                                                OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                            }
                                                        }
                                                    }



#region 整理信息和保存图片
                                                    lock (LockObjectNextClassNegativeA)
                                                    {
                                                        //bool isTopNG = false;
                                                        //bool isBottomNG = false;

                                                        //if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                                        //{
                                                        //    isTopNG = true;
                                                        //}

                                                        //if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                        //{
                                                        //    isBottomNG = true;
                                                        //}
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                        {
                                                            isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                                            string singleClassNGNegativeAStr = null;
                                                            foreach (string str in singleClassNGNegativeA.Info)
                                                            {
                                                                if (str != null)
                                                                {
                                                                    singleClassNGNegativeAStr = str;
                                                                    break;
                                                                }
                                                            }
                                                            if (singleClassNGNegativeAStr != null)
                                                                idOfNegativeA++;
                                                            isNextClassFlagNegativeA = true;
                                                            //tempSingleClassNGNegativeA = new SingleClassNG();
                                                            //tempSingleClassNGNegativeA.Id = idOfNegativeA;
                                                        }




                                                    }
#endregion
                                                }

                                            }

                                            //只有在运行状态时才需要统计串信息



                                        }

                                        //宽度分辨率校准赋值
                                        if (hv_IsWidthResolutionCalibrateFinish)
                                        {
                                            IsUsingWidthResolutionCalibrateNegativeA = 0;
                                            Global.isUsingWidthResolutionCalibrateNegativeA = "0";
                                            WidthResolutionNegativeA = hv_WidthResolutionOut;
                                            Global.widthResolutionNegativeA = WidthResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeA", Global.isUsingWidthResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "WidthResolutionNegativeA", Global.widthResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtWidthResolution_NegativeA.Text = WidthResolutionNegativeA.ToString();
                                        }

                                        //高度分辨率校准赋值
                                        if (hv_IsHeightResolutionCalibrateFinish)
                                        {
                                            IsUsingHeightResolutionCalibrateNegativeA = 0;
                                            Global.isUsingHeightResolutionCalibrateNegativeA = "0";
                                            HeightResolutionNegativeA = hv_HeightResolutionOut;
                                            Global.heightResolutionNegativeA = HeightResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeA", Global.isUsingHeightResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "HeightResolutionNegativeA", Global.heightResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtHeightResolution_NegativeA.Text = HeightResolutionNegativeA.ToString();
                                        }





                                        //容错报警串数功能启用
                                        //待定
                                        //ImageQueueNegativeA.Enqueue(ho_MainImageNegativeA);
                                        //lock (Result2PLC)
                                        //{
                                        //    Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                        //}
#endregion
                                    }
                                    catch (Exception ex)
                                    {
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常A.txt",
                     DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeA);
                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempExceptionImageNegativeA);
                                        lock (LockObjectExceptionImageQueueNegativeA)
                                        {
                                            ExceptionImageQueueNegativeA.Enqueue(tempExceptionImageNegativeA);
                                        }

                                        //重置检测，防止出现索引报错
                                        //初始化单串硅片编号
                                        WaferIDNegativeA = 1;
                                        //初始化单串Flag数组(所有元素置为false)
                                        this.ClearSingleClassFlagArrayNegativeA();
                                        //给PLC反馈结果，暂定NG
                                        tellPlcCurrentStateNegativeA = "WRS EM4620 2" + " " + "1" + " " + "1";
                                        lock (Result2PLC)
                                        {
                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                        }


                                        string singleClassNGNegativeAStr = null;
                                        foreach (string str in singleClassNGNegativeA.Info)
                                        {
                                            if (str != null)
                                            {
                                                singleClassNGNegativeAStr = str;
                                                break;
                                            }
                                        }
                                        if (singleClassNGNegativeAStr != null)
                                        {
                                            idOfNegativeA++;
                                            singleClassNGNegativeA.UpdateDone = false;
                                            singleClassNGNegativeAList.Add(singleClassNGNegativeA);
                                        }
                                        singleClassNGNegativeA = new SingleClassNG();
                                    }
#endregion
                }
                else if (Global.stringType == "负间距")
                {
#region TR
                                    try
                                    {

                                        //局部变量
                                        HObject ho_totalFilmShiftingRegion = null;
                                        HObject ho_totalFilmMissRegion = null;
                                        HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                        HObject ho_totalEdgeDefectRegion = null;
                                        HObject ho_totalSurfaceDefectRegion = null;
                                        HObject ho_totalBrokenLineRegion = null;

                                        HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                        HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);
                                        IsUsingDistanceDetectNegativeA = 0;
                                        ho_totalFilmShiftingRegion.Dispose();
                                        ho_totalFilmMissRegion.Dispose();
                                        ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                        ho_totalEdgeDefectRegion.Dispose();
                                        ho_totalSurfaceDefectRegion.Dispose();
                                        ho_totalBrokenLineRegion.Dispose();

                                        HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                        HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                        HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                        HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                        HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                        HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                        HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                        HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                        HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                        HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                        HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                        HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                                        HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
                                        HFuncNegativeA.ProcessingTRImage(ho_MainImageNegativeA, ho_ModelContoursPositiveA, out ho_totalFilmShiftingRegion,
                                      out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                      out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                      out ho_totalBrokenLineRegion, ImageWidthNegativeA, ImageHeightNegativeA,
                                      WindowsHandleNegativeA, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                      IsUsingWidthResolutionCalibrateNegativeA, WidthResolutionNegativeA, WaferWidthNegativeA,
                                      IsUsingHeightResolutionCalibrateNegativeA, HeightResolutionNegativeA, ViceLineInterval,
                                      IsUsingFilmShiftingDetectNegativeA, TopShieldLengthOfTopRegionNegativeA, BottomShieldLengthOfTopRegionNegativeA,
                                      TopShieldLengthOfBottomRegionNegativeA, BottomShieldLengthOfBottomRegionNegativeA,
                                      LocationMainLineThreshNegativeA, FilmWidthThreshNegativeA, FilmWidthOffSetNegativeA,
                                      FirstDetectPosForTopRegionNegativeA, SecondDetectPosForTopRegionNegativeA,
                                      FirstDetectPosForBottomRegionNegativeA, SecondDetectPosForBottomRegionNegativeA,
                                      IsUsingFilmMissDetectNegativeA, WeldWidthThreshNegativeA,
                                      IsUsingHeadAndTailFilmShiftingDetectNegativeA, HeadAndTailFilmWidthThreshNegativeA,
                                      HeadAndTailFilmShieldLengthNegativeA, HeadAndTailFilmDetectRangeNegativeA,
                                      IsUsingWaferEdgeCalibrationNegativeA, LocationWaferEdgeThreshNegativeA, WaferEdgeCalibrationRegionDilationPixelNegativeA,
                                      IsUsingDistanceDetectNegativeA, MinimumDistanceThreshNegativeA, MaxDistanceThreshNegativeA,
                                      ClassDistanceThreshNegativeA, IsUsingEdgeDefectDetectNegativeA, EdgeBigDefectWidthThreshNegativeA,
                                      EdgeBigDefectHeightThreshNegativeA, EdgeSmallDefectDetectDepthNegativeA, EdgeSmallDefectGrayThreshNegativeA,
                                      EdgeSmallDefectWidthThreshNegativeA, EdgeSmallDefectHeightThreshNegativeA,
                                      EdgeSmallDefectGrayMeanThreshNegativeA, EdgeSmallDefectGrayDeviationThreshNegativeA,
                                      CornerDefectAreaRatioThreshNegativeA, IsUsingSurfaceDefectDetectNegativeA,
                                      SurfaceDefectGrayThreshNegativeA, SurfaceDefectWidthThreshNegativeA, SurfaceDefectHeightThreshNegativeA,
                                      SurfaceDefectDetectIndentDepthNegativeA, SurfaceDefectViceLineShieldWidthNegativeA,
                                      SurfaceDefectViceLineShieldLeftPosOffSetNegativeA, SurfaceDefectViceLineShieldRightPosOffSetNegativeA,
                                      SurfaceScratchGrayThreshNegativeA, SurfaceScratchWidthThreshNegativeA, SurfaceScratchHeightThreshNegativeA,
                                      IsUsingStartWeldingDetectNegativeA, StartWeldingDistanceMaxThreshNegativeA,
                                      StartWeldingDistanceMinThreshNegativeA, IsUsingBrokenLineDetectNegativeA,
                                      BrokenLineGrayThreshNegativeA, BrokenLineWidthThreshNegativeA, BrokenLineHeightThreshNegativeA,
                                      BrokenLineDetectIndentDepthNegativeA, IsUsingSurfaceColorDiffDetectNegativeA,
                                      IsEnglish, WeldShieldLengthNegativeA, ho_ModelIDPositiveA, MainLineDistance, out hv_IsException,
                                      out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                      out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                      out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                      out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                      out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                      out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                      out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                      out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                      out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                      out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                      out hv_IsStartWeldingNGOfBottomWafer,
                                      out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);


                                        if (bl_IsRunNegative)
                                        {
#region 串信息统计
                                            //平台空的情况
                                            if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //未检测到首串首片,平台空
                                                tellPlcCurrentStateNegativeA = ResultEmptyNegativeA;
                                            }
                                            //上半片无，下半片有，认为是首串首片
                                            else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //初始化单串硅片编号
                                                WaferIDNegativeA = 1;
                                                //初始化单串Flag数组(所有元素置为false)
                                                this.ClearSingleClassFlagArrayNegativeA();
                                                //清空主界面当前串内片信息Flag
                                                this.ClearCurrentClusterStateNegativeA();

                                                //根据数据结果进行相应赋值
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }

                                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                }
                                                //将下半片平均灰度加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                                //给PLC发送结果 表面缺陷暂时不计入NG     0713 每片都发送结果
                                                if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                    //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                    || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                    //|| SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                    || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                    //|| SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                    //||SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                    || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                    || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                {
                                                    tellPlcCurrentStateNegativeA = ResultNGNegativeA;
                                                    //整理Ng类型文档
                                                    if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        if (Global.isEnglish == "0")
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeA = "";
                                                    }

                                                    if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                        SingleClassFilmMissTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmMissTypeNegativeA = "";
                                                    }

                                                    if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                    }

                                                    //if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    //{
                                                    //    SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                    //    //SingleClassDistanceNGTypeNegativeA = "";
                                                    //}
                                                    //else
                                                    //{
                                                    //    SingleClassDistanceNGTypeNegativeA = "";
                                                    //}

                                                    if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                        SingleClassEdgeDefectTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassEdgeDefectTypeNegativeA = "";
                                                    }

                                                    if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                        //SingleClassSurfaceDefectTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeA = "";
                                                    }
                                                    if (SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        SingleClassSurfaceScratchTypeNegativeA = "背面表面划痕";
                                                        //SingleClassSurfaceDefectTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceScratchTypeNegativeA = "";
                                                    }

                                                    if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                        SingleClassBrokenLineTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassBrokenLineTypeNegativeA = "";
                                                    }

                                                    if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                        SingleClassStargingWeldingNGTypeNegativeA = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassStargingWeldingNGTypeNegativeA = "";
                                                    }

                                                    //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                    SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassSurfaceScratchTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                    this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA);

                                                    singleClassNGNegativeA.Id = idOfNegativeA;
                                                    singleClassNGNegativeA.Info[WaferIDNegativeA - 1] = SingleClassNGTypeNegativeA;
                                                    saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                }
                                                else
                                                {
                                                    tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                    this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA);
                                                    //保存OK图片
                                                    if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                        lock (LockObjectOriImageQueueNegativeA)
                                                        {
                                                            OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                        }
                                                    }
                                                }
                                            }
                                            //上半片有下半片无 串间距
                                            else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //电池片序号自增
                                                if (WaferIDNegativeA <= WaferCountPerClass)
                                                    ++WaferIDNegativeA;
                                                if (LastCellNegativeA)
                                                {
#region 抵达串间区域
                                                    //判断当前串电池片数是否达到最低限度，即3片
                                                    if (WaferIDNegativeA >= 3)
                                                    {
                                                        //上串尾片数据处理
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                        SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);

                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                        //将上半片平均灰度值加入数组
                                                        SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                        //给PLC发送结果  表面缺陷暂时不计入NG
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            //|| SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3]
                                                            || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            //|| SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultNGNegativeA;

                                                            //整理Ng类型文档
                                                            if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                if (Global.isEnglish == "0")
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                                }
                                                                else
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }

                                                            //if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3])
                                                            //{
                                                            //    SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                            //    //SingleClassDistanceNGTypeNegativeA = "";
                                                            //}
                                                            //else
                                                            //{
                                                            //    SingleClassDistanceNGTypeNegativeA = "";
                                                            //}

                                                            if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }

                                                            if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                                //SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            if (SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                SingleClassSurfaceScratchTypeNegativeA = "背面表面划痕";
                                                                //SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceScratchTypeNegativeA = "";
                                                            }
                                                            if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }

                                                            if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }

                                                            //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                            SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassSurfaceScratchTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                            this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA);

                                                            singleClassNGNegativeA.Id = idOfNegativeA;
                                                            singleClassNGNegativeA.Info[WaferIDNegativeA - 1] = SingleClassNGTypeNegativeA;
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                            tempSaveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                            this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA);
                                                            //保存OK图片
                                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                                lock (LockObjectOriImageQueueNegativeA)
                                                                {
                                                                    OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                                }
                                                            }
                                                        }

                                                        //上串检测数据统计汇总
                                                        TotalFilmShiftingCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeA);
                                                        TotalFilmMissCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeA);
                                                        TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA);
                                                        TotalDistanceNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeA);
                                                        TotalEdgeDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeA);
                                                        TotalSurfaceDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeA);
                                                        TotalBrokenLineCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeA);
                                                        TotalStartingWeldingNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeA);
                                                        TotalEmptyPlateCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeA);

                                                        ++TotalCountNegativeA;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 0
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {

                                                            HistoryNGNegativeAList.Add(HistoryNGNegativeA);
                                                            //RefreshNGIfo(0, HistoryNGNegativeAList);
                                                            //RefreshNGIfo(0, HistoryNGPositiveAList, HistoryNGNegativeAList);
                                                            HistoryNGNegativeA = new string[WaferCountPerClass + 3];
                                                            ++NGTotalCountNegativeA;
                                                            if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 1)
                                                            {
                                                                ++MajorFailureCountNegativeA;
                                                            }
                                                            if (TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingCountNegativeA;
                                                            }
                                                            //if (TotalFilmMissCountPerClassNegativeA > 0)
                                                            //{
                                                            //    ++TotalFilmMissCountNegativeA;
                                                            //}
                                                            if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                                            }
                                                            if (TotalDistanceNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalDistanceNGCountNegativeA;
                                                            }
                                                            if (TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEdgeDefectCountNegativeA;
                                                            }
                                                            //if (TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            //{
                                                            //    ++TotalSurfaceDefectCountNegativeA;
                                                            //}
                                                            if (TotalBrokenLineCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalBrokenLineCountNegativeA;
                                                            }
                                                            if (TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalStartingWeldingNGCountNegativeA;
                                                            }
                                                            if (TotalEmptyPlateCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEmptyPlateCountNegativeA;
                                                            }
                                                            if ((SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                            {
                                                                ++TotalSurfaceColorDiffCountNegativeA;
                                                            }
                                                        }
                                                    }

                                                    //清空主界面当前串内片信息Flag
                                                    this.ClearCurrentClusterStateNegativeA(WaferIDNegativeA);
                                                    //初始化单串硅片编号
                                                    WaferIDNegativeA = 1;
                                                    //初始化单串Flag数组(所有元素置为false)
                                                    this.ClearSingleClassFlagArrayNegativeA();


                                                    //根据数据结果进行相应赋值
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    {
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                    {
                                                        SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //将下半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);
#endregion
                                                    LastCellNegativeA = false;
                                                    hv_IsNextClass = 1;
                                                }
                                            }
                                            //上下半片都存在，认为不是首串首片，也不是末串末片
                                            else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                            {
                                                //电池片序号自增
                                                if (WaferIDNegativeA <= WaferCountPerClass)
                                                    ++WaferIDNegativeA;
                                                if (Convert.ToBoolean(hv_IsNextClass.I))
                                                {
#region 抵达串间区域
                                                    //判断当前串电池片数是否达到最低限度，即3片
                                                    if (WaferIDNegativeA >= 3)
                                                    {
                                                        //上串尾片数据处理
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                        SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);

                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                        //将上半片平均灰度值加入数组
                                                        SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                        //给PLC发送结果  表面缺陷暂时不计入NG
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            // || SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3]
                                                            || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            //|| SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultNGNegativeA;

                                                            //整理Ng类型文档
                                                            if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                if (Global.isEnglish == "0")
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                                }
                                                                else
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmMissTypeNegativeA = "";
                                                            }

                                                            if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                            }

                                                            //if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 3])
                                                            //{
                                                            //    SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                            //    //SingleClassDistanceNGTypeNegativeA = "";
                                                            //}
                                                            //else
                                                            //{
                                                            //    SingleClassDistanceNGTypeNegativeA = "";
                                                            //}

                                                            if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassEdgeDefectTypeNegativeA = "";
                                                            }

                                                            if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                                //SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            if (SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                            {
                                                                SingleClassSurfaceScratchTypeNegativeA = "背面表面划痕";
                                                                //SingleClassSurfaceDefectTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceScratchTypeNegativeA = "";
                                                            }
                                                            if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassBrokenLineTypeNegativeA = "";
                                                            }

                                                            if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 2])
                                                            {
                                                                //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassStargingWeldingNGTypeNegativeA = "";
                                                            }

                                                            //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                            SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassSurfaceScratchTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                            this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA - 1);

                                                            singleClassNGNegativeA.Id = idOfNegativeA;
                                                            singleClassNGNegativeA.Info[WaferIDNegativeA - 2] = SingleClassNGTypeNegativeA;
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA;
                                                            tempSaveImageWaferIDNegativeA = WaferIDNegativeA;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                            this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA - 1);
                                                            //保存OK图片
                                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                                lock (LockObjectOriImageQueueNegativeA)
                                                                {
                                                                    OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                                }
                                                            }
                                                        }

                                                        //上串检测数据统计汇总
                                                        TotalFilmShiftingCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeA);
                                                        TotalFilmMissCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeA);
                                                        TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA);
                                                        TotalDistanceNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeA);
                                                        TotalEdgeDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeA);
                                                        TotalSurfaceDefectCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeA);
                                                        TotalBrokenLineCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeA);
                                                        TotalStartingWeldingNGCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeA);
                                                        TotalEmptyPlateCountPerClassNegativeA = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeA);

                                                        ++TotalCountNegativeA;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 0
                                                            || (SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                        {

                                                            HistoryNGNegativeAList.Add(HistoryNGNegativeA);
                                                            //RefreshNGIfo(0, HistoryNGNegativeAList);
                                                            //RefreshNGIfo(0, HistoryNGPositiveAList, HistoryNGNegativeAList);
                                                            HistoryNGNegativeA = new string[WaferCountPerClass + 3];
                                                            ++NGTotalCountNegativeA;
                                                            if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            //+ Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeA > 0)) > 1)
                                                            {
                                                                ++MajorFailureCountNegativeA;
                                                            }
                                                            if (TotalFilmShiftingCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingCountNegativeA;
                                                            }
                                                            //if (TotalFilmMissCountPerClassNegativeA > 0)
                                                            //{
                                                            //    ++TotalFilmMissCountNegativeA;
                                                            //}
                                                            if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalFilmShiftingOfHeadAndTailCountNegativeA;
                                                            }
                                                            if (TotalDistanceNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalDistanceNGCountNegativeA;
                                                            }
                                                            if (TotalEdgeDefectCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEdgeDefectCountNegativeA;
                                                            }
                                                            //if (TotalSurfaceDefectCountPerClassNegativeA > 0)
                                                            //{
                                                            //    ++TotalSurfaceDefectCountNegativeA;
                                                            //}
                                                            if (TotalBrokenLineCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalBrokenLineCountNegativeA;
                                                            }
                                                            if (TotalStartingWeldingNGCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalStartingWeldingNGCountNegativeA;
                                                            }
                                                            if (TotalEmptyPlateCountPerClassNegativeA > 0)
                                                            {
                                                                ++TotalEmptyPlateCountNegativeA;
                                                            }
                                                            if ((SingleClassSurfaceMeanGrayArrayNegativeA.Max() - SingleClassSurfaceMeanGrayArrayNegativeA.Min()) >= SurfaceColorDiffGrayThreshNegativeA)
                                                            {
                                                                ++TotalSurfaceColorDiffCountNegativeA;
                                                            }
                                                        }
                                                    }

                                                    //清空主界面当前串内片信息Flag
                                                    this.ClearCurrentClusterStateNegativeA(WaferIDNegativeA - 1);
                                                    //初始化单串硅片编号
                                                    WaferIDNegativeA = 1;
                                                    //初始化单串Flag数组(所有元素置为false)
                                                    this.ClearSingleClassFlagArrayNegativeA();


                                                    //根据数据结果进行相应赋值
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    {
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                    {
                                                        SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }
                                                    //将下半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);
#endregion
                                                }
                                                //未到串与串之间
                                                else
                                                {
                                                    //未抵达串间区域
                                                    //上半片膜偏处理
                                                    SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                    //下半片膜偏处理
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //上半片膜失处理
                                                    SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                    //下半片膜失处理
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //上半片头尾膜偏处理
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                    //下半片头尾膜偏处理
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    ////片间距处理
                                                    //if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                    //{
                                                    //    SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    //}
                                                    //上半片边角缺陷处理
                                                    SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                    //下半片边角缺陷处理
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //上半片表面缺陷处理
                                                    SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                    //下半片表面缺陷处理
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //上半片表面划痕处理
                                                    SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                                    //下半片表面划痕处理
                                                    if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //上半片断栅处理
                                                    SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] = SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                    //下半片断栅处理
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    {
                                                        SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA] = true;
                                                    }
                                                    //下半片起焊点异常处理
                                                    //if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                    //{
                                                    //    SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    //}
                                                    //将上下半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfTopWafer);
                                                    SingleClassSurfaceMeanGrayArrayNegativeA.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                                    if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                                    {
                                                        SingleClassEmptyPlateFlagArrayNegativeA[WaferIDNegativeA - 1] = true;
                                                    }

                                                    //给PLC发送结果 表面缺陷暂时不计入NG
                                                    if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                        //|| SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                        //|| SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                        || SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                        //|| SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        //||SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 2]
                                                        || SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1]
                                                        || SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                    {
                                                        tellPlcCurrentStateNegativeA = ResultNGNegativeA;
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeA = "Film Offset | Ribbon Offset";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeA = "";
                                                        }

                                                        if (SingleClassFilmMissFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            //SingleClassFilmMissTypeNegativeA = "背面膜短|膜失";
                                                            SingleClassFilmMissTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmMissTypeNegativeA = "";
                                                        }

                                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            //SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "背面头尾膜偏|露白";
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeA = "";
                                                        }

                                                        if (SingleClassDistanceNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            SingleClassDistanceNGTypeNegativeA = "背面片间距异常";
                                                            //SingleClassDistanceNGTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassDistanceNGTypeNegativeA = "";
                                                        }

                                                        if (SingleClassEdgeDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            //SingleClassEdgeDefectTypeNegativeA = "背面边角破损";
                                                            SingleClassEdgeDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassEdgeDefectTypeNegativeA = "";
                                                        }

                                                        if (SingleClassSurfaceDefectFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeA = "背面表面缺陷";
                                                            //SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }
                                                        if (SingleClassSurfaceScratchFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeA = "背面表面划痕";
                                                            //SingleClassSurfaceDefectTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeA = "";
                                                        }
                                                        if (SingleClassBrokenLineFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            //SingleClassBrokenLineTypeNegativeA = "背面断栅";
                                                            SingleClassBrokenLineTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassBrokenLineTypeNegativeA = "";
                                                        }

                                                        if (SingleClassStargingWeldingNGFlagArrayNegativeA[WaferIDNegativeA - 1])
                                                        {
                                                            //SingleClassStargingWeldingNGTypeNegativeA = "背面起焊点异常";
                                                            SingleClassStargingWeldingNGTypeNegativeA = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassStargingWeldingNGTypeNegativeA = "";
                                                        }

                                                        //SingleClassSurfaceMeanGrayNGTypeNegativeA = "";

                                                        SingleClassNGTypeNegativeA = SingleClassFilmShiftingTypeNegativeA + " " + SingleClassFilmMissTypeNegativeA + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeA + " " + SingleClassDistanceNGTypeNegativeA + " " + SingleClassEdgeDefectTypeNegativeA + " " + SingleClassSurfaceDefectTypeNegativeA + " " + SingleClassSurfaceScratchTypeNegativeA + " " + SingleClassBrokenLineTypeNegativeA + " " + SingleClassStargingWeldingNGTypeNegativeA;

                                                        this.RefreshCurrentClusterStateNegativeA(false, WaferIDNegativeA);

                                                        singleClassNGNegativeA.Id = idOfNegativeA;
                                                        singleClassNGNegativeA.Info[WaferIDNegativeA - 1] = SingleClassNGTypeNegativeA;
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeA = ResultOKNegativeA;
                                                        this.RefreshCurrentClusterStateNegativeA(true, WaferIDNegativeA);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                            lock (LockObjectOriImageQueueNegativeA)
                                                            {
                                                                OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
#endregion
                                        }

                                        //宽度分辨率校准赋值
                                        if (hv_IsWidthResolutionCalibrateFinish)
                                        {
                                            IsUsingWidthResolutionCalibrateNegativeA = 0;
                                            Global.isUsingWidthResolutionCalibrateNegativeA = "0";
                                            WidthResolutionNegativeA = hv_WidthResolutionOut;
                                            Global.widthResolutionNegativeA = WidthResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeA", Global.isUsingWidthResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "WidthResolutionNegativeA", Global.widthResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtWidthResolution_NegativeA.Text = WidthResolutionNegativeA.ToString();
                                        }

                                        //高度分辨率校准赋值
                                        if (hv_IsHeightResolutionCalibrateFinish)
                                        {
                                            IsUsingHeightResolutionCalibrateNegativeA = 0;
                                            Global.isUsingHeightResolutionCalibrateNegativeA = "0";
                                            HeightResolutionNegativeA = hv_HeightResolutionOut;
                                            Global.heightResolutionNegativeA = HeightResolutionNegativeA.ToString();
                                            Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeA", Global.isUsingHeightResolutionCalibrateNegativeA, defaultRecipePath);
                                            Config.WriteIniData("Config", "HeightResolutionNegativeA", Global.heightResolutionNegativeA, defaultRecipePath);
                                            mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeA.Checked = false;
                                            mfParameterInterface.txtHeightResolution_NegativeA.Text = HeightResolutionNegativeA.ToString();
                                        }



                                        lock (LockObjectNextClassNegativeA)
                                        {
                                            bool isTopNG = false;
                                            bool isBottomNG = false;

                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                               Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                            {
                                                isTopNG = true;
                                            }

                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                               Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                isBottomNG = true;
                                            }
                                            if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                                            {
                                                isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                            }

                                            if (WaferIDNegativeA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                            {
                                                if (isTopNG)
                                                    isTopAndBottomNGNegativeA[WaferIDNegativeA] = true;
                                                string singleClassNGNegativeAStr = null;
                                                foreach (string str in singleClassNGNegativeA.Info)
                                                {
                                                    if (str != null)
                                                    {
                                                        singleClassNGNegativeAStr = str;
                                                        break;
                                                    }
                                                }
                                                if (singleClassNGNegativeAStr != null)
                                                    idOfNegativeA++;
                                                isNextClassFlagNegativeA = true;
                                                //tempSingleClassNGNegativeA = new SingleClassNG();
                                                //tempSingleClassNGNegativeA.Id = idOfNegativeA;
                                            }

                                            //保存全部图片
                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeA.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeA);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempOriImageNegativeA);
                                                lock (LockObjectOriImageQueueNegativeA)
                                                {
                                                    OriImageQueueNegativeA.Enqueue(tempOriImageNegativeA);
                                                }
                                            }
                                            //保存NG图片
                                            if (Convert.ToBoolean(IsSaveNGImage_NegativeA.I))
                                            {
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmShiftingImageNegativeA);
                                                    lock (LockObjectFilmShiftingImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        FilmShiftingImageQueueNegativeA.Enqueue(tempFilmShiftingImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiFilmShiftingImageQueueNegativeA)
                                                        {
                                                            RoiFilmShiftingImageQueueNegativeA.Enqueue(tempRoiFilmShiftingImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempFilmMissImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempFilmMissImageNegativeA);
                                                    lock (LockObjectFilmMissImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        FilmMissImageQueueNegativeA.Enqueue(tempFilmMissImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiFilmMissImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiFilmMissImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiFilmMissImageQueueNegativeA)
                                                        {
                                                            RoiFilmMissImageQueueNegativeA.Enqueue(tempRoiFilmMissImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempHeadAndTailFilmShiftingImageNegativeA);
                                                    lock (LockObjectHeadAndTailFilmShiftingImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        HeadAndTailFilmShiftingImageQueueNegativeA.Enqueue(tempHeadAndTailFilmShiftingImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeA)
                                                        {
                                                            RoiHeadAndTailFilmShiftingImageQueueNegativeA.Enqueue(tempRoiHeadAndTailFilmShiftingImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempEdgeDefectImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempEdgeDefectImageNegativeA);
                                                    lock (LockObjectEdgeDefectImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        EdgeDefectImageQueueNegativeA.Enqueue(tempEdgeDefectImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiEdgeDefectImageQueueNegativeA)
                                                        {
                                                            RoiEdgeDefectImageQueueNegativeA.Enqueue(tempRoiEdgeDefectImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempDistanceNGImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempDistanceNGImageNegativeA);
                                                    lock (LockObjectDistanceNGImageQueueNegativeA)
                                                    {
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        DistanceNGImageQueueNegativeA.Enqueue(tempDistanceNGImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiDistanceNGImageQueueNegativeA)
                                                        {
                                                            RoiDistanceNGImageQueueNegativeA.Enqueue(tempRoiDistanceNGImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                                    || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempSurfaceDefectImageNegativeA);
                                                    lock (LockObjectSurfaceDefectImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        SurfaceDefectImageQueueNegativeA.Enqueue(tempSurfaceDefectImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiSurfaceDefectImageQueueNegativeA)
                                                        {
                                                            RoiSurfaceDefectImageQueueNegativeA.Enqueue(tempRoiSurfaceDefectImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempBrokenLineImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempBrokenLineImageNegativeA);
                                                    lock (LockObjectBrokenLineImageQueueNegativeA)
                                                    {
                                                        if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                            saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        BrokenLineImageQueueNegativeA.Enqueue(tempBrokenLineImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiBrokenLineImageQueueNegativeA)
                                                        {
                                                            RoiBrokenLineImageQueueNegativeA.Enqueue(tempRoiBrokenLineImageNegativeA);
                                                        }
                                                    }
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempStartWeldingNGImageNegativeA);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempStartWeldingNGImageNegativeA);
                                                    lock (LockObjectStartWeldingNGImageQueueNegativeA)
                                                    {
                                                        saveImageWaferIDNegativeA = WaferIDNegativeA + 1;
                                                        StartWeldingNGImageQueueNegativeA.Enqueue(tempStartWeldingNGImageNegativeA);
                                                    }
                                                    //保存ROI图片
                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeA.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImageNegativeA);
                                                        HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImageNegativeA, WindowsHandleNegativeA);
                                                        lock (LockObjectRoiStartWeldingNGImageQueueNegativeA)
                                                        {
                                                            RoiStartWeldingNGImageQueueNegativeA.Enqueue(tempRoiStartWeldingNGImageNegativeA);
                                                        }
                                                    }
                                                }
                                            }


                                            if (WaferIDNegativeA == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                            {
                                                string singleClassNGNegativeAStr = null;
                                                foreach (string str in singleClassNGNegativeA.Info)
                                                {
                                                    if (str != null)
                                                    {
                                                        singleClassNGNegativeAStr = str;
                                                        break;
                                                    }
                                                }
                                                if (singleClassNGNegativeAStr != null)
                                                {
                                                    singleClassNGNegativeA.UpdateDone = false;
                                                    singleClassNGNegativeAList.Add(singleClassNGNegativeA);

                                                    //if (isSingleClassOKNegativeA)
                                                    //{
                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                    //}

                                                }
                                                else
                                                {
                                                    //if (!isSingleClassOKNegativeA)
                                                    //{
                                                    //    SingleClassNG tempSingleClassNGNegativeA = new SingleClassNG();
                                                    //    singleClassNGNegativeAList.Add(tempSingleClassNGNegativeA);
                                                    //}
                                                }
                                                singleClassNGNegativeA = new SingleClassNG();
                                            }

                                        }

                                        //容错报警串数功能启用
                                        //待定
                                        //ImageQueueNegativeA.Enqueue(ho_MainImageNegativeA);
                                        lock (Result2PLC)
                                        {
                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常A.txt",
                     DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeA);
                                        HOperatorSet.CopyImage(ho_MainImageNegativeA, out tempExceptionImageNegativeA);
                                        lock (LockObjectExceptionImageQueueNegativeA)
                                        {
                                            ExceptionImageQueueNegativeA.Enqueue(tempExceptionImageNegativeA);
                                        }

                                        //重置检测，防止出现索引报错
                                        //初始化单串硅片编号
                                        WaferIDNegativeA = 1;
                                        //初始化单串Flag数组(所有元素置为false)
                                        this.ClearSingleClassFlagArrayNegativeA();
                                        //给PLC反馈结果，暂定NG
                                        tellPlcCurrentStateNegativeA = ResultNGNegativeA;
                                        lock (Result2PLC)
                                        {
                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeA);
                                        }


                                        string singleClassNGNegativeAStr = null;
                                        foreach (string str in singleClassNGNegativeA.Info)
                                        {
                                            if (str != null)
                                            {
                                                singleClassNGNegativeAStr = str;
                                                break;
                                            }
                                        }
                                        if (singleClassNGNegativeAStr != null)
                                        {
                                            idOfNegativeA++;
                                            singleClassNGNegativeA.UpdateDone = false;
                                            singleClassNGNegativeAList.Add(singleClassNGNegativeA);
                                        }
                                        singleClassNGNegativeA = new SingleClassNG();
                                    }
#endregion
                }

        }

        //B侧背面串检检测
        public void ActionNegativeB()
        {
            //显示主图像
            HOperatorSet.GetImageSize(ho_MainImageNegativeB, out ImageWidthNegativeB, out ImageHeightNegativeB);
            //判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
            //20190226 黄浩
            //增大异常图片行数阈值，降低异常图片保存数量，从10改为500
            if (ImageHeightNegativeB <= 500 )
            {
                HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeB);
                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempExceptionImageNegativeB);
                lock (LockObjectExceptionImageQueueNegativeB)
                {
                    ExceptionImageQueueNegativeB.Enqueue(tempExceptionImageNegativeB);
                }
                return;
            }
            HOperatorSet.SetPart(WindowsHandleNegativeB, 0, 0, ImageHeightNegativeB, ImageWidthNegativeB);
            HOperatorSet.SetDraw(WindowsHandleNegativeB, "margin");
            HOperatorSet.DispObj(ho_MainImageNegativeB, WindowsHandleNegativeB);
            //背面串检
            HTuple hv_IsBackDetect = 1;
            if (Global.stringType == "常规间距")
            {
#region 常规间距
                                try
                                {
#region
                                    //局部变量
                                    HObject ho_totalFilmShiftingRegion = null;
                                    HObject ho_totalFilmMissRegion = null;
                                    HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                    HObject ho_totalEdgeDefectRegion = null;
                                    HObject ho_totalSurfaceDefectRegion = null;
                                    HObject ho_totalBrokenLineRegion = null;

                                    HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                                    ho_totalFilmShiftingRegion.Dispose();
                                    ho_totalFilmMissRegion.Dispose();
                                    ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                    ho_totalEdgeDefectRegion.Dispose();
                                    ho_totalSurfaceDefectRegion.Dispose();
                                    ho_totalBrokenLineRegion.Dispose();

                                    HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                    HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                    HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                    HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                    HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                    HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                    HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                    HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                    HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                    HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                    HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                                    HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";



                                    HFuncNegativeB.ProcessingImage(ho_MainImageNegativeB, out ho_totalFilmShiftingRegion,
                                      out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                      out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                      out ho_totalBrokenLineRegion, ImageWidthNegativeB, ImageHeightNegativeB,
                                      WindowsHandleNegativeB, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                      IsUsingWidthResolutionCalibrateNegativeB, WidthResolutionNegativeB, WaferWidthNegativeB,
                                      IsUsingHeightResolutionCalibrateNegativeB, HeightResolutionNegativeB, ViceLineInterval,
                                      IsUsingFilmShiftingDetectNegativeB, TopShieldLengthOfTopRegionNegativeB, BottomShieldLengthOfTopRegionNegativeB,
                                      TopShieldLengthOfBottomRegionNegativeB, BottomShieldLengthOfBottomRegionNegativeB,
                                      LocationMainLineThreshNegativeB, FilmWidthThreshNegativeB, FilmWidthOffSetNegativeB,
                                      FirstDetectPosForTopRegionNegativeB, SecondDetectPosForTopRegionNegativeB,
                                      FirstDetectPosForBottomRegionNegativeB, SecondDetectPosForBottomRegionNegativeB,
                                      IsUsingFilmMissDetectNegativeB, WeldWidthThreshNegativeB,
                                      IsUsingHeadAndTailFilmShiftingDetectNegativeB, HeadAndTailFilmWidthThreshNegativeB,
                                      HeadAndTailFilmShieldLengthNegativeB, HeadAndTailFilmDetectRangeNegativeB,
                                      IsUsingWaferEdgeCalibrationNegativeB, LocationWaferEdgeThreshNegativeB, WaferEdgeCalibrationRegionDilationPixelNegativeB,
                                      IsUsingDistanceDetectNegativeB, MinimumDistanceThreshNegativeB, MaxDistanceThreshNegativeB,
                                      ClassDistanceThreshNegativeB, IsUsingEdgeDefectDetectNegativeB, EdgeBigDefectWidthThreshNegativeB,
                                      EdgeBigDefectHeightThreshNegativeB, EdgeSmallDefectDetectDepthNegativeB, EdgeSmallDefectGrayThreshNegativeB,
                                      EdgeSmallDefectWidthThreshNegativeB, EdgeSmallDefectHeightThreshNegativeB,
                                      EdgeSmallDefectGrayMeanThreshNegativeB, EdgeSmallDefectGrayDeviationThreshNegativeB,
                                      CornerDefectAreaRatioThreshNegativeB, IsUsingSurfaceDefectDetectNegativeB,
                                      SurfaceDefectGrayThreshNegativeB, SurfaceDefectWidthThreshNegativeB, SurfaceDefectHeightThreshNegativeB,
                                      SurfaceDefectDetectIndentDepthNegativeB, SurfaceDefectViceLineShieldWidthNegativeB,
                                      SurfaceDefectViceLineShieldLeftPosOffSetNegativeB, SurfaceDefectViceLineShieldRightPosOffSetNegativeB,
                                      SurfaceScratchGrayThreshNegativeB, SurfaceScratchWidthThreshNegativeB, SurfaceScratchHeightThreshNegativeB,
                                      IsUsingStartWeldingDetectNegativeB, StartWeldingDistanceMaxThreshNegativeB,
                                      StartWeldingDistanceMinThreshNegativeB, IsUsingBrokenLineDetectNegativeB,
                                      BrokenLineGrayThreshNegativeB, BrokenLineWidthThreshNegativeB, BrokenLineHeightThreshNegativeB,
                                      BrokenLineDetectIndentDepthNegativeB, IsUsingSurfaceColorDiffDetectNegativeB,
                                      IsEnglish, WeldShieldLengthNegativeB, GrayOpenHeight, MainLineDistance, out hv_IsException,
                                      out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                      out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                      out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                      out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                      out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                      out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                      out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                      out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                      out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                      out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                      out hv_IsStartWeldingNGOfBottomWafer,
                                      out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);

                                    ////显示结果
                                    //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                                    //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                                    //  WindowsHandleNegativeB, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                                    //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                                    //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                                    //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                                    //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                                    //只有在运行状态时才需要统计串信息
                                    if (bl_IsRunNegative)
                                    {
#region 串信息统计
                                        //平台空的情况
                                        if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //未检测到首串首片,平台空
                            
                                            if(Global.isUpperLink=="1")
                                            {
                                                tellPlcCurrentStateNegativeB = ResultEmptyNegativeB;
                                            }
                                            else
                                            {
                                                tellPlcCurrentStateNegativeB = "8";
                                            }
                                        }
                                        //上半片无，下半片有，认为是首串首片
                                        else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //初始化单串硅片编号
                                            WaferIDNegativeB = 1;
                                            //初始化单串Flag数组(所有元素置为false)
                                            this.ClearSingleClassFlagArrayNegativeB();
                                            //清空主界面当前串内片信息Flag
                                            this.ClearCurrentClusterStateNegativeB();

                                            //根据数据结果进行相应赋值
                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                            {
                                                SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                            {
                                                SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                            {
                                                SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                            {
                                                SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                            {
                                                SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            //将下半片平均灰度加入数组
                                            SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);
                                        }
                                        //上下半片都存在，认为不是首串首片，也不是末串末片
                                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //电池片序号自增
                                            if (WaferIDNegativeB <= WaferCountPerClass)
                                                ++WaferIDNegativeB;
                                            if (Convert.ToBoolean(hv_IsNextClass.I))
                                            {
                                                //抵达串间区域
                                                //判断当前串电池片数是否达到最低限度，即3片
                                                if (WaferIDNegativeB >= 3)
                                                {
                                                    //上串尾片数据处理
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                    //将上半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                    //给PLC发送结果
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                         || SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3]
                                                        || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {
                                                        if (Global.isUpperLink == "1")
                                                        {
                                                            tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeB = "2";
                                                        }
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                            }


                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }

                                                        if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3])
                                                        {
                                                            SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                            //SingleClassDistanceNGTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassDistanceNGTypeNegativeB = "";
                                                        }

                                                        if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }

                                                        if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                            SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }

                                                        if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }

                                                        if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        {
                                                            //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }

                                                        //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                        SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                        this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB - 1);

                                                        singleClassNGNegativeB.Id = idOfNegativeB;
                                                        singleClassNGNegativeB.Info[WaferIDNegativeB - 2] = SingleClassNGTypeNegativeB;
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                        tempSaveImageWaferIDNegativeB = WaferIDNegativeB;

                                                    }
                                                    else
                                                    {
                                                        if (Global.isUpperLink == "1")
                                                        {
                                                            tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeB = "1";
                                                        }
                                                        this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB - 1);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                            lock (LockObjectOriImageQueueNegativeB)
                                                            {
                                                                OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                            }
                                                        }
                                                    }

                                                    //上串检测数据统计汇总
                                                    TotalFilmShiftingCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeB);
                                                    TotalFilmMissCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeB);
                                                    TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB);
                                                    TotalDistanceNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeB);
                                                    TotalEdgeDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeB);
                                                    TotalSurfaceDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeB);
                                                    TotalBrokenLineCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeB);
                                                    TotalStartingWeldingNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeB);
                                                    TotalEmptyPlateCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeB);

                                                    ++TotalCountNegativeB;
                                                    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 0
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {

                                                        HistoryNGNegativeBList.Add(HistoryNGNegativeB);

                                                        HistoryNGNegativeB = new string[WaferCountPerClass + 3];
                                                        ++NGTotalCountNegativeB;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 1)
                                                        {
                                                            ++MajorFailureCountNegativeB;
                                                        }
                                                        if (TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingCountNegativeB;
                                                        }
                                                        //if (TotalFilmMissCountPerClassNegativeB > 0)
                                                        //{
                                                        //    ++TotalFilmMissCountNegativeB;
                                                        //}
                                                        if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                                        }
                                                        if (TotalDistanceNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalDistanceNGCountNegativeB;
                                                        }
                                                        if (TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEdgeDefectCountNegativeB;
                                                        }
                                                        if (TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalSurfaceDefectCountNegativeB;
                                                        }
                                                        if (TotalBrokenLineCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalBrokenLineCountNegativeB;
                                                        }
                                                        if (TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalStartingWeldingNGCountNegativeB;
                                                        }
                                                        if (TotalEmptyPlateCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEmptyPlateCountNegativeB;
                                                        }
                                                        if ((SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                        {
                                                            ++TotalSurfaceColorDiffCountNegativeB;
                                                        }
                                                    }
                                                }

                                                //清空主界面当前串内片信息Flag
                                                this.ClearCurrentClusterStateNegativeB(WaferIDNegativeB - 1);
                                                //初始化单串硅片编号
                                                WaferIDNegativeB = 1;
                                                //初始化单串Flag数组(所有元素置为false)
                                                this.ClearSingleClassFlagArrayNegativeB();


                                                //根据数据结果进行相应赋值
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //将下半片平均灰度值加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);
                                            }
                                            //未到串与串之间
                                            else
                                            {
                                                //未抵达串间区域
                                                //上半片膜偏处理
                                                SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                //下半片膜偏处理
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //上半片膜失处理
                                                SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                //下半片膜失处理
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //上半片头尾膜偏处理
                                                SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                //下半片头尾膜偏处理
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //片间距处理
                                                if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                {
                                                    SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2] = true;
                                                }
                                                //上半片边角缺陷处理
                                                SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                //下半片边角缺陷处理
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //上半片表面缺陷处理
                                                SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                //下半片表面缺陷处理
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //上半片断栅处理
                                                SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                //下半片断栅处理
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //下半片起焊点异常处理
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //将上下半片平均灰度值加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                                if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                                {
                                                    SingleClassEmptyPlateFlagArrayNegativeB[WaferIDNegativeB - 2] = true;
                                                }

                                                //给PLC发送结果
                                                if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                {
                                                    if (Global.isUpperLink == "1")
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeB = "2";
                                                    }
                                                    //整理Ng类型文档
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        if (Global.isEnglish == "0")
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeB = "";
                                                    }

                                                    if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                        SingleClassFilmMissTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmMissTypeNegativeB = "";
                                                    }

                                                    if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                    }

                                                    if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                        // SingleClassDistanceNGTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassDistanceNGTypeNegativeB = "";
                                                    }

                                                    if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                        SingleClassEdgeDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassEdgeDefectTypeNegativeB = "";
                                                    }

                                                    if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                        SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }

                                                    if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                        SingleClassBrokenLineTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassBrokenLineTypeNegativeB = "";
                                                    }

                                                    if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                        SingleClassStargingWeldingNGTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassStargingWeldingNGTypeNegativeB = "";
                                                    }

                                                    //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                    SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                    this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB - 1);

                                                    singleClassNGNegativeB.Id = idOfNegativeB;
                                                    singleClassNGNegativeB.Info[WaferIDNegativeB - 2] = SingleClassNGTypeNegativeB;
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                }
                                                else
                                                {
                                                    if (Global.isUpperLink == "1")
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeB = "1";
                                                    }
                                                    this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB - 1);
                                                    //保存OK图片
                                                    if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                        HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                        lock (LockObjectOriImageQueueNegativeB)
                                                        {
                                                            OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                        }
                                                    }
                                                }
                                            }
                                        }
#endregion
                                    }

                                    //宽度分辨率校准赋值
                                    if (hv_IsWidthResolutionCalibrateFinish)
                                    {
                                        IsUsingWidthResolutionCalibrateNegativeB = 0;
                                        Global.isUsingWidthResolutionCalibrateNegativeB = "0";
                                        WidthResolutionNegativeB = hv_WidthResolutionOut;
                                        Global.widthResolutionNegativeB = WidthResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeB", Global.isUsingWidthResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "WidthResolutionNegativeB", Global.widthResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtWidthResolution_NegativeB.Text = WidthResolutionNegativeB.ToString();
                                    }

                                    //高度分辨率校准赋值
                                    if (hv_IsHeightResolutionCalibrateFinish)
                                    {
                                        IsUsingHeightResolutionCalibrateNegativeB = 0;
                                        Global.isUsingHeightResolutionCalibrateNegativeB = "0";
                                        HeightResolutionNegativeB = hv_HeightResolutionOut;
                                        Global.heightResolutionNegativeB = HeightResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeB", Global.isUsingHeightResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "HeightResolutionNegativeB", Global.heightResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtHeightResolution_NegativeB.Text = HeightResolutionNegativeB.ToString();
                                    }

                                    lock (LockObjectNextClassNegativeB)
                                    {
                                        bool isTopNG = false;
                                        bool isBottomNG = false;

                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                        {
                                            isTopNG = true;
                                        }

                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                        {
                                            isBottomNG = true;
                                        }
                                        if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                                        {
                                            isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                        }

                                        if (WaferIDNegativeB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                        {
                                            if (isTopNG)
                                                isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                            string singleClassNGNegativeBStr = null;
                                            foreach (string str in singleClassNGNegativeB.Info)
                                            {
                                                if (str != null)
                                                {
                                                    singleClassNGNegativeBStr = str;
                                                    break;
                                                }
                                            }
                                            if (singleClassNGNegativeBStr != null)
                                                idOfNegativeB++;
                                            isNextClassFlagNegativeB = true;
                                            //tempSingleClassNGNegativeB = new SingleClassNG();
                                            //tempSingleClassNGNegativeB.Id = idOfNegativeB;
                                        }

                                        //保存全部图片
                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                        {
                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                            lock (LockObjectOriImageQueueNegativeB)
                                            {
                                                OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                            }
                                        }

                                        //保存NG图片
                                        if (Convert.ToBoolean(IsSaveNGImage_NegativeB.I))
                                        {
                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmShiftingImageNegativeB);
                                                lock (LockObjectFilmShiftingImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    FilmShiftingImageQueueNegativeB.Enqueue(tempFilmShiftingImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiFilmShiftingImageQueueNegativeB)
                                                    {
                                                        RoiFilmShiftingImageQueueNegativeB.Enqueue(tempRoiFilmShiftingImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempFilmMissImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmMissImageNegativeB);
                                                lock (LockObjectFilmMissImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    FilmMissImageQueueNegativeB.Enqueue(tempFilmMissImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiFilmMissImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiFilmMissImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiFilmMissImageQueueNegativeB)
                                                    {
                                                        RoiFilmMissImageQueueNegativeB.Enqueue(tempRoiFilmMissImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempHeadAndTailFilmShiftingImageNegativeB);
                                                lock (LockObjectHeadAndTailFilmShiftingImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    HeadAndTailFilmShiftingImageQueueNegativeB.Enqueue(tempHeadAndTailFilmShiftingImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeB)
                                                    {
                                                        RoiHeadAndTailFilmShiftingImageQueueNegativeB.Enqueue(tempRoiHeadAndTailFilmShiftingImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempEdgeDefectImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempEdgeDefectImageNegativeB);
                                                lock (LockObjectEdgeDefectImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    EdgeDefectImageQueueNegativeB.Enqueue(tempEdgeDefectImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiEdgeDefectImageQueueNegativeB)
                                                    {
                                                        RoiEdgeDefectImageQueueNegativeB.Enqueue(tempRoiEdgeDefectImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempDistanceNGImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempDistanceNGImageNegativeB);
                                                lock (LockObjectDistanceNGImageQueueNegativeB)
                                                {
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                    DistanceNGImageQueueNegativeB.Enqueue(tempDistanceNGImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiDistanceNGImageQueueNegativeB)
                                                    {
                                                        RoiDistanceNGImageQueueNegativeB.Enqueue(tempRoiDistanceNGImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                                || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempSurfaceDefectImageNegativeB);
                                                lock (LockObjectSurfaceDefectImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    SurfaceDefectImageQueueNegativeB.Enqueue(tempSurfaceDefectImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiSurfaceDefectImageQueueNegativeB)
                                                    {
                                                        RoiSurfaceDefectImageQueueNegativeB.Enqueue(tempRoiSurfaceDefectImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempBrokenLineImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempBrokenLineImageNegativeB);
                                                lock (LockObjectBrokenLineImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    BrokenLineImageQueueNegativeB.Enqueue(tempBrokenLineImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiBrokenLineImageQueueNegativeB)
                                                    {
                                                        RoiBrokenLineImageQueueNegativeB.Enqueue(tempRoiBrokenLineImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempStartWeldingNGImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempStartWeldingNGImageNegativeB);
                                                lock (LockObjectStartWeldingNGImageQueueNegativeB)
                                                {
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    StartWeldingNGImageQueueNegativeB.Enqueue(tempStartWeldingNGImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiStartWeldingNGImageQueueNegativeB)
                                                    {
                                                        RoiStartWeldingNGImageQueueNegativeB.Enqueue(tempRoiStartWeldingNGImageNegativeB);
                                                    }
                                                }
                                            }
                                        }

                                        if (WaferIDNegativeB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                        {
                                            string singleClassNGNegativeBStr = null;
                                            foreach (string str in singleClassNGNegativeB.Info)
                                            {
                                                if (str != null)
                                                {
                                                    singleClassNGNegativeBStr = str;
                                                    break;
                                                }
                                            }
                                            if (singleClassNGNegativeBStr != null)
                                            {
                                                singleClassNGNegativeB.UpdateDone = false;
                                                singleClassNGNegativeBList.Add(singleClassNGNegativeB);
                                                //if (isSingleClassOKNegativeB)
                                                //{
                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                //}

                                            }
                                            else
                                            {
                                                //if (!isSingleClassOKNegativeB)
                                                //{
                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                //}
                                            }
                                            singleClassNGNegativeB = new SingleClassNG();
                                        }
                                    }



                                    //容错报警串数功能启用
                                    //待定
                                    //ImageQueueNegativeB.Enqueue(ho_MainImageNegativeB);
                                    if (Global.isUpperLink == "1")
                                    {
                                        lock (Result2PLC)
                                        {
                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                        }
                                    }
                                    else
                                    {
                                        lock (ResultNegativeB)
                                        {
                                            ResultNegativeB.Enqueue(tellPlcCurrentStateNegativeB);
                                        }
                                    }
                    
#endregion
                                }
                                catch (Exception ex)
                                {
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常B.txt",
                         DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeB);
                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempExceptionImageNegativeB);
                                    lock (LockObjectExceptionImageQueueNegativeB)
                                    {
                                        ExceptionImageQueueNegativeB.Enqueue(tempExceptionImageNegativeB);
                                    }
                                    //重置检测，防止出现索引报错
                                    //初始化单串硅片编号
                                    WaferIDNegativeB = 1;
                                    //初始化单串Flag数组(所有元素置为false)
                                    this.ClearSingleClassFlagArrayNegativeB();
                                    if (Global.isUpperLink == "1")
                                    {
                                        tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                    }
                                    else
                                    {
                                        tellPlcCurrentStateNegativeB = "2";
                                    }
                                    if (Global.isUpperLink == "1")
                                    {
                                        lock (Result2PLC)
                                        {
                                            Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                        }
                                    }
                                    else
                                    {
                                        lock (ResultNegativeB)
                                        {
                                            ResultNegativeB.Enqueue(tellPlcCurrentStateNegativeB);
                                        }
                                    }


                                    string singleClassNGNegativeBStr = null;
                                    foreach (string str in singleClassNGNegativeB.Info)
                                    {
                                        if (str != null)
                                        {
                                            singleClassNGNegativeBStr = str;
                                            break;
                                        }
                                    }
                                    if (singleClassNGNegativeBStr != null)
                                    {
                                        idOfNegativeB++;
                                        singleClassNGNegativeB.UpdateDone = false;
                                        singleClassNGNegativeBList.Add(singleClassNGNegativeB);
                                    }
                                    singleClassNGNegativeB = new SingleClassNG();
                                }
#endregion
            }
            else if (Global.stringType == "小间距" && MainLineNum == 10)
            {
#region 小间距
                                try
                                {
#region
                                    //局部变量
                                    HObject ho_totalFilmShiftingRegion = null;
                                    HObject ho_totalFilmMissRegion = null;
                                    HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                    HObject ho_totalEdgeDefectRegion = null;
                                    HObject ho_totalSurfaceDefectRegion = null;
                                    HObject ho_totalBrokenLineRegion = null;

                                    HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                                    ho_totalFilmShiftingRegion.Dispose();
                                    ho_totalFilmMissRegion.Dispose();
                                    ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                    ho_totalEdgeDefectRegion.Dispose();
                                    ho_totalSurfaceDefectRegion.Dispose();
                                    ho_totalBrokenLineRegion.Dispose();

                                    HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                    HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                    HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                    HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                    HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                    HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                    HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                    HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                    HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                    HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                    HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG, hv_BackInfo;
                                    HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";
                                    ////显示主图像
                                    //HOperatorSet.GetImageSize(ho_MainImageNegativeB, out ImageWidthNegativeB, out ImageHeightNegativeB);
                                    ////判断相机抓取的图片是否异常（异常帧触发信号，类似于毛刺信号）
                                    ////20190226 黄浩
                                    ////增大异常图片行数阈值，降低异常图片保存数量，从10改为500
                                    //if (ImageHeightNegativeB <= 500 || ImageWidthNegativeB < 4096)
                                    //{
                                    //    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeB);
                                    //    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempExceptionImageNegativeB);
                                    //    lock (LockObjectExceptionImageQueueNegativeB)
                                    //    {
                                    //        ExceptionImageQueueNegativeB.Enqueue(tempExceptionImageNegativeB);
                                    //    }
                                    //    return;
                                    //}
                                    //HOperatorSet.SetPart(WindowsHandleNegativeB, 0, 0, ImageHeightNegativeB, ImageWidthNegativeB);
                                    //HOperatorSet.SetDraw(WindowsHandleNegativeB, "margin");
                                    //HOperatorSet.DispObj(ho_MainImageNegativeB, WindowsHandleNegativeB);

                                    //背面串检
                    
                                    HFuncNegativeB.ProcessingBackTenMainLineImage(ho_MainImageNegativeB, out ho_totalFilmShiftingRegion,
                                      out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                      out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                      out ho_totalBrokenLineRegion, ImageWidthNegativeB, ImageHeightNegativeB,
                                      WindowsHandleNegativeB, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                      IsUsingWidthResolutionCalibrateNegativeB, WidthResolutionNegativeB, WaferWidthNegativeB,
                                      IsUsingHeightResolutionCalibrateNegativeB, HeightResolutionNegativeB, ViceLineInterval,
                                      IsUsingFilmShiftingDetectNegativeB, TopShieldLengthOfTopRegionNegativeB, BottomShieldLengthOfTopRegionNegativeB,
                                      TopShieldLengthOfBottomRegionNegativeB, BottomShieldLengthOfBottomRegionNegativeB,
                                      LocationMainLineThreshNegativeB, FilmWidthThreshNegativeB, FilmWidthOffSetNegativeB,
                                      FirstDetectPosForTopRegionNegativeB, SecondDetectPosForTopRegionNegativeB,
                                      FirstDetectPosForBottomRegionNegativeB, SecondDetectPosForBottomRegionNegativeB,
                                      IsUsingFilmMissDetectNegativeB, WeldWidthThreshNegativeB,
                                      IsUsingHeadAndTailFilmShiftingDetectNegativeB, HeadAndTailFilmWidthThreshNegativeB,
                                      HeadAndTailFilmShieldLengthNegativeB, HeadAndTailFilmDetectRangeNegativeB,
                                      IsUsingWaferEdgeCalibrationNegativeB, LocationWaferEdgeThreshNegativeB, WaferEdgeCalibrationRegionDilationPixelNegativeB,
                                      IsUsingDistanceDetectNegativeB, MinimumDistanceThreshNegativeB, MaxDistanceThreshNegativeB,
                                      ClassDistanceThreshNegativeB, IsUsingEdgeDefectDetectNegativeB, EdgeBigDefectWidthThreshNegativeB,
                                      EdgeBigDefectHeightThreshNegativeB, EdgeSmallDefectDetectDepthNegativeB, EdgeSmallDefectGrayThreshNegativeB,
                                      EdgeSmallDefectWidthThreshNegativeB, EdgeSmallDefectHeightThreshNegativeB,
                                      EdgeSmallDefectGrayMeanThreshNegativeB, EdgeSmallDefectGrayDeviationThreshNegativeB,
                                      CornerDefectAreaRatioThreshNegativeB, IsUsingSurfaceDefectDetectNegativeB,
                                      SurfaceDefectGrayThreshNegativeB, SurfaceDefectWidthThreshNegativeB, SurfaceDefectHeightThreshNegativeB,
                                      SurfaceDefectDetectIndentDepthNegativeB, SurfaceDefectViceLineShieldWidthNegativeB,
                                      SurfaceDefectViceLineShieldLeftPosOffSetNegativeB, SurfaceDefectViceLineShieldRightPosOffSetNegativeB,
                                      SurfaceScratchGrayThreshNegativeB, SurfaceScratchWidthThreshNegativeB, SurfaceScratchHeightThreshNegativeB,
                                      IsUsingStartWeldingDetectNegativeB, StartWeldingDistanceMaxThreshNegativeB,
                                      StartWeldingDistanceMinThreshNegativeB, IsUsingBrokenLineDetectNegativeB,
                                      BrokenLineGrayThreshNegativeB, BrokenLineWidthThreshNegativeB, BrokenLineHeightThreshNegativeB,
                                      BrokenLineDetectIndentDepthNegativeB, IsUsingSurfaceColorDiffDetectNegativeB,
                                      IsEnglish, out hv_IsException,
                                      out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                      out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                      out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                      out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                      out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                      out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                      out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                      out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                      out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                      out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                      out hv_IsStartWeldingNGOfBottomWafer,
                                      out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer, out hv_BackInfo);
                    
                                    ////显示结果
                                    //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                                    //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                                    //  WindowsHandleNegativeB, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                                    //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                                    //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                                    //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                                    //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                                    long[] ResultNegativeB = new long[hv_BackInfo.Length];
                                    if (hv_BackInfo != null)
                                    {
                                        ResultNegativeB = hv_BackInfo;
                                    }
                                    List<long[]> ResultNegativeBList = new List<long[]>();

                                    int CellNum = 0;
                                    if (bl_IsRunNegative)
                                    {
                                        for (int i = 0; i < ResultNegativeB.Length / 4; i++)
                                        {
                                            long[] ResultNegativeBTemp = new long[4];
                                            Array.ConstrainedCopy(ResultNegativeB, 4 * i, ResultNegativeBTemp, 0, 4);
                                            ResultNegativeBList.Add(ResultNegativeBTemp);

                                            //0--空 1--半个  2--完整
                                            //平台空
                                            if (Convert.ToString(ResultNegativeBList[i][0]) == "0")
                                            {
                                                if (i == 0)
                                                {
                                                    WaferIDNegativeB = 1;
                                                }

                                            }
                                            //半个电池片
                                            if (Convert.ToString(ResultNegativeBList[i][0]) == "1")
                                            {

                                                if (i == 0)
                                                {
                                                    ++WaferIDNegativeB;
                                                    ++CellNum;
                                                    //串间距
                                                    //抵达串间区域
                                                    //判断当前串电池片数是否达到最低限度，即3片
                                                    if (WaferIDNegativeB >= 3)
                                                    {
                                                        //上串尾片数据处理
                                                        SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(ResultNegativeBList[i][1]);
                                                        //SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                        //SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                        //SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                        SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(ResultNegativeBList[i][2]);
                                                        // SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                        //将上半片平均灰度值加入数组
                                                        //SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                        //给PLC发送结果
                                                        if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                            //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                            //|| SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                            //|| SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3]
                                                            //|| SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                            || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                        //|| SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                        {
                                                            tellPlcCurrentStateNegativeB = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "1";
                                                            lock (Result2PLC)
                                                            {
                                                                Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                                            }
                                                            if (Convert.ToBoolean(IsSaveNGImage_NegativeB.I))
                                                            {

                                                                if (Convert.ToBoolean(ResultNegativeBList[i][1]))
                                                                {
                                                                    HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeB);
                                                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmShiftingImageNegativeB);
                                                                    lock (LockObjectFilmShiftingImageQueueNegativeB)
                                                                    {
                                                                        FilmShiftingImageQueueNegativeB.Enqueue(tempFilmShiftingImageNegativeB);
                                                                    }
                                                                    //保存ROI图片
                                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                                    {
                                                                        HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeB);
                                                                        HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                                        lock (LockObjectRoiFilmShiftingImageQueueNegativeB)
                                                                        {
                                                                            RoiFilmShiftingImageQueueNegativeB.Enqueue(tempRoiFilmShiftingImageNegativeB);
                                                                        }
                                                                    }
                                                                }

                                                                if (Convert.ToBoolean(ResultNegativeBList[i][2]))
                                                                {
                                                                    HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeB);
                                                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempSurfaceDefectImageNegativeB);
                                                                    lock (LockObjectSurfaceDefectImageQueueNegativeB)
                                                                    {

                                                                        SurfaceDefectImageQueueNegativeB.Enqueue(tempSurfaceDefectImageNegativeB);
                                                                    }
                                                                    //保存ROI图片
                                                                    if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                                    {
                                                                        HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeB);
                                                                        HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeB, WindowsHandleNegativeB);
                                                                        lock (LockObjectRoiSurfaceDefectImageQueueNegativeB)
                                                                        {
                                                                            RoiSurfaceDefectImageQueueNegativeB.Enqueue(tempRoiSurfaceDefectImageNegativeB);
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                            //整理Ng类型文档
                                                            if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                            {
                                                                if (Global.isEnglish == "0")
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                                }
                                                                else
                                                                {
                                                                    SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "";
                                                            }



                                                            if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                            {
                                                                //SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                                SingleClassSurfaceDefectTypeNegativeB = "";
                                                            }
                                                            else
                                                            {
                                                                SingleClassSurfaceDefectTypeNegativeB = "";
                                                            }



                                                            //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                            SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB;

                                                            this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB - 1);

                                                            singleClassNGNegativeB.Id = idOfNegativeB;
                                                            singleClassNGNegativeB.Info[WaferIDNegativeB - 2] = SingleClassNGTypeNegativeB;
                                                            saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                            tempSaveImageWaferIDNegativeB = WaferIDNegativeB;
                                                        }
                                                        else
                                                        {
                                                            tellPlcCurrentStateNegativeB = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "0";
                                                            lock (Result2PLC)
                                                            {
                                                                Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                                            }
                                                            this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB - 1);
                                                            //保存OK图片
                                                            if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                                lock (LockObjectOriImageQueueNegativeB)
                                                                {
                                                                    OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                                }
                                                            }
                                                        }

                                                        //上串检测数据统计汇总
                                                        TotalFilmShiftingCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeB);
                                                        TotalFilmMissCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeB);
                                                        TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB);
                                                        TotalDistanceNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeB);
                                                        TotalEdgeDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeB);
                                                        TotalSurfaceDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeB);
                                                        TotalBrokenLineCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeB);
                                                        TotalStartingWeldingNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeB);
                                                        TotalEmptyPlateCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeB);

                                                        ++TotalCountNegativeB;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 0
                                                            )
                                                        {

                                                            HistoryNGNegativeBList.Add(HistoryNGNegativeB);
                                                            //RefreshNGIfo(0, HistoryNGNegativeBList);
                                                            //RefreshNGIfo(0, HistoryNGPositiveAList, HistoryNGNegativeBList);
                                                            HistoryNGNegativeB = new string[WaferCountPerClass + 3];
                                                            ++NGTotalCountNegativeB;
                                                            if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                            //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                            + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 1)
                                                            {
                                                                ++MajorFailureCountNegativeB;
                                                            }
                                                            if (TotalFilmShiftingCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalFilmShiftingCountNegativeB;
                                                            }
                                                            //if (TotalFilmMissCountPerClassNegativeB > 0)
                                                            //{
                                                            //    ++TotalFilmMissCountNegativeB;
                                                            //}
                                                            if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                                            }
                                                            if (TotalDistanceNGCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalDistanceNGCountNegativeB;
                                                            }
                                                            if (TotalEdgeDefectCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalEdgeDefectCountNegativeB;
                                                            }
                                                            if (TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalSurfaceDefectCountNegativeB;
                                                            }
                                                            if (TotalBrokenLineCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalBrokenLineCountNegativeB;
                                                            }
                                                            if (TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalStartingWeldingNGCountNegativeB;
                                                            }
                                                            if (TotalEmptyPlateCountPerClassNegativeB > 0)
                                                            {
                                                                ++TotalEmptyPlateCountNegativeB;
                                                            }
                                                            if ((SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                            {
                                                                ++TotalSurfaceColorDiffCountNegativeB;
                                                            }
                                                        }
                                                    }

                                                    //清空主界面当前串内片信息Flag
                                                    this.ClearCurrentClusterStateNegativeB(WaferIDNegativeB - 1);
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                                        string singleClassNGNegativeBStr = null;
                                                        foreach (string str in singleClassNGNegativeB.Info)
                                                        {
                                                            if (str != null)
                                                            {
                                                                singleClassNGNegativeBStr = str;
                                                                break;
                                                            }
                                                        }
                                                        if (singleClassNGNegativeBStr != null)
                                                            idOfNegativeB++;
                                                        isNextClassFlagNegativeB = true;
                                                        //tempSingleClassNGNegativeB = new SingleClassNG();
                                                        //tempSingleClassNGNegativeB.Id = idOfNegativeB;
                                                    }
                                                    //初始化单串硅片编号
                                                    WaferIDNegativeB = 1;
                                                    //初始化单串Flag数组(所有元素置为false)
                                                    this.ClearSingleClassFlagArrayNegativeB();

#region 整理信息和保存图片
                                                    lock (LockObjectNextClassNegativeB)
                                                    {
                                                        bool isTopNG = false;
                                                        bool isBottomNG = false;

                                                        //if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                                        //{
                                                        //    isTopNG = true;
                                                        //}

                                                        //if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                                        //   Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                        //{
                                                        //    isBottomNG = true;
                                                        //}



                                                        if (true)
                                                        {
                                                            string singleClassNGNegativeBStr = null;
                                                            foreach (string str in singleClassNGNegativeB.Info)
                                                            {
                                                                if (str != null)
                                                                {
                                                                    singleClassNGNegativeBStr = str;
                                                                    break;
                                                                }
                                                            }
                                                            if (singleClassNGNegativeBStr != null)
                                                            {
                                                                singleClassNGNegativeB.UpdateDone = false;
                                                                singleClassNGNegativeBList.Add(singleClassNGNegativeB);

                                                                //if (isSingleClassOKNegativeB)
                                                                //{
                                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                                //}

                                                            }
                                                            else
                                                            {
                                                                //if (!isSingleClassOKNegativeB)
                                                                //{
                                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                                //}
                                                            }
                                                            singleClassNGNegativeB = new SingleClassNG();
                                                        }

                                                    }
#endregion
                                                }
                                                else
                                                {
                                                    //未抵达串间区域
                                                    //下半片膜偏处理
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                    {
                                                        SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                    }
                                                    //下半片表面缺陷处理
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                    {
                                                        SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                    }
                                                }

                                            }
                                            //完整电池片
                                            if (Convert.ToString(ResultNegativeBList[i][0]) == "2")
                                            {
                                                ++WaferIDNegativeB;
                                                ++CellNum;
                                                SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] = Convert.ToBoolean(ResultNegativeBList[i][1]);
                                                SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2] = Convert.ToBoolean(ResultNegativeBList[i][2]);
                                                if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //|| SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                //|| SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                //|| SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                {
                                                    tellPlcCurrentStateNegativeB = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "1";
                                                    lock (Result2PLC)
                                                    {
                                                        Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                                    }
                                                    if (Convert.ToBoolean(IsSaveNGImage_NegativeB.I))
                                                    {

                                                        if (Convert.ToBoolean(ResultNegativeBList[i][1]))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeB);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmShiftingImageNegativeB);
                                                            lock (LockObjectFilmShiftingImageQueueNegativeB)
                                                            {
                                                                FilmShiftingImageQueueNegativeB.Enqueue(tempFilmShiftingImageNegativeB);
                                                            }
                                                            //保存ROI图片
                                                            if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeB);
                                                                HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                                lock (LockObjectRoiFilmShiftingImageQueueNegativeB)
                                                                {
                                                                    RoiFilmShiftingImageQueueNegativeB.Enqueue(tempRoiFilmShiftingImageNegativeB);
                                                                }
                                                            }
                                                        }

                                                        if (Convert.ToBoolean(ResultNegativeBList[i][2]))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeB);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempSurfaceDefectImageNegativeB);
                                                            lock (LockObjectSurfaceDefectImageQueueNegativeB)
                                                            {

                                                                SurfaceDefectImageQueueNegativeB.Enqueue(tempSurfaceDefectImageNegativeB);
                                                            }
                                                            //保存ROI图片
                                                            if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                            {
                                                                HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeB);
                                                                HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeB, WindowsHandleNegativeB);
                                                                lock (LockObjectRoiSurfaceDefectImageQueueNegativeB)
                                                                {
                                                                    RoiSurfaceDefectImageQueueNegativeB.Enqueue(tempRoiSurfaceDefectImageNegativeB);
                                                                }
                                                            }
                                                        }

                                                    }
                                                    //整理Ng类型文档
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        if (Global.isEnglish == "0")
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeB = "";
                                                    }


                                                    if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        //SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                        SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }



                                                    SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB;

                                                    this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB - 1);

                                                    singleClassNGNegativeB.Id = idOfNegativeB;
                                                    singleClassNGNegativeB.Info[WaferIDNegativeB - 2] = SingleClassNGTypeNegativeB;
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                }
                                                else
                                                {
                                                    tellPlcCurrentStateNegativeB = "WRS EM4620 2" + " " + Convert.ToString(CellNum) + " " + "0";
                                                    lock (Result2PLC)
                                                    {
                                                        Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                                    }
                                                    this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB - 1);
                                                    //保存OK图片
                                                    if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                        HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                        lock (LockObjectOriImageQueueNegativeB)
                                                        {
                                                            OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                        }
                                                    }
                                                }



#region 整理信息和保存图片
                                                lock (LockObjectNextClassNegativeB)
                                                {
                                                    //bool isTopNG = false;
                                                    //bool isBottomNG = false;

                                                    //if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                                    //{
                                                    //    isTopNG = true;
                                                    //}

                                                    //if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                                    //   Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                    //{
                                                    //    isBottomNG = true;
                                                    //}
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 2] || SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2])
                                                    {
                                                        isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                                        string singleClassNGNegativeBStr = null;
                                                        foreach (string str in singleClassNGNegativeB.Info)
                                                        {
                                                            if (str != null)
                                                            {
                                                                singleClassNGNegativeBStr = str;
                                                                break;
                                                            }
                                                        }
                                                        if (singleClassNGNegativeBStr != null)
                                                            idOfNegativeB++;
                                                        isNextClassFlagNegativeB = true;
                                                        //tempSingleClassNGNegativeB = new SingleClassNG();
                                                        //tempSingleClassNGNegativeB.Id = idOfNegativeB;
                                                    }




                                                }
#endregion
                                            }

                                        }

                                        //只有在运行状态时才需要统计串信息



                                    }

                                    //宽度分辨率校准赋值
                                    if (hv_IsWidthResolutionCalibrateFinish)
                                    {
                                        IsUsingWidthResolutionCalibrateNegativeB = 0;
                                        Global.isUsingWidthResolutionCalibrateNegativeB = "0";
                                        WidthResolutionNegativeB = hv_WidthResolutionOut;
                                        Global.widthResolutionNegativeB = WidthResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeB", Global.isUsingWidthResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "WidthResolutionNegativeB", Global.widthResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtWidthResolution_NegativeB.Text = WidthResolutionNegativeB.ToString();
                                    }

                                    //高度分辨率校准赋值
                                    if (hv_IsHeightResolutionCalibrateFinish)
                                    {
                                        IsUsingHeightResolutionCalibrateNegativeB = 0;
                                        Global.isUsingHeightResolutionCalibrateNegativeB = "0";
                                        HeightResolutionNegativeB = hv_HeightResolutionOut;
                                        Global.heightResolutionNegativeB = HeightResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeB", Global.isUsingHeightResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "HeightResolutionNegativeB", Global.heightResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtHeightResolution_NegativeB.Text = HeightResolutionNegativeB.ToString();
                                    }





                                    //容错报警串数功能启用
                                    //待定
                                    //ImageQueueNegativeB.Enqueue(ho_MainImageNegativeB);
                                    //lock (Result2PLC)
                                    //{
                                    //    Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                    //}
#endregion
                                }
                                catch (Exception ex)
                                {
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常B.txt",
         DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeB);
                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempExceptionImageNegativeB);
                                    lock (LockObjectExceptionImageQueueNegativeB)
                                    {
                                        ExceptionImageQueueNegativeB.Enqueue(tempExceptionImageNegativeB);
                                    }

                                    //重置检测，防止出现索引报错
                                    //初始化单串硅片编号
                                    WaferIDNegativeB = 1;
                                    //初始化单串Flag数组(所有元素置为false)
                                    this.ClearSingleClassFlagArrayNegativeB();
                                    //给PLC反馈结果，暂定NG
                                    tellPlcCurrentStateNegativeB = "WRS EM4620 2" + " " + "1" + " " + "1";
                                    lock (Result2PLC)
                                    {
                                        Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                    }


                                    string singleClassNGNegativeBStr = null;
                                    foreach (string str in singleClassNGNegativeB.Info)
                                    {
                                        if (str != null)
                                        {
                                            singleClassNGNegativeBStr = str;
                                            break;
                                        }
                                    }
                                    if (singleClassNGNegativeBStr != null)
                                    {
                                        idOfNegativeB++;
                                        singleClassNGNegativeB.UpdateDone = false;
                                        singleClassNGNegativeBList.Add(singleClassNGNegativeB);
                                    }
                                    singleClassNGNegativeB = new SingleClassNG();
                                }
#endregion
            }
            else if(Global.stringType == "负间距")
            {
#region TR
                                try
                                {
#region
                                    //局部变量
                                    HObject ho_totalFilmShiftingRegion = null;
                                    HObject ho_totalFilmMissRegion = null;
                                    HObject ho_totalHeadAndTailFilmShiftingRegion = null;
                                    HObject ho_totalEdgeDefectRegion = null;
                                    HObject ho_totalSurfaceDefectRegion = null;
                                    HObject ho_totalBrokenLineRegion = null;

                                    HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegion);
                                    HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegion);

                                    ho_totalFilmShiftingRegion.Dispose();
                                    ho_totalFilmMissRegion.Dispose();
                                    ho_totalHeadAndTailFilmShiftingRegion.Dispose();
                                    ho_totalEdgeDefectRegion.Dispose();
                                    ho_totalSurfaceDefectRegion.Dispose();
                                    ho_totalBrokenLineRegion.Dispose();
                                    IsUsingDistanceDetectNegativeB = 0;
                                    HTuple hv_IsException = 0, hv_ExceptionInfo = "";
                                    HTuple hv_IsTopWaferExist = 0, hv_IsBottomWaferExist = 0;
                                    HTuple hv_IsWidthResolutionCalibrateFinish = 0, hv_WidthResolutionOut = 0;
                                    HTuple hv_IsHeightResolutionCalibrateFinish = 0, hv_HeightResolutionOut = 0;
                                    HTuple hv_IsFilmShiftingOfTopWafer = 0, hv_IsFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsFilmMissOfTopWafer = 0, hv_IsFilmMissOfBottomWafer = 0;
                                    HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer = 0, hv_IsHeadAndTailFilmShiftingOfBottomWafer = 0;
                                    HTuple hv_IsEdgeDefectOfTopWafer = 0, hv_IsEdgeDefectOfBottomWafer = 0;
                                    HTuple hv_IsDistanceNG = 0, hv_IsNextClass = 0, hv_IsSurfaceDefectOfTopWafer = 0;
                                    HTuple hv_IsSurfaceDefectOfBottomWafer = 0, hv_IsSurfaceScratchOfTopWafer = 0, hv_IsSurfaceScratchOfBottomWafer = 0;
                                    HTuple hv_IsBrokenLineOfTopWafer = 0, hv_IsBrokenLineOfBottomWafer = 0, hv_IsStartWeldingNGOfBottomWafer = 0;
                                    HTuple hv_SurfaceMeanGrayOfTopWafer = 0, hv_SurfaceMeanGrayOfBottomWafer = 0;
                                    HTuple hv_IsTopWaferNG, hv_IsBottomWaferNG, hv_IsHeadOfWaferNG, hv_IsTailOfWaferNG;
                                    HTuple filmDistanceArrayOfTopWafer = "", filmDistanceArrayOfBottomWafer = "";



                                    HFuncNegativeB.ProcessingTRImage(ho_MainImageNegativeB, ho_ModelContoursPositiveB, out ho_totalFilmShiftingRegion,
                                      out ho_totalFilmMissRegion, out ho_totalHeadAndTailFilmShiftingRegion,
                                      out ho_totalEdgeDefectRegion, out ho_totalSurfaceDefectRegion,
                                      out ho_totalBrokenLineRegion, ImageWidthNegativeB, ImageHeightNegativeB,
                                      WindowsHandleNegativeB, MainLineNum, IsFullWafer, SubMainLineNum, hv_IsBackDetect,
                                      IsUsingWidthResolutionCalibrateNegativeB, WidthResolutionNegativeB, WaferWidthNegativeB,
                                      IsUsingHeightResolutionCalibrateNegativeB, HeightResolutionNegativeB, ViceLineInterval,
                                      IsUsingFilmShiftingDetectNegativeB, TopShieldLengthOfTopRegionNegativeB, BottomShieldLengthOfTopRegionNegativeB,
                                      TopShieldLengthOfBottomRegionNegativeB, BottomShieldLengthOfBottomRegionNegativeB,
                                      LocationMainLineThreshNegativeB, FilmWidthThreshNegativeB, FilmWidthOffSetNegativeB,
                                      FirstDetectPosForTopRegionNegativeB, SecondDetectPosForTopRegionNegativeB,
                                      FirstDetectPosForBottomRegionNegativeB, SecondDetectPosForBottomRegionNegativeB,
                                      IsUsingFilmMissDetectNegativeB, WeldWidthThreshNegativeB,
                                      IsUsingHeadAndTailFilmShiftingDetectNegativeB, HeadAndTailFilmWidthThreshNegativeB,
                                      HeadAndTailFilmShieldLengthNegativeB, HeadAndTailFilmDetectRangeNegativeB,
                                      IsUsingWaferEdgeCalibrationNegativeB, LocationWaferEdgeThreshNegativeB, WaferEdgeCalibrationRegionDilationPixelNegativeB,
                                      IsUsingDistanceDetectNegativeB, MinimumDistanceThreshNegativeB, MaxDistanceThreshNegativeB,
                                      ClassDistanceThreshNegativeB, IsUsingEdgeDefectDetectNegativeB, EdgeBigDefectWidthThreshNegativeB,
                                      EdgeBigDefectHeightThreshNegativeB, EdgeSmallDefectDetectDepthNegativeB, EdgeSmallDefectGrayThreshNegativeB,
                                      EdgeSmallDefectWidthThreshNegativeB, EdgeSmallDefectHeightThreshNegativeB,
                                      EdgeSmallDefectGrayMeanThreshNegativeB, EdgeSmallDefectGrayDeviationThreshNegativeB,
                                      CornerDefectAreaRatioThreshNegativeB, IsUsingSurfaceDefectDetectNegativeB,
                                      SurfaceDefectGrayThreshNegativeB, SurfaceDefectWidthThreshNegativeB, SurfaceDefectHeightThreshNegativeB,
                                      SurfaceDefectDetectIndentDepthNegativeB, SurfaceDefectViceLineShieldWidthNegativeB,
                                      SurfaceDefectViceLineShieldLeftPosOffSetNegativeB, SurfaceDefectViceLineShieldRightPosOffSetNegativeB,
                                      SurfaceScratchGrayThreshNegativeB, SurfaceScratchWidthThreshNegativeB, SurfaceScratchHeightThreshNegativeB,
                                      IsUsingStartWeldingDetectNegativeB, StartWeldingDistanceMaxThreshNegativeB,
                                      StartWeldingDistanceMinThreshNegativeB, IsUsingBrokenLineDetectNegativeB,
                                      BrokenLineGrayThreshNegativeB, BrokenLineWidthThreshNegativeB, BrokenLineHeightThreshNegativeB,
                                      BrokenLineDetectIndentDepthNegativeB, IsUsingSurfaceColorDiffDetectNegativeB,
                                      IsEnglish, WeldShieldLengthNegativeB, ho_ModelIDPositiveB, MainLineDistance, out hv_IsException,
                                      out hv_ExceptionInfo, out hv_IsTopWaferExist, out hv_IsBottomWaferExist,
                                      out hv_IsWidthResolutionCalibrateFinish, out hv_WidthResolutionOut,
                                      out hv_IsHeightResolutionCalibrateFinish, out hv_HeightResolutionOut,
                                      out hv_IsFilmShiftingOfTopWafer, out hv_IsFilmShiftingOfBottomWafer,
                                      out hv_IsFilmMissOfTopWafer, out hv_IsFilmMissOfBottomWafer, out hv_IsHeadAndTailFilmShiftingOfTopWafer,
                                      out hv_IsHeadAndTailFilmShiftingOfBottomWafer, out hv_IsEdgeDefectOfTopWafer,
                                      out hv_IsEdgeDefectOfBottomWafer, out hv_IsDistanceNG, out hv_IsNextClass,
                                      out hv_IsSurfaceDefectOfTopWafer, out hv_IsSurfaceDefectOfBottomWafer,
                                      out hv_IsSurfaceScratchOfTopWafer, out hv_IsSurfaceScratchOfBottomWafer,
                                      out hv_IsBrokenLineOfTopWafer, out hv_IsBrokenLineOfBottomWafer,
                                      out hv_IsStartWeldingNGOfBottomWafer,
                                      out hv_SurfaceMeanGrayOfTopWafer, out hv_SurfaceMeanGrayOfBottomWafer, out hv_IsTopWaferNG, out hv_IsBottomWaferNG, out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out filmDistanceArrayOfTopWafer, out filmDistanceArrayOfBottomWafer);

                                    ////显示结果
                                    //this.DisplayResult(ho_totalFilmShiftingRegion, ho_totalFilmMissRegion, ho_totalHeadAndTailFilmShiftingRegion,
                                    //  ho_totalEdgeDefectRegion, ho_totalSurfaceDefectRegion, hv_IsException,
                                    //  WindowsHandleNegativeB, hv_ExceptionInfo, hv_IsTopWaferExist, hv_IsBottomWaferExist,
                                    //  hv_IsFilmShiftingOfTopWafer, hv_IsFilmShiftingOfBottomWafer, hv_IsFilmMissOfTopWafer,
                                    //  hv_IsFilmMissOfBottomWafer, hv_IsHeadAndTailFilmShiftingOfTopWafer, hv_IsHeadAndTailFilmShiftingOfBottomWafer,
                                    //  hv_IsEdgeDefectOfTopWafer, hv_IsEdgeDefectOfBottomWafer, hv_IsDistanceNG,
                                    //  hv_IsSurfaceDefectOfTopWafer, hv_IsSurfaceDefectOfBottomWafer);

                                    //只有在运行状态时才需要统计串信息
                                    if (bl_IsRunNegative)
                                    {
#region 串信息统计
                                        //平台空的情况
                                        if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //未检测到首串首片,平台空
                                            tellPlcCurrentStateNegativeB = ResultEmptyNegativeB;
                                        }
                                        //上半片无，下半片有，认为是首串首片
                                        else if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //初始化单串硅片编号
                                            WaferIDNegativeB = 1;
                                            //初始化单串Flag数组(所有元素置为false)
                                            this.ClearSingleClassFlagArrayNegativeB();
                                            //清空主界面当前串内片信息Flag
                                            this.ClearCurrentClusterStateNegativeB();

                                            //根据数据结果进行相应赋值
                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                            {
                                                SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                            {
                                                SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                            {
                                                SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                            {
                                                SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                            {
                                                SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                            {
                                                SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                            {
                                                SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                            }
                                            //将下半片平均灰度加入数组
                                            SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                            //给PLC发送结果 表面缺陷暂时不计入NG
                                            if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                //|| SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                //|| SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                //|| SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                            {
                                                tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                //整理Ng类型文档
                                                if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    if (Global.isEnglish == "0")
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                    }
                                                }
                                                else
                                                {
                                                    SingleClassFilmShiftingTypeNegativeB = "";
                                                }

                                                if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                    SingleClassFilmMissTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassFilmMissTypeNegativeB = "";
                                                }

                                                if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                    SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                }

                                                //if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                //{
                                                //    SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                //    // SingleClassDistanceNGTypeNegativeB = "";
                                                //}
                                                //else
                                                //{
                                                //    SingleClassDistanceNGTypeNegativeB = "";
                                                //}

                                                if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                    SingleClassEdgeDefectTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassEdgeDefectTypeNegativeB = "";
                                                }

                                                if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                    //SingleClassSurfaceDefectTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassSurfaceDefectTypeNegativeB = "";
                                                }
                                                if (SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    SingleClassSurfaceScratchTypeNegativeB = "背面表面划痕";
                                                    //SingleClassSurfaceDefectTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassSurfaceScratchTypeNegativeB = "";
                                                }
                                                if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                    SingleClassBrokenLineTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassBrokenLineTypeNegativeB = "";
                                                }

                                                if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                    SingleClassStargingWeldingNGTypeNegativeB = "";
                                                }
                                                else
                                                {
                                                    SingleClassStargingWeldingNGTypeNegativeB = "";
                                                }

                                                //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassSurfaceScratchTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB);

                                                singleClassNGNegativeB.Id = idOfNegativeB;
                                                singleClassNGNegativeB.Info[WaferIDNegativeB - 1] = SingleClassNGTypeNegativeB;
                                                saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                            }
                                            else
                                            {
                                                tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB);
                                                //保存OK图片
                                                if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                    lock (LockObjectOriImageQueueNegativeB)
                                                    {
                                                        OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                    }
                                                }
                                            }
                                        }
                                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //电池片序号自增
                                            if (WaferIDNegativeB <= WaferCountPerClass)
                                                ++WaferIDNegativeB;
                                            if (LastCellNegativeB)
                                            {
#region 抵达串间区域
                                                //判断当前串电池片数是否达到最低限度，即3片
                                                if (WaferIDNegativeB >= 3)
                                                {
                                                    //上串尾片数据处理
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                    SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);

                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                    //将上半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                    //给PLC发送结果 表面缺陷暂时不计入NG 
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        // || SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3]
                                                        || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        //|| SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //  || SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                            }


                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }

                                                        //if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3])
                                                        //{
                                                        //    SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                        //    //SingleClassDistanceNGTypeNegativeB = "";
                                                        //}
                                                        //else
                                                        //{
                                                        //    SingleClassDistanceNGTypeNegativeB = "";
                                                        //}

                                                        if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }

                                                        if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                            //SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        if (SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeB = "背面表面划痕";
                                                            //SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeB = "";
                                                        }
                                                        if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }

                                                        if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }

                                                        //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                        SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassSurfaceScratchTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                        this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB);

                                                        singleClassNGNegativeB.Id = idOfNegativeB;
                                                        singleClassNGNegativeB.Info[WaferIDNegativeB - 1] = SingleClassNGTypeNegativeB;
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                        tempSaveImageWaferIDNegativeB = WaferIDNegativeB + 1;

                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                        this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                            lock (LockObjectOriImageQueueNegativeB)
                                                            {
                                                                OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                            }
                                                        }
                                                    }

                                                    //上串检测数据统计汇总
                                                    TotalFilmShiftingCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeB);
                                                    TotalFilmMissCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeB);
                                                    TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB);
                                                    TotalDistanceNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeB);
                                                    TotalEdgeDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeB);
                                                    TotalSurfaceDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeB);
                                                    TotalBrokenLineCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeB);
                                                    TotalStartingWeldingNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeB);
                                                    TotalEmptyPlateCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeB);

                                                    ++TotalCountNegativeB;
                                                    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        // + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 0
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {

                                                        HistoryNGNegativeBList.Add(HistoryNGNegativeB);

                                                        HistoryNGNegativeB = new string[WaferCountPerClass + 3];
                                                        ++NGTotalCountNegativeB;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 1)
                                                        {
                                                            ++MajorFailureCountNegativeB;
                                                        }
                                                        if (TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingCountNegativeB;
                                                        }
                                                        //if (TotalFilmMissCountPerClassNegativeB > 0)
                                                        //{
                                                        //    ++TotalFilmMissCountNegativeB;
                                                        //}
                                                        if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                                        }
                                                        if (TotalDistanceNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalDistanceNGCountNegativeB;
                                                        }
                                                        if (TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEdgeDefectCountNegativeB;
                                                        }
                                                        //if (TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        //{
                                                        //    ++TotalSurfaceDefectCountNegativeB;
                                                        //}
                                                        if (TotalBrokenLineCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalBrokenLineCountNegativeB;
                                                        }
                                                        if (TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalStartingWeldingNGCountNegativeB;
                                                        }
                                                        if (TotalEmptyPlateCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEmptyPlateCountNegativeB;
                                                        }
                                                        if ((SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                        {
                                                            ++TotalSurfaceColorDiffCountNegativeB;
                                                        }
                                                    }
                                                }

                                                //清空主界面当前串内片信息Flag
                                                this.ClearCurrentClusterStateNegativeB(WaferIDNegativeB);
                                                //初始化单串硅片编号
                                                WaferIDNegativeB = 1;
                                                //初始化单串Flag数组(所有元素置为false)
                                                this.ClearSingleClassFlagArrayNegativeB();


                                                //根据数据结果进行相应赋值
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //将下半片平均灰度值加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);
#endregion
                                                LastCellNegativeB = false;
                                                hv_IsNextClass = 1;
                                            }
                                        }
                                        //上下半片都存在，认为不是首串首片，也不是末串末片
                                        else if (Convert.ToBoolean(hv_IsTopWaferExist.I) && Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                        {
                                            //电池片序号自增
                                            if (WaferIDNegativeB <= WaferCountPerClass)
                                                ++WaferIDNegativeB;
                                            if (Convert.ToBoolean(hv_IsNextClass.I))
                                            {
#region 抵达串间区域
                                                //判断当前串电池片数是否达到最低限度，即3片
                                                if (WaferIDNegativeB >= 3)
                                                {
                                                    //上串尾片数据处理
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                    SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);

                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                    //将上半片平均灰度值加入数组
                                                    SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);


                                                    //给PLC发送结果 表面缺陷暂时不计入NG 
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        //|| SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3]
                                                        || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        //|| SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        //  || SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                        || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                        //整理Ng类型文档
                                                        if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            if (Global.isEnglish == "0")
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                            }
                                                            else
                                                            {
                                                                SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                            }


                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmMissTypeNegativeB = "";
                                                        }

                                                        if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                        }

                                                        //if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 3])
                                                        //{
                                                        //    SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                        //    //SingleClassDistanceNGTypeNegativeB = "";
                                                        //}
                                                        //else
                                                        //{
                                                        //    SingleClassDistanceNGTypeNegativeB = "";
                                                        //}

                                                        if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassEdgeDefectTypeNegativeB = "";
                                                        }

                                                        if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                            //SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        if (SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeB = "背面表面划痕";
                                                            //SingleClassSurfaceDefectTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassSurfaceScratchTypeNegativeB = "";
                                                        }

                                                        if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassBrokenLineTypeNegativeB = "";
                                                        }

                                                        if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                        {
                                                            //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }
                                                        else
                                                        {
                                                            SingleClassStargingWeldingNGTypeNegativeB = "";
                                                        }

                                                        //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                        SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassSurfaceScratchTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                        this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB);

                                                        singleClassNGNegativeB.Id = idOfNegativeB;
                                                        singleClassNGNegativeB.Info[WaferIDNegativeB - 1] = SingleClassNGTypeNegativeB;
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                        tempSaveImageWaferIDNegativeB = WaferIDNegativeB + 1;

                                                    }
                                                    else
                                                    {
                                                        tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                        this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB);
                                                        //保存OK图片
                                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                        {
                                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                            lock (LockObjectOriImageQueueNegativeB)
                                                            {
                                                                OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                            }
                                                        }
                                                    }

                                                    //上串检测数据统计汇总
                                                    TotalFilmShiftingCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingFlagArrayNegativeB);
                                                    TotalFilmMissCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmMissFlagArrayNegativeB);
                                                    TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB);
                                                    TotalDistanceNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassDistanceNGFlagArrayNegativeB);
                                                    TotalEdgeDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEdgeDefectFlagArrayNegativeB);
                                                    TotalSurfaceDefectCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassSurfaceDefectFlagArrayNegativeB);
                                                    TotalBrokenLineCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassBrokenLineFlagArrayNegativeB);
                                                    TotalStartingWeldingNGCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassStargingWeldingNGFlagArrayNegativeB);
                                                    TotalEmptyPlateCountPerClassNegativeB = StaticTrueCountInFlagArray(SingleClassEmptyPlateFlagArrayNegativeB);

                                                    ++TotalCountNegativeB;
                                                    if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        //+ Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        // + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 0
                                                        || (SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                    {

                                                        HistoryNGNegativeBList.Add(HistoryNGNegativeB);

                                                        HistoryNGNegativeB = new string[WaferCountPerClass + 3];
                                                        ++NGTotalCountNegativeB;
                                                        if ((Convert.ToInt32(TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmMissCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalDistanceNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalBrokenLineCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        + Convert.ToInt32(TotalEmptyPlateCountPerClassNegativeB > 0)) > 1)
                                                        {
                                                            ++MajorFailureCountNegativeB;
                                                        }
                                                        if (TotalFilmShiftingCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingCountNegativeB;
                                                        }
                                                        //if (TotalFilmMissCountPerClassNegativeB > 0)
                                                        //{
                                                        //    ++TotalFilmMissCountNegativeB;
                                                        //}
                                                        if (TotalFilmShiftingOfHeadAndTailCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalFilmShiftingOfHeadAndTailCountNegativeB;
                                                        }
                                                        if (TotalDistanceNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalDistanceNGCountNegativeB;
                                                        }
                                                        if (TotalEdgeDefectCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEdgeDefectCountNegativeB;
                                                        }
                                                        //if (TotalSurfaceDefectCountPerClassNegativeB > 0)
                                                        //{
                                                        //    ++TotalSurfaceDefectCountNegativeB;
                                                        //}
                                                        if (TotalBrokenLineCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalBrokenLineCountNegativeB;
                                                        }
                                                        if (TotalStartingWeldingNGCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalStartingWeldingNGCountNegativeB;
                                                        }
                                                        if (TotalEmptyPlateCountPerClassNegativeB > 0)
                                                        {
                                                            ++TotalEmptyPlateCountNegativeB;
                                                        }
                                                        if ((SingleClassSurfaceMeanGrayArrayNegativeB.Max() - SingleClassSurfaceMeanGrayArrayNegativeB.Min()) >= SurfaceColorDiffGrayThreshNegativeB)
                                                        {
                                                            ++TotalSurfaceColorDiffCountNegativeB;
                                                        }
                                                    }
                                                }

                                                //清空主界面当前串内片信息Flag
                                                this.ClearCurrentClusterStateNegativeB(WaferIDNegativeB);
                                                //初始化单串硅片编号
                                                WaferIDNegativeB = 1;
                                                //初始化单串Flag数组(所有元素置为false)
                                                this.ClearSingleClassFlagArrayNegativeB();


                                                //根据数据结果进行相应赋值
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                {
                                                    SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }
                                                //将下半片平均灰度值加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);
#endregion
                                            }
                                            //未到串与串之间
                                            else
                                            {
                                                //未抵达串间区域
                                                //上半片膜偏处理
                                                SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I);
                                                //下半片膜偏处理
                                                if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //上半片膜失处理
                                                SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I);
                                                //下半片膜失处理
                                                if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                {
                                                    SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //上半片头尾膜偏处理
                                                SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I);
                                                //下半片头尾膜偏处理
                                                if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                {
                                                    SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //片间距处理
                                                //if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                                //{
                                                //    SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2] = true;
                                                //}
                                                //上半片边角缺陷处理
                                                SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I);
                                                //下半片边角缺陷处理
                                                if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                {
                                                    SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //上半片表面缺陷处理
                                                SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I);
                                                //下半片表面缺陷处理
                                                if (Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //上半片表面划痕处理
                                                SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I);
                                                //下半片表面划痕处理
                                                if (Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                                {
                                                    SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                //上半片断栅处理
                                                SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] = SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1] || Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I);
                                                //下半片断栅处理
                                                if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                {
                                                    SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB] = true;
                                                }
                                                ////下半片起焊点异常处理
                                                //if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                                //{
                                                //    SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                //}
                                                //将上下半片平均灰度值加入数组
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfTopWafer);
                                                SingleClassSurfaceMeanGrayArrayNegativeB.Add(hv_SurfaceMeanGrayOfBottomWafer);

                                                if (!Convert.ToBoolean(hv_IsTopWaferExist.I) && !Convert.ToBoolean(hv_IsBottomWaferExist.I))
                                                {
                                                    SingleClassEmptyPlateFlagArrayNegativeB[WaferIDNegativeB - 1] = true;
                                                }

                                                //给PLC发送结果 表面缺陷暂时不计入NG
                                                if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                    //|| SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                    //|| SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                    //|| SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    //|| SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 2]
                                                    || SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1]
                                                    || SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                {
                                                    tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                                    //整理Ng类型文档
                                                    if (SingleClassFilmShiftingFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        if (Global.isEnglish == "0")
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "背面膜偏|露白";
                                                        }
                                                        else
                                                        {
                                                            SingleClassFilmShiftingTypeNegativeB = "Film Offset | Ribbon Offset";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingTypeNegativeB = "";
                                                    }

                                                    if (SingleClassFilmMissFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        //SingleClassFilmMissTypeNegativeB = "背面膜短|膜失";
                                                        SingleClassFilmMissTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmMissTypeNegativeB = "";
                                                    }

                                                    if (SingleClassFilmShiftingOfHeadAndTailFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        //SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "背面头尾膜偏|露白";
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassFilmShiftingOfHeadAndTailTypeNegativeB = "";
                                                    }

                                                    if (SingleClassDistanceNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        SingleClassDistanceNGTypeNegativeB = "背面片间距异常";
                                                        // SingleClassDistanceNGTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassDistanceNGTypeNegativeB = "";
                                                    }

                                                    if (SingleClassEdgeDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        //SingleClassEdgeDefectTypeNegativeB = "背面边角破损";
                                                        SingleClassEdgeDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassEdgeDefectTypeNegativeB = "";
                                                    }

                                                    if (SingleClassSurfaceDefectFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeB = "背面表面缺陷";
                                                        //SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }
                                                    if (SingleClassSurfaceScratchFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        SingleClassSurfaceScratchTypeNegativeB = "背面表面划痕";
                                                        //SingleClassSurfaceDefectTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassSurfaceScratchTypeNegativeB = "";
                                                    }

                                                    if (SingleClassBrokenLineFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        //SingleClassBrokenLineTypeNegativeB = "背面断栅";
                                                        SingleClassBrokenLineTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassBrokenLineTypeNegativeB = "";
                                                    }

                                                    if (SingleClassStargingWeldingNGFlagArrayNegativeB[WaferIDNegativeB - 1])
                                                    {
                                                        //SingleClassStargingWeldingNGTypeNegativeB = "背面起焊点异常";
                                                        SingleClassStargingWeldingNGTypeNegativeB = "";
                                                    }
                                                    else
                                                    {
                                                        SingleClassStargingWeldingNGTypeNegativeB = "";
                                                    }

                                                    //SingleClassSurfaceMeanGrayNGTypeNegativeB = "";

                                                    SingleClassNGTypeNegativeB = SingleClassFilmShiftingTypeNegativeB + " " + SingleClassFilmMissTypeNegativeB + " " + SingleClassFilmShiftingOfHeadAndTailTypeNegativeB + " " + SingleClassDistanceNGTypeNegativeB + " " + SingleClassEdgeDefectTypeNegativeB + " " + SingleClassSurfaceDefectTypeNegativeB + " " + SingleClassSurfaceScratchTypeNegativeB + " " + SingleClassBrokenLineTypeNegativeB + " " + SingleClassStargingWeldingNGTypeNegativeB;

                                                    this.RefreshCurrentClusterStateNegativeB(false, WaferIDNegativeB);

                                                    singleClassNGNegativeB.Id = idOfNegativeB;
                                                    singleClassNGNegativeB.Info[WaferIDNegativeB - 1] = SingleClassNGTypeNegativeB;
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                }
                                                else
                                                {
                                                    tellPlcCurrentStateNegativeB = ResultOKNegativeB;
                                                    this.RefreshCurrentClusterStateNegativeB(true, WaferIDNegativeB);
                                                    //保存OK图片
                                                    if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                                    {
                                                        HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                                        HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                                        lock (LockObjectOriImageQueueNegativeB)
                                                        {
                                                            OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                                        }
                                                    }
                                                }
                                            }
                                        }
#endregion
                                    }

                                    //宽度分辨率校准赋值
                                    if (hv_IsWidthResolutionCalibrateFinish)
                                    {
                                        IsUsingWidthResolutionCalibrateNegativeB = 0;
                                        Global.isUsingWidthResolutionCalibrateNegativeB = "0";
                                        WidthResolutionNegativeB = hv_WidthResolutionOut;
                                        Global.widthResolutionNegativeB = WidthResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingWidthResolutionCalibrateNegativeB", Global.isUsingWidthResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "WidthResolutionNegativeB", Global.widthResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingWidthResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtWidthResolution_NegativeB.Text = WidthResolutionNegativeB.ToString();
                                    }

                                    //高度分辨率校准赋值
                                    if (hv_IsHeightResolutionCalibrateFinish)
                                    {
                                        IsUsingHeightResolutionCalibrateNegativeB = 0;
                                        Global.isUsingHeightResolutionCalibrateNegativeB = "0";
                                        HeightResolutionNegativeB = hv_HeightResolutionOut;
                                        Global.heightResolutionNegativeB = HeightResolutionNegativeB.ToString();
                                        Config.WriteIniData("Config", "IsUsingHeightResolutionCalibrateNegativeB", Global.isUsingHeightResolutionCalibrateNegativeB, defaultRecipePath);
                                        Config.WriteIniData("Config", "HeightResolutionNegativeB", Global.heightResolutionNegativeB, defaultRecipePath);
                                        mfParameterInterface.chkIsUsingHeightResolutionCalibrate_NegativeB.Checked = false;
                                        mfParameterInterface.txtHeightResolution_NegativeB.Text = HeightResolutionNegativeB.ToString();
                                    }

                                    lock (LockObjectNextClassNegativeB)
                                    {
                                        bool isTopNG = false;
                                        bool isBottomNG = false;

                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) ||
                                           Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I))
                                        {
                                            isTopNG = true;
                                        }

                                        if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I) ||
                                           Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                        {
                                            isBottomNG = true;
                                        }
                                        if ((isTopNG && isBottomNG) || (isTopNG && Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I)))
                                        {
                                            isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                        }

                                        if (WaferIDNegativeB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                        {
                                            if (isTopNG)
                                                isTopAndBottomNGNegativeB[WaferIDNegativeB] = true;
                                            string singleClassNGNegativeBStr = null;
                                            foreach (string str in singleClassNGNegativeB.Info)
                                            {
                                                if (str != null)
                                                {
                                                    singleClassNGNegativeBStr = str;
                                                    break;
                                                }
                                            }
                                            if (singleClassNGNegativeBStr != null)
                                                idOfNegativeB++;
                                            isNextClassFlagNegativeB = true;
                                            //tempSingleClassNGNegativeB = new SingleClassNG();
                                            //tempSingleClassNGNegativeB.Id = idOfNegativeB;
                                        }

                                        //保存全部图片
                                        if (Convert.ToBoolean(IsSaveAllImage_NegativeB.I))
                                        {
                                            HOperatorSet.GenEmptyObj(out tempOriImageNegativeB);
                                            HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempOriImageNegativeB);
                                            lock (LockObjectOriImageQueueNegativeB)
                                            {
                                                OriImageQueueNegativeB.Enqueue(tempOriImageNegativeB);
                                            }
                                        }

                                        //保存NG图片
                                        if (Convert.ToBoolean(IsSaveNGImage_NegativeB.I))
                                        {
                                            if (Convert.ToBoolean(hv_IsFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempFilmShiftingImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmShiftingImageNegativeB);
                                                lock (LockObjectFilmShiftingImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsFilmShiftingOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    FilmShiftingImageQueueNegativeB.Enqueue(tempFilmShiftingImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiFilmShiftingImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiFilmShiftingImageQueueNegativeB)
                                                    {
                                                        RoiFilmShiftingImageQueueNegativeB.Enqueue(tempRoiFilmShiftingImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I) || Convert.ToBoolean(hv_IsFilmMissOfTopWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempFilmMissImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempFilmMissImageNegativeB);
                                                lock (LockObjectFilmMissImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsFilmMissOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    FilmMissImageQueueNegativeB.Enqueue(tempFilmMissImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiFilmMissImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiFilmMissImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiFilmMissImageQueueNegativeB)
                                                    {
                                                        RoiFilmMissImageQueueNegativeB.Enqueue(tempRoiFilmMissImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfTopWafer.I) || Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempHeadAndTailFilmShiftingImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempHeadAndTailFilmShiftingImageNegativeB);
                                                lock (LockObjectHeadAndTailFilmShiftingImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsHeadAndTailFilmShiftingOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    HeadAndTailFilmShiftingImageQueueNegativeB.Enqueue(tempHeadAndTailFilmShiftingImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiHeadAndTailFilmShiftingImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiHeadAndTailFilmShiftingImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiHeadAndTailFilmShiftingImageQueueNegativeB)
                                                    {
                                                        RoiHeadAndTailFilmShiftingImageQueueNegativeB.Enqueue(tempRoiHeadAndTailFilmShiftingImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsEdgeDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempEdgeDefectImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempEdgeDefectImageNegativeB);
                                                lock (LockObjectEdgeDefectImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsEdgeDefectOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    EdgeDefectImageQueueNegativeB.Enqueue(tempEdgeDefectImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiEdgeDefectImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiEdgeDefectImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiEdgeDefectImageQueueNegativeB)
                                                    {
                                                        RoiEdgeDefectImageQueueNegativeB.Enqueue(tempRoiEdgeDefectImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsDistanceNG.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempDistanceNGImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempDistanceNGImageNegativeB);
                                                lock (LockObjectDistanceNGImageQueueNegativeB)
                                                {
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB;
                                                    DistanceNGImageQueueNegativeB.Enqueue(tempDistanceNGImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiDistanceNGImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiDistanceNGImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiDistanceNGImageQueueNegativeB)
                                                    {
                                                        RoiDistanceNGImageQueueNegativeB.Enqueue(tempRoiDistanceNGImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceDefectOfBottomWafer.I)
                                                || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempSurfaceDefectImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempSurfaceDefectImageNegativeB);
                                                lock (LockObjectSurfaceDefectImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsSurfaceDefectOfTopWafer.I) || Convert.ToBoolean(hv_IsSurfaceScratchOfTopWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    SurfaceDefectImageQueueNegativeB.Enqueue(tempSurfaceDefectImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiSurfaceDefectImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiSurfaceDefectImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiSurfaceDefectImageQueueNegativeB)
                                                    {
                                                        RoiSurfaceDefectImageQueueNegativeB.Enqueue(tempRoiSurfaceDefectImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsBrokenLineOfTopWafer.I) || Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempBrokenLineImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempBrokenLineImageNegativeB);
                                                lock (LockObjectBrokenLineImageQueueNegativeB)
                                                {
                                                    if (Convert.ToBoolean(hv_IsBrokenLineOfBottomWafer.I))
                                                        saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    BrokenLineImageQueueNegativeB.Enqueue(tempBrokenLineImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiBrokenLineImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiBrokenLineImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiBrokenLineImageQueueNegativeB)
                                                    {
                                                        RoiBrokenLineImageQueueNegativeB.Enqueue(tempRoiBrokenLineImageNegativeB);
                                                    }
                                                }
                                            }
                                            if (Convert.ToBoolean(hv_IsStartWeldingNGOfBottomWafer.I))
                                            {
                                                HOperatorSet.GenEmptyObj(out tempStartWeldingNGImageNegativeB);
                                                HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempStartWeldingNGImageNegativeB);
                                                lock (LockObjectStartWeldingNGImageQueueNegativeB)
                                                {
                                                    saveImageWaferIDNegativeB = WaferIDNegativeB + 1;
                                                    StartWeldingNGImageQueueNegativeB.Enqueue(tempStartWeldingNGImageNegativeB);
                                                }
                                                //保存ROI图片
                                                if (Convert.ToBoolean(IsSaveNGImageWithRoi_NegativeB.I))
                                                {
                                                    HOperatorSet.GenEmptyObj(out tempRoiStartWeldingNGImageNegativeB);
                                                    HOperatorSet.DumpWindowImage(out tempRoiStartWeldingNGImageNegativeB, WindowsHandleNegativeB);
                                                    lock (LockObjectRoiStartWeldingNGImageQueueNegativeB)
                                                    {
                                                        RoiStartWeldingNGImageQueueNegativeB.Enqueue(tempRoiStartWeldingNGImageNegativeB);
                                                    }
                                                }
                                            }
                                        }

                                        if (WaferIDNegativeB == 1 && Convert.ToBoolean(hv_IsNextClass.I))
                                        {
                                            string singleClassNGNegativeBStr = null;
                                            foreach (string str in singleClassNGNegativeB.Info)
                                            {
                                                if (str != null)
                                                {
                                                    singleClassNGNegativeBStr = str;
                                                    break;
                                                }
                                            }
                                            if (singleClassNGNegativeBStr != null)
                                            {
                                                singleClassNGNegativeB.UpdateDone = false;
                                                singleClassNGNegativeBList.Add(singleClassNGNegativeB);
                                                //if (isSingleClassOKNegativeB)
                                                //{
                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                //}

                                            }
                                            else
                                            {
                                                //if (!isSingleClassOKNegativeB)
                                                //{
                                                //    SingleClassNG tempSingleClassNGNegativeB = new SingleClassNG();
                                                //    singleClassNGNegativeBList.Add(tempSingleClassNGNegativeB);
                                                //}
                                            }
                                            singleClassNGNegativeB = new SingleClassNG();
                                        }
                                    }



                                    //容错报警串数功能启用
                                    //待定
                                    //ImageQueueNegativeB.Enqueue(ho_MainImageNegativeB);
                                    lock (Result2PLC)
                                    {
                                        Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                    }
#endregion
                                }
                                catch (Exception ex)
                                {
                    //MessageBox.Show(ex.Message);
                    Global.SaveLog("D:\\Program Files\\Config\\033\\背面异常B.txt",
         DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + ex.Message);
                    //保存异常图片
                    HOperatorSet.GenEmptyObj(out tempExceptionImageNegativeB);
                                    HOperatorSet.CopyImage(ho_MainImageNegativeB, out tempExceptionImageNegativeB);
                                    lock (LockObjectExceptionImageQueueNegativeB)
                                    {
                                        ExceptionImageQueueNegativeB.Enqueue(tempExceptionImageNegativeB);
                                    }
                                    //重置检测，防止出现索引报错
                                    //初始化单串硅片编号
                                    WaferIDNegativeB = 1;
                                    //初始化单串Flag数组(所有元素置为false)
                                    this.ClearSingleClassFlagArrayNegativeB();
                                    tellPlcCurrentStateNegativeB = ResultNGNegativeB;
                                    lock (Result2PLC)
                                    {
                                        Result2PLC.Enqueue(tellPlcCurrentStateNegativeB);
                                    }


                                    string singleClassNGNegativeBStr = null;
                                    foreach (string str in singleClassNGNegativeB.Info)
                                    {
                                        if (str != null)
                                        {
                                            singleClassNGNegativeBStr = str;
                                            break;
                                        }
                                    }
                                    if (singleClassNGNegativeBStr != null)
                                    {
                                        idOfNegativeB++;
                                        singleClassNGNegativeB.UpdateDone = false;
                                        singleClassNGNegativeBList.Add(singleClassNGNegativeB);
                                    }
                                    singleClassNGNegativeB = new SingleClassNG();
                                }
#endregion
            }

        }

        
        // A相机丢失回调
        private void OnConnectLossPositiveA(object sender, EventArgs e)
        {
            CameraPositiveA.ShutdownGrab();
            CameraPositiveA.Dispose();
            CameraPositiveA = null;
            Global.SaveLog("D:\\Program Files\\Config\\033\\A正面相机.txt",
            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机断开");
            ////断开后尝试重连
            ////根据相机IP获取相机
            //CameraPositiveA = Enumerator.GetDeviceByGigeIP("192.168.0.50");
            ////注册相机A丢失回调函数
            //CameraPositiveA.ConnectionLost += OnConnectLossPositiveA;
            //// 打开设备
            //if (!CameraPositiveA.Open())
            //{
            //    MessageBox.Show("连接A侧正面相机失败");
                
            //}
            //// 关闭Trigger
            ////CameraPositiveA.TriggerSet.Close();
            //// 设置图像格式
            //using (IEnumParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
            //{
            //    p.SetValue("BayerRG8");
            //}
            //using (IIntegraParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImageWidth])
            //{
            //    CameraImageMaxWidth = p.GetValue();
            //}
            //using (IIntegraParameter p = CameraPositiveA.ParameterCollection[ParametrizeNameSet.ImageHeight])
            //{
            //    CameraImageMaxHeight = p.GetValue();
            //}
            //// 注册码流回调事件
            //CameraPositiveA.StreamGrabber.ImageGrabbed += OnImageGrabbedPositiveA;
            ////CameraPositiveA.StreamGrabber.SetBufferCount(2);
            //// 开启码流
            //if (!CameraPositiveA.GrabUsingGrabLoopThread())
            //{
            //    MessageBox.Show(@"开启A侧正面相机码流失败");
                
            //}

        }

        // B相机丢失回调
        private void OnConnectLossPositiveB(object sender, EventArgs e)
        {
            CameraPositiveB.ShutdownGrab();
            CameraPositiveB.Dispose();
            CameraPositiveB = null;
            Global.SaveLog("D:\\Program Files\\Config\\033\\B正面相机.txt",
           DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + "相机断开");
            ////断开后尝试重连

            //// 获取搜索到的第二个设备
            //CameraPositiveB = Enumerator.GetDeviceByGigeIP("192.168.1.50");
            //// 注册相机B丢失回调函数
            //CameraPositiveB.ConnectionLost += OnConnectLossPositiveB;
            //// 打开设备
            //if (!CameraPositiveB.Open())
            //{
            //    MessageBox.Show("连接B侧正面相机失败");
                
            //}
            ////关闭Trigger
            ////   CameraPositiveB.TriggerSet.Close();
            //// 设置图像格式
            //using (IEnumParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImagePixelFormat])
            //{
            //    p.SetValue("BayerRG8");
            //}
            //using (IIntegraParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImageWidth])
            //{
            //    CameraImageMaxWidth = p.GetValue();
            //}
            //using (IIntegraParameter p = CameraPositiveB.ParameterCollection[ParametrizeNameSet.ImageHeight])
            //{
            //    CameraImageMaxHeight = p.GetValue();
            //}
            //// 注册码流回调事件
            //CameraPositiveB.StreamGrabber.ImageGrabbed += OnImageGrabbedPositiveB;
            ////CameraPositiveB.StreamGrabber.SetBufferCount(2);
            //// 开启码流
            //if (!CameraPositiveB.GrabUsingGrabLoopThread())
            //{
            //    MessageBox.Show("开启B侧正面相机码流失败");
                
            //}
        }

        // 码流数据回调A
        IGrabbedRawData framePositiveA = null;
        IGrabbedRawData framePositiveB = null;
        private void OnImageGrabbedPositiveA(Object sender, GrabbedEventArgs e)
        {
            // 获取帧数据信息
            var frame = e.GrabResult;
            framePositiveA = e.GrabResult;
            var nWidth = frame.Width;
            var nHeight = frame.Height;

            var nRGB = RGBFactory.EncodeLen((int)CameraImageMaxWidth, (int)CameraImageMaxHeight, true);
            if (ptrRGB_PositiveA == IntPtr.Zero)
            {
                ptrRGB_PositiveA = Marshal.AllocHGlobal(nRGB);
            }

            oParam_PositiveA.width = frame.Width;
            oParam_PositiveA.height = frame.Height;
            oParam_PositiveA.paddingX = 0;
            oParam_PositiveA.paddingY = 0;
            oParam_PositiveA.dataSize = frame.ImageSize;
            oParam_PositiveA.pixelForamt = (uint)frame.PixelFmt;
            //Global.SaveLog("D:\\Program Files\\Config\\033\\图像源数据格式A.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + (uint)frame.PixelFmt);
            int nDesDataSize = 0;
            //Global.SaveLog("D:\\Program Files\\Config\\033\\RawA.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(frame.Raw));
            

            //Global.SaveLog("D:\\Program Files\\Config\\033\\oParamA.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + oParam_PositiveA.width + "-- height:" + oParam_PositiveA.height + "-- dataSize:" + oParam_PositiveA.dataSize + "--pixelForamt:" + oParam_PositiveA.pixelForamt);

            //Global.SaveLog("D:\\Program Files\\Config\\033\\frameA.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + frame.Width + "-- height:" + frame.Height + "-- dataSize:" + frame.ImageSize + "--pixelForamt:" + (uint)frame.PixelFmt);


            IMGCNV_ConvertToBGR24_Ex(frame.Raw, ref oParam_PositiveA, ptrRGB_PositiveA, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            //Trace.WriteLine("Block id is :" + frame.BlockID);
            //mfPositiveInterface.textBox1.Text = Convert.ToString(frame.BlockID);
                //Global.SaveLog("D:\\Program Files\\Config\\033\\ptrRGB_PositiveA.txt",
                        //DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(ptrRGB_PositiveA));

            try
            {
                HObject tempImageFromCameraA;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraA);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraA, (HTuple)ptrRGB_PositiveA, "bgr", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                if (bl_IsRunPositive && IsUsingCamera_PositiveA)
                {
                    lock (LockObjectPositiveA)
                    {
                        ImageQueuePositiveA.Enqueue(tempImageFromCameraA);
                    }
                }
            }
            catch (Exception exception)
            {
                //return;
                Catcher.Show(exception);
            }
            finally
            {
                //Marshal.FreeHGlobal(ptrRGB_PositiveA);
            }
        }

        // 码流数据回调B
        private void OnImageGrabbedPositiveB(Object sender, GrabbedEventArgs e)
        {
            // 获取帧数据信息
            var frame = e.GrabResult;
            framePositiveB = e.GrabResult;
            var nWidth = frame.Width;
            var nHeight = frame.Height;

            var nRGB1 = RGBFactory.EncodeLen((int)CameraImageMaxWidth, (int)CameraImageMaxHeight, true);
            if (ptrRGB_PositiveB == IntPtr.Zero)
            {
                ptrRGB_PositiveB = Marshal.AllocHGlobal(nRGB1);
            }

            oParam_PositiveB.width = frame.Width;
            oParam_PositiveB.height = frame.Height;
            oParam_PositiveB.paddingX = 0;
            oParam_PositiveB.paddingY = 0;
            oParam_PositiveB.dataSize = frame.ImageSize;
            oParam_PositiveB.pixelForamt = (uint)frame.PixelFmt;
            //Global.SaveLog("D:\\Program Files\\Config\\033\\图像源数据格式B.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") +"--" +(uint)frame.PixelFmt);
            int nDesDataSize = 0;

            //Global.SaveLog("D:\\Program Files\\Config\\033\\RawB.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(frame.Raw));
            

            //Global.SaveLog("D:\\Program Files\\Config\\033\\oParamB.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + oParam_PositiveB.width + "-- height:" + oParam_PositiveB.height + "-- dataSize:" + oParam_PositiveB.dataSize + "--pixelForamt:" + oParam_PositiveB.pixelForamt);


            //Global.SaveLog("D:\\Program Files\\Config\\033\\frameB.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "-- width:" + frame.Width + "-- height:" + frame.Height + "-- dataSize:" + frame.ImageSize + "--pixelForamt:" + (uint)frame.PixelFmt);


            IMGCNV_ConvertToBGR24_Ex(frame.Raw, ref oParam_PositiveB, ptrRGB_PositiveB, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            //Trace.WriteLine("Block id is :" + frame.BlockID);

            //Global.SaveLog("D:\\Program Files\\Config\\033\\ptrRGB_PositiveB.txt",
            //            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + "--" + Marshal.ReadByte(ptrRGB_PositiveB));

            try
            {
                HObject tempImageFromCameraB;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraB);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraB, (HTuple)ptrRGB_PositiveB, "bgr", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                lock (LockObjectPositiveB)
                {
                    if (bl_IsRunPositive)
                        ImageQueuePositiveB.Enqueue(tempImageFromCameraB);
                }
            }
            catch (Exception exception)
            {
                Catcher.Show(exception);
            }
            finally
            {
                //Marshal.FreeHGlobal(ptrRGB_PositiveB);
            }
        }

        // A相机丢失回调
        private void OnConnectLossNegativeA(object sender, EventArgs e)
        {
            CameraNegativeA.ShutdownGrab();
            CameraNegativeA.Dispose();
            CameraNegativeA = null;
        }

        // B相机丢失回调
        private void OnConnectLossNegativeB(object sender, EventArgs e)
        {
            CameraNegativeB.ShutdownGrab();
            CameraNegativeB.Dispose();
            CameraNegativeB = null;
        }

        // 码流数据回调A
        private void OnImageGrabbedNegativeA(Object sender, GrabbedEventArgs e)
        {
            // 获取帧数据信息
            var frame = e.GrabResult;
            var nWidth = frame.Width;
            var nHeight = frame.Height;

            var nRGB = RGBFactory.EncodeLen((int)CameraImageMaxWidth, (int)CameraImageMaxHeight, true);
            if (ptrRGB_NegativeA == IntPtr.Zero)
            {
                ptrRGB_NegativeA = Marshal.AllocHGlobal(nRGB);
            }

            oParam_NegativeA.width = frame.Width;
            oParam_NegativeA.height = frame.Height;
            oParam_NegativeA.paddingX = 0;
            oParam_NegativeA.paddingY = 0;
            oParam_NegativeA.dataSize = frame.ImageSize;
            oParam_NegativeA.pixelForamt = (uint)frame.PixelFmt;

            int nDesDataSize = 0;
            IMGCNV_ConvertToBGR24_Ex(frame.Raw, ref oParam_NegativeA, ptrRGB_NegativeA, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            Trace.WriteLine("Block id is :" + frame.BlockID);
            try
            {
                HObject tempImageFromCameraA;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraA);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraA, (HTuple)ptrRGB_NegativeA, "bgr", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                if (bl_IsRunNegative && IsUsingCamera_NegativeA)
                {
                    lock (LockObjectNegativeA)
                    {
                        ImageQueueNegativeA.Enqueue(tempImageFromCameraA);
                    }
                }
            }
            catch (Exception exception)
            {
                //return;
                Catcher.Show(exception);
            }
            finally
            {
                //Marshal.FreeHGlobal(ptrRGB_NegativeA);
            }
        }

        // 码流数据回调B
        private void OnImageGrabbedNegativeB(Object sender, GrabbedEventArgs e)
        {
            // 获取帧数据信息
            var frame = e.GrabResult;
            var nWidth = frame.Width;
            var nHeight = frame.Height;

            var nRGB1 = RGBFactory.EncodeLen((int)CameraImageMaxWidth, (int)CameraImageMaxHeight, true);
            if (ptrRGB_NegativeB == IntPtr.Zero)
            {
                ptrRGB_NegativeB = Marshal.AllocHGlobal(nRGB1);
            }

            oParam_NegativeB.width = frame.Width;
            oParam_NegativeB.height = frame.Height;
            oParam_NegativeB.paddingX = 0;
            oParam_NegativeB.paddingY = 0;
            oParam_NegativeB.dataSize = frame.ImageSize;
            oParam_NegativeB.pixelForamt = (uint)frame.PixelFmt;

            int nDesDataSize = 0;
            IMGCNV_ConvertToBGR24_Ex(frame.Raw, ref oParam_NegativeB, ptrRGB_NegativeB, ref nDesDataSize, IMGCNV_EBayerDemosaic.IMGCNV_DEMOSAIC_BILINEAR);
            Trace.WriteLine("Block id is :" + frame.BlockID);
            try
            {
                HObject tempImageFromCameraB;
                HOperatorSet.GenEmptyObj(out tempImageFromCameraB);
                HOperatorSet.GenImageInterleaved(out tempImageFromCameraB, (HTuple)ptrRGB_NegativeB, "bgr", nWidth, nHeight, 0, "byte", nWidth, nHeight, 0, 0, 8, 0);
                lock (LockObjectNegativeB)
                {
                    if (bl_IsRunNegative)
                        ImageQueueNegativeB.Enqueue(tempImageFromCameraB);
                }
            }
            catch (Exception exception)
            {
                Catcher.Show(exception);
            }
            finally
            {
                //Marshal.FreeHGlobal(ptrRGB_NegativeB);
            }
        }

        public void runPositiveA()
        {
            lock (LockObjectPositiveA)
            {
                tempImagePositiveA = ImageQueuePositiveA.Dequeue();
                try
                {
                    if (ho_MainImagePositiveA != null)
                    {
                        ho_MainImagePositiveA.Dispose();
                    }
                    HOperatorSet.GenEmptyObj(out ho_MainImagePositiveA);
                    ho_MainImagePositiveA.Dispose();
                    HOperatorSet.CopyImage(tempImagePositiveA, out ho_MainImagePositiveA);
                    //HOperatorSet.DispObj(ho_MainImagePositiveA, WindowsHandlePositiveA);
                    ActionPositiveA();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
                finally
                {
                    tempImagePositiveA.Dispose();
                }
            }
        }
        public void runPositiveB()
        {
            lock (LockObjectPositiveB)
            {
                tempImagePositiveB = ImageQueuePositiveB.Dequeue();
                try
                {
                    if (ho_MainImagePositiveB != null)
                    {
                        ho_MainImagePositiveB.Dispose();
                    }
                    HOperatorSet.GenEmptyObj(out ho_MainImagePositiveB);
                    ho_MainImagePositiveB.Dispose();
                    HOperatorSet.CopyImage(tempImagePositiveB, out ho_MainImagePositiveB);
                    //HOperatorSet.DispObj(ho_MainImagePositiveB, WindowsHandlePositiveB);
                    ActionPositiveB();
                }
                catch (Exception)
                {
                    return;
                }
                finally
                {
                    tempImagePositiveB.Dispose();
                }
            }
        }

        public void runNegativeA()
        {
            lock (LockObjectNegativeA)
            {
                tempImageNegativeA = ImageQueueNegativeA.Dequeue();
                try
                {
                    if (ho_MainImageNegativeA != null)
                    {
                        ho_MainImageNegativeA.Dispose();
                    }
                    HOperatorSet.GenEmptyObj(out ho_MainImageNegativeA);
                    ho_MainImageNegativeA.Dispose();
                    HOperatorSet.CopyImage(tempImageNegativeA, out ho_MainImageNegativeA);
                    //HOperatorSet.DispObj(ho_MainImageNegativeA, WindowsHandleNegativeA);
                    ActionNegativeA();
                }
                catch (Exception)
                {
                    return;
                }
                finally
                {
                    tempImageNegativeA.Dispose();
                }
            }
        }
        public void runNegativeB()
        {
            lock (LockObjectNegativeB)
            {
                tempImageNegativeB = ImageQueueNegativeB.Dequeue();
                try
                {
                    if (ho_MainImageNegativeB != null)
                    {
                        ho_MainImageNegativeB.Dispose();
                    }
                    HOperatorSet.GenEmptyObj(out ho_MainImageNegativeB);
                    ho_MainImageNegativeB.Dispose();
                    HOperatorSet.CopyImage(tempImageNegativeB, out ho_MainImageNegativeB);
                    //HOperatorSet.DispObj(ho_MainImageNegativeB, WindowsHandleNegativeB);
                    ActionNegativeB();
                }
                catch (Exception)
                {
                    return;
                }
                finally
                {
                    tempImageNegativeB.Dispose();
                }
            }
        }

        private void btnMainFormExit_Click(object sender, EventArgs e)
        {
            MessageBoxButtons messButton = MessageBoxButtons.OKCancel;
            DialogResult dr = MessageBox.Show("确定要退出程序吗?", "确认", messButton);

            if (dr == DialogResult.OK)//如果点击“确定”按钮
            {
                Config.WriteIniData("Config", "TotalCount_PositiveA", mfNGStatisticsInterface.lblTotalCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "NGTotalCount_PositiveA", mfNGStatisticsInterface.lblNGTotalCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "MajorFailureCount_PositiveA", mfNGStatisticsInterface.lblMajorFailureCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingCount_PositiveA", mfNGStatisticsInterface.lblFilmShiftingCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmMissCount_PositiveA", mfNGStatisticsInterface.lblFilmMissCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingHeadAndTailCountPositiveA", mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "DistanceNGCount_PositiveA", mfNGStatisticsInterface.lblDistanceNGCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "EdgeDefectCount_PositiveA", mfNGStatisticsInterface.lblEdgeDefectCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceDefectCount_PositiveA", mfNGStatisticsInterface.lblSurfaceDefectCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "BrokenLineCount_PositiveA", mfNGStatisticsInterface.lblBrokenLineCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "StartWeldingNGCount_PositiveA", mfNGStatisticsInterface.lblStartWeldingNGCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceColorDiffCount_PositiveA", mfNGStatisticsInterface.lblSurfaceColorDiffCountPositiveA.Text, defaultRecipePath);

                Config.WriteIniData("Config", "TotalCount_PositiveB", mfNGStatisticsInterface.lblTotalCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "NGTotalCount_PositiveB", mfNGStatisticsInterface.lblNGTotalCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "MajorFailureCount_PositiveB", mfNGStatisticsInterface.lblMajorFailureCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingCount_PositiveB", mfNGStatisticsInterface.lblFilmShiftingCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmMissCount_PositiveB", mfNGStatisticsInterface.lblFilmMissCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingHeadAndTailCountPositiveB", mfNGStatisticsInterface.lblFilmShiftingHeadAndTailCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "DistanceNGCount_PositiveB", mfNGStatisticsInterface.lblDistanceNGCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "EdgeDefectCount_PositiveB", mfNGStatisticsInterface.lblEdgeDefectCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceDefectCount_PositiveB", mfNGStatisticsInterface.lblSurfaceDefectCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "BrokenLineCount_PositiveB", mfNGStatisticsInterface.lblBrokenLineCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "StartWeldingNGCount_PositiveB", mfNGStatisticsInterface.lblStartWeldingNGCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceColorDiffCount_PositiveB", mfNGStatisticsInterface.lblSurfaceColorDiffCountPositiveB.Text, defaultRecipePath);

                Config.WriteIniData("Config", "TotalCount_NegativeA", mfNGStatisticsInterface.lblTotalCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "NGTotalCount_NegativeA", mfNGStatisticsInterface.lblNGTotalCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "MajorFailureCount_NegativeA", mfNGStatisticsInterface.lblMajorFailureCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingCount_NegativeA", mfNGStatisticsInterface.lblFilmShiftingCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmMissCount_NegativeA", mfNGStatisticsInterface.lblFilmMissCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingHeadAndTailCountNegativeA", mfNGStatisticsInterface.lblCellMissingCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "DistanceNGCount_NegativeA", mfNGStatisticsInterface.lblAlgorithmExceptionCountPositiveA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "EdgeDefectCount_NegativeA", mfNGStatisticsInterface.lblEdgeDefectCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceDefectCount_NegativeA", mfNGStatisticsInterface.lblSurfaceDefectCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "BrokenLineCount_NegativeA", mfNGStatisticsInterface.lblBrokenLineCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "StartWeldingNGCount_NegativeA", mfNGStatisticsInterface.lblStartWeldingNGCountNegativeA.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceColorDiffCount_NegativeA", mfNGStatisticsInterface.lblSurfaceColorDiffCountNegativeA.Text, defaultRecipePath);

                Config.WriteIniData("Config", "TotalCount_NegativeB", mfNGStatisticsInterface.lblTotalCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "NGTotalCount_NegativeB", mfNGStatisticsInterface.lblNGTotalCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "MajorFailureCount_NegativeB", mfNGStatisticsInterface.lblMajorFailureCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingCount_NegativeB", mfNGStatisticsInterface.lblFilmShiftingCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmMissCount_NegativeB", mfNGStatisticsInterface.lblFilmMissCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "FilmShiftingHeadAndTailCountNegativeB", mfNGStatisticsInterface.lblCellMissingCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "DistanceNGCount_NegativeB", mfNGStatisticsInterface.lblAlgorithmExceptionCountPositiveB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "EdgeDefectCount_NegativeB", mfNGStatisticsInterface.lblEdgeDefectCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceDefectCount_NegativeB", mfNGStatisticsInterface.lblSurfaceDefectCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "BrokenLineCount_NegativeB", mfNGStatisticsInterface.lblBrokenLineCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "StartWeldingNGCount_NegativeB", mfNGStatisticsInterface.lblStartWeldingNGCountNegativeB.Text, defaultRecipePath);
                Config.WriteIniData("Config", "SurfaceColorDiffCount_NegativeB", mfNGStatisticsInterface.lblSurfaceColorDiffCountNegativeB.Text, defaultRecipePath);
                //Global.SaveLog("D:\\Program Files\\Config\\033\\拍照次数A.txt",
                // DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + mfPositiveInterface.textBox1.Text);

#if Dalsa
                if (m_AcquisitionPositiveA != null)
                {


                    DestroyObjectsPositiveA();
                    DisposeObjectsPositiveA();


                }
                if (m_AcquisitionPositiveB != null)
                {


                    DestroyObjectsPositiveB();
                    DisposeObjectsPositiveB();


                }
                
#endif
#if Dahua
                if (CameraPositiveA != null)
                {
                    CameraPositiveA.ShutdownGrab();
                    CameraPositiveA.Close();
                    CameraPositiveA.Dispose();
                    CameraPositiveA = null;
                }
                if (CameraPositiveB != null)
                {
                    CameraPositiveB.ShutdownGrab();
                    CameraPositiveB.Close();
                    CameraPositiveB.Dispose();
                    CameraPositiveB = null;
                }

                if (CameraNegativeA != null)
                {
                    CameraNegativeA.ShutdownGrab();
                    CameraNegativeA.Close();
                    CameraNegativeA.Dispose();
                    CameraNegativeA = null;
                }
                if (CameraNegativeB != null)
                {
                    CameraNegativeB.ShutdownGrab();
                    CameraNegativeB.Close();
                    CameraNegativeB.Dispose();
                    CameraNegativeB = null;
                }
#endif
#if HikVision
                if (devicePositiveA != null)
                {
                // ch:停止采集 | en:Stop Grabbing
                devicePositiveA.MV_CC_StopGrabbing_NET();



                // ch:关闭设备 | en:Close Device
                devicePositiveA.MV_CC_CloseDevice_NET();
                devicePositiveA.MV_CC_DestroyDevice_NET();
                }
                if (devicePositiveB != null)
                {
                    // ch:停止采集 | en:Stop Grabbing
                    devicePositiveB.MV_CC_StopGrabbing_NET();



                    // ch:关闭设备 | en:Close Device
                    devicePositiveB.MV_CC_CloseDevice_NET();
                    devicePositiveB.MV_CC_DestroyDevice_NET();
                }


#endif
                Global.SaveLog("D:\\Program Files\\Config\\033\\参数修改日志.txt",
                       DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " 程序退出");
                Application.Exit();
                this.Close();
            }
        }

        public void DeleteMethod(string deadTime)
        {
            try
            {
                string srcpath = "D:/" + deadTime;
                if (Directory.Exists(srcpath))
                {
                    FileAttributes attr = File.GetAttributes(srcpath);
                    if (attr == FileAttributes.Directory)
                    {
                        Directory.Delete(srcpath, true);
                    }
                    else
                    {
                        File.Delete(srcpath);
                    }
                }
            }
            catch
            {

            }
            
        }


        private void StartConnectPositiveA()
        {
            _tcpClientPositiveA.ClientName = "033PositiveA";
            _tcpClientPositiveA.EndDelimiter = "";
            _tcpClientPositiveA.OnError = OnClientErrorPositiveA;
            _tcpClientPositiveA.OnConnecting = OnClientConnectingPositiveA;
            _tcpClientPositiveA.OnConnected = OnClientConnectedPositiveA;
            _tcpClientPositiveA.OnDisconnected = OnClientDisconnectedPositiveA;
            _tcpClientPositiveA.OnData = OnClientDataPositiveA;
            _tcpClientPositiveA.ServerIP = plcIPAddress;
            _tcpClientPositiveA.ServerPort = plcPortPositiveA;
            _tcpClientPositiveA.Connected = true;
            
        }

        //客户端错误代码
        public void OnClientErrorPositiveA(int nErrorCode)
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端连接
        public void OnClientConnectingPositiveA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端已连接响应
        public void OnClientConnectedPositiveA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagPositiveA = true;
            ConnectNumPositiveA = 0;
            Invoke(new UpdateForm_dl(() =>
            {
                if (Global.isEnglish == "0")
                {
                    mfPositiveInterface.lblTcpConnectedStateA.Text = "A通信成功";
                }
                else
                {
                    mfPositiveInterface.lblTcpConnectedStateA.Text = "A-Comm Successful";
                }

            }));
        }
        //客户端断开连接响应
        public void OnClientDisconnectedPositiveA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagPositiveA = false;
            Invoke(new UpdateForm_dl(() =>
            {
                mfPositiveInterface.lblTcpConnectedStateA.Text = "A通信失败";
            }));
        }
        //客户端接收数据响应
        public void OnClientDataPositiveA(string msgStrA)
        {
            ConnectNumPositiveA = 0;
            Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Received Message:  " + msgStrA);
            if (ResultPositiveA.Count > 0)
            {
                lock (ResultPositiveA)
                {
                    
                    if (msgStrA == "1")
                    {
                        string d = ResultPositiveA.Dequeue();
                        _tcpClientPositiveA.SendData(d);
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }
                    
                }
            }
            else
            {
                if (msgStrA == "1")
                {
                    _tcpClientPositiveA.SendData("9");
                    Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");

                    DateTime nowTime = DateTime.Now;
                    FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt");

                    if (fileInfo.Length / 1024 > 10240)
                    {
                        File.Delete("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt");
                    }
                }
                
            }
#region 不良信息
            if (msgStrA.Length >= 2)
            {
                _tcpClientPositiveA.SendData("9");
                Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveA.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");
                RefreshNGIfo(singleClassNGPositiveAList, singleClassNGNegativeAList, "A");
                
            }
            
#endregion
        }
        //更新NG串信息(旧方案)
        //private void RefreshNGIfo(int i, List<String[]> NGIfoPositive, List<String[]> NGIfoNegative, string Side)
        //{
        //    if (NGIfoPositive.Count != 0 || NGIfoNegative.Count != 0)
        //    {

        //    }
        //    string[] tempNGIfoPositive = new string[12];
        //    string[] tempNGIfoNegative = new string[12];
        //    if (NGIfoPositive.Count == 0)
        //    {
        //        tempNGIfoPositive = new string[12];
        //    }
        //    else
        //    {
        //        tempNGIfoPositive = NGIfoPositive[0];
        //    }

        //    if (NGIfoNegative.Count == 0)
        //    {
        //        tempNGIfoNegative = new string[12];
        //    }
        //    else
        //    {
        //        tempNGIfoNegative = NGIfoNegative[0];
        //    }

        //    #region 第一串信息
        //    if (mfStatisticsInterface.lblFirstCluster1.Text == "***")
        //    {
        //        List<Control> lblFirstClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblFirstCluster", lblFirstClusterList);

        //        mfStatisticsInterface.lblFirstSide.Text = Side;
        //        foreach (Control lblFirstCluster in lblFirstClusterList)
        //        {
        //            lblFirstCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblFirstClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblFirstClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblFirstClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第二串信息
        //    else if (mfStatisticsInterface.lblSecondCluster1.Text == "***")
        //    {
        //        List<Control> lblSecondClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblSecondCluster", lblSecondClusterList);

        //        mfStatisticsInterface.lblSecondSide.Text = Side;
        //        foreach (Control lblSecondCluster in lblSecondClusterList)
        //        {
        //            lblSecondCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblSecondClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblSecondClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblSecondClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第三串信息
        //    else if (mfStatisticsInterface.lblThirdCluster1.Text == "***")
        //    {
        //        List<Control> lblThirdClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblThirdCluster", lblThirdClusterList);

        //        mfStatisticsInterface.lblThirdSide.Text = Side;
        //        foreach (Control lblThirdCluster in lblThirdClusterList)
        //        {
        //            lblThirdCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblThirdClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblThirdClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblThirdClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第四串信息
        //    else if (mfStatisticsInterface.lblFourthCluster1.Text == "***")
        //    {
        //        List<Control> lblFourthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblFourthCluster", lblFourthClusterList);

        //        mfStatisticsInterface.lblFourthSide.Text = Side;
        //        foreach (Control lblFourthCluster in lblFourthClusterList)
        //        {
        //            lblFourthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblFourthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblFourthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblFourthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第五串信息
        //    else if (mfStatisticsInterface.lblFifthCluster1.Text == "***")
        //    {
        //        List<Control> lblFifthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblFifthCluster", lblFifthClusterList);

        //        mfStatisticsInterface.lblFifthSide.Text = Side;
        //        foreach (Control lblFifthCluster in lblFifthClusterList)
        //        {
        //            lblFifthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblFifthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblFifthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblFifthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第六串信息
        //    else if (mfStatisticsInterface.lblSixthCluster1.Text == "***")
        //    {
        //        List<Control> lblSixthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblSixthCluster", lblSixthClusterList);

        //        mfStatisticsInterface.lblSixthSide.Text = Side;
        //        foreach (Control lblSixthCluster in lblSixthClusterList)
        //        {
        //            lblSixthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblSixthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblSixthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblSixthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第七串信息
        //    else if (mfStatisticsInterface.lblSeventhCluster1.Text == "***")
        //    {
        //        List<Control> lblSeventhClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblSeventhCluster", lblSeventhClusterList);

        //        mfStatisticsInterface.lblSeventhSide.Text = Side;
        //        foreach (Control lblSeventhCluster in lblSeventhClusterList)
        //        {
        //            lblSeventhCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblSeventhClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblSeventhClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblSeventhClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第八串信息
        //    else if (mfStatisticsInterface.lblEighthCluster1.Text == "***")
        //    {
        //        List<Control> lblEighthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblEighthCluster", lblEighthClusterList);

        //        mfStatisticsInterface.lblEighthSide.Text = Side;
        //        foreach (Control lblEighthCluster in lblEighthClusterList)
        //        {
        //            lblEighthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblEighthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblEighthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblEighthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第九串信息
        //    else if (mfStatisticsInterface.lblNinthCluster1.Text == "***")
        //    {
        //        List<Control> lblNinthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblNinthCluster", lblNinthClusterList);

        //        mfStatisticsInterface.lblNinthSide.Text = Side;
        //        foreach (Control lblNinthCluster in lblNinthClusterList)
        //        {
        //            lblNinthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblNinthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblNinthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblNinthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第十串信息
        //    else if (mfStatisticsInterface.lblTenthCluster1.Text == "***")
        //    {
        //        List<Control> lblTenthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblTenthCluster", lblTenthClusterList);

        //        mfStatisticsInterface.lblTenthSide.Text = Side;
        //        foreach (Control lblTenthCluster in lblTenthClusterList)
        //        {
        //            lblTenthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblTenthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblTenthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblTenthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第十一串信息
        //    else if (mfStatisticsInterface.lblEleventhCluster1.Text == "***")
        //    {
        //        List<Control> lblEleventhClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblEleventhCluster", lblEleventhClusterList);

        //        mfStatisticsInterface.lblEleventhSide.Text = Side;
        //        foreach (Control lblEleventhCluster in lblEleventhClusterList)
        //        {
        //            lblEleventhCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblEleventhClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblEleventhClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblEleventhClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    #region 第十二串信息
        //    else if (mfStatisticsInterface.lblTwelfthCluster1.Text == "***")
        //    {
        //        List<Control> lblTwelfthClusterList = new List<Control>();
        //        getControlsByKey(this.pnlMainFormContentView, "lblTwelfthCluster", lblTwelfthClusterList);

        //        mfStatisticsInterface.lblTwelfthSide.Text = Side;
        //        foreach (Control lblTwelfthCluster in lblTwelfthClusterList)
        //        {
        //            lblTwelfthCluster.BackColor = System.Drawing.Color.Lime;
        //        }
        //        for (int j = 0; j < tempNGIfoPositive.Length; j++)
        //        {
        //            if (tempNGIfoPositive[j] == null & tempNGIfoNegative[j] == null)
        //                lblTwelfthClusterList[j + 1].Text = "OK";
        //            else
        //            {
        //                lblTwelfthClusterList[j].Text = tempNGIfoPositive[j] + tempNGIfoNegative[j];
        //                lblTwelfthClusterList[j].BackColor = System.Drawing.Color.Red;
        //            }
        //        }
        //    }
        //    #endregion
        //    NGIfoPositive.RemoveAt(0);
        //}
        //更新NG串信息(新方案)
        private void RefreshNGIfo(List<SingleClassNG> singleClassNGPositiveList, List<SingleClassNG> singleClassNGNegativeList, string line)
        {
            if ((singleClassNGPositiveList.Count > 0 && singleClassNGPositiveList[singleClassNGPositiveList.Count - 1].UpdateDone == false) || (singleClassNGNegativeList.Count > 0 && singleClassNGPositiveList[singleClassNGNegativeList.Count - 1].UpdateDone == false))
            {

                DataGridView table = mfNGInfoInterface.informationANgtable;
                DataGridViewRow row = new DataGridViewRow();
                DataGridViewTextBoxCell textboxcellDate = new DataGridViewTextBoxCell();
                textboxcellDate.Value = DateTime.Now.ToString("HH:mm:ss");
                textboxcellDate.Style.BackColor = Color.Green;
                row.Cells.Add(textboxcellDate);
                for (int i = 1; i < table.ColumnCount; i++)
                {
                    DataGridViewTextBoxCell textboxcell = new DataGridViewTextBoxCell();
                    row.Cells.Add(textboxcell);
                }
                row.Cells[table.ColumnCount - 1].Value = line;



                if (singleClassNGPositiveList.Count > 0)
                {
                    int tempInfoIndexPositive = singleClassNGPositiveList.Count - 1;
                    if (singleClassNGPositiveList[singleClassNGPositiveList.Count - 1].UpdateDone == false)
                    {
                        if (singleClassNGPositiveList.Count - 2 >= 0)
                        {
                            if (singleClassNGPositiveList[singleClassNGPositiveList.Count - 2].UpdateDone == false)
                            {
                                tempInfoIndexPositive = singleClassNGPositiveList.Count - 2;
                            }
                            else
                            {
                                tempInfoIndexPositive = singleClassNGPositiveList.Count - 1;
                            }
                        }

                        row.Cells[1].Value = singleClassNGPositiveList[tempInfoIndexPositive].Id;
                        singleClassNGPositiveList[tempInfoIndexPositive].UpdateDone = true;
                        for (int i = 0; i < WaferCountPerClass; i++)
                        {
                            if (singleClassNGPositiveList[tempInfoIndexPositive].Info[i] == null)
                            {
                                row.Cells[3 + i * 2].Value = "OK";
                                row.Cells[3 + i * 2].Style.BackColor = Color.Green;
                            }
                            else
                            {
                                row.Cells[3 + i * 2].Value = singleClassNGPositiveList[tempInfoIndexPositive].Info[i];
                                row.Cells[3 + i * 2].Style.BackColor = Color.Red;
                                row.Cells[3 + i * 2].Style.ForeColor = Color.White;
                            }
                            
                            
                        }
                        if (Global.isMESFun == "1")
                        {
                            SendJson2Mes(singleClassNGPositiveList[tempInfoIndexPositive], line);
                        }
                        //historySingleClassNGPositiveAList.Add(singleClassNGPositiveList[singleClassNGPositiveList.Count - 1]);



                    }
                }
                else
                {
                    row.Cells[1].Value = 0;
                    for (int i = 0; i < WaferCountPerClass; i++)
                    {
                        row.Cells[3 + i * 2].Value = "OK";
                        row.Cells[3 + i * 2].Style.BackColor = Color.Green;
                    }
                }

                if (singleClassNGNegativeList.Count > 0)
                {
                    int tempInfoIndexNegative = singleClassNGNegativeList.Count - 1;
                    if (singleClassNGNegativeList[singleClassNGNegativeList.Count - 1].UpdateDone == false)
                    {
                        if (singleClassNGNegativeList.Count - 2 >= 0)
                        {
                            if (singleClassNGPositiveList[singleClassNGNegativeList.Count - 2].UpdateDone == false)
                            {
                                tempInfoIndexNegative = singleClassNGNegativeList.Count - 2;
                            }
                            else
                            {
                                tempInfoIndexNegative = singleClassNGNegativeList.Count - 1;
                            }
                        }

                        row.Cells[2].Value = singleClassNGNegativeList[tempInfoIndexNegative].Id;
                        singleClassNGNegativeList[tempInfoIndexNegative].UpdateDone = true;
                        for (int i = 0; i < WaferCountPerClass; i++)
                        {
                            if (singleClassNGNegativeList[tempInfoIndexNegative].Info[i] == null)
                            {
                                row.Cells[4 + i * 2].Value = "OK";
                                row.Cells[4 + i * 2].Style.BackColor = Color.Green;
                            }
                            else
                            {
                                row.Cells[4 + i * 2].Value = singleClassNGNegativeList[tempInfoIndexNegative].Info[i];
                                row.Cells[4 + i * 2].Style.BackColor = Color.OrangeRed;
                                row.Cells[4 + i * 2].Style.ForeColor = Color.White;
                            }
                        }
                        //historySingleClassNGNegativeBList.Add(singleClassNGNegativeList[singleClassNGNegativeList.Count - 1]);


                    }
                }
                else
                {
                    row.Cells[2].Value = 0;
                    for (int i = 0; i < WaferCountPerClass; i++)
                    {
                        row.Cells[4 + i * 2].Value = "OK";
                        row.Cells[4 + i * 2].Style.BackColor = Color.Green;
                    }
                }
                table.Rows.Insert(0, row);
            }
        }
        private void NGInfo2Code(SingleClassNG OriNGList, List<string> Ap_result, List<CellInfo> NGInfoCode,string line)
        {

            //string stringInfo2PLC = "";
            //if (line == "A")
            //{
            //    stringInfo2PLC = "WRS ZF35740 20";
            //}
            //else
            //{
            //    stringInfo2PLC = "WRS ZF30900 20";
            //}
            for (int i = 0; i < WaferCountPerClass; i++)
                {
                    
                    if (OriNGList.Info[i] == null)
                    {
                        Ap_result.Add("OK");
                        //stringInfo2PLC = stringInfo2PLC + " " + "1";
                    }
                    else
                    {
                        Ap_result.Add("NG");
                        CellInfo cellInfo = new CellInfo();
                        cellInfo.Cell_index = "cell_" + Convert.ToString(i + 1);
                        List<string> ngInfo = new List<string>();
                        if (OriNGList.Info[i].Contains("膜偏|露白"))
                        {
                            ngInfo.Add("AP01");
                        }
                        if (OriNGList.Info[i].Contains("片间距"))
                        {
                            ngInfo.Add("AP03");
                        }
                        if (OriNGList.Info[i].Contains("边角"))
                        {
                            ngInfo.Add("AP04");
                        }
                        if (OriNGList.Info[i].Contains("起焊点"))
                        {
                            ngInfo.Add("AP05");
                        }
                        if (OriNGList.Info[i].Contains("划痕"))
                        {
                            ngInfo.Add("AP06");
                        }
                        if (OriNGList.Info[i].Contains("表面缺陷"))
                        {
                            ngInfo.Add("AP07");
                        }
                        if (OriNGList.Info[i].Contains("色差"))
                        {
                            ngInfo.Add("AP08");
                        }
                        if (OriNGList.Info[i].Contains("断栅"))
                        {
                            ngInfo.Add("AP09");
                        }
                        cellInfo.Info = ngInfo;
                        NGInfoCode.Add(cellInfo);
#region NG信息发送给PLC
                    //if (OriNGList.Info[i].Contains("膜偏|露白"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "2";
                    //}
                    //else if (OriNGList.Info[i].Contains("片间距"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "3";
                    //}
                    //else if (OriNGList.Info[i].Contains("边角"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "4";
                    //}
                    //else if (OriNGList.Info[i].Contains("起焊点"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "5";
                    //}
                    //else if (OriNGList.Info[i].Contains("划痕"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "6";
                    //}
                    //else if (OriNGList.Info[i].Contains("表面缺陷"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "7";
                    //}
                    //else if (OriNGList.Info[i].Contains("色差"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "8";
                    //}
                    //else if (OriNGList.Info[i].Contains("断栅"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "9";
                    //}
                    //else if (OriNGList.Info[i].Contains("算法异常"))
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "10";
                    //}
                    //for (int j = WaferCountPerClass; j < 20; j++)
                    //{
                    //    stringInfo2PLC = stringInfo2PLC + " " + "0";
                    //}
                    //Result2PLC.Enqueue(stringInfo2PLC);
#endregion
                }

            }




        }
        //private void SendJson2Mes(SingleClassNG singleClassNGList, string line,string ngbarcode)
        //{
        //    List<CellInfo> cellInfoList = new List<CellInfo>();
        //    List<string> Ap_result = new List<string>();
        //    NGInfo2Code(singleClassNGList, Ap_result, cellInfoList);
        //    SingleNGClassInfo singleNGClassInfo = new SingleNGClassInfo();
        //    singleNGClassInfo.NGbarcode = ngbarcode;
        //    singleNGClassInfo.Line = line;
        //    singleNGClassInfo.Update_time = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss") ;
        //    singleNGClassInfo.Ap_result = Ap_result;
        //    singleNGClassInfo.CellInfoList = cellInfoList;


        //    string res = JsonHelp.singleNGClassInfoToJson(singleNGClassInfo);

        //    Global.SaveLog("D:\\Program Files\\Config\\033\\json.txt", res);
        //}
        private void StartConnectPositiveB()
        {
            _tcpClientPositiveB.ClientName = "033PositiveB";
            _tcpClientPositiveB.EndDelimiter = "";
            _tcpClientPositiveB.OnError = OnClientErrorPositiveB;
            _tcpClientPositiveB.OnConnecting = OnClientConnectingPositiveB;
            _tcpClientPositiveB.OnConnected = OnClientConnectedPositiveB;
            _tcpClientPositiveB.OnDisconnected = OnClientDisconnectedPositiveB;
            _tcpClientPositiveB.OnData = OnClientDataPositiveB;
            _tcpClientPositiveB.ServerIP = plcIPAddress;
            _tcpClientPositiveB.ServerPort = plcPortPositiveB;
            _tcpClientPositiveB.Connected = true;
        }

        //客户端错误代码
        public void OnClientErrorPositiveB(int nErrorCode)
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端连接
        public void OnClientConnectingPositiveB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端已连接响应
        public void OnClientConnectedPositiveB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagPositiveB = true;
            ConnectNumPositiveB = 0;
            Invoke(new UpdateForm_dl(() =>
            {
                if (Global.isEnglish == "0")
                {
                    mfPositiveInterface.lblTcpConnectedStateB.Text = "B通信成功";
                }
                else
                {
                    mfPositiveInterface.lblTcpConnectedStateB.Text = "B-Comm Successful";
                }
                //mfPositiveInterface.lblTcpConnectedStateB.Text = "B通信成功";
            }));
        }
        //客户端断开连接响应
        public void OnClientDisconnectedPositiveB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagPositiveB = false;
            Invoke(new UpdateForm_dl(() =>
            {

                mfPositiveInterface.lblTcpConnectedStateB.Text = "B通信失败";
            }));
        }
        //客户端接收数据响应
        public void OnClientDataPositiveB(string msgStrB)
        {
            ConnectNumPositiveB = 0;
            Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Received Message:  " + msgStrB);
            if (ResultPositiveB.Count > 0)
            {
                lock (ResultPositiveB)
                {
                    
                    if (msgStrB == "1")
                    {
                        string d = ResultPositiveB.Dequeue();
                        _tcpClientPositiveB.SendData(d);
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }
                    
                }
            }
            else
            {
                if (msgStrB == "1")
                {
                    _tcpClientPositiveB.SendData("9");
                    Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");

                    DateTime nowTime = DateTime.Now;
                    FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt");

                    if (fileInfo.Length / 1024 > 10240)
                    {
                        File.Delete("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt");
                    }
                }
               
            }
#region 不良信息
            if (msgStrB.Length >= 2)
            {
                _tcpClientPositiveB.SendData("9");
                Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogPositiveB.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");
                RefreshNGIfo(singleClassNGPositiveBList, singleClassNGNegativeBList, "B");
                
            }
        
#endregion
        }

        private void StartConnectNegativeA()
        {
            _tcpClientNegativeA.ClientName = "033NegativeA";
            _tcpClientNegativeA.EndDelimiter = "";
            _tcpClientNegativeA.OnError = OnClientErrorNegativeA;
            _tcpClientNegativeA.OnConnecting = OnClientConnectingNegativeA;
            _tcpClientNegativeA.OnConnected = OnClientConnectedNegativeA;
            _tcpClientNegativeA.OnDisconnected = OnClientDisconnectedNegativeA;
            _tcpClientNegativeA.OnData = OnClientDataNegativeA;
            _tcpClientNegativeA.ServerIP = plcIPAddress;
            _tcpClientNegativeA.ServerPort = plcPortNegativeA;
            _tcpClientNegativeA.Connected = true;
        }

        //客户端错误代码
        public void OnClientErrorNegativeA(int nErrorCode)
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端连接
        public void OnClientConnectingNegativeA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端已连接响应
        public void OnClientConnectedNegativeA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagNegativeA = true;
            ConnectNumNegativeA = 0;
            Invoke(new UpdateForm_dl(() =>
            {
                if (Global.isEnglish == "0")
                {
                    mfNegativeInterface.lblTcpConnectedStateA.Text = "A通信成功";
                }
                else
                {
                    mfNegativeInterface.lblTcpConnectedStateA.Text = "A-Comm Successful";
                }
                //mfNegativeInterface.lblTcpConnectedStateA.Text = "A通信成功";
            }));
        }
        //客户端断开连接响应
        public void OnClientDisconnectedNegativeA()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagNegativeA = false;
            Invoke(new UpdateForm_dl(() =>
            {
                mfNegativeInterface.lblTcpConnectedStateA.Text = "A通信失败";
            }));
        }
        //客户端接收数据响应
        public void OnClientDataNegativeA(string msgStrA)
        {
            ConnectNumNegativeA = 0;
            Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeA.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Received Message:  " + msgStrA);
            if (ResultNegativeA.Count > 0)
            {
                lock (ResultNegativeA)
                {
                   
                    if (msgStrA == "1")
                    {
                        string d = ResultNegativeA.Dequeue();
                        _tcpClientNegativeA.SendData(d);
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeA.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }
                    
                }
            }
            else
            {
                if (msgStrA == "1")
                {
                    _tcpClientNegativeA.SendData("9");
                    Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeA.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");

                    DateTime nowTime = DateTime.Now;
                    FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeA.txt");

                    if (fileInfo.Length / 1024 > 10240)
                    {
                        File.Delete("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeA.txt");
                    }
                }
                
            }
            
        }

        private void StartConnectNegativeB()
        {
            _tcpClientNegativeB.ClientName = "033NegativeB";
            _tcpClientNegativeB.EndDelimiter = "";
            _tcpClientNegativeB.OnError = OnClientErrorNegativeB;
            _tcpClientNegativeB.OnConnecting = OnClientConnectingNegativeB;
            _tcpClientNegativeB.OnConnected = OnClientConnectedNegativeB;
            _tcpClientNegativeB.OnDisconnected = OnClientDisconnectedNegativeB;
            _tcpClientNegativeB.OnData = OnClientDataNegativeB;
            _tcpClientNegativeB.ServerIP = plcIPAddress;
            _tcpClientNegativeB.ServerPort = plcPortNegativeB;
            _tcpClientNegativeB.Connected = true;
        }

        //客户端错误代码
        public void OnClientErrorNegativeB(int nErrorCode)
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端连接
        public void OnClientConnectingNegativeB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            Invoke(new UpdateForm_dl(() =>
            {

            }));
        }
        //客户端已连接响应
        public void OnClientConnectedNegativeB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagNegativeB = true;
            ConnectNumNegativeB = 0;
            Invoke(new UpdateForm_dl(() =>
            {
                if (Global.isEnglish == "0")
                {
                    mfNegativeInterface.lblTcpConnectedStateB.Text = "B通信成功";
                }
                else
                {
                    mfNegativeInterface.lblTcpConnectedStateB.Text = "B-Comm Successful";
                }
                //mfNegativeInterface.lblTcpConnectedStateB.Text = "B通信成功";
            }));
        }
        //客户端断开连接响应
        public void OnClientDisconnectedNegativeB()
        {
            // 通过委托方法操作主线程控件，防止线程间冲突
            if (this == null || !this.IsHandleCreated) return;
            TcpFlagNegativeB = false;
            Invoke(new UpdateForm_dl(() =>
            {
                mfNegativeInterface.lblTcpConnectedStateB.Text = "B通信失败";
            }));
        }
        //客户端接收数据响应
        public void OnClientDataNegativeB(string msgStrB)
        {
            ConnectNumNegativeB = 0;
            Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeB.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Received Message:  " + msgStrB);
            if (ResultNegativeB.Count > 0)
            {
                lock (ResultNegativeB)
                {
                    
                    if (msgStrB == "1")
                    {
                        string d = ResultNegativeB.Dequeue();
                        _tcpClientNegativeB.SendData(d);
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeB.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }
                   
                }
            }
            else
            {
                if (msgStrB == "1")
                {
                    _tcpClientNegativeB.SendData("9");
                    Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeB.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send: 9");

                    DateTime nowTime = DateTime.Now;
                    FileInfo fileInfo = new FileInfo("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeB.txt");

                    if (fileInfo.Length / 1024 > 10240)
                    {
                        File.Delete("D:\\Program Files\\Config\\033\\TcpIpStateLogNegativeB.txt");
                    }
                }
                
            }
            
        }


        //List<textObject> mainFormMenuList = new List<textObject>();
        //List<textObject> mainFormTitleList = new List<textObject>();
        //List<textObject> loginFormList = new List<textObject>();
        //List<textObject> positiveFormList = new List<textObject>();
        //List<textObject> negativeFormList = new List<textObject>();
        //List<textObject> NGStatisticsFormList = new List<textObject>();
        //List<textObject> parameterFormList = new List<textObject>();
        //List<textObject> statisticsFormList = new List<textObject>();
        //List<textObject> userManagerFormList = new List<textObject>();


        public bool regexNumber(string text)
        {
            string pattern = "^[0-9]*$";
            Regex regex = new Regex(pattern);
            return regex.IsMatch(text);
        }

        public void InitialControl(Control objControl, List<textObject> list)
        {

            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                if (control.Text != "")
                {
                    textObject obj = new textObject();
                    obj.Key = control.Name;
                    obj.Size = (int)control.Font.Size;
                    obj.Name = control.Font.Name;
                    obj.Text = control.Text;
                    obj.Fontstyle = control.Font.Style;
                    if (control is System.Windows.Forms.TextBox || control.Text == "***" || regexNumber(control.Text)) continue;
                    list.Add(obj);

                }
                if (control.Controls.Count > 0)
                    InitialControl(control, list);
            }
        }
        public void writeLanguageXML(XmlDocument xmlDoc, XmlElement rootElement, string form, List<textObject> list)
        {
            XmlElement xmlClassElement = xmlDoc.CreateElement(form);
            rootElement.AppendChild(xmlClassElement);
            XmlAttribute attr2 = xmlDoc.CreateAttribute("key");
            attr2.Value = form;
            xmlClassElement.Attributes.Append(attr2);
            for (int i = 0; i < list.Count; i++)
            {
                XmlElement xmlChild = xmlDoc.CreateElement("textObject");
                xmlClassElement.AppendChild(xmlChild);
                XmlAttribute attrKey = xmlDoc.CreateAttribute("key");
                attrKey.Value = list[i].Key;
                xmlChild.Attributes.Append(attrKey);
                XmlAttribute attrSize = xmlDoc.CreateAttribute("size");
                attrSize.Value = list[i].Size.ToString();
                xmlChild.Attributes.Append(attrSize);
                XmlAttribute attrName = xmlDoc.CreateAttribute("name");
                attrName.Value = list[i].Name;
                xmlChild.Attributes.Append(attrName);
                XmlAttribute attrStyle = xmlDoc.CreateAttribute("style");
                attrStyle.Value = list[i].Fontstyle.ToString();
                xmlChild.Attributes.Append(attrStyle);
                xmlChild.InnerText = list[i].Text;
            }
        }

        public void exportLanguageXML(string language, string languagePath)
        {
            XmlDocument xmlDoc = new XmlDocument();
            XmlDeclaration xmlDeclaration = xmlDoc.CreateXmlDeclaration("1.0", "utf-8", "yes");
            xmlDoc.AppendChild(xmlDeclaration);
            XmlElement rootElement = xmlDoc.CreateElement("Inspect");
            xmlDoc.AppendChild(rootElement);
            XmlAttribute attr = xmlDoc.CreateAttribute("languages");
            attr.Value = language;
            rootElement.Attributes.Append(attr);


            InitialControl(this.pnlMainFormMenu, mainFormMenuList);
            writeLanguageXML(xmlDoc, rootElement, "MainFormMenu", mainFormMenuList);
            mainFormMenuList.Clear();

            InitialControl(this.pnlMainFormTitle, mainFormTitleList);
            writeLanguageXML(xmlDoc, rootElement, "MainFormTitle", mainFormTitleList);
            mainFormTitleList.Clear();

            InitialControl(this.mfLoginInterface, loginFormList);
            writeLanguageXML(xmlDoc, rootElement, "LoginForm", loginFormList);
            loginFormList.Clear();

            InitialControl(this.mfPositiveInterface, positiveFormList);
            writeLanguageXML(xmlDoc, rootElement, "PositiveForm", positiveFormList);
            positiveFormList.Clear();

            InitialControl(this.mfNegativeInterface, negativeFormList);
            writeLanguageXML(xmlDoc, rootElement, "NegativeForm", negativeFormList);
            negativeFormList.Clear();

            InitialControl(this.mfNGStatisticsInterface, NGStatisticsFormList);
            writeLanguageXML(xmlDoc, rootElement, "NGStatisticsForm", NGStatisticsFormList);
            NGStatisticsFormList.Clear();

            InitialControl(this.mfParameterInterface, parameterFormList);
            writeLanguageXML(xmlDoc, rootElement, "ParameterForm", parameterFormList);
            parameterFormList.Clear();

            InitialControl(this.mfStatisticsInterface, statisticsFormList);
            writeLanguageXML(xmlDoc, rootElement, "StatisticsForm", statisticsFormList);
            statisticsFormList.Clear();

            InitialControl(this.mfUserManagerInterface, userManagerFormList);
            writeLanguageXML(xmlDoc, rootElement, "UserManagerForm", userManagerFormList);
            userManagerFormList.Clear();

            xmlDoc.Save(languagePath);
        }


        public void switchLanguages(string languagePath)
        {
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(languagePath);
                loadLanguageXML(doc, "MainFormMenu", mainFormMenuList);
                switchLanguage(this.pnlMainFormMenu, mainFormMenuList);
                mainFormMenuList.Clear();

                loadLanguageXML(doc, "MainFormTitle", mainFormTitleList);
                switchLanguage(this.pnlMainFormTitle, mainFormTitleList);
                mainFormTitleList.Clear();

                loadLanguageXML(doc, "LoginForm", loginFormList);
                switchLanguage(this.mfLoginInterface, loginFormList);
                loginFormList.Clear();

                loadLanguageXML(doc, "PositiveForm", positiveFormList);
                switchLanguage(this.mfPositiveInterface, positiveFormList);
                positiveFormList.Clear();

                loadLanguageXML(doc, "NegativeForm", negativeFormList);
                switchLanguage(this.mfNegativeInterface, negativeFormList);
                negativeFormList.Clear();

                loadLanguageXML(doc, "NGStatisticsForm", NGStatisticsFormList);
                switchLanguage(this.mfNGStatisticsInterface, NGStatisticsFormList);
                NGStatisticsFormList.Clear();

                loadLanguageXML(doc, "ParameterForm", parameterFormList);
                switchLanguage(this.mfParameterInterface, parameterFormList);
                parameterFormList.Clear();

                loadLanguageXML(doc, "StatisticsForm", statisticsFormList);
                switchLanguage(this.mfStatisticsInterface, statisticsFormList);
                statisticsFormList.Clear();

                loadLanguageXML(doc, "UserManagerForm", userManagerFormList);
                switchLanguage(this.mfUserManagerInterface, userManagerFormList);
                userManagerFormList.Clear();

                loadLanguageXML(doc, "NGInfoForm", NGInfoFormList);
                switchLanguage(this.mfNGInfoInterface, NGInfoFormList);
                NGInfoFormList.Clear();
                if (rdbtnChinese.Checked == true)
                {
                    IsEnglish = 0;
                    
                    Global.isEnglish = "0";
                    Config.WriteIniData("Config", "IsEnglish", Global.isEnglish, defaultRecipePath);

                    this.Text = "无锡奥特维科技股份有限公司";
                    mfLoginInterface.cb_UserType.Items.Clear();
                    mfLoginInterface.cb_UserType.Items.Add("管理员");
                    mfLoginInterface.cb_UserType.Items.Add("操作工");
                    mfParameterInterface.cbxStringType.Items.Clear();
                    mfParameterInterface.cbxStringType.Items.Add("负间距");
                    mfParameterInterface.cbxStringType.Items.Add("小间距");
                    mfParameterInterface.cbxStringType.Items.Add("常规间距");
                    mfParameterInterface.cbxStringType.SelectedItem = Global.stringType;
                    mfNGInfoInterface. informationANgtable.Columns[0].HeaderText = "时间";
                    for (int i = 0; i < 24; i++)
                    {
                        mfNGInfoInterface.informationANgtable.Columns[3 + 2 * i].HeaderText = "正面";
                        mfNGInfoInterface.informationANgtable.Columns[4 + 2 * i].HeaderText = "背面";
                    }
                    if (Global.userType == "1")
                    {
                        lblCurrentUser.Text = "管理员";    

                    }
                    if (Global.userType == "2")
                    {
                        lblCurrentUser.Text = "操作工";

                    }
                    if (bl_IsRunPositive)
                    {
                        lblCurrentState.Text = "程序运行中...";
                    }
                    else
                    {
                        lblCurrentState.Text = "程序停止";
                    }
                }
                if (rdbtnEnglish.Checked == true )
                {
                    IsEnglish = 1;
                    Global.isEnglish = "1";
                    Config.WriteIniData("Config", "IsEnglish", Global.isEnglish, defaultRecipePath);


                    this.Text = "Wuxi Autowell Technology Co., Ltd.";
                    mfLoginInterface.cb_UserType.Items.Clear();
                    mfLoginInterface.cb_UserType.Items.Add("Administrator");
                    mfLoginInterface.cb_UserType.Items.Add("Handlers");
                    mfParameterInterface.cbxStringType.Items.Clear();
                    mfParameterInterface.cbxStringType.Items.Add("Negative Gap");
                    mfParameterInterface.cbxStringType.Items.Add("Small Gap");
                    mfParameterInterface.cbxStringType.Items.Add("Normal Gap");
                    if (Global.stringType == "常规间距")
                    {
                        mfParameterInterface.cbxStringType.SelectedItem = "Normal Gap";
                    }
                    if (Global.stringType == "小间距")
                    {
                        mfParameterInterface.cbxStringType.SelectedItem = "Small Gap";
                    }
                    if (Global.stringType == "负间距")
                    {
                        mfParameterInterface.cbxStringType.SelectedItem = "Negative Gap";
                    }
                    mfNGInfoInterface.informationANgtable.Columns[0].HeaderText = "Time";
                    for (int i = 0; i < 24; i++)
                    {
                        mfNGInfoInterface.informationANgtable.Columns[3 + 2 * i].HeaderText = "P";
                        mfNGInfoInterface.informationANgtable.Columns[4 + 2 * i].HeaderText = "N";
                    }
                    if (Global.userType == "1")
                    {
                        lblCurrentUser.Text = "Administrator";

                    }
                    if (Global.userType == "2")
                    {
                        lblCurrentUser.Text = "Handlers";

                    }
                    if (bl_IsRunPositive)
                    {
                        lblCurrentState.Text = "Program Running...";
                    }
                    else
                    {
                        lblCurrentState.Text = "Program Stop";
                    }
                }


            }
            catch (Exception ex)
            {
                if (rdbtnChinese.Checked)
                {
                    MessageBox.Show("语言文件不存在！");
                }
                if (rdbtnEnglish.Checked == true)
                {
                    MessageBox.Show("Language file does not exist！");
                }
                //MessageBox.Show("语言文件不存在！");
            }


        }

        public void loadLanguageXML(XmlDocument doc, string form, List<textObject> list)
        {
            XmlNode formNode = doc.SelectSingleNode("/Inspect/" + form);
            if (formNode == null) return;
            XmlNodeList nodeList = formNode.ChildNodes;
            if (nodeList.Count == 0) return;
            foreach (XmlNode node in nodeList)
            {
                textObject obj = new textObject();
                obj.Key = node.Attributes["key"].Value;
                obj.Size = Convert.ToInt32(node.Attributes["size"].Value);
                obj.Name = node.Attributes["name"].Value;
                obj.Fontstyle = (FontStyle)Enum.Parse(typeof(FontStyle), node.Attributes["style"].Value);
                obj.Text = node.InnerText;
                list.Add(obj);
            }
        }
        public void switchLanguage(Control objControl, List<textObject> list)
        {
            if (list.Count <= 0) return;
            foreach (System.Windows.Forms.Control control in objControl.Controls)
            {
                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].Key == control.Name)
                    {
                        control.Font = new Font(list[i].Name, list[i].Size, list[i].Fontstyle);
                        control.Text = list[i].Text;
                    }
                }
                if (control.Controls.Count > 0)
                    switchLanguage(control, list);
            }
        }
        private void rdbtnChinese_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbtnChinese.Checked)
            {
                switchLanguages(defaultChineseLanguagePath);
                mfParameterInterface.cbxMainLineNum_TextChanged(sender, e);
                //if (Convert.ToInt32(mfParameterInterface.cbxMainLineNum.Text) == 9 || Convert.ToInt32(mfParameterInterface.cbxMainLineNum.Text) == 12)
                //{
                //    mfParameterInterface.label9.Text = "检测点1Pos宽度(mm)";
                //    mfParameterInterface.label13.Text = "检测点2Pos宽度(mm)";
                //    mfParameterInterface.label10.Text = "膜/焊带缺失判断阈值";

                //    mfParameterInterface.label88.Text = "检测点1Pos宽度(mm)";
                //    mfParameterInterface.label85.Text = "检测点2Pos宽度(mm)";
                //    mfParameterInterface.label87.Text = "膜/焊带缺失判断阈值";

                //    //mfParameterInterface.label9.Text = "Width of Insp Point-Pos 1 (mm)";
                //    //mfParameterInterface.label13.Text = "Width of Insp Point-Pos 2 (mm)";
                //    //mfParameterInterface.label10.Text = "Film/Ribbon Missing Thr";

                //    //mfParameterInterface.label88.Text = "Width of Insp Point-Pos 1 (mm)";
                //    //mfParameterInterface.label85.Text = "Width of Insp Point-Pos 2 (mm)";
                //    //mfParameterInterface.label87.Text = "Film/Ribbon Missing Thr";
                //}
                //else
                //{

                //    mfParameterInterface.label9.Text = "贴膜宽度阈值(mm)";
                //    mfParameterInterface.label13.Text = "头尾贴膜宽度阈值(mm)";
                //    mfParameterInterface.label10.Text = "贴膜宽度补偿值(mm)";

                //    mfParameterInterface.label88.Text = "贴膜宽度阈值(mm)";
                //    mfParameterInterface.label85.Text = "头尾贴膜宽度阈值(mm)";
                //    mfParameterInterface.label87.Text = "贴膜宽度补偿值(mm)";

                //    //mfParameterInterface.label9.Text = "Film Width Thr (mm)";
                //    //mfParameterInterface.label13.Text = "H/T Film Width Thr (mm)";
                //    //mfParameterInterface.label10.Text = "Film Width Comp. (mm)";

                //    //mfParameterInterface.label88.Text = "Film Width Thr (mm)";
                //    //mfParameterInterface.label85.Text = "H/T Film Width Thr (mm)";
                //    //mfParameterInterface.label87.Text = "Film Width Comp. (mm)";

                //}

                pnlLanguage.Hide();
            }
        }
        private void rdbtnEnglish_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbtnEnglish.Checked)
            {
                switchLanguages(defaultEnglishLanguagePath);
                mfParameterInterface.cbxMainLineNum_TextChanged(sender, e);
                //if (Convert.ToInt32(mfParameterInterface.cbxMainLineNum.Text) == 9 || Convert.ToInt32(mfParameterInterface.cbxMainLineNum.Text) == 12)
                //{
                //    //mfParameterInterface.label9.Text = "检测点1Pos宽度(mm)";
                //    //mfParameterInterface.label13.Text = "检测点2Pos宽度(mm)";
                //    //mfParameterInterface.label10.Text = "膜/焊带缺失判断阈值";

                //    //mfParameterInterface.label88.Text = "检测点1Pos宽度(mm)";
                //    //mfParameterInterface.label85.Text = "检测点2Pos宽度(mm)";
                //    //mfParameterInterface.label87.Text = "膜/焊带缺失判断阈值";

                //    mfParameterInterface.label9.Text = "Width of Insp Point-Pos 1 (mm)";
                //    mfParameterInterface.label13.Text = "Width of Insp Point-Pos 2 (mm)";
                //    mfParameterInterface.label10.Text = "Film/Ribbon Missing Thr";

                //    mfParameterInterface.label88.Text = "Width of Insp Point-Pos 1 (mm)";
                //    mfParameterInterface.label85.Text = "Width of Insp Point-Pos 2 (mm)";
                //    mfParameterInterface.label87.Text = "Film/Ribbon Missing Thr";
                //}
                //else
                //{

                //    //mfParameterInterface.label9.Text = "贴膜宽度阈值(mm)";
                //    //mfParameterInterface.label13.Text = "头尾贴膜宽度阈值(mm)";
                //    //mfParameterInterface.label10.Text = "贴膜宽度补偿值(mm)";

                //    //mfParameterInterface.label88.Text = "贴膜宽度阈值(mm)";
                //    //mfParameterInterface.label85.Text = "头尾贴膜宽度阈值(mm)";
                //    //mfParameterInterface.label87.Text = "贴膜宽度补偿值(mm)";

                //    mfParameterInterface.label9.Text = "Film Width Thr (mm)";
                //    mfParameterInterface.label13.Text = "H/T Film Width Thr (mm)";
                //    mfParameterInterface.label10.Text = "Film Width Comp. (mm)";

                //    mfParameterInterface.label88.Text = "Film Width Thr (mm)";
                //    mfParameterInterface.label85.Text = "H/T Film Width Thr (mm)";
                //    mfParameterInterface.label87.Text = "Film Width Comp. (mm)";

                //}


                pnlLanguage.Hide();
            }
        }

        private void btnLanguageSwitch_Click(object sender, EventArgs e)
        {
            rdbtnChinese.Checked = !Convert.ToBoolean(Convert.ToUInt32(Global.isEnglish));
            rdbtnEnglish.Checked = Convert.ToBoolean(Convert.ToUInt32(Global.isEnglish));
            pnlLanguage.Show();
            pnlLanguage.Focus();
        }

        private void saveTotalStatisticsLog()
        {
            if (Global.isEnglish == "0")
            {
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "--------------时间：" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss") + "--------------");
                //A正面
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "A正面-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "总串数：" + Convert.ToString(TotalCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "NG串数：" + Convert.ToString(NGTotalCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "重大故障串数：" + Convert.ToString(MajorFailureCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜偏/露白串数：" + Convert.ToString(TotalFilmShiftingCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜短/膜缺失串数：" + Convert.ToString(TotalFilmMissCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "头尾膜偏串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "片间距异常串数：" + Convert.ToString(TotalDistanceNGCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "边角缺陷串数：" + Convert.ToString(TotalEdgeDefectCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                          "表面缺陷串数：" + Convert.ToString(TotalSurfaceDefectCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "断栅/氧化串数：" + Convert.ToString(TotalBrokenLineCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "起焊点异常串数：" + Convert.ToString(TotalStartingWeldingNGCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "表面色差串数：" + Convert.ToString(TotalSurfaceColorDiffCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "异常串数：" + Convert.ToString(TotalDistanceNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "少片串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA));

                //B正面
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "B正面-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "总串数：" + Convert.ToString(TotalCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "NG串数：" + Convert.ToString(NGTotalCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "重大故障串数：" + Convert.ToString(MajorFailureCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜偏/露白串数：" + Convert.ToString(TotalFilmShiftingCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜短/膜缺失串数：" + Convert.ToString(TotalFilmMissCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "头尾膜偏串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "片间距异常串数：" + Convert.ToString(TotalDistanceNGCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "边角缺陷串数：" + Convert.ToString(TotalEdgeDefectCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                          "表面缺陷串数：" + Convert.ToString(TotalSurfaceDefectCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "断栅/氧化串数：" + Convert.ToString(TotalBrokenLineCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "起焊点异常串数：" + Convert.ToString(TotalStartingWeldingNGCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "表面色差串数：" + Convert.ToString(TotalSurfaceColorDiffCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "异常串数：" + Convert.ToString(TotalDistanceNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "少片串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB));


                //A背面
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "A背面-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "总串数：" + Convert.ToString(TotalCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "NG串数：" + Convert.ToString(NGTotalCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "重大故障串数：" + Convert.ToString(MajorFailureCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜偏/露白串数：" + Convert.ToString(TotalFilmShiftingCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜短/膜缺失串数：" + Convert.ToString(TotalFilmMissCountNegativeA));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                //           "头尾膜偏串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                //           "片间距异常串数：" + Convert.ToString(TotalDistanceNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "边角缺陷串数：" + Convert.ToString(TotalEdgeDefectCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                          "表面缺陷串数：" + Convert.ToString(TotalSurfaceDefectCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "断栅/氧化串数：" + Convert.ToString(TotalBrokenLineCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "起焊点异常串数：" + Convert.ToString(TotalStartingWeldingNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "表面色差串数：" + Convert.ToString(TotalSurfaceColorDiffCountNegativeA));


                //B背面
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "B背面-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "总串数：" + Convert.ToString(TotalCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "NG串数：" + Convert.ToString(NGTotalCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "重大故障串数：" + Convert.ToString(MajorFailureCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜偏/露白串数：" + Convert.ToString(TotalFilmShiftingCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "膜短/膜缺失串数：" + Convert.ToString(TotalFilmMissCountNegativeB));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                //           "头尾膜偏串数：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                //           "片间距异常串数：" + Convert.ToString(TotalDistanceNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "边角缺陷串数：" + Convert.ToString(TotalEdgeDefectCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                          "表面缺陷串数：" + Convert.ToString(TotalSurfaceDefectCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "断栅/氧化串数：" + Convert.ToString(TotalBrokenLineCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "起焊点异常串数：" + Convert.ToString(TotalStartingWeldingNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\班次记录.txt",
                           "表面色差串数：" + Convert.ToString(TotalSurfaceColorDiffCountNegativeB));

            }
            else
            {
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                  "--------------Time：" + DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss") + "--------------");
                //A正面
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "PositiveA-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Total Strings：" + Convert.ToString(TotalCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NG Strings：" + Convert.ToString(NGTotalCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Multi Defects Strings：" + Convert.ToString(MajorFailureCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film/Ribbon Offset Strings：" + Convert.ToString(TotalFilmShiftingCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film Short/Missing Strings：" + Convert.ToString(TotalFilmMissCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "H/T Film Offset Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "CellSpacing Error Strings：" + Convert.ToString(TotalDistanceNGCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Edge/Corner Defect Strings：" + Convert.ToString(TotalEdgeDefectCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                          "Surface Defect Strings：" + Convert.ToString(TotalSurfaceDefectCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Broken Finger Strings：" + Convert.ToString(TotalBrokenLineCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell To Rib Head Dist Error Strings：" + Convert.ToString(TotalStartingWeldingNGCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Surface Color Difference Strings：" + Convert.ToString(TotalSurfaceColorDiffCountPositiveA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Error Strings：" + Convert.ToString(TotalDistanceNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell Lack Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA));

                //B正面
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "PositiveB-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Total Strings：" + Convert.ToString(TotalCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NG Strings：" + Convert.ToString(NGTotalCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Multi Defects Strings：" + Convert.ToString(MajorFailureCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film/Ribbon Offset Strings：" + Convert.ToString(TotalFilmShiftingCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film Short/Missing Strings：" + Convert.ToString(TotalFilmMissCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "H/T Film Offset Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "CellSpacing Error Strings：" + Convert.ToString(TotalDistanceNGCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Edge/Corner Defect Strings：" + Convert.ToString(TotalEdgeDefectCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                          "Surface Defect Strings：" + Convert.ToString(TotalSurfaceDefectCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Broken Finger Strings：" + Convert.ToString(TotalBrokenLineCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell To Rib Head Dist Error Strings：" + Convert.ToString(TotalStartingWeldingNGCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Surface Color Difference Strings：" + Convert.ToString(TotalSurfaceColorDiffCountPositiveB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Error Strings：" + Convert.ToString(TotalDistanceNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell Lack Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB));


                //A背面
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NegativeA-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Total Strings：" + Convert.ToString(TotalCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NG Strings：" + Convert.ToString(NGTotalCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Multi Defects Strings：" + Convert.ToString(MajorFailureCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film/Ribbon Offset Strings：" + Convert.ToString(TotalFilmShiftingCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film Short/Missing Strings：" + Convert.ToString(TotalFilmMissCountNegativeA));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                //           "H/T Film Offset Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeA));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                //           "CellSpacing Error Strings：" + Convert.ToString(TotalDistanceNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Edge/Corner Defect Strings：" + Convert.ToString(TotalEdgeDefectCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                          "Surface Defect Strings：" + Convert.ToString(TotalSurfaceDefectCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Broken Finger Strings：" + Convert.ToString(TotalBrokenLineCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell To Rib Head Dist Error Strings：" + Convert.ToString(TotalStartingWeldingNGCountNegativeA));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Surface Color Difference Strings：" + Convert.ToString(TotalSurfaceColorDiffCountNegativeA));


                //B背面
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NegativeB-------------------------------------");
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Total Strings：" + Convert.ToString(TotalCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "NG Strings：" + Convert.ToString(NGTotalCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Multi Defects Strings：" + Convert.ToString(MajorFailureCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film/Ribbon Offset Strings：" + Convert.ToString(TotalFilmShiftingCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Film Short/Missing Strings：" + Convert.ToString(TotalFilmMissCountNegativeB));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                //           "H/T Film Offset Strings：" + Convert.ToString(TotalFilmShiftingOfHeadAndTailCountNegativeB));
                //Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                //           "CellSpacing Error Strings：" + Convert.ToString(TotalDistanceNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Edge/Corner Defect Strings：" + Convert.ToString(TotalEdgeDefectCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                          "Surface Defect Strings：" + Convert.ToString(TotalSurfaceDefectCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Broken Finger Strings：" + Convert.ToString(TotalBrokenLineCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Cell To Rib Head Dist Error Strings：" + Convert.ToString(TotalStartingWeldingNGCountNegativeB));
                Global.SaveLog("D:\\Program Files\\Config\\033\\Class Record.txt",
                           "Surface Color Difference Strings：" + Convert.ToString(TotalSurfaceColorDiffCountNegativeB));
            }




        }

        private void SendJson2Mes(SingleClassNG singleClassNGList, string line)
        {
            
                List<CellInfo> cellInfoList = new List<CellInfo>();
                List<string> Ap_result = new List<string>();
                NGInfo2Code(singleClassNGList, Ap_result, cellInfoList,line);
                SingleNGClassInfo singleNGClassInfo = new SingleNGClassInfo();
                singleNGClassInfo.Line = line;
                singleNGClassInfo.Update_time = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
                singleNGClassInfo.Ap_result = Ap_result;
                singleNGClassInfo.CellInfoList = cellInfoList;
                string res = JsonConvert.SerializeObject(singleNGClassInfo);
                Global.SaveLog("D:\\Program Files\\Config\\033\\json.txt", res);
                try
                {
                    HttpClientUtils.Post(url, res, "");
                }
                catch (Exception ex)
                {
                    Global.SaveLog("D:\\Program Files\\Config\\033\\json2HMI_Exception.txt", "Failed sending!_" + DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss"));
                }
            

        }
        string LastRecv;
        public void OnClientSendData()
        {
           

           
            if (Result2PLC.Count > 0)
            {
                lock (Result2PLC)
                {


                    string d = Result2PLC.Dequeue();
                    
                    l2TCPClientSend2PLC.Active = true;
                    l2TCPClientSend2PLC.SendString(d);
                    Thread.Sleep(10);
                    //textBox1.Text = Recv;
                    while (Recv == "E1\r\n" || Recv == "")
                    {
                        l2TCPClientSend2PLC.Active = false;
                        l2TCPClientSend2PLC.Active = true;
                        l2TCPClientSend2PLC.SendString(d);
                        Thread.Sleep(10);
                        SendTimes++;
                        if (SendTimes > 10)
                        {
                            Recv = "";
                            SendTimes = 0;
                            return;
                        }
                    }
                    //textBox1.Text = Recv;
                    if (Recv == "OK\r\n")
                    {
                        //listBox1.Items.Add(Recv);
                        Recv = "";
                        SendTimes = 0;
                        resultSendSucceed = true;
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }

                    if (Recv != null && Recv.Length >=5  && Recv.Substring(0, 2) == "01")
                    {
                        if (LastRecv != Recv.Substring(3, 2))
                        {
                            RefreshNGIfo(singleClassNGPositiveAList, singleClassNGNegativeAList, "A");

                        }
                        LastRecv = Recv.Substring(3, 2);
                        //listBox1.Items.Add(Recv);
                        Recv = "";
                        SendTimes = 0;
                        resultSendSucceed = true;
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }

                    if (Recv != null && Recv.Length >= 5 && Recv.Substring(0, 2) == "02")
                    {
                        if (LastRecv != Recv.Substring(3, 2))
                        {
                            RefreshNGIfo(singleClassNGPositiveBList, singleClassNGNegativeBList, "B");

                        }
                        LastRecv = Recv.Substring(3, 2);
                        //listBox1.Items.Add(Recv);
                        Recv = "";
                        SendTimes = 0;
                        resultSendSucceed = true;
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }
                    //读取第几片
                    if (Recv != null && Recv.Length >= 5 && Recv.Substring(0, 3) == "001")
                    {
                        if (CellNumNegativeA != Recv.Substring(3, 2))
                        {
                            CellNumNegativeA = Recv.Substring(3, 2);
                            if (Recv.Substring(3, 2) == Convert.ToString(Global.waferCountPerClass))
                            {
                                LastCellNegativeA = true;
                            }

                        }

                        //listBox1.Items.Add(Recv);
                        Recv = "";
                        SendTimes = 0;
                        resultSendSucceed = true;
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }

                    if (Recv != null && Recv.Length >= 5 && Recv.Substring(0, 3) == "002")
                    {
                        if (CellNumNegativeB != Recv.Substring(3, 2))
                        {
                            CellNumNegativeB = Recv.Substring(3, 2);
                            if (Recv.Substring(3, 2) == Convert.ToString(Global.waferCountPerClass))
                            {
                                LastCellNegativeB = true;
                            }

                        }
                        //listBox1.Items.Add(Recv);
                        Recv = "";
                        SendTimes = 0;
                        resultSendSucceed = true;
                        Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLog.txt",
                            DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Send Result:  " + d);
                    }

                }
            }


        }
        private void timer_AutoReadNGNum_Tick(object sender, EventArgs e)
        {
            if (Global.isUpperLink=="1")
            {
                Result2PLC.Enqueue("RD EM5060");
            }
          
        }
        private void l2TCPClientSend2PLC_DataReceived(object sender, L2TCPClient.DataReceivedEventArgs e)
        {
            Recv = System.Text.Encoding.Default.GetString(e.Data);
            Global.SaveLog("D:\\Program Files\\Config\\033\\TcpIpStateLogReceive.txt",
                        DateTime.Now.ToString("yyyy-MM-dd-HH:mm:ss:ff") + " Receive:  " + Recv);
        }

    }
}

