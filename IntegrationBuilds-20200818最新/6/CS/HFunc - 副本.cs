using HalconDotNet;

namespace _6
{
    public partial class HDevelopExport
    {
        public HTuple hv_ExpDefaultWinHandle;

        // Procedures 
        // External procedures 
        // Chapter: Graphics / Text
        // Short Description: This procedure writes a text message. 
        public void disp_message(HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem,
            HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
        {



            // Local iconic variables 

            // Local control variables 

            HTuple hv_GenParamName = null, hv_GenParamValue = null;
            HTuple hv_Color_COPY_INP_TMP = hv_Color.Clone();
            HTuple hv_Column_COPY_INP_TMP = hv_Column.Clone();
            HTuple hv_CoordSystem_COPY_INP_TMP = hv_CoordSystem.Clone();
            HTuple hv_Row_COPY_INP_TMP = hv_Row.Clone();

            // Initialize local and output iconic variables 
            //This procedure displays text in a graphics window.
            //
            //Input parameters:
            //WindowHandle: The WindowHandle of the graphics window, where
            //   the message should be displayed
            //String: A tuple of strings containing the text message to be displayed
            //CoordSystem: If set to 'window', the text position is given
            //   with respect to the window coordinate system.
            //   If set to 'image', image coordinates are used.
            //   (This may be useful in zoomed images.)
            //Row: The row coordinate of the desired text position
            //   A tuple of values is allowed to display text at different
            //   positions.
            //Column: The column coordinate of the desired text position
            //   A tuple of values is allowed to display text at different
            //   positions.
            //Color: defines the color of the text as string.
            //   If set to [], '' or 'auto' the currently set color is used.
            //   If a tuple of strings is passed, the colors are used cyclically...
            //   - if |Row| == |Column| == 1: for each new textline
            //   = else for each text position.
            //Box: If Box[0] is set to 'true', the text is written within an orange box.
            //     If set to' false', no box is displayed.
            //     If set to a color string (e.g. 'white', '#FF00CC', etc.),
            //       the text is written in a box of that color.
            //     An optional second value for Box (Box[1]) controls if a shadow is displayed:
            //       'true' -> display a shadow in a default color
            //       'false' -> display no shadow
            //       otherwise -> use given string as color string for the shadow color
            //
            //It is possible to display multiple text strings in a single call.
            //In this case, some restrictions apply:
            //- Multiple text positions can be defined by specifying a tuple
            //  with multiple Row and/or Column coordinates, i.e.:
            //  - |Row| == n, |Column| == n
            //  - |Row| == n, |Column| == 1
            //  - |Row| == 1, |Column| == n
            //- If |Row| == |Column| == 1,
            //  each element of String is display in a new textline.
            //- If multiple positions or specified, the number of Strings
            //  must match the number of positions, i.e.:
            //  - Either |String| == n (each string is displayed at the
            //                          corresponding position),
            //  - or     |String| == 1 (The string is displayed n times).
            //
            //
            //Convert the parameters for disp_text.
            if ((int)((new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
                new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
            {

                return;
            }
            if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Row_COPY_INP_TMP = 12;
            }
            if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Column_COPY_INP_TMP = 12;
            }
            //
            //Convert the parameter Box to generic parameters.
            hv_GenParamName = new HTuple();
            hv_GenParamValue = new HTuple();
            if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
            {
                if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
                {
                    //Display no box
                    hv_GenParamName = hv_GenParamName.TupleConcat("box");
                    hv_GenParamValue = hv_GenParamValue.TupleConcat("false");
                }
                else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual("true"))) != 0)
                {
                    //Set a color other than the default.
                    hv_GenParamName = hv_GenParamName.TupleConcat("box_color");
                    hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Box.TupleSelect(0));
                }
            }
            if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
            {
                if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
                {
                    //Display no shadow.
                    hv_GenParamName = hv_GenParamName.TupleConcat("shadow");
                    hv_GenParamValue = hv_GenParamValue.TupleConcat("false");
                }
                else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual("true"))) != 0)
                {
                    //Set a shadow color other than the default.
                    hv_GenParamName = hv_GenParamName.TupleConcat("shadow_color");
                    hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Box.TupleSelect(1));
                }
            }
            //Restore default CoordSystem behavior.
            if ((int)(new HTuple(hv_CoordSystem_COPY_INP_TMP.TupleNotEqual("window"))) != 0)
            {
                hv_CoordSystem_COPY_INP_TMP = "image";
            }
            //
            if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
            {
                //disp_text does not accept an empty string for Color.
                hv_Color_COPY_INP_TMP = new HTuple();
            }
            //
            HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_String, hv_CoordSystem_COPY_INP_TMP,
                hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, hv_Color_COPY_INP_TMP, hv_GenParamName,
                hv_GenParamValue);

            return;
        }

        // Chapter: Develop
        // Short Description: Open a new graphics window that preserves the aspect ratio of the given image. 
        public void dev_open_window_fit_image(HObject ho_Image, HTuple hv_Row, HTuple hv_Column,
            HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
        {




            // Local iconic variables 

            // Local control variables 

            HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
            HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
            HTuple hv_ResizeFactor = null, hv_ImageWidth = null, hv_ImageHeight = null;
            HTuple hv_TempWidth = null, hv_TempHeight = null, hv_WindowWidth = new HTuple();
            HTuple hv_WindowHeight = null;
            // Initialize local and output iconic variables 
            hv_WindowHandle = new HTuple();
            //This procedure opens a new graphics window and adjusts the size
            //such that it fits into the limits specified by WidthLimit
            //and HeightLimit, but also maintains the correct image aspect ratio.
            //
            //If it is impossible to match the minimum and maximum extent requirements
            //at the same time (f.e. if the image is very long but narrow),
            //the maximum value gets a higher priority,
            //
            //Parse input tuple WidthLimit
            if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
                new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
            {
                hv_MinWidth = 500;
                hv_MaxWidth = 800;
            }
            else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
                1))) != 0)
            {
                hv_MinWidth = 0;
                hv_MaxWidth = hv_WidthLimit.Clone();
            }
            else
            {
                hv_MinWidth = hv_WidthLimit.TupleSelect(0);
                hv_MaxWidth = hv_WidthLimit.TupleSelect(1);
            }
            //Parse input tuple HeightLimit
            if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
                new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
            {
                hv_MinHeight = 400;
                hv_MaxHeight = 600;
            }
            else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
                1))) != 0)
            {
                hv_MinHeight = 0;
                hv_MaxHeight = hv_HeightLimit.Clone();
            }
            else
            {
                hv_MinHeight = hv_HeightLimit.TupleSelect(0);
                hv_MaxHeight = hv_HeightLimit.TupleSelect(1);
            }
            //
            //Test, if window size has to be changed.
            hv_ResizeFactor = 1;
            HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
            //First, expand window to the minimum extents (if necessary).
            if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
                hv_ImageHeight)))) != 0)
            {
                hv_ResizeFactor = (((((hv_MinWidth.TupleReal()) / hv_ImageWidth)).TupleConcat(
                    (hv_MinHeight.TupleReal()) / hv_ImageHeight))).TupleMax();
            }
            hv_TempWidth = hv_ImageWidth * hv_ResizeFactor;
            hv_TempHeight = hv_ImageHeight * hv_ResizeFactor;
            //Then, shrink window to maximum extents (if necessary).
            if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
                hv_TempHeight)))) != 0)
            {
                hv_ResizeFactor = hv_ResizeFactor * ((((((hv_MaxWidth.TupleReal()) / hv_TempWidth)).TupleConcat(
                    (hv_MaxHeight.TupleReal()) / hv_TempHeight))).TupleMin());
            }
            hv_WindowWidth = hv_ImageWidth * hv_ResizeFactor;
            hv_WindowHeight = hv_ImageHeight * hv_ResizeFactor;
            //Resize window
            //dev_open_window(...);
            HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight - 1, hv_ImageWidth - 1);

            return;
        }

        // Local procedures 
        public void ProcessingImage(HObject ho_oriImage, out HObject ho_totalFilmShiftingRegionOut,
           out HObject ho_totalFilmMissRegionOut, out HObject ho_totalHeadAndTailFilmShiftingRegionOut,
           out HObject ho_totalEdgeDefectRegionOut, out HObject ho_totalSurfaceDefectRegionOut,
           out HObject ho_totalBrokenLineRegionOut, HTuple hv_width, HTuple hv_height,
           HTuple hv_windowHandle, HTuple hv_mainLineNum, HTuple hv_isFullWafer, HTuple hv_subMainLineNum,
           HTuple hv_isBackDetect, HTuple hv_isUsingWidthResolutionCalibrate, HTuple hv_widthResolution,
           HTuple hv_waferWidth, HTuple hv_isUsingHeightResolutionCalibrate, HTuple hv_heightResolution,
           HTuple hv_viceLineInterval, HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLengthOfTopRegion,
           HTuple hv_bottomShieldLengthOfTopRegion, HTuple hv_topShieldLengthOfBottomRegion,
           HTuple hv_bottomShieldLengthOfBottomRegion, HTuple hv_locationMainLineThresh,
           HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet, HTuple hv_firstDetectPosForTopRegion,
           HTuple hv_secondDetectPosForTopRegion, HTuple hv_firstDetectPosForBottomRegion,
           HTuple hv_secondDetectPosForBottomRegion, HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh,
           HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmWidthThresh,
           HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
           HTuple hv_isUsingWaferEdgeCalibration, HTuple hv_locationWaferEdgeThresh, HTuple hv_waferEdgeCalibrationRegionDilationPixel,
           HTuple hv_isUsingDistanceDetect, HTuple hv_minimumDistanceThresh, HTuple hv_maxDistanceThresh,
           HTuple hv_classDistanceThresh, HTuple hv_isUsingEdgeDefectDetect, HTuple hv_edgeBigDefectWidthThresh,
           HTuple hv_edgeBigDefectHeightThresh, HTuple hv_edgeSmallDefectDetectDepth, HTuple hv_edgeSmallDefectGrayThresh,
           HTuple hv_edgeSmallDefectWidthThresh, HTuple hv_edgeSmallDefectHeightThresh,
           HTuple hv_edgeSmallDefectGrayMeanThresh, HTuple hv_edgeSmallDefectGrayDeviationThresh,
           HTuple hv_cornerDefectAreaRatioThresh, HTuple hv_isUsingSurfaceDefectDetect,
           HTuple hv_surfaceDefectGrayThresh, HTuple hv_surfaceDefectWidthThresh, HTuple hv_surfaceDefectHeightThresh,
           HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
           HTuple hv_surfaceDefectViceLineShieldRightPosOffSet, HTuple hv_surfaceScratchGrayThresh,
           HTuple hv_surfaceScratchWidthThresh, HTuple hv_surfaceScratchHeightThresh, HTuple hv_isUsingStartWeldingDetect,
           HTuple hv_startWeldingDistanceMaxThresh, HTuple hv_startWeldingDistanceMinThresh,
           HTuple hv_isUsingBrokenLineDetect, HTuple hv_brokenLineGrayThresh, HTuple hv_brokenLineWidthThresh,
           HTuple hv_brokenLineHeightThresh, HTuple hv_brokenLineDetectIndentDepth, HTuple hv_isUsingSurfaceColorDiffDetect,
           HTuple hv_isUsingChinese, HTuple hv_weldShieldLength, HTuple hv_grayOpenHeight,
           HTuple hv_twoMainLineDistance, out HTuple hv_isException, out HTuple hv_exceptionInfo,
           out HTuple hv_isTopWaferExist, out HTuple hv_isBottomWaferExist, out HTuple hv_isWidthResolutionCalibrateFinish,
           out HTuple hv_widthResolutionOut, out HTuple hv_isHeightResolutionCalibrateFinish,
           out HTuple hv_heightResolutionOut, out HTuple hv_isFilmShiftingOfTopWafer, out HTuple hv_isFilmShiftingOfBottomWafer,
           out HTuple hv_isFilmMissOfTopWafer, out HTuple hv_isFilmMissOfBottomWafer, out HTuple hv_isHeadAndTailFilmShiftingOfTopWafer,
           out HTuple hv_isHeadAndTailFilmShiftingOfBottomWafer, out HTuple hv_isEdgeDefectOfTopWafer,
           out HTuple hv_isEdgeDefectOfBottomWafer, out HTuple hv_isDistanceNG, out HTuple hv_isNextClass,
           out HTuple hv_isSurfaceDefectOfTopWafer, out HTuple hv_isSurfaceDefectOfBottomWafer,
           out HTuple hv_isSurfaceScratchOfTopWafer, out HTuple hv_isSurfaceScratchOfBottomWafer,
           out HTuple hv_isBrokenLineOfTopWafer, out HTuple hv_isBrokenLineOfBottomWafer,
           out HTuple hv_isStartWeldingNGOfBottomWafer, out HTuple hv_surfaceMeanGrayOfTopWaferOut,
           out HTuple hv_surfaceMeanGrayOfBottomWaferOut, out HTuple hv_IsTopWaferNG, out HTuple hv_IsBottomWaferNG,
           out HTuple hv_IsHeadOfWaferNG, out HTuple hv_IsTailOfWaferNG, out HTuple hv_filmDistanceArrayOfTopWafer,
           out HTuple hv_filmDistanceArrayOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopEdgeDetectRegion, ho_BottomEdgeDetectRegion;
            HObject ho_totalEdgeDefectOfTopRegion, ho_totalEdgeDefectOfBottomRegion;
            HObject ho_CalibrateTopAroundRegion, ho_CalibrateBottomAroundRegion;
            HObject ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance;
            HObject ho_BottomRegionForDistance, ho_RedChannelImage;
            HObject ho_GreenChannelImage, ho_BlueChannelImage, ho_ImageForFilmDetect;
            HObject ho_ImageForWeldNGDetect, ho_ImageForHeadWeldNGDetect;
            HObject ho_ImageForExtractROI, ho_RectangleForTopRegionExist;
            HObject ho_RectangleForBottomRegionExist, ho_RegionOpening;
            HObject ho_ImageForJudgeBackColor, ho_SelectedRegions, ho_RegionFillUp;
            HObject ho_BackGrayImageForWeldNGDetect, ho_MaxRectangleTopRegion;
            HObject ho_MaxRectangleBottomRegion, ho_TopMainLineRegions;
            HObject ho_BottomMainLineRegions, ho_RegionDifference1 = null;
            HObject ho_RegionOpening1 = null, ho_RegionDifference2 = null;
            HObject ho_RegionOpening2 = null;

            // Local control variables 

            HTuple hv_PI = null, hv_isLinearityNGDetect = null;
            HTuple hv_isBackGrayColor = null, hv_CenterRowOfTopRegion = null;
            HTuple hv_CenterColumnOfTopRegion = null, hv_CenterRowOfBottomRegion = null;
            HTuple hv_CenterColumnOfBottomRegion = null, hv_minimumArea = null;
            HTuple hv_maxArea = null, hv_isTopRegionCalibrateFinish = null;
            HTuple hv_isBottomRegionCalibrateFinish = null, hv_isWeldShield = null;
            HTuple hv_RowOfLeftCornerPointTopRegion = null, hv_ColumnOfLeftCornerPointTopRegion = null;
            HTuple hv_RowOfRightCornerPointTopRegion = null, hv_ColumnOfRightCornerPointTopRegion = null;
            HTuple hv_RowOfLeftCornerPointBottomRegion = null, hv_ColumnOfLeftCornerPointBottomRegion = null;
            HTuple hv_RowOfRightCornerPointBottomRegion = null, hv_ColumnOfRightCornerPointBottomRegion = null;
            HTuple hv_mainLineWidth = null, hv_isPretreatmentReturn = null;
            HTuple hv_RowOfLeftTopColorCornerPointRegionOut = null;
            HTuple hv_ColOfLeftTopColorCornerPointRegionOut = null;
            HTuple hv_RowOfRightTopColorCornerPointRegionOut = null;
            HTuple hv_ColOfRightTopColorCornerPointRegionOut = null;
            HTuple hv_RowOfLeftBottomColorCornerPointRegionOut = null;
            HTuple hv_ColOfLeftBottomColorCornerPointRegionOut = null;
            HTuple hv_RowOfRightBottomColorCornerPointRegionOut = null;
            HTuple hv_ColOfRightBottomColorCornerPointRegionOut = null;
            HTuple hv_isFoundTopEdgeRegionOut = null, hv_isFoundBottomEdgeRegionOut = null;
            HTuple hv_isGetRegionReturn = null, hv_IsDetectRegionNG = null;
            HTuple hv_IsHeadOrTailNG = null, hv_isDetectOfTopWafer = null;
            HTuple hv_isDetectOfBottomWafer = null, hv_TopRegionForDistanceArea = null;
            HTuple hv_Row1 = null, hv_Column1 = null, hv_BottomRegionForDistanceArea = null;
            HTuple hv_Row2 = null, hv_Column2 = null, hv_IsTopMonocrystalline = null;
            HTuple hv_IsBottomMonocrystalline = null, hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_TopTwoConnerRegionArea = new HTuple(), hv_PhiOfBottomRegion = new HTuple();
            HTuple hv_HalfWidthOfBottomRegion = new HTuple(), hv_HalfHeightOfBottomRegion = new HTuple();
            HTuple hv_BottomTwoConnerRegionArea = new HTuple(), hv_isStartWeldingNGOut = null;
            HTuple hv_heightResolution_COPY_INP_TMP = hv_heightResolution.Clone();
            HTuple hv_twoMainLineDistance_COPY_INP_TMP = hv_twoMainLineDistance.Clone();
            HTuple hv_widthResolution_COPY_INP_TMP = hv_widthResolution.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateTopAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateBottomAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImage);
            HOperatorSet.GenEmptyObj(out ho_GreenChannelImage);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImage);
            HOperatorSet.GenEmptyObj(out ho_ImageForFilmDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeadWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractROI);
            HOperatorSet.GenEmptyObj(out ho_RectangleForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RectangleForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ImageForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_BackGrayImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleTopRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference2);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening2);
            hv_IsTopWaferNG = new HTuple();
            hv_IsBottomWaferNG = new HTuple();
            hv_IsHeadOfWaferNG = new HTuple();
            hv_IsTailOfWaferNG = new HTuple();
            try
            {
                hv_PI = 3.1415926;
                //*********************返回结果**************************
                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isTopWaferExist = 0;
                hv_isBottomWaferExist = 0;
                hv_isWidthResolutionCalibrateFinish = 0;
                hv_widthResolutionOut = -1;
                hv_isHeightResolutionCalibrateFinish = 0;
                hv_heightResolutionOut = -1;
                hv_isFilmShiftingOfTopWafer = 0;
                hv_isFilmShiftingOfBottomWafer = 0;
                hv_isFilmMissOfTopWafer = 0;
                hv_isFilmMissOfBottomWafer = 0;
                hv_isHeadAndTailFilmShiftingOfTopWafer = 0;
                hv_isHeadAndTailFilmShiftingOfBottomWafer = 0;
                hv_isEdgeDefectOfTopWafer = 0;
                hv_isEdgeDefectOfBottomWafer = 0;
                hv_isDistanceNG = 0;
                hv_isNextClass = 0;
                hv_isSurfaceDefectOfTopWafer = 0;
                hv_isSurfaceDefectOfBottomWafer = 0;
                hv_isSurfaceScratchOfTopWafer = 0;
                hv_isSurfaceScratchOfBottomWafer = 0;
                hv_isBrokenLineOfTopWafer = 0;
                hv_isBrokenLineOfBottomWafer = 0;
                hv_isStartWeldingNGOfBottomWafer = 0;
                hv_surfaceMeanGrayOfTopWaferOut = -1;
                hv_surfaceMeanGrayOfBottomWaferOut = -1;
                hv_isLinearityNGDetect = 0;
                hv_isBackGrayColor = 0;

                //上半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfTopWafer);
                //下半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfBottomWafer);

                //2020.05.13-初始化参数
                hv_CenterRowOfTopRegion = -1;
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterRowOfBottomRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //*********************局部变量**************************
                //半片占相机视野最小面积
                hv_minimumArea = (hv_width * hv_height) * 0.1;
                //半片占相机视野最大面积
                hv_maxArea = (hv_width * hv_height) * 0.9;

                //上半片边角检测区域
                ho_TopEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopEdgeDetectRegion);
                //下半片边角检测区域
                ho_BottomEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomEdgeDetectRegion);
                //上半片边角缺陷区域
                ho_totalEdgeDefectOfTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfTopRegion);
                //下半片边角缺陷区域
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfBottomRegion);

                //上下半片区域矫正是否完成
                hv_isTopRegionCalibrateFinish = 0;
                hv_isBottomRegionCalibrateFinish = 0;

                //膜带是否内缩屏蔽
                hv_isWeldShield = 0;
                //上半片左、右角点
                hv_RowOfLeftCornerPointTopRegion = -1;
                hv_ColumnOfLeftCornerPointTopRegion = -1;
                hv_RowOfRightCornerPointTopRegion = -1;
                hv_ColumnOfRightCornerPointTopRegion = -1;
                //下半片左、右角点
                hv_RowOfLeftCornerPointBottomRegion = -1;
                hv_ColumnOfLeftCornerPointBottomRegion = -1;
                hv_RowOfRightCornerPointBottomRegion = -1;
                hv_ColumnOfRightCornerPointBottomRegion = -1;
                //主栅线宽度(mm)
                hv_mainLineWidth = 0.6;
                //2020.04.29
                hv_twoMainLineDistance_COPY_INP_TMP = hv_twoMainLineDistance_COPY_INP_TMP / hv_widthResolution_COPY_INP_TMP;


                //缺角、表面、断栅缺陷检测函数对应参数初始化，避免异常发生
                ho_CalibrateTopAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateTopAroundRegion);
                ho_CalibrateBottomAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateBottomAroundRegion);
                ho_TopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegion);
                ho_BottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegion);
                ho_TopRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegionForDistance);
                ho_BottomRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegionForDistance);
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //*******************************************************
                //分割彩色图片，分别对应1-R、2-G、3-B
                ho_RedChannelImage.Dispose(); ho_GreenChannelImage.Dispose(); ho_BlueChannelImage.Dispose();
                HOperatorSet.Decompose3(ho_oriImage, out ho_RedChannelImage, out ho_GreenChannelImage,
                    out ho_BlueChannelImage);
                //图片预处理
                ho_ImageForFilmDetect.Dispose(); ho_ImageForWeldNGDetect.Dispose(); ho_ImageForHeadWeldNGDetect.Dispose(); ho_ImageForExtractROI.Dispose(); ho_RectangleForTopRegionExist.Dispose(); ho_RectangleForBottomRegionExist.Dispose(); ho_RegionOpening.Dispose(); ho_ImageForJudgeBackColor.Dispose();
                PretreatmentImage(ho_oriImage, out ho_ImageForFilmDetect, out ho_ImageForWeldNGDetect,
                    out ho_ImageForHeadWeldNGDetect, out ho_ImageForExtractROI, out ho_RectangleForTopRegionExist,
                    out ho_RectangleForBottomRegionExist, out ho_RegionOpening, out ho_ImageForJudgeBackColor,
                    hv_isBackDetect, hv_mainLineNum, hv_mainLineWidth, hv_height, hv_isUsingChinese,
                    hv_windowHandle, out hv_isTopWaferExist, out hv_isBottomWaferExist, out hv_exceptionInfo,
                    out hv_isPretreatmentReturn);
                //2020.05.09-添加返回主函数判断
                if ((int)(hv_isPretreatmentReturn) != 0)
                {
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_RegionDifference2.Dispose();
                    ho_RegionOpening2.Dispose();

                    return;
                }
                //得到区域
                ho_TopRegion.Dispose(); ho_BottomRegion.Dispose(); ho_TopRegionForDistance.Dispose(); ho_BottomRegionForDistance.Dispose(); ho_SelectedRegions.Dispose(); ho_RegionFillUp.Dispose(); ho_RegionOpening.Dispose();
                GetRegion(ho_RedChannelImage, ho_BlueChannelImage, ho_ImageForExtractROI, ho_ImageForWeldNGDetect,
                    out ho_TopRegion, out ho_BottomRegion, out ho_TopRegionForDistance, out ho_BottomRegionForDistance,
                    out ho_SelectedRegions, out ho_RegionFillUp, out ho_RegionOpening, hv_isBackDetect,
                    hv_width, hv_height, hv_grayOpenHeight, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_minimumArea, hv_maxArea, hv_isUsingChinese, hv_windowHandle, out hv_RowOfLeftTopColorCornerPointRegionOut,
                    out hv_ColOfLeftTopColorCornerPointRegionOut, out hv_RowOfRightTopColorCornerPointRegionOut,
                    out hv_ColOfRightTopColorCornerPointRegionOut, out hv_RowOfLeftBottomColorCornerPointRegionOut,
                    out hv_ColOfLeftBottomColorCornerPointRegionOut, out hv_RowOfRightBottomColorCornerPointRegionOut,
                    out hv_ColOfRightBottomColorCornerPointRegionOut, out hv_isFoundTopEdgeRegionOut,
                    out hv_isFoundBottomEdgeRegionOut, out hv_isException, out hv_exceptionInfo,
                    out hv_isGetRegionReturn);
                if ((int)(hv_isGetRegionReturn) != 0)
                {
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_RegionDifference2.Dispose();
                    ho_RegionOpening2.Dispose();

                    return;
                }

                //判断背面是否有印刷
                ho_BackGrayImageForWeldNGDetect.Dispose();
                JudgePrintingOfBack(ho_BlueChannelImage, ho_ImageForJudgeBackColor, ho_RectangleForTopRegionExist,
                    ho_RectangleForBottomRegionExist, ho_RegionOpening, out ho_BackGrayImageForWeldNGDetect,
                    hv_isBackDetect, hv_isTopWaferExist, hv_isUsingFilmMissDetect, out hv_isBackGrayColor);
                //2020.05.08-分辨率分开校准
                //宽度分辨率
                if ((int)(hv_isUsingWidthResolutionCalibrate) != 0)
                {
                    GetWidthResolutionOfImage(ho_ImageForFilmDetect, ho_BottomRegion, hv_width,
                        hv_height, hv_waferWidth, hv_mainLineNum, hv_widthResolution_COPY_INP_TMP,
                        hv_heightResolution_COPY_INP_TMP, hv_isBottomWaferExist, hv_isUsingChinese,
                        hv_windowHandle, hv_topShieldLengthOfBottomRegion, hv_bottomShieldLengthOfBottomRegion,
                        hv_locationMainLineThresh, hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange,
                        out hv_widthResolutionOut, out hv_isWidthResolutionCalibrateFinish, out hv_isException,
                        out hv_exceptionInfo);
                    hv_widthResolution_COPY_INP_TMP = hv_widthResolutionOut.Clone();
                }
                //高度分辨率
                if ((int)(hv_isUsingHeightResolutionCalibrate) != 0)
                {
                    GetHeightResolutionOfImage(ho_RedChannelImage, ho_TopRegion, hv_width, hv_height,
                        hv_isTopWaferExist, hv_viceLineInterval, hv_windowHandle, hv_isUsingChinese,
                        out hv_heightResolutionOut, out hv_isHeightResolutionCalibrateFinish,
                        out hv_isException, out hv_exceptionInfo);
                    hv_heightResolution_COPY_INP_TMP = hv_heightResolutionOut.Clone();
                }

                //上、下电池片Region边缘优化
                ho_CalibrateTopAroundRegion.Dispose(); ho_CalibrateBottomAroundRegion.Dispose(); ho_MaxRectangleTopRegion.Dispose(); ho_MaxRectangleBottomRegion.Dispose();
                OptimizeOfRegion(ho_ImageForExtractROI, ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance,
                    ho_BottomRegionForDistance, out ho_CalibrateTopAroundRegion, out ho_CalibrateBottomAroundRegion,
                    out ho_MaxRectangleTopRegion, out ho_MaxRectangleBottomRegion, hv_isBackDetect,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_isUsingWaferEdgeCalibration,
                    hv_isFoundTopEdgeRegionOut, hv_isFoundBottomEdgeRegionOut, hv_waferEdgeCalibrationRegionDilationPixel,
                    hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP, hv_width,
                    hv_height, hv_locationWaferEdgeThresh, hv_windowHandle, out hv_RowOfLeftCornerPointTopRegion,
                    out hv_ColumnOfLeftCornerPointTopRegion, out hv_RowOfRightCornerPointTopRegion,
                    out hv_ColumnOfRightCornerPointTopRegion, out hv_RowOfLeftCornerPointBottomRegion,
                    out hv_ColumnOfLeftCornerPointBottomRegion, out hv_RowOfRightCornerPointBottomRegion,
                    out hv_ColumnOfRightCornerPointBottomRegion);
                //2020.06.02-背面角点赋值
                if ((int)(hv_isBackDetect) != 0)
                {
                    hv_RowOfLeftTopColorCornerPointRegionOut = hv_RowOfLeftCornerPointTopRegion.Clone();
                    hv_ColOfLeftTopColorCornerPointRegionOut = hv_ColumnOfLeftCornerPointTopRegion.Clone();
                    hv_RowOfRightTopColorCornerPointRegionOut = hv_RowOfRightCornerPointTopRegion.Clone();
                    hv_ColOfRightTopColorCornerPointRegionOut = hv_ColumnOfRightCornerPointTopRegion.Clone();
                    hv_RowOfLeftBottomColorCornerPointRegionOut = hv_RowOfLeftCornerPointBottomRegion.Clone();
                    hv_ColOfLeftBottomColorCornerPointRegionOut = hv_ColumnOfLeftCornerPointBottomRegion.Clone();
                    hv_RowOfRightBottomColorCornerPointRegionOut = hv_RowOfRightCornerPointBottomRegion.Clone();
                    hv_ColOfRightBottomColorCornerPointRegionOut = hv_ColumnOfRightCornerPointBottomRegion.Clone();
                }

                //片/串间距检测
                DetectionOfSliceOrString(ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance,
                    ho_CalibrateTopAroundRegion, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_isFoundTopEdgeRegionOut, hv_isFoundBottomEdgeRegionOut, hv_isTopRegionCalibrateFinish,
                    hv_isBottomRegionCalibrateFinish, hv_isUsingDistanceDetect, hv_heightResolution_COPY_INP_TMP,
                    hv_minimumDistanceThresh, hv_maxDistanceThresh, hv_classDistanceThresh,
                    hv_RowOfLeftTopColorCornerPointRegionOut, hv_ColOfLeftTopColorCornerPointRegionOut,
                    hv_RowOfRightTopColorCornerPointRegionOut, hv_ColOfRightTopColorCornerPointRegionOut,
                    hv_RowOfLeftBottomColorCornerPointRegionOut, hv_ColOfLeftBottomColorCornerPointRegionOut,
                    hv_RowOfRightBottomColorCornerPointRegionOut, hv_ColOfRightBottomColorCornerPointRegionOut,
                    hv_windowHandle, out hv_isDistanceNG, out hv_isNextClass);

                //*膜检(膜偏、露白|膜短、膜失|头尾膜检)，起焊点异常||||MBB露白
                ho_totalFilmShiftingRegionOut.Dispose(); ho_totalFilmMissRegionOut.Dispose(); ho_totalHeadAndTailFilmShiftingRegionOut.Dispose(); ho_TopMainLineRegions.Dispose(); ho_BottomMainLineRegions.Dispose();
                DetectFilmOfMainLine(ho_RedChannelImage, ho_ImageForFilmDetect, ho_ImageForWeldNGDetect,
                    ho_ImageForHeadWeldNGDetect, ho_BackGrayImageForWeldNGDetect, ho_TopRegion,
                    ho_BottomRegion, out ho_totalFilmShiftingRegionOut, out ho_totalFilmMissRegionOut,
                    out ho_totalHeadAndTailFilmShiftingRegionOut, out ho_TopMainLineRegions,
                    out ho_BottomMainLineRegions, hv_width, hv_height, hv_windowHandle, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_mainLineNum, hv_isUsingFilmShiftingDetect,
                    hv_topShieldLengthOfTopRegion, hv_bottomShieldLengthOfTopRegion, hv_locationMainLineThresh,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmWidthThresh,
                    hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_isNextClass, hv_isUsingChinese, hv_isBackDetect,
                    hv_filmMissShieldLength, hv_filmMissShieldDetectRange, hv_isWeldShield,
                    hv_weldShieldLength, hv_isBackGrayColor, hv_firstDetectPosForTopRegion,
                    hv_secondDetectPosForTopRegion, hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion,
                    hv_twoMainLineDistance_COPY_INP_TMP, hv_topShieldLengthOfBottomRegion,
                    hv_bottomShieldLengthOfBottomRegion, out hv_isFilmShiftingOfTopWafer, out hv_isFilmShiftingOfBottomWafer,
                    out hv_isFilmMissOfTopWafer, out hv_isFilmMissOfBottomWafer, out hv_isHeadAndTailFilmShiftingOfTopWafer,
                    out hv_isHeadAndTailFilmShiftingOfBottomWafer, out hv_filmDistanceArrayOfTopWafer,
                    out hv_filmDistanceArrayOfBottomWafer, out hv_isStartWeldingNGOfBottomWafer,
                    out hv_IsDetectRegionNG, out hv_IsHeadOrTailNG, out hv_IsTopWaferNG, out hv_IsBottomWaferNG,
                    out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out hv_exceptionInfo, out hv_isException,
                    out hv_isDetectOfTopWafer, out hv_isDetectOfBottomWafer);

                //纵向延长上下半片主栅线区域，防止上下寻边不稳定导致的区域漏检
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //2019-4-17将1修改为6
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationRectangle1(ho_TopMainLineRegions, out ExpTmpOutVar_0,
                            6, 500);
                        ho_TopMainLineRegions.Dispose();
                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                    }
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //2019-4-17将1修改为6
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationRectangle1(ho_BottomMainLineRegions, out ExpTmpOutVar_0,
                            6, 500);
                        ho_BottomMainLineRegions.Dispose();
                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                    }
                }


                //2020.2.25
                HOperatorSet.AreaCenter(ho_TopRegionForDistance, out hv_TopRegionForDistanceArea,
                    out hv_Row1, out hv_Column1);
                if ((int)(new HTuple(hv_TopRegionForDistanceArea.TupleLessEqual(0))) != 0)
                {
                    ho_TopRegionForDistance.Dispose();
                    ho_TopRegionForDistance = ho_TopRegion.CopyObj(1, -1);
                }
                HOperatorSet.AreaCenter(ho_BottomRegionForDistance, out hv_BottomRegionForDistanceArea,
                    out hv_Row2, out hv_Column2);
                if ((int)(new HTuple(hv_BottomRegionForDistanceArea.TupleLessEqual(0))) != 0)
                {
                    ho_BottomRegionForDistance.Dispose();
                    ho_BottomRegionForDistance = ho_BottomRegion.CopyObj(1, -1);
                }


                //2019-4-18增加单多晶flag，用于角部缺角筛选
                hv_IsTopMonocrystalline = 0;
                hv_IsBottomMonocrystalline = 0;
                //消除单晶角部皮带交接处干扰
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //if (isUsingWaferEdgeCalibration == false)
                    HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                        out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                        out hv_HalfHeightOfTopRegion);
                    ho_MaxRectangleTopRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleTopRegion, hv_CenterRowOfTopRegion,
                        hv_CenterColumnOfTopRegion, hv_PhiOfTopRegion, hv_HalfWidthOfTopRegion,
                        hv_HalfHeightOfTopRegion);
                    //endif
                    //2019-3-20 判断单多晶
                    ho_RegionDifference1.Dispose();
                    HOperatorSet.Difference(ho_MaxRectangleTopRegion, ho_TopRegion, out ho_RegionDifference1
                        );
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference1, out ho_RegionOpening1,
                        20, 20);
                    HOperatorSet.RegionFeatures(ho_RegionOpening1, "area", out hv_TopTwoConnerRegionArea);
                    if ((int)(new HTuple(hv_TopTwoConnerRegionArea.TupleGreater(20000))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_TopRegion, out ExpTmpOutVar_0, 140);
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ExpTmpOutVar_0;
                        }
                        hv_IsTopMonocrystalline = 1;
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_TopRegion, out ExpTmpOutVar_0, 80);
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ExpTmpOutVar_0;
                        }
                    }
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //if (isUsingWaferEdgeCalibration == false)
                    HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                        out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                        out hv_HalfHeightOfBottomRegion);
                    ho_MaxRectangleBottomRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleBottomRegion, hv_CenterRowOfBottomRegion,
                        hv_CenterColumnOfBottomRegion, hv_PhiOfBottomRegion, hv_HalfWidthOfBottomRegion,
                        hv_HalfHeightOfBottomRegion);
                    //endif
                    ho_RegionDifference2.Dispose();
                    HOperatorSet.Difference(ho_MaxRectangleBottomRegion, ho_BottomRegion, out ho_RegionDifference2
                        );
                    ho_RegionOpening2.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference2, out ho_RegionOpening2,
                        20, 20);
                    HOperatorSet.RegionFeatures(ho_RegionOpening2, "area", out hv_BottomTwoConnerRegionArea);
                    if ((int)(new HTuple(hv_BottomTwoConnerRegionArea.TupleGreater(20000))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_BottomRegion, out ExpTmpOutVar_0, 140);
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ExpTmpOutVar_0;
                        }
                        hv_IsBottomMonocrystalline = 1;
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_BottomRegion, out ExpTmpOutVar_0, 80);
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ExpTmpOutVar_0;
                        }
                    }
                }

                //2019-6-12 边角、表面、断栅缺陷以及各个缺陷项上下片同时封装成函数，开启线程，并行处理
                //边角缺陷检测
                //par_start<EdgeDefectDetectFunction> :
                ho_totalEdgeDefectRegionOut.Dispose();
                EdgeDefectDetectFunction(ho_RedChannelImage, ho_SelectedRegions, ho_CalibrateTopAroundRegion,
                    ho_ImageForFilmDetect, ho_TopRegion, ho_BottomRegion, ho_ImageForExtractROI,
                    ho_TopMainLineRegions, ho_BottomMainLineRegions, ho_ImageForWeldNGDetect,
                    ho_CalibrateBottomAroundRegion, out ho_totalEdgeDefectRegionOut, hv_isUsingEdgeDefectDetect,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_isTopRegionCalibrateFinish,
                    hv_isBottomRegionCalibrateFinish, hv_windowHandle, hv_edgeBigDefectWidthThresh,
                    hv_edgeBigDefectHeightThresh, hv_isFullWafer, hv_height, hv_mainLineNum,
                    hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP, hv_edgeSmallDefectDetectDepth,
                    hv_edgeSmallDefectWidthThresh, hv_edgeSmallDefectHeightThresh, hv_edgeSmallDefectGrayThresh,
                    hv_IsTopMonocrystalline, hv_cornerDefectAreaRatioThresh, hv_isUsingChinese,
                    hv_IsBottomMonocrystalline, hv_weldWidthThresh, hv_isUsingStartWeldingDetect,
                    hv_isDetectOfTopWafer, hv_isDetectOfBottomWafer, out hv_isEdgeDefectOfTopWafer,
                    out hv_isEdgeDefectOfBottomWafer, out hv_isStartWeldingNGOut);
                //判断是否起焊点异常
                hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOfBottomWafer.TupleOr(
                    hv_isStartWeldingNGOut);

                //表面缺陷检测
                //par_start<SurfaceDefectDetectFunction> :
                ho_totalSurfaceDefectRegionOut.Dispose();
                SurfaceDefectDetectFunction(ho_RegionFillUp, ho_SelectedRegions, ho_TopRegion,
                    ho_BottomRegion, ho_TopMainLineRegions, ho_BottomMainLineRegions, ho_RedChannelImage,
                    ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOut, hv_isUsingSurfaceDefectDetect,
                    hv_surfaceDefectHeightThresh, hv_surfaceDefectWidthThresh, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_subMainLineNum, hv_PI, hv_filmMissShieldLength,
                    hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchHeightThresh,
                    hv_width, hv_height, hv_surfaceScratchWidthThresh, hv_filmMissShieldDetectRange,
                    hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                    hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion,
                    hv_CenterRowOfBottomRegion, hv_CenterColumnOfBottomRegion, hv_isDetectOfTopWafer,
                    hv_isDetectOfBottomWafer, out hv_isSurfaceDefectOfTopWafer, out hv_surfaceMeanGrayOfTopWaferOut,
                    out hv_surfaceMeanGrayOfBottomWaferOut, out hv_isSurfaceDefectOfBottomWafer,
                    out hv_isSurfaceScratchOfTopWafer, out hv_isSurfaceScratchOfBottomWafer);

                //断栅检测
                //par_start <BrokenLineDetectFunction> :
                ho_totalBrokenLineRegionOut.Dispose();
                BrokenLineDetectFunction(ho_TopMainLineRegions, ho_BottomRegion, ho_TopRegion,
                    ho_BottomMainLineRegions, ho_GreenChannelImage, ho_RedChannelImage, out ho_totalBrokenLineRegionOut,
                    hv_isUsingBrokenLineDetect, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_brokenLineDetectIndentDepth, hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP,
                    hv_isBackDetect, hv_brokenLineGrayThresh, hv_brokenLineWidthThresh, hv_brokenLineHeightThresh,
                    hv_isDetectOfTopWafer, hv_isDetectOfBottomWafer, out hv_isBrokenLineOfTopWafer,
                    out hv_isBrokenLineOfBottomWafer);
                //par_join ([EdgeDefectDetectFunction,SurfaceDefectDetectFunction,BrokenLineDetectFunction])

                //显示结果
                DisplayResult(ho_totalFilmShiftingRegionOut, ho_totalFilmMissRegionOut, ho_totalHeadAndTailFilmShiftingRegionOut,
                    ho_totalEdgeDefectRegionOut, ho_totalSurfaceDefectRegionOut, ho_totalBrokenLineRegionOut,
                    hv_isException, hv_windowHandle, hv_exceptionInfo, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_isFilmShiftingOfTopWafer, hv_isFilmShiftingOfBottomWafer,
                    hv_isFilmMissOfTopWafer, hv_isFilmMissOfBottomWafer, hv_isHeadAndTailFilmShiftingOfTopWafer,
                    hv_isHeadAndTailFilmShiftingOfBottomWafer, hv_isEdgeDefectOfTopWafer, hv_isEdgeDefectOfBottomWafer,
                    hv_isDistanceNG, hv_isSurfaceDefectOfTopWafer, hv_isSurfaceDefectOfBottomWafer,
                    hv_isSurfaceScratchOfTopWafer, hv_isSurfaceScratchOfBottomWafer, hv_isStartWeldingNGOfBottomWafer,
                    hv_isBrokenLineOfTopWafer, hv_isBrokenLineOfBottomWafer, hv_isUsingChinese);


                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_RegionOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_RegionDifference1.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionDifference2.Dispose();
                ho_RegionOpening2.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_RegionOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_RegionDifference1.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionDifference2.Dispose();
                ho_RegionOpening2.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectFunctionForFiveMainLine(HObject ho_imageForFilmDetect,
            HObject ho_detectRegion, HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingOfPartRegion,
            out HObject ho_filmMissOfPartRegion, out HObject ho_headAndTailFilmShiftingOfPartRegion,
            out HObject ho_mainLineRegion, HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_mainLineNum,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_locationMainLineThresh, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_isUsingHeadAndTailFilmShiftingDetect,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmDetectRange, HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_isWeldShield, HTuple hv_weldShieldLength, out HTuple hv_isException,
            out HTuple hv_exceptionInfo, out HTuple hv_isStartWeldingNG, out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingRegionOut, ho_filmMissRegionOut;
            HObject ho_headAndTailFilmShiftingRegionOut, ho_mainLineRegionOut;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_FilmDistanceArrayOfFirstMainLine = null;
            HTuple hv_isExceptionOut = null, hv_exceptionInfoOut = null;
            HTuple hv_isStartWeldingNGOut = null, hv_filmDistanceMax = null;
            HTuple hv_RowOfSecondMainLine = null, hv_ColumnOfSecondMainLine = null;
            HTuple hv_FilmDistanceArrayOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_FilmDistanceArrayThirdMainLine = null;
            HTuple hv_RowOfFourthMainLine = null, hv_ColumnOfFourthMainLine = null;
            HTuple hv_FilmDistanceArrayOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_FilmDistanceArrayOfFifthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_filmMissOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegion);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //局部变量
                //主栅线宽度(mm)
                //mainLineWidth := 0.6


                //输出
                ho_filmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingOfPartRegion);
                ho_filmMissOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissOfPartRegion);
                ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingOfPartRegion);
                ho_mainLineRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegion);


                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);


                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isStartWeldingNG = 0;
                //**********************************************
                //gray_opening_rect (imageForFilmDetect, ImageOpening, 5, 5)
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                if ((int)(new HTuple(hv_Phi.TupleGreater(hv_PI / 4))) != 0)
                {
                    hv_Phi = hv_Phi - (hv_PI / 2);
                }
                if ((int)(new HTuple(hv_Phi.TupleLess((-hv_PI) / 4))) != 0)
                {
                    hv_Phi = hv_Phi + (hv_PI / 2);
                }
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                //gray_opening_rect (imageForFilmDetect, imageOpening, 1, mainLineWidth / widthResolution)

                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, ho_ImageForHeadWeldNGDetect,
                    out ho_filmShiftingRegionOut, out ho_filmMissRegionOut, out ho_headAndTailFilmShiftingRegionOut,
                    out ho_mainLineRegionOut, hv_windowHandle, hv_width, hv_height, hv_widthResolution,
                    hv_heightResolution, hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi,
                    100, hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength, hv_bottomShieldLength,
                    hv_isUsingFilmShiftingDetect, hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect,
                    hv_weldWidthThresh, 1, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFirstMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }

                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, ho_ImageForHeadWeldNGDetect,
                    out ho_filmShiftingRegionOut, out ho_filmMissRegionOut, out ho_headAndTailFilmShiftingRegionOut,
                    out ho_mainLineRegionOut, hv_windowHandle, hv_width, hv_height, hv_widthResolution,
                    hv_heightResolution, hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine,
                    hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength,
                    hv_bottomShieldLength, hv_isUsingFilmShiftingDetect, hv_filmWidthThresh,
                    hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh, 2, hv_isUsingHeadAndTailFilmShiftingDetect,
                    hv_headAndTailFilmShieldLength, hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange,
                    hv_isUsingStartWeldingDetect, hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh,
                    hv_isTopRegion, hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength,
                    hv_filmMissShieldDetectRange, hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfSecondMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }

                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow.Clone();
                hv_ColumnOfThirdMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, ho_ImageForHeadWeldNGDetect,
                    out ho_filmShiftingRegionOut, out ho_filmMissRegionOut, out ho_headAndTailFilmShiftingRegionOut,
                    out ho_mainLineRegionOut, hv_windowHandle, hv_width, hv_height, hv_widthResolution,
                    hv_heightResolution, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi,
                    100, hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength, hv_bottomShieldLength,
                    hv_isUsingFilmShiftingDetect, hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect,
                    hv_weldWidthThresh, 3, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayThirdMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }

                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, ho_ImageForHeadWeldNGDetect,
                    out ho_filmShiftingRegionOut, out ho_filmMissRegionOut, out ho_headAndTailFilmShiftingRegionOut,
                    out ho_mainLineRegionOut, hv_windowHandle, hv_width, hv_height, hv_widthResolution,
                    hv_heightResolution, hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine,
                    hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength,
                    hv_bottomShieldLength, hv_isUsingFilmShiftingDetect, hv_filmWidthThresh,
                    hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh, 4, hv_isUsingHeadAndTailFilmShiftingDetect,
                    hv_headAndTailFilmShieldLength, hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange,
                    hv_isUsingStartWeldingDetect, hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh,
                    hv_isTopRegion, hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength,
                    hv_filmMissShieldDetectRange, hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFourthMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }

                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFifthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, ho_ImageForHeadWeldNGDetect,
                    out ho_filmShiftingRegionOut, out ho_filmMissRegionOut, out ho_headAndTailFilmShiftingRegionOut,
                    out ho_mainLineRegionOut, hv_windowHandle, hv_width, hv_height, hv_widthResolution,
                    hv_heightResolution, hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength, hv_bottomShieldLength,
                    hv_isUsingFilmShiftingDetect, hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect,
                    hv_weldWidthThresh, 5, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFifthMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }

                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectOfSingleMainLine(HObject ho_ImageOpening, HObject ho_DetectRegion,
            HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingRegionOut, out HObject ho_filmMissRegionOut,
            out HObject ho_headAndTailFilmShiftingRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_windowHandle, HTuple hv_imageWidth, HTuple hv_imageHeight, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_locationMainLineThresh, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_numOfMainLine,
            HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_isWeldShield, HTuple hv_weldShieldLength, out HTuple hv_FilmDistanceArray,
            out HTuple hv_isExceptionOut, out HTuple hv_exceptionInfoOut, out HTuple hv_isStartWeldingNG,
            out HTuple hv_filmDistanceMax)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingSmallRectangle = null;
            HObject ho_filmMissSmallRectangle = null, ho_headAndTailFilmShiftingSmallRectangle = null;
            HObject ho_MainLine, ho_EmptyObject;

            // Local control variables 

            HTuple hv_PI = null, hv_undetectMainLineCount = null;
            HTuple hv_DistanceRealWorldTemp = null, hv_DistanceRealWorld = null;
            HTuple hv_WeldShieldTime = null, hv_topShieldPixelLength = null;
            HTuple hv_bottomShieldPixelLength = null, hv_headAndTailFilmShieldPixelLength = null;
            HTuple hv_headAndTailFilmDetectPixelRange = null, hv_filmMissShieldPixelLength = null;
            HTuple hv_filmMissShieldPixelDetectRange = null, hv_weldShieldPixelLength = null;
            HTuple hv_stepPixelDistance = null, hv_cosValue = null;
            HTuple hv_sinValue = null, hv_TotalRowOfLeftMainLinePoints = null;
            HTuple hv_TotalColumnOfLeftMainLinePoints = null, hv_TotalRowOfRightMainLinePoints = null;
            HTuple hv_TotalColumnOfRightMainLinePoints = null, hv_isStartWeldingDetect = null;
            HTuple hv_TotalStep = null, hv_centerRowOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_centerColumnOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectStartTime = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectEndTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectStartTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectEndTime = new HTuple();
            HTuple hv_Index = new HTuple(), hv_RowTemp = new HTuple();
            HTuple hv_ColumnTemp = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowOfLeftMainLinePoints = new HTuple(), hv_ColumnOfLeftMainLinePoints = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_NumTempOfLeftPos = new HTuple(), hv_RowOfRightMainLinePoints = new HTuple();
            HTuple hv_ColumnOfRightMainLinePoints = new HTuple(), hv_NumTempOfRightPos = new HTuple();
            HTuple hv_RowStartPoint = new HTuple(), hv_ColumnStartPoint = new HTuple();
            HTuple hv_RowEndPoint = new HTuple(), hv_ColumnEndPoint = new HTuple();
            HTuple hv_DistanceTemp = new HTuple(), hv_startWeldingDetectPixelPos = new HTuple();
            HTuple hv_InverseTotalRowOfRightMainLinePoints = null;
            HTuple hv_InverseTotalColumnOfRightMainLinePoints = null;
            HTuple hv_TotalRow = null, hv_TotalColumn = null, hv_FilmShiftingRegionArea = null;
            HTuple hv_Row = null, hv_Column = null, hv_Length = null;
            HTuple hv_maxValue = null, hv_minValue = null, hv_meanValue = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_filmMissSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_MainLine);
            HOperatorSet.GenEmptyObj(out ho_EmptyObject);
            hv_FilmDistanceArray = new HTuple();
            hv_isExceptionOut = new HTuple();
            hv_exceptionInfoOut = new HTuple();
            hv_isStartWeldingNG = new HTuple();
            hv_filmDistanceMax = new HTuple();
            try
            {
                if ((int)((new HTuple((new HTuple((new HTuple(hv_isUsingFilmShiftingDetect.TupleEqual(
                    0))).TupleAnd(new HTuple(hv_isUsingFilmMissDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingHeadAndTailFilmShiftingDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingStartWeldingDetect.TupleEqual(0)))) != 0)
                {
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                hv_PI = 3.1415926;
                //*****输出*******
                ho_filmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingRegionOut);
                ho_filmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissRegionOut);
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isExceptionOut = 0;
                hv_exceptionInfoOut = "";
                hv_isStartWeldingNG = 0;

                hv_filmDistanceMax = "";

                //***局部变量****
                //未检测到主栅线计数
                hv_undetectMainLineCount = 0;
                //主栅线左右对应点距离默认为-1
                hv_DistanceRealWorldTemp = -1;
                hv_DistanceRealWorld = -1;
                //膜带内缩屏蔽次数
                hv_WeldShieldTime = 0;

                //常规膜检上屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_topShieldLength / hv_heightResolution, out hv_topShieldPixelLength);
                //常规膜检下屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_bottomShieldLength / hv_heightResolution, out hv_bottomShieldPixelLength);

                //头尾膜检屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmShieldLength / hv_heightResolution,
                    out hv_headAndTailFilmShieldPixelLength);
                //头尾膜检像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmDetectRange / hv_heightResolution,
                    out hv_headAndTailFilmDetectPixelRange);

                //膜失、膜短屏蔽缩进距离像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldLength / hv_heightResolution, out hv_filmMissShieldPixelLength);
                //膜失、膜短屏蔽范围像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldDetectRange / hv_heightResolution, out hv_filmMissShieldPixelDetectRange);

                //膜带内缩屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_weldShieldLength / hv_heightResolution, out hv_weldShieldPixelLength);


                //膜检采样像素级间隔,默认设置采样间隔为1.5mm
                HOperatorSet.TupleFloor(1.5 / hv_heightResolution, out hv_stepPixelDistance);
                //弧度Phi的Cos值
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                //弧度Phi的Sin值
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);

                //膜宽数组
                HOperatorSet.TupleGenConst(0, 0, out hv_FilmDistanceArray);
                //主栅线左侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfLeftMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfLeftMainLinePoints);
                //主栅线右侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfRightMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfRightMainLinePoints);

                //是否检测到起焊点异常
                hv_isStartWeldingDetect = 0;

                //膜失、膜短屏蔽区域下片上半部分是否存在
                //isTopPartContainsFilmMissShield := false
                //膜失、膜短屏蔽区域下片下半部分是否存在
                //isBottomPartContainsFilmMissShield := false

                //总寻点次数
                HOperatorSet.TupleFloor(hv_halfHeightOfSingleMainLineDetect / hv_stepPixelDistance,
                    out hv_TotalStep);
                //*******上片处理********
                if ((int)(hv_isTopRegion) != 0)
                {
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        //显示出头尾膜检区域
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }

                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);

                    //上半部分寻点处理
                    HTuple end_val90 = hv_TotalStep;
                    HTuple step_val90 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val90, step_val90); hv_Index = hv_Index.TupleAdd(step_val90))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleLess(
                                0))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleLess(0))))).TupleOr(
                                new HTuple(hv_RowEndPoint.TupleLess(0))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleLess(
                                0)))) != 0)
                            {
                                continue;
                            }

                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)

                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                }
                            }
                        }
                    }

                    //下半部分寻点处理
                    HTuple end_val178 = 1;
                    HTuple step_val178 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val178, step_val178); hv_Index = hv_Index.TupleAdd(step_val178))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)

                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }

                            //膜短、膜失检测
                            if ((int)(hv_isUsingFilmMissDetect) != 0)
                            {
                                if ((int)(new HTuple(hv_Index.TupleEqual(2))) != 0)
                                {
                                    if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                        new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }

                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 40, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 40, 0.3);
                                        ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                            hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_headAndTailFilmShiftingRegionOut.Dispose();
                                            ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectEndTime.TupleLess(
                                        hv_HeadAndTailFilmDetectStartTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            //if (Index >= FilmShiftingAndFilmMissDetectEndTime)
                            hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                            if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                            {
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_Index.TupleEqual(2))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }
                            //endif
                        }
                    }

                    //*******下片处理********
                }
                else
                {
                    //显示出头尾膜检区域
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }

                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);

                    //膜带内缩屏蔽次数
                    if ((int)(hv_isWeldShield) != 0)
                    {
                        HOperatorSet.TupleFloor(hv_weldShieldPixelLength / hv_stepPixelDistance,
                            out hv_WeldShieldTime);
                    }


                    //膜短、膜失屏蔽起始次数
                    //tuple_floor (filmMissShieldPixelLength/stepPixelDistance, filmMissShieldStartTime)
                    //膜短、膜失屏蔽截止次数
                    //tuple_floor ((filmMissShieldPixelLength + filmMissShieldPixelDetectRange)/stepPixelDistance, filmMissShieldEndTime)

                    //10.31 判断膜失屏蔽区域处于下半片上下哪部分
                    //if (filmMissShieldStartTime >= TotalStep)
                    //filmMissShieldStartTime := 2*TotalStep - filmMissShieldStartTime
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //isBottomPartContainsFilmMissShield := true
                    //elseif (filmMissShieldEndTime <= TotalStep and filmMissShieldEndTime>=1)
                    //isTopPartContainsFilmMissShield := true
                    //elseif (filmMissShieldStartTime>=0 and filmMissShieldEndTime>1)
                    //isTopPartContainsFilmMissShield := true
                    //isBottomPartContainsFilmMissShield := true
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //endif

                    //上半部分寻点处理
                    //2019-4-11 2修改为1防止有膜带的时候断裂造成漏检
                    HTuple end_val344 = hv_TotalStep;
                    HTuple step_val344 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val344, step_val344); hv_Index = hv_Index.TupleAdd(step_val344))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //7.18添加背面记录栅线距离条件
                            //if (isBackDetect)
                            //if (Index >= FilmShiftingAndFilmMissDetectStartTime)
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif
                            //else
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif

                            //判断起焊点是否异常2019-5-23增加Index >= 2避免第一个点找到片间距的膜带
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(2))) != 0)
                            {
                                if ((int)(hv_isUsingStartWeldingDetect) != 0)
                                {
                                    if ((int)(hv_isStartWeldingDetect.TupleNot()) != 0)
                                    {
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_weldWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            hv_isStartWeldingDetect = 1;
                                            hv_startWeldingDetectPixelPos = hv_Index * hv_stepPixelDistance;
                                            if ((int)((new HTuple(hv_startWeldingDetectPixelPos.TupleGreaterEqual(
                                                hv_startWeldingDistanceMinThresh / hv_heightResolution))).TupleAnd(
                                                new HTuple(hv_startWeldingDetectPixelPos.TupleLessEqual(hv_startWeldingDistanceMaxThresh / hv_heightResolution)))) != 0)
                                            {
                                                hv_isStartWeldingNG = 0;
                                            }
                                            else
                                            {
                                                //2019-4-11添加显示
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                        //避免无焊带检测不到起焊点不报NG问题
                                        if ((int)(new HTuple(hv_Index.TupleEqual(hv_TotalStep))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_isStartWeldingDetect.TupleEqual(0))) != 0)
                                            {
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                    }
                                }
                            }

                            //2020.04.22 膜短、膜失检测
                            if ((int)(hv_isUsingFilmMissDetect) != 0)
                            {
                                //*                 if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                                if ((int)(new HTuple(hv_Index.TupleEqual(2 + hv_WeldShieldTime))) != 0)
                                {
                                    if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                        new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }


                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect == true and isWeldShield == false)
                                //if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //10.31 添加膜失、膜短屏蔽区域各判断条件
                                //判断如果膜失、膜短屏蔽区域上下部分都存在
                                //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                //if (Index < filmMissShieldStartTime)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域只存在上半部分
                                //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                                //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                                //elseif (isTopPartContainsFilmMissShield == false)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    //2019-5-22避免漏检
                                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi,
                                        hv_halfWidthOfSingleMainLineDetect, hv_stepPixelDistance / 2, hv_imageWidth,
                                        hv_imageHeight, "bilinear", out hv_MeasureHandle);
                                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //主栅线左侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageForHeadWeldNGDetect, hv_MeasureHandle,
                                        1, hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                                        out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                                    //主栅线右侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                        "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                        out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                                    //判断是否检测到主栅线左右侧点
                                    if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(
                                        new HTuple(hv_NumTempOfRightPos.TupleGreater(0)))) != 0)
                                    {
                                        //计算主栅线单个小检测框中左右边缘点的像素距离
                                        HOperatorSet.DistancePp(hv_RowOfLeftMainLinePoints, hv_ColumnOfLeftMainLinePoints,
                                            hv_RowOfRightMainLinePoints, hv_ColumnOfRightMainLinePoints,
                                            out hv_DistanceTemp);
                                        hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                                hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_headAndTailFilmShiftingRegionOut.Dispose();
                                                ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                            }
                                            //赋值左侧的点
                                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(
                                                0);
                                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                                            //赋值右侧的点
                                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(
                                                0);
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectStartTime.TupleLess(
                                        hv_HeadAndTailFilmDetectEndTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                            if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(1))) != 0)
                            {
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_Index.TupleEqual(2 + hv_WeldShieldTime))) != 0)
                                    {
                                        //*                         if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }

                            //if (Index >= FilmShiftingAndFilmMissDetectStartTime and isWeldShield == false)
                            //undetectMainLineCount := undetectMainLineCount + 1
                            //2019-4-10 3改为1
                            //if (undetectMainLineCount >=1)
                            //膜短、膜失检测
                            //if (isUsingFilmMissDetect)
                            //if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //10.31 添加膜失、膜短屏蔽区域各判断条件
                            //判断如果膜失、膜短屏蔽区域上下部分都存在
                            //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                            //if (Index < filmMissShieldStartTime)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //如果膜失、膜短屏蔽区域只存在上半部分
                            //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                            //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                            //elseif (isTopPartContainsFilmMissShield == false)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //endif
                            //endif
                            //endif
                            //endif
                        }
                    }

                    //下半部分寻点处理
                    HTuple end_val588 = 1;
                    HTuple step_val588 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val588, step_val588); hv_Index = hv_Index.TupleAdd(step_val588))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleGreaterEqual(
                                hv_imageHeight))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleGreaterEqual(
                                hv_imageWidth))))).TupleOr(new HTuple(hv_RowEndPoint.TupleGreaterEqual(
                                hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleGreaterEqual(
                                hv_imageWidth)))) != 0)
                            {
                                continue;
                            }

                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)

                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (Index <= 5)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //10.31 添加膜失、膜短屏蔽区域各判断条件
                                //判断如果膜失、膜短屏蔽区域上下部分都存在
                                //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                //if (Index < filmMissShieldEndTime)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域只存在下半部分
                                //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                //elseif (isBottomPartContainsFilmMissShield == false)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 修改膜宽数组记录条件
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //if (Index <= 5)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //10.31 添加膜失、膜短屏蔽区域各判断条件
                                    //判断如果膜失、膜短屏蔽区域上下部分都存在
                                    //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                    //if (Index < filmMissShieldEndTime)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域只存在下半部分
                                    //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                    //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                    //elseif (isBottomPartContainsFilmMissShield == false)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //endif
                                    //endif
                                }
                            }
                        }
                    }
                }

                //********根据主栅线边缘点提取出主栅线Region***********
                if ((int)((new HTuple((new HTuple(hv_TotalRowOfRightMainLinePoints.TupleLength()
                    )).TupleLessEqual(0))).TupleOr(new HTuple((new HTuple(hv_TotalRowOfLeftMainLinePoints.TupleLength()
                    )).TupleLessEqual(0)))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }

                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleInverse(hv_TotalRowOfRightMainLinePoints, out hv_InverseTotalRowOfRightMainLinePoints);
                HOperatorSet.TupleInverse(hv_TotalColumnOfRightMainLinePoints, out hv_InverseTotalColumnOfRightMainLinePoints);
                HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_InverseTotalRowOfRightMainLinePoints,
                    out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_InverseTotalColumnOfRightMainLinePoints,
                    out hv_TotalColumn);
                HOperatorSet.TupleConcat(hv_TotalRow, hv_TotalRowOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumn, hv_TotalColumnOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalColumn);
                ho_MainLine.Dispose();
                HOperatorSet.GenRegionPolygon(out ho_MainLine, hv_TotalRow, hv_TotalColumn);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_MainLine, out ho_mainLineRegionOut);

                //根据主栅线左右侧点提取出主栅线Region
                //获取检测区域外轮廓
                //gen_contour_region_xld (DetectRegion, DetectRegionContours, 'border')
                //左侧点拟合直线
                //gen_contour_polygon_xld (subLeftMainLine, TotalRowOfLeftMainLinePoints, TotalColumnOfLeftMainLinePoints)
                //fit_line_contour_xld (subLeftMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, AngleOfSubLeftMainLine)
                //左侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, RowOfLeftIntersectionPoints, ColumnOfLeftInterSectionPoints, IsOverlapping)
                //右侧点拟合直线
                //gen_contour_polygon_xld (subRightMainLine, TotalRowOfRightMainLinePoints, TotalColumnOfRightMainLinePoints)
                //fit_line_contour_xld (subRightMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, AngleOfSubRightMainLine)
                //右侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, RowOfRightIntersectionPoints, ColumnOfRightInterSectionPoints, IsOverlapping)
                //主栅线矩形
                //tuple_concat (RowOfLeftIntersectionPoints, RowOfRightIntersectionPoints, RowTempConcat)
                //tuple_concat (ColumnOfLeftInterSectionPoints, ColumnOfRightInterSectionPoints, ColumnTempConcat)
                //gen_contour_polygon_xld (TempContour, RowTempConcat, ColumnTempConcat)
                //smallest_rectangle2_xld (TempContour, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //gen_rectangle2 (mainLineRegionOut, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)

                //在主栅线中心显示结果
                ho_EmptyObject.Dispose();
                HOperatorSet.GenEmptyObj(out ho_EmptyObject);
                HOperatorSet.AreaCenter(ho_filmShiftingRegionOut, out hv_FilmShiftingRegionArea,
                    out hv_Row, out hv_Column);
                HOperatorSet.TupleLength(hv_FilmDistanceArray, out hv_Length);
                if ((int)(new HTuple(hv_Length.TupleLessEqual(0))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }

                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".2f", out hv_maxValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMin(), ".2f", out hv_minValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMean(), ".2f", out hv_meanValue);

                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".3f", out hv_filmDistanceMax);
                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                {
                    if ((int)(new HTuple(hv_FilmShiftingRegionArea.TupleGreater(0))) != 0)
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect,
                            hv_centerColumnOfSingleMainLineDetect - 450, "red");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red')

                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                    }
                    else
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect - 100,
                            hv_centerColumnOfSingleMainLineDetect - 450, "green");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green')

                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                    }
                }
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void FindEdgePointsFuction(HObject ho_Image, HObject ho_HitRegion, HObject ho_HitRegionForDistance,
            HTuple hv_WindowHandle, HTuple hv_ImageWidth, HTuple hv_ImageHeight, HTuple hv_CenterRow,
            HTuple hv_CenterColumn, HTuple hv_Angle, HTuple hv_HalfWidth, HTuple hv_HalfHeight,
            HTuple hv_Step, HTuple hv_LocationThresh, HTuple hv_Thransition, HTuple hv_Select,
            out HTuple hv_RowOfEdgePoints, out HTuple hv_ColumnOfEdgePoints)
        {




            // Local iconic variables 

            // Local control variables 

            HTuple hv_PI = null, hv_TotalStep = null, hv_Index = null;
            HTuple hv_rowtemp = new HTuple(), hv_cowtemp = new HTuple();
            HTuple hv_MeasureHandle = new HTuple(), hv_Rows = new HTuple();
            HTuple hv_Columns = new HTuple(), hv_Amplitude = new HTuple();
            HTuple hv_Distance = new HTuple(), hv_Num = new HTuple();
            HTuple hv_i = new HTuple(), hv_DistanceMin = new HTuple();
            HTuple hv_DistanceMax = new HTuple();
            // Initialize local and output iconic variables 
            hv_PI = 3.1415926;
            //返回值
            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfEdgePoints);
            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfEdgePoints);
            //循环找点次数
            hv_TotalStep = hv_HalfHeight / hv_Step;
            //左半边
            HTuple end_val7 = 1;
            HTuple step_val7 = -1;
            for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val7, step_val7); hv_Index = hv_Index.TupleAdd(step_val7))
            {
                hv_rowtemp = hv_CenterRow - ((hv_Index * hv_Step) * (((hv_Angle - (0.5 * hv_PI))).TupleSin()
                    ));
                hv_cowtemp = hv_CenterColumn - ((hv_Index * hv_Step) * (((hv_Angle - (0.5 * hv_PI))).TupleCos()
                    ));
                //disp_rectangle2 (WindowHandle, rowtemp, cowtemp, Angle, HalfWidth, 0.5*Step)
                HOperatorSet.GenMeasureRectangle2(hv_rowtemp, hv_cowtemp, hv_Angle, hv_HalfWidth,
                    0.5 * hv_Step, hv_ImageWidth, hv_ImageHeight, "nearest_neighbor", out hv_MeasureHandle);
                HOperatorSet.MeasurePos(ho_Image, hv_MeasureHandle, 1, hv_LocationThresh, hv_Thransition,
                    hv_Select, out hv_Rows, out hv_Columns, out hv_Amplitude, out hv_Distance);
                HOperatorSet.CloseMeasure(hv_MeasureHandle);

                HOperatorSet.TupleLength(hv_Rows, out hv_Num);
                if ((int)(new HTuple(hv_Num.TupleGreater(1))) != 0)
                {
                    hv_i = 0;
                    do
                    {
                        //disp_cross (WindowHandle, Rows[i], Columns[i], 20, -0.3)
                        //判断定位到的点是否击中上硅片有效区域
                        HOperatorSet.DistancePr(ho_HitRegion, hv_Rows.TupleSelect(hv_i), hv_Columns.TupleSelect(
                            hv_i), out hv_DistanceMin, out hv_DistanceMax);
                        if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(hv_i),
                                hv_Columns.TupleSelect(hv_i), 20, -0.3);
                            HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(hv_i),
                                out hv_RowOfEdgePoints);
                            HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                hv_i), out hv_ColumnOfEdgePoints);
                        }
                        else
                        {
                            HOperatorSet.DistancePr(ho_HitRegionForDistance, hv_Rows.TupleSelect(
                                hv_i), hv_Columns.TupleSelect(hv_i), out hv_DistanceMin, out hv_DistanceMax);
                            if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                            {
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(
                                    hv_i), hv_Columns.TupleSelect(hv_i), 20, -0.3);
                                HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(hv_i),
                                    out hv_RowOfEdgePoints);
                                HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                    hv_i), out hv_ColumnOfEdgePoints);
                            }
                        }
                        hv_i = hv_i + 1;
                    }
                    while ((int)((new HTuple(hv_i.TupleGreaterEqual(hv_Num))).TupleOr(new HTuple(hv_DistanceMin.TupleEqual(
                        0.0)))) == 0);
                }
                else if ((int)(new HTuple(hv_Num.TupleEqual(1))) != 0)
                {
                    //判断定位到的点是否击中上硅片有效区域
                    HOperatorSet.DistancePr(ho_HitRegion, hv_Rows.TupleSelect(0), hv_Columns.TupleSelect(
                        0), out hv_DistanceMin, out hv_DistanceMax);
                    if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(0),
                            hv_Columns.TupleSelect(0), 20, -0.3);
                        HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(0), out hv_RowOfEdgePoints);
                        HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                            0), out hv_ColumnOfEdgePoints);
                    }
                    else
                    {
                        HOperatorSet.DistancePr(ho_HitRegionForDistance, hv_Rows.TupleSelect(0),
                            hv_Columns.TupleSelect(0), out hv_DistanceMin, out hv_DistanceMax);
                        if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(0),
                                hv_Columns.TupleSelect(0), 20, -0.3);
                            HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(0),
                                out hv_RowOfEdgePoints);
                            HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                0), out hv_ColumnOfEdgePoints);
                        }
                    }
                }
            }
            //右半边
            HTuple end_val58 = hv_TotalStep;
            HTuple step_val58 = 1;
            for (hv_Index = 1; hv_Index.Continue(end_val58, step_val58); hv_Index = hv_Index.TupleAdd(step_val58))
            {
                hv_rowtemp = hv_CenterRow + ((hv_Index * hv_Step) * (((hv_Angle - (0.5 * hv_PI))).TupleSin()
                    ));
                hv_cowtemp = hv_CenterColumn + ((hv_Index * hv_Step) * (((hv_Angle - (0.5 * hv_PI))).TupleCos()
                    ));
                //disp_rectangle2 (WindowHandle, rowtemp, cowtemp, Angle, HalfWidth, 0.5*Step)
                HOperatorSet.GenMeasureRectangle2(hv_rowtemp, hv_cowtemp, hv_Angle, hv_HalfWidth,
                    0.5 * hv_Step, hv_ImageWidth, hv_ImageHeight, "nearest_neighbor", out hv_MeasureHandle);
                HOperatorSet.MeasurePos(ho_Image, hv_MeasureHandle, 1, hv_LocationThresh, hv_Thransition,
                    hv_Select, out hv_Rows, out hv_Columns, out hv_Amplitude, out hv_Distance);
                HOperatorSet.CloseMeasure(hv_MeasureHandle);

                HOperatorSet.TupleLength(hv_Rows, out hv_Num);
                if ((int)(new HTuple(hv_Num.TupleGreater(1))) != 0)
                {
                    hv_i = 0;
                    do
                    {
                        //disp_cross (WindowHandle, Rows[i], Columns[i], 20, -0.3)
                        //判断定位到的点是否击中上硅片有效区域
                        HOperatorSet.DistancePr(ho_HitRegion, hv_Rows.TupleSelect(hv_i), hv_Columns.TupleSelect(
                            hv_i), out hv_DistanceMin, out hv_DistanceMax);
                        if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(hv_i),
                                hv_Columns.TupleSelect(hv_i), 20, -0.3);
                            HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(hv_i),
                                out hv_RowOfEdgePoints);
                            HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                hv_i), out hv_ColumnOfEdgePoints);
                        }
                        else
                        {
                            HOperatorSet.DistancePr(ho_HitRegionForDistance, hv_Rows.TupleSelect(
                                hv_i), hv_Columns.TupleSelect(hv_i), out hv_DistanceMin, out hv_DistanceMax);
                            if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                            {
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(
                                    hv_i), hv_Columns.TupleSelect(hv_i), 20, -0.3);
                                HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(hv_i),
                                    out hv_RowOfEdgePoints);
                                HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                    hv_i), out hv_ColumnOfEdgePoints);
                            }
                        }
                        hv_i = hv_i + 1;
                    }
                    while ((int)((new HTuple(hv_i.TupleGreaterEqual(hv_Num))).TupleOr(new HTuple(hv_DistanceMin.TupleEqual(
                        0.0)))) == 0);
                }
                else if ((int)(new HTuple(hv_Num.TupleEqual(1))) != 0)
                {
                    //判断定位到的点是否击中上硅片有效区域
                    HOperatorSet.DistancePr(ho_HitRegion, hv_Rows.TupleSelect(0), hv_Columns.TupleSelect(
                        0), out hv_DistanceMin, out hv_DistanceMax);
                    if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(0),
                            hv_Columns.TupleSelect(0), 20, -0.3);
                        HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(0), out hv_RowOfEdgePoints);
                        HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                            0), out hv_ColumnOfEdgePoints);
                    }
                    else
                    {
                        HOperatorSet.DistancePr(ho_HitRegionForDistance, hv_Rows.TupleSelect(0),
                            hv_Columns.TupleSelect(0), out hv_DistanceMin, out hv_DistanceMax);
                        if ((int)(new HTuple(hv_DistanceMin.TupleEqual(0.0))) != 0)
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_Rows.TupleSelect(0),
                                hv_Columns.TupleSelect(0), 20, -0.3);
                            HOperatorSet.TupleConcat(hv_RowOfEdgePoints, hv_Rows.TupleSelect(0),
                                out hv_RowOfEdgePoints);
                            HOperatorSet.TupleConcat(hv_ColumnOfEdgePoints, hv_Columns.TupleSelect(
                                0), out hv_ColumnOfEdgePoints);
                        }
                    }
                }
            }

            return;
        }

        public void disp_message_UserDefine(HTuple hv_windowHandle, HTuple hv_messageInfo,
            HTuple hv_row, HTuple hv_column, HTuple hv_color)
        {


            // Initialize local and output iconic variables 
            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_color);
            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_row, hv_column);
            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_messageInfo);
            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

            return;
        }

        public void DisplayResult(HObject ho_totalFilmShiftingRegion, HObject ho_totalFilmMissRegion,
            HObject ho_totalHeadAndTailFilmShiftingRegion, HObject ho_totalEdgeDefectRegion,
            HObject ho_totalSurfaceDefectRegion, HObject ho_totalBrokenLineRegion, HTuple hv_IsException,
            HTuple hv_WindowHandle, HTuple hv_ExceptionInfo, HTuple hv_IsTopWaferExist,
            HTuple hv_IsBottomWaferExist, HTuple hv_IsFilmShiftingOfTopWafer, HTuple hv_IsFilmShiftingOfBottomWafer,
            HTuple hv_IsFilmMissOfTopWafer, HTuple hv_IsFilmMissOfBottomWafer, HTuple hv_IsHeadAndTailFilmShiftingOfTopWafer,
            HTuple hv_IsHeadAndTailFilmShiftingOfBottomWafer, HTuple hv_IsEdgeDefectOfTopWafer,
            HTuple hv_IsEdgeDefectOfBottomWafer, HTuple hv_IsDistanceNG, HTuple hv_IsSurfaceDefectOfTopWafer,
            HTuple hv_IsSurfaceDefectOfBottomWafer, HTuple hv_IsSurfaceScratchOfTopWafer,
            HTuple hv_IsSurfaceScratchOfBottomWafer, HTuple hv_IsStartWeldingNG, HTuple hv_IsBrokenLineOfTopWafer,
            HTuple hv_IsBrokenLineOfBottomWafer, HTuple hv_IsUsingChinese)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_totalSurfaceDefectRegionForShow;
            HObject ho_ObjectSelected = null, ho_totalBrokenLineRegionForShow;

            // Local control variables 

            HTuple hv_info = new HTuple(), hv_SurfaceDefectNum = null;
            HTuple hv_j = null, hv_BrokenLineNum = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionForShow);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionForShow);
            try
            {
                if ((int)(hv_IsException) != 0)
                {
                    disp_message_UserDefine(hv_WindowHandle, hv_ExceptionInfo, 100, 12, "red");
                    //disp_message (WindowHandle, ExceptionInfo, 'window', 20, 12, 'red', 'true')
                }
                if ((int)(new HTuple(hv_IsTopWaferExist.TupleEqual(0))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "上片空";
                    }
                    else
                    {
                        hv_info = "No Upper Cell";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 250, 12, "red");
                    //disp_message (WindowHandle, '上片空', 'window', 45, 12, 'red', 'true')
                }
                if ((int)(new HTuple(hv_IsBottomWaferExist.TupleEqual(0))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "下片空";
                    }
                    else
                    {
                        hv_info = "No Lower Cell";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 250, 12, "red");
                    //disp_message (WindowHandle, '下片空', 'window', 45, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsFilmShiftingOfTopWafer.TupleEqual(1))).TupleOr(new HTuple(hv_IsFilmShiftingOfBottomWafer.TupleEqual(
                    1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "膜偏|露白";
                    }
                    else
                    {
                        hv_info = "Film Offset | Ribbon Offset";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 400, 12, "red");
                    //disp_message (WindowHandle, '膜偏|露白', 'window', 70, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsFilmMissOfTopWafer.TupleEqual(1))).TupleOr(new HTuple(hv_IsFilmMissOfBottomWafer.TupleEqual(
                    1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "膜短|膜失";
                    }
                    else
                    {
                        hv_info = "Film Short | Film Missing";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 550, 12, "red");
                    //disp_message (WindowHandle, '膜短|膜失', 'window', 95, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsHeadAndTailFilmShiftingOfTopWafer.TupleEqual(1))).TupleOr(
                    new HTuple(hv_IsHeadAndTailFilmShiftingOfBottomWafer.TupleEqual(1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "头尾膜偏|露白";
                    }
                    else
                    {
                        hv_info = "H&T Film Offset | Ribbon Offset";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 700, 12, "red");
                    //disp_message (WindowHandle, '头尾膜偏|露白', 'window', 120, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsEdgeDefectOfTopWafer.TupleEqual(1))).TupleOr(new HTuple(hv_IsEdgeDefectOfBottomWafer.TupleEqual(
                    1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "边角破损";
                    }
                    else
                    {
                        hv_info = "Edge/Corner Damage";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 850, 12, "red");
                    //disp_message (WindowHandle, '边角破损', 'window', 145, 12, 'red', 'true')
                }
                if ((int)(hv_IsDistanceNG) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "片间距异常";
                    }
                    else
                    {
                        hv_info = "Cell Spacing Error";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 1000, 12, "red");
                    //disp_message (WindowHandle, '片间距异常', 'window', 170, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsSurfaceDefectOfTopWafer.TupleEqual(1))).TupleOr(
                    new HTuple(hv_IsSurfaceDefectOfBottomWafer.TupleEqual(1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "表面缺陷";
                    }
                    else
                    {
                        hv_info = "Surface Defects";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 100, 3850, "red");
                    //disp_message (WindowHandle, '表面脏污', 'window', 195, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsSurfaceScratchOfTopWafer.TupleEqual(1))).TupleOr(
                    new HTuple(hv_IsSurfaceScratchOfBottomWafer.TupleEqual(1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "表面划痕";
                    }
                    else
                    {
                        hv_info = "Surface Scratch";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 250, 3850, "red");
                    //disp_message (WindowHandle, '表面脏污', 'window', 195, 12, 'red', 'true')
                }
                if ((int)(hv_IsStartWeldingNG) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "起焊点异常";
                    }
                    else
                    {
                        hv_info = "Cell To Rib Head Dist Error";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 400, 3850, "red");
                    //disp_message (WindowHandle, '起焊点异常', 'window', 1900, 12, 'red', 'true')
                }
                if ((int)((new HTuple(hv_IsBrokenLineOfTopWafer.TupleEqual(1))).TupleOr(new HTuple(hv_IsBrokenLineOfBottomWafer.TupleEqual(
                    1)))) != 0)
                {
                    if ((int)(hv_IsUsingChinese) != 0)
                    {
                        hv_info = "断栅";
                    }
                    else
                    {
                        hv_info = "Broken Finger";
                    }
                    disp_message_UserDefine(hv_WindowHandle, hv_info, 550, 3850, "red");
                    //disp_message (WindowHandle, '断栅', 'window', 2100, 12, 'red', 'true')
                }

                //显示常规膜偏、露白区域
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                HOperatorSet.DispRegion(ho_totalFilmShiftingRegion, hv_ExpDefaultWinHandle);
                //显示膜短、模式区域
                HOperatorSet.DispRegion(ho_totalFilmMissRegion, hv_ExpDefaultWinHandle);
                //显示头尾膜偏区域
                HOperatorSet.DispRegion(ho_totalHeadAndTailFilmShiftingRegion, hv_ExpDefaultWinHandle);
                //显示边缘破损区域
                HOperatorSet.DispRegion(ho_totalEdgeDefectRegion, hv_ExpDefaultWinHandle);
                //显示表面缺陷区域
                ho_totalSurfaceDefectRegionForShow.Dispose();
                HOperatorSet.Connection(ho_totalSurfaceDefectRegion, out ho_totalSurfaceDefectRegionForShow
                    );
                HOperatorSet.CountObj(ho_totalSurfaceDefectRegionForShow, out hv_SurfaceDefectNum);
                HTuple end_val116 = hv_SurfaceDefectNum;
                HTuple step_val116 = 1;
                for (hv_j = 1; hv_j.Continue(end_val116, step_val116); hv_j = hv_j.TupleAdd(step_val116))
                {
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_totalSurfaceDefectRegionForShow, out ho_ObjectSelected,
                        hv_j);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ExpTmpOutVar_0, 10);
                        ho_ObjectSelected.Dispose();
                        ho_ObjectSelected = ExpTmpOutVar_0;
                    }
                    HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                }
                //显示断栅区域
                ho_totalBrokenLineRegionForShow.Dispose();
                HOperatorSet.Connection(ho_totalBrokenLineRegion, out ho_totalBrokenLineRegionForShow
                    );
                HOperatorSet.CountObj(ho_totalBrokenLineRegionForShow, out hv_BrokenLineNum);
                HTuple end_val124 = hv_BrokenLineNum;
                HTuple step_val124 = 1;
                for (hv_j = 1; hv_j.Continue(end_val124, step_val124); hv_j = hv_j.TupleAdd(step_val124))
                {
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_totalBrokenLineRegionForShow, out ho_ObjectSelected,
                        hv_j);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ExpTmpOutVar_0, 10);
                        ho_ObjectSelected.Dispose();
                        ho_ObjectSelected = ExpTmpOutVar_0;
                    }
                    HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                }

                ho_totalSurfaceDefectRegionForShow.Dispose();
                ho_ObjectSelected.Dispose();
                ho_totalBrokenLineRegionForShow.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_totalSurfaceDefectRegionForShow.Dispose();
                ho_ObjectSelected.Dispose();
                ho_totalBrokenLineRegionForShow.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForNineMainLine(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_locationMainLineThresh, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffset, HTuple hv_weldWidthThresh,
            HTuple hv_isTopRegion, HTuple hv_firstDetectPosForTopRegion, HTuple hv_secondDetectPosForTopRegion,
            HTuple hv_firstDetectPosForBottomRegion, HTuple hv_secondDetectPosForBottomRegion,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_isUsingChinese, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_isBackDetect, out HTuple hv_isStartWeldingNG, out HTuple hv_IsDetectRegionNG,
            out HTuple hv_IsHeadOrTailNG, out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_filmDistanceArrayOfFirstPoint = null;
            HTuple hv_filmDistanceArrayOfSecondPoint = null, hv_filmDistanceOfFirstPoint = null;
            HTuple hv_filmDistanceOfSecondPoint = null, hv_CenterRow = null;
            HTuple hv_CenterColumn = null, hv_Phi = null, hv_halfWidth = null;
            HTuple hv_halfHeight = null, hv_cosValue = null, hv_sinValue = null;
            HTuple hv_RowOfFirstMainLine = null, hv_ColumnOfFirstMainLine = null;
            HTuple hv_isStartWeldingNGOut = null, hv_isDetectRegionNGOfFirstMainLine = null;
            HTuple hv_isHeadOrTailNGOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_isDetectRegionNGOfSecondMainLine = null;
            HTuple hv_isHeadOrTailNGOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_isDetectRegionNGOfThirdMainLine = null;
            HTuple hv_isHeadOrTailNGOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_isDetectRegionNGOfFourthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_isDetectRegionNGOfFifthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_isDetectRegionNGOfSixthMainLine = null;
            HTuple hv_isHeadOrTailNGOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_isDetectRegionNGOfSeventhMainLine = null;
            HTuple hv_isHeadOrTailNGOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_isDetectRegionNGOfEighthMainLine = null;
            HTuple hv_isHeadOrTailNGOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null, hv_isDetectRegionNGOfNinthMainLine = null;
            HTuple hv_isHeadOrTailNGOfNinthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //各主栅线上/下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsDetectRegionNG);
                //各主栅线头部/尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOrTailNG);

                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //第一个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfFirstPoint);
                //第二个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfSecondPoint);

                hv_filmDistanceOfFirstPoint = "";
                hv_filmDistanceOfSecondPoint = "";

                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 9.2) * 4) * hv_sinValue);
                //不等分
                //ColumnOfFirstMainLine := CenterColumn - (2 * halfWidth / 10) * 4 * cosValue - 20
                //等分
                hv_ColumnOfFirstMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 9.2) * 4) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFirstMainLine, out hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFirstMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 9.2) * 3) * hv_sinValue);
                //不等分
                //ColumnOfSecondMainLine := CenterColumn - (2 * halfWidth / 10) * 3 * cosValue - 20
                //等分
                hv_ColumnOfSecondMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 9.2) * 3) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSecondMainLine, out hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSecondMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 9.2) * 2) * hv_sinValue);
                //不等分
                //ColumnOfThirdMainLine := CenterColumn - (2 * halfWidth / 10) * 2 * cosValue - 20
                //等分
                hv_ColumnOfThirdMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 9.2) * 2) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfThirdMainLine, out hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfThirdMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 9.2) * 1) * hv_sinValue);
                //不等分
                //ColumnOfFourthMainLine := CenterColumn - (2 * halfWidth / 10) * 1 * cosValue - 20
                //等分
                hv_ColumnOfFourthMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 9.2) * 1) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFourthMainLine, out hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFourthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow.Clone();
                hv_ColumnOfFifthMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFifthMainLine, out hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFifthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第六根主栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 9.2) * 1) * hv_sinValue);
                //不等分
                //ColumnOfSixthMainLine := CenterColumn + (2 * halfWidth / 10) * 1 * cosValue + 10
                //等分
                hv_ColumnOfSixthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 9.2) * 1) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSixthMainLine, out hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSixthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第七根主栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 9.2) * 2) * hv_sinValue);
                //不等分
                //ColumnOfSeventhMainLine := CenterColumn + (2 * halfWidth / 10) * 2 * cosValue + 10
                //等分
                hv_ColumnOfSeventhMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 9.2) * 2) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSeventhMainLine, out hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSeventhMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第八根主栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 9.2) * 3) * hv_sinValue);
                //不等分
                //ColumnOfEighthMainLine := CenterColumn + (2 * halfWidth / 10) * 3 * cosValue + 10
                //等分
                hv_ColumnOfEighthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 9.2) * 3) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfEighthMainLine, out hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfEighthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第九根主栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 9.2) * 4) * hv_sinValue);
                //不等分
                //ColumnOfNinthMainLine := CenterColumn + (2 * halfWidth / 10) * 4 * cosValue
                //等分
                hv_ColumnOfNinthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 9.2) * 4) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfNinthMainLine, out hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfNinthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //合并MBB第一个和第二个点宽度数组
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceArrayOfSecondPoint,
                    out hv_filmDistanceArray);
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldDefectOfSingleMainLineForMBB(HObject ho_imageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_windowHandle, HTuple hv_imageWidth, HTuple hv_imageHeight, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_locationMainLineThresh, HTuple hv_bigRectangleWidthThresh, HTuple hv_normalWeldWidthThresh,
            HTuple hv_isTopRegion, HTuple hv_firstDetectPosForTopRegion, HTuple hv_secondDetectPosForTopRegion,
            HTuple hv_firstDetectPosForBottomRegion, HTuple hv_secondDetectPosForBottomRegion,
            HTuple hv_weldWidthThresh, HTuple hv_filmWidthOffSet, HTuple hv_isUsingChinese,
            HTuple hv_isUsingStartWeldingDetect, HTuple hv_isBackDetect, out HTuple hv_isStartWeldingNG,
            out HTuple hv_isDetectRegionNG, out HTuple hv_isHeadOrTailNG, out HTuple hv_filmDistanceOfFirstPoint,
            out HTuple hv_filmDistanceOfSecondPoint)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_WeldingNGSmallRectangle = null, ho_Rectangle = null;
            HObject ho_ImageReduced = null, ho_LightRegion = null, ho_RegionDilation = null;
            HObject ho_MainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_StartWeldingNGCount = null;
            HTuple hv_StartWeldingNarrowNGCount = null, hv_undetectMainLineCount = null;
            HTuple hv_DistanceRealWorld = null, hv_FirstDetectPixelPosForTopRegion = null;
            HTuple hv_SecondDetectPixelPosForTopRegion = null, hv_FirstDetectPixelPosForBottomRegion = null;
            HTuple hv_SecondDetectPixelPosForBottomRegion = null, hv_cosValue = null;
            HTuple hv_sinValue = null, hv_stepPixelDistance = null;
            HTuple hv_TotalRowOfLeftMainLinePoints = null, hv_TotalColumnOfLeftMainLinePoints = null;
            HTuple hv_TotalRowOfRightMainLinePoints = null, hv_TotalColumnOfRightMainLinePoints = null;
            HTuple hv_LightRegionMeanTuple = null, hv_isStartWeldingDetect = null;
            HTuple hv_TotalStep = null, hv_Index = new HTuple(), hv_RowTemp = new HTuple();
            HTuple hv_ColumnTemp = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowOfLeftMainLinePoints = new HTuple(), hv_ColumnOfLeftMainLinePoints = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_NumTempOfLeftPos = new HTuple(), hv_RowOfRightMainLinePoints = new HTuple();
            HTuple hv_ColumnOfRightMainLinePoints = new HTuple(), hv_NumTempOfRightPos = new HTuple();
            HTuple hv_RowStartPoint = new HTuple(), hv_ColumnStartPoint = new HTuple();
            HTuple hv_RowEndPoint = new HTuple(), hv_ColumnEndPoint = new HTuple();
            HTuple hv_DistanceTemp = new HTuple(), hv_DistanceRealWorldForShow = new HTuple();
            HTuple hv_temp = new HTuple(), hv_UsedThreshold = new HTuple();
            HTuple hv_LightRegionMean = new HTuple(), hv_Deviation = new HTuple();
            HTuple hv_MaxLightRegionMean = new HTuple(), hv_exceptionInfo = new HTuple();
            HTuple hv_isExceptionOut = new HTuple(), hv_exceptionInfoOut = new HTuple();
            HTuple hv_InverseTotalRowOfRightMainLinePoints = null;
            HTuple hv_InverseTotalColumnOfRightMainLinePoints = null;
            HTuple hv_TotalRow = null, hv_TotalColumn = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_WeldingNGSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_LightRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_MainLine);
            try
            {
                hv_PI = 3.1415926;
                //*****输出*******
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);

                //MBB第一个检测点距离
                hv_filmDistanceOfFirstPoint = "";
                //MBB第二个检测点距离
                hv_filmDistanceOfSecondPoint = "";


                //主栅线上/下半片是否NG
                hv_isDetectRegionNG = 0;
                //主栅线头部/尾部是否NG
                hv_isHeadOrTailNG = 0;


                //***局部变量****
                //起焊点异常标识
                hv_isStartWeldingNG = 0;
                //起焊点异常点计数
                hv_StartWeldingNGCount = 0;
                //起焊点焊带变窄计数
                hv_StartWeldingNarrowNGCount = 0;
                //未检测到主栅线计数
                hv_undetectMainLineCount = 0;
                //主栅线左右对应点距离默认为-1
                hv_DistanceRealWorld = -1;

                //MBB头尾部大方格检测位置-TopRegion
                hv_FirstDetectPixelPosForTopRegion = hv_firstDetectPosForTopRegion / hv_heightResolution;
                //MBB头尾部最靠近大方格的第一段区域检测位置-TopRegion
                hv_SecondDetectPixelPosForTopRegion = hv_secondDetectPosForTopRegion / hv_heightResolution;

                //MBB头尾部大方格检测位置-BottomRegion
                hv_FirstDetectPixelPosForBottomRegion = hv_firstDetectPosForBottomRegion / hv_heightResolution;
                //MBB头尾部最靠近大方格的第一段区域检测位置-BottomRegion
                hv_SecondDetectPixelPosForBottomRegion = hv_secondDetectPosForBottomRegion / hv_heightResolution;

                //弧度Phi的Cos值
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                //弧度Phi的Sin值
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);

                //主栅线取样距离
                hv_stepPixelDistance = 0.5 / hv_heightResolution;
                //主栅线左侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfLeftMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfLeftMainLinePoints);
                //主栅线右侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfRightMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfRightMainLinePoints);
                //焊带丢失银浆灰度均值数组
                HOperatorSet.TupleGenConst(0, 0, out hv_LightRegionMeanTuple);
                //是否检测到起焊点异常
                hv_isStartWeldingDetect = 0;

                //总寻点次数
                HOperatorSet.TupleFloor(hv_halfHeightOfSingleMainLineDetect / hv_stepPixelDistance,
                    out hv_TotalStep);
                //*******上片处理********
                if ((int)(hv_isTopRegion) != 0)
                {
                    //上半部分寻点处理
                    HTuple end_val62 = hv_TotalStep;
                    HTuple step_val62 = 1;
                    for (hv_Index = 0; hv_Index.Continue(end_val62, step_val62); hv_Index = hv_Index.TupleAdd(step_val62))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(
                            new HTuple(hv_RowTemp.TupleGreater(hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0))))).TupleOr(new HTuple(hv_ColumnTemp.TupleGreater(hv_imageWidth)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "bilinear", out hv_MeasureHandle);
                        //主栅线左侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                            out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                        //主栅线右侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "negative", "last", out hv_RowOfRightMainLinePoints,
                            out hv_ColumnOfRightMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleLess(
                                0))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleLess(0))))).TupleOr(
                                new HTuple(hv_RowEndPoint.TupleLess(0))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleLess(
                                0)))) != 0)
                            {
                                continue;
                            }
                            //判断MBB检测区域是否超过检测框一半的高度
                            if ((int)(new HTuple(hv_SecondDetectPixelPosForTopRegion.TupleGreaterEqual(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLessEqual((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_SecondDetectPixelPosForTopRegion) / hv_stepPixelDistance) + 0.5))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreater((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_SecondDetectPixelPosForTopRegion) / hv_stepPixelDistance) - 0.5)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfSecondPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_normalWeldWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            if ((int)(new HTuple(hv_FirstDetectPixelPosForTopRegion.TupleGreaterEqual(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLess((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_FirstDetectPixelPosForTopRegion) / hv_stepPixelDistance) + 1))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreater((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_FirstDetectPixelPosForTopRegion) / hv_stepPixelDistance) - 1)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfFirstPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_bigRectangleWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        hv_isHeadOrTailNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                    }

                    //下半部分寻点处理
                    HTuple end_val142 = 1;
                    HTuple step_val142 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val142, step_val142); hv_Index = hv_Index.TupleAdd(step_val142))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(
                            new HTuple(hv_RowTemp.TupleGreater(hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0))))).TupleOr(new HTuple(hv_ColumnTemp.TupleGreater(hv_imageWidth)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        //主栅线左侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                            out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                        //主栅线右侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "negative", "last", out hv_RowOfRightMainLinePoints,
                            out hv_ColumnOfRightMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //判断MBB检测区域是否超过检测框一半的高度
                            if ((int)(new HTuple(hv_SecondDetectPixelPosForTopRegion.TupleLess(hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLessEqual((hv_SecondDetectPixelPosForTopRegion / hv_stepPixelDistance) + 0.5))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreaterEqual((hv_SecondDetectPixelPosForTopRegion / hv_stepPixelDistance) - 0.5)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfSecondPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_normalWeldWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            if ((int)(new HTuple(hv_FirstDetectPixelPosForTopRegion.TupleLess(hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLess((hv_FirstDetectPixelPosForTopRegion / hv_stepPixelDistance) + 1))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreater((hv_FirstDetectPixelPosForTopRegion / hv_stepPixelDistance) - 1)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfFirstPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_bigRectangleWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        hv_isHeadOrTailNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                    }

                    //*******下片处理********
                }
                else
                {
                    //2020.01.03起焊点检测功能
                    //disp_rectangle2 (windowHandle, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect, Phi, 100, halfHeightOfSingleMainLineDetect)
                    //gen_rectangle2 (DetectRectangle, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect, Phi, 100, halfHeightOfSingleMainLineDetect)
                    //intersection (DetectRectangle, detectRegion, DetectRectangle)
                    //smallest_rectangle2 (DetectRectangle, centerRowOfDetect, centerColumnOfColumn, Phi1, halfHeightOfDetect, halfWidthOfDetect)
                    //erosion_rectangle1 (DetectRectangle, RegionErosion, 1, 100)
                    //difference (DetectRectangle, RegionErosion, RegionDifference)
                    //connection (RegionDifference, ConnectedRegions)
                    //sort_region (ConnectedRegions, SortedRegions, 'upper_left', 'true', 'row')
                    //select_obj (SortedRegions, ObjectSelected, 1)
                    //reduce_domain (imageForWeldingDetect, ObjectSelected, ImageReducedForDetect)
                    //mult_image (ImageReducedForDetect, ImageReducedForDetect, ImageReducedForDetect, 0.04, 0)
                    //gray_closing_rect (ImageReducedForDetect, ImageClosing, 1, 50)

                    //gray_opening_rect (ImageReducedForDetect, ImageReducedForDetect, 20, 1)

                    //binary_threshold (ImageClosing, Region, 'max_separability', 'light', UsedThreshold1)
                    //opening_rectangle1 (Region, RegionOpening, 1, 20)

                    //RowTemp := centerRowOfDetect - (halfHeightOfDetect - 5 * 1) * cosValue
                    //ColumnTemp := centerColumnOfColumn - (halfHeightOfDetect - 5 * 1) * sinValue
                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, 2)
                    //gen_measure_rectangle2 (RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, 2, imageWidth, imageHeight, 'bilinear', MeasureHandle1)
                    //measure_pairs (ImageReducedForDetect, MeasureHandle1, 1, 100, 'all', 'all', RowEdgeFirst, ColumnEdgeFirst, AmplitudeFirst, RowEdgeSecond, ColumnEdgeSecond, AmplitudeSecond, IntraDistance, InterDistance)
                    //close_measure (MeasureHandle1)
                    //tuple_length (IntraDistance, Length)
                    //if (Length == 1 or Length >= 4)
                    //isStartWeldingNG := true
                    //set_color (windowHandle, 'red')
                    //disp_region (RegionOpening, windowHandle)
                    //elseif (Length == 2 or Length == 3)
                    //tuple_max (IntraDistance, PiexDisMax)
                    //tuple_min (IntraDistance, PiexDisMin)
                    //if (PiexDisMax- PiexDisMin >= 4)
                    //isStartWeldingNG := true
                    //set_color (windowHandle, 'red')
                    //disp_region (RegionOpening, windowHandle)
                    //endif
                    //endif

                    //scale_image_range (ImageReducedForDetect, ImageReducedForDetect, [50,0], [60,255])
                    //gray_closing_rect (ImageReducedForDetect, ImageClosing, 1, 50)
                    //binary_threshold (ImageClosing, Region, 'max_separability', 'light', UsedThreshold1)
                    //opening_rectangle1 (Region, RegionOpening, 10, 10)
                    //dilation_rectangle1 (RegionOpening, RegionDilation1, 1, 60)
                    //intersection (RegionDilation1, detectRegion, RegionIntersection)
                    //difference (RegionIntersection, RegionOpening, RegionDifference1)
                    //opening_rectangle1 (RegionDifference1, RegionDifference1, 30, 1)
                    //connection (RegionDifference1, ConnectedRegions1)
                    //count_obj (ConnectedRegions1, Number)
                    //if (Number == 2)
                    //sort_region (ConnectedRegions1, SortedRegions1, 'upper_left', 'true', 'row')
                    //select_obj (SortedRegions1, ObjectSelected1, 1)
                    //union2 (RegionOpening, ObjectSelected1, RegionOpening)
                    //endif
                    //reduce_domain (imageForWeldingDetect, RegionOpening, ImageReducedForStartWelding)
                    //gray_closing_rect (ImageReducedForStartWelding, ImageClosing1, 1, 35)
                    //threshold (ImageClosing1, Region1, 0, 80)
                    //opening_rectangle1 (Region1, Region1, 10, 1)
                    //connection (Region1, ConnectedRegions2)
                    //select_shape_std (ConnectedRegions2, Region1, 'max_area', 70)
                    //area_center (Region1, Area, Row, Column)
                    //if (Area<120)
                    //isStartWeldingNG := true
                    //set_color (windowHandle, 'red')
                    //disp_region (RegionOpening, windowHandle)
                    //endif

                    //上半部分寻点处理
                    HTuple end_val289 = hv_TotalStep;
                    HTuple step_val289 = 1;
                    for (hv_Index = 2; hv_Index.Continue(end_val289, step_val289); hv_Index = hv_Index.TupleAdd(step_val289))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(
                            new HTuple(hv_RowTemp.TupleGreater(hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0))))).TupleOr(new HTuple(hv_ColumnTemp.TupleGreater(hv_imageWidth)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "bilinear", out hv_MeasureHandle);
                        //主栅线左侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                            out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                        //主栅线右侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "negative", "last", out hv_RowOfRightMainLinePoints,
                            out hv_ColumnOfRightMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //2019-5-20 避免杂点干扰
                            if ((int)(new HTuple(hv_ColumnEndPoint.TupleLess(hv_ColumnStartPoint))) != 0)
                            {
                                continue;
                            }
                            if ((int)(new HTuple(hv_FirstDetectPixelPosForBottomRegion.TupleLess(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLess((hv_FirstDetectPixelPosForBottomRegion / hv_stepPixelDistance) + 1))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreater((hv_FirstDetectPixelPosForBottomRegion / hv_stepPixelDistance) - 1)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfFirstPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_bigRectangleWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        hv_isHeadOrTailNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            if ((int)(new HTuple(hv_SecondDetectPixelPosForBottomRegion.TupleLess(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLessEqual((hv_SecondDetectPixelPosForBottomRegion / hv_stepPixelDistance) + 0.5))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreaterEqual((hv_SecondDetectPixelPosForBottomRegion / hv_stepPixelDistance) - 0.5)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfSecondPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_normalWeldWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);

                            //2020.05.18-通过界面参数判断是否执行起焊点异常检测
                            if ((int)(hv_isUsingStartWeldingDetect) != 0)
                            {
                                //10.24 增加焊带搭接和起焊点检测正面检测判断条件
                                if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                {
                                    //2019-5-20增加焊带搭接少检测
                                    //起焊点异常检测
                                    if ((int)((new HTuple(hv_Index.TupleLess((hv_FirstDetectPixelPosForBottomRegion / hv_stepPixelDistance) + 12))).TupleAnd(
                                        new HTuple(hv_Index.TupleGreater(hv_FirstDetectPixelPosForBottomRegion / hv_stepPixelDistance)))) != 0)
                                    {
                                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi,
                                            hv_halfWidthOfSingleMainLineDetect, hv_stepPixelDistance, hv_imageWidth,
                                            hv_imageHeight, "bilinear", out hv_MeasureHandle);
                                        //主栅线左侧寻点
                                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle,
                                            1, hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                                            out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                                        HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                                        //disp_cross (windowHandle, RowOfLeftMainLinePoints, ColumnOfLeftMainLinePoints, 20, 0.3)
                                        //主栅线右侧寻点
                                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle,
                                            1, hv_locationMainLineThresh, "negative", "last", out hv_RowOfRightMainLinePoints,
                                            out hv_ColumnOfRightMainLinePoints, out hv_Amplitude, out hv_Distance);
                                        HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                                        //disp_cross (windowHandle, RowOfRightMainLinePoints, ColumnOfRightMainLinePoints, 20, 0.3)
                                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(
                                            new HTuple(hv_NumTempOfRightPos.TupleGreater(0)))) != 0)
                                        {
                                            HOperatorSet.DistancePp(hv_RowOfLeftMainLinePoints, hv_ColumnOfLeftMainLinePoints,
                                                hv_RowOfRightMainLinePoints, hv_ColumnOfRightMainLinePoints,
                                                out hv_DistanceTemp);
                                            hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_bigRectangleWidthThresh * 0.5))) != 0)
                                            {
                                                continue;
                                            }
                                            //2020.04.23-电池片过斜，导致gen_rectangle1找不到区域
                                            if ((int)(new HTuple(hv_RowOfLeftMainLinePoints.TupleGreater(
                                                hv_RowOfRightMainLinePoints))) != 0)
                                            {
                                                hv_temp = hv_RowOfLeftMainLinePoints.Clone();
                                                hv_RowOfLeftMainLinePoints = hv_RowOfRightMainLinePoints.Clone();
                                                hv_RowOfRightMainLinePoints = hv_temp.Clone();
                                            }
                                            ho_Rectangle.Dispose();
                                            HOperatorSet.GenRectangle1(out ho_Rectangle, hv_RowOfLeftMainLinePoints,
                                                hv_ColumnOfLeftMainLinePoints, hv_RowOfRightMainLinePoints,
                                                hv_ColumnOfRightMainLinePoints);
                                            ho_ImageReduced.Dispose();
                                            HOperatorSet.ReduceDomain(ho_imageForWeldingDetect, ho_Rectangle,
                                                out ho_ImageReduced);
                                            ho_LightRegion.Dispose();
                                            HOperatorSet.BinaryThreshold(ho_ImageReduced, out ho_LightRegion,
                                                "max_separability", "light", out hv_UsedThreshold);
                                            HOperatorSet.Intensity(ho_LightRegion, ho_ImageReduced, out hv_LightRegionMean,
                                                out hv_Deviation);
                                            if ((int)(new HTuple(hv_isStartWeldingNG.TupleEqual(0))) != 0)
                                            {
                                                if ((int)(new HTuple(hv_DistanceRealWorld.TupleLess(hv_weldWidthThresh))) != 0)
                                                {
                                                    //有时焊接会有黑色的点导致卡出来的距离小于栅线宽度，增加判断
                                                    if ((int)(new HTuple(((hv_Index - hv_StartWeldingNarrowNGCount)).TupleEqual(
                                                        1))) != 0)
                                                    {
                                                        hv_isStartWeldingNG = 1;
                                                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                        ho_RegionDilation.Dispose();
                                                        HOperatorSet.DilationRectangle1(ho_Rectangle, out ho_RegionDilation,
                                                            hv_bigRectangleWidthThresh / hv_widthResolution, 20);
                                                        HOperatorSet.DispRegion(ho_RegionDilation, hv_ExpDefaultWinHandle);
                                                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                    }
                                                    hv_StartWeldingNarrowNGCount = hv_Index.Clone();
                                                }
                                                if ((int)(new HTuple(hv_LightRegionMean.TupleLess(hv_filmWidthOffSet))) != 0)
                                                {
                                                    hv_StartWeldingNGCount = hv_StartWeldingNGCount + 1;
                                                    HOperatorSet.TupleConcat(hv_LightRegionMeanTuple, hv_LightRegionMean,
                                                        out hv_LightRegionMeanTuple);
                                                    if ((int)(new HTuple(hv_StartWeldingNGCount.TupleGreater(
                                                        3))) != 0)
                                                    {
                                                        hv_isStartWeldingNG = 1;
                                                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                        ho_RegionDilation.Dispose();
                                                        HOperatorSet.DilationRectangle1(ho_Rectangle, out ho_RegionDilation,
                                                            hv_bigRectangleWidthThresh / hv_widthResolution, 20);
                                                        HOperatorSet.TupleMean(hv_LightRegionMeanTuple, out hv_MaxLightRegionMean);
                                                        if ((int)(hv_isUsingChinese) != 0)
                                                        {
                                                            hv_exceptionInfo = "焊带缺失裸露银浆灰度均值：";
                                                        }
                                                        else
                                                        {
                                                            hv_exceptionInfo = "Grayscale average of silver paste exposed due to ribbon missing:";
                                                        }
                                                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo + hv_MaxLightRegionMean,
                                                            hv_RowOfRightMainLinePoints + 5, hv_ColumnOfRightMainLinePoints + 20,
                                                            "red");
                                                        HOperatorSet.DispRegion(ho_RegionDilation, hv_ExpDefaultWinHandle);
                                                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    //下半部分寻点处理
                    HTuple end_val438 = 1;
                    HTuple step_val438 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val438, step_val438); hv_Index = hv_Index.TupleAdd(step_val438))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(
                            new HTuple(hv_RowTemp.TupleGreater(hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0))))).TupleOr(new HTuple(hv_ColumnTemp.TupleGreater(hv_imageWidth)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        //主栅线左侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                            out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                        //主栅线右侧寻点
                        HOperatorSet.MeasurePos(ho_imageForWeldingDetect, hv_MeasureHandle, 1,
                            hv_locationMainLineThresh, "negative", "last", out hv_RowOfRightMainLinePoints,
                            out hv_ColumnOfRightMainLinePoints, out hv_Amplitude, out hv_Distance);
                        HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)

                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleGreaterEqual(
                                hv_imageHeight))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleGreaterEqual(
                                hv_imageWidth))))).TupleOr(new HTuple(hv_RowEndPoint.TupleGreaterEqual(
                                hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleGreaterEqual(
                                hv_imageWidth)))) != 0)
                            {
                                continue;
                            }

                            if ((int)(new HTuple(hv_FirstDetectPixelPosForBottomRegion.TupleGreaterEqual(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLess((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_FirstDetectPixelPosForBottomRegion) / hv_stepPixelDistance) + 1))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreater((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_FirstDetectPixelPosForBottomRegion) / hv_stepPixelDistance) - 1)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfFirstPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_bigRectangleWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        hv_isHeadOrTailNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }
                            }

                            if ((int)(new HTuple(hv_SecondDetectPixelPosForBottomRegion.TupleGreaterEqual(
                                hv_halfHeightOfSingleMainLineDetect))) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleLessEqual((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_SecondDetectPixelPosForBottomRegion) / hv_stepPixelDistance) + 0.5))).TupleAnd(
                                    new HTuple(hv_Index.TupleGreaterEqual((((2 * hv_halfHeightOfSingleMainLineDetect) - hv_SecondDetectPixelPosForBottomRegion) / hv_stepPixelDistance) - 0.5)))) != 0)
                                {
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                        hv_ColumnStartPoint, 20, 0.3);
                                    HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                                        20, 0.3);
                                    //*MBB头尾部最靠近大方格的第一段区域检测位置左右边缘点的实际距离
                                    HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                        hv_ColumnEndPoint, out hv_DistanceTemp);
                                    hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3", out hv_DistanceRealWorldForShow);
                                    HOperatorSet.TupleString(hv_DistanceRealWorld, ".3f", out hv_filmDistanceOfSecondPoint);
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreater(hv_normalWeldWidthThresh))) != 0)
                                    {
                                        ho_WeldingNGSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_WeldingNGSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_weldingNGRegionOut, ho_WeldingNGSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_weldingNGRegionOut.Dispose();
                                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                        }
                                        hv_isDetectRegionNG = 1;
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "red");
                                    }
                                    else
                                    {
                                        disp_message_UserDefine(hv_windowHandle, hv_DistanceRealWorldForShow,
                                            hv_RowStartPoint + 30, hv_ColumnStartPoint - 30, "green");
                                    }
                                }

                            }

                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                    }
                }

                //********根据主栅线边缘点提取出主栅线Region***********
                if ((int)((new HTuple((new HTuple(hv_TotalRowOfRightMainLinePoints.TupleLength()
                    )).TupleLessEqual(0))).TupleOr(new HTuple((new HTuple(hv_TotalRowOfLeftMainLinePoints.TupleLength()
                    )).TupleLessEqual(0)))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }

                    ho_WeldingNGSmallRectangle.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_LightRegion.Dispose();
                    ho_RegionDilation.Dispose();
                    ho_MainLine.Dispose();

                    return;
                }
                HOperatorSet.TupleInverse(hv_TotalRowOfRightMainLinePoints, out hv_InverseTotalRowOfRightMainLinePoints);
                HOperatorSet.TupleInverse(hv_TotalColumnOfRightMainLinePoints, out hv_InverseTotalColumnOfRightMainLinePoints);
                HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_InverseTotalRowOfRightMainLinePoints,
                    out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_InverseTotalColumnOfRightMainLinePoints,
                    out hv_TotalColumn);
                HOperatorSet.TupleConcat(hv_TotalRow, hv_TotalRowOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumn, hv_TotalColumnOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalColumn);
                ho_MainLine.Dispose();
                HOperatorSet.GenRegionPolygon(out ho_MainLine, hv_TotalRow, hv_TotalColumn);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_MainLine, out ho_mainLineRegionOut);

                //根据主栅线左右侧点提取出主栅线Region
                //获取检测区域外轮廓
                //gen_contour_region_xld (DetectRegion, DetectRegionContours, 'border')
                //左侧点拟合直线
                //gen_contour_polygon_xld (subLeftMainLine, TotalRowOfLeftMainLinePoints, TotalColumnOfLeftMainLinePoints)
                //fit_line_contour_xld (subLeftMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, AngleOfSubLeftMainLine)
                //左侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, RowOfLeftIntersectionPoints, ColumnOfLeftInterSectionPoints, IsOverlapping)
                //右侧点拟合直线
                //gen_contour_polygon_xld (subRightMainLine, TotalRowOfRightMainLinePoints, TotalColumnOfRightMainLinePoints)
                //fit_line_contour_xld (subRightMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, AngleOfSubRightMainLine)
                //右侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, RowOfRightIntersectionPoints, ColumnOfRightInterSectionPoints, IsOverlapping)
                //主栅线矩形
                //tuple_concat (RowOfLeftIntersectionPoints, RowOfRightIntersectionPoints, RowTempConcat)
                //tuple_concat (ColumnOfLeftInterSectionPoints, ColumnOfRightInterSectionPoints, ColumnTempConcat)
                //gen_contour_polygon_xld (TempContour, RowTempConcat, ColumnTempConcat)
                //smallest_rectangle2_xld (TempContour, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //gen_rectangle2 (mainLineRegionOut, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)



                ho_WeldingNGSmallRectangle.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_LightRegion.Dispose();
                ho_RegionDilation.Dispose();
                ho_MainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_WeldingNGSmallRectangle.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_LightRegion.Dispose();
                ho_RegionDilation.Dispose();
                ho_MainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForTwelveMainLine(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_locationMainLineThresh, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_filmWidthThresh, HTuple hv_headAndTailFilmWidthThresh, HTuple hv_filmWidthOffset,
            HTuple hv_weldWidthThresh, HTuple hv_isTopRegion, HTuple hv_firstDetectPosForTopRegion,
            HTuple hv_secondDetectPosForTopRegion, HTuple hv_firstDetectPosForBottomRegion,
            HTuple hv_secondDetectPosForBottomRegion, HTuple hv_isUsingChinese, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_isBackDetect, out HTuple hv_isStartWeldingNG, out HTuple hv_IsDetectRegionNG,
            out HTuple hv_IsHeadOrTailNG, out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine, ho_weldingNGRegionOutOfTenthMainLine;
            HObject ho_mainLineRegionOutOfTenthMainLine, ho_weldingNGRegionOutOfEleventhMainLine;
            HObject ho_mainLineRegionOutOfEleventhMainLine, ho_weldingNGRegionOutOfTwelfthMainLine;
            HObject ho_mainLineRegionOutOfTwelfthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_filmDistanceArrayOfFirstPoint = null;
            HTuple hv_filmDistanceArrayOfSecondPoint = null, hv_filmDistanceOfFirstPoint = null;
            HTuple hv_filmDistanceOfSecondPoint = null, hv_CenterRow = null;
            HTuple hv_CenterColumn = null, hv_Phi = null, hv_halfWidth = null;
            HTuple hv_halfHeight = null, hv_cosValue = null, hv_sinValue = null;
            HTuple hv_RowOfFirstMainLine = null, hv_ColumnOfFirstMainLine = null;
            HTuple hv_isStartWeldingNGOut = null, hv_isDetectRegionNGOfFirstMainLine = null;
            HTuple hv_isHeadOrTailNGOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_isDetectRegionNGOfSecondMainLine = null;
            HTuple hv_isHeadOrTailNGOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_isDetectRegionNGOfThirdMainLine = null;
            HTuple hv_isHeadOrTailNGOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_isDetectRegionNGOfFourthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_isDetectRegionNGOfFifthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_isDetectRegionNGOfSixthMainLine = null;
            HTuple hv_isHeadOrTailNGOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_isDetectRegionNGOfSeventhMainLine = null;
            HTuple hv_isHeadOrTailNGOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_isDetectRegionNGOfEighthMainLine = null;
            HTuple hv_isHeadOrTailNGOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null, hv_isDetectRegionNGOfNinthMainLine = null;
            HTuple hv_isHeadOrTailNGOfNinthMainLine = null, hv_RowOfTenthMainLine = null;
            HTuple hv_ColumnOfTenthMainLine = null, hv_isDetectRegionNGOfTenthMainLine = null;
            HTuple hv_isHeadOrTailNGOfTenthMainLine = null, hv_RowOfEleventhMainLine = null;
            HTuple hv_ColumnOfEleventhMainLine = null, hv_isDetectRegionNGOfEleventhMainLine = null;
            HTuple hv_isHeadOrTailNGOfEleventhMainLine = null, hv_RowOfTwelfthMainLine = null;
            HTuple hv_ColumnOfTwelfthMainLine = null, hv_isDetectRegionNGOfTwelfthMainLine = null;
            HTuple hv_isHeadOrTailNGOfTwelfthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfTenthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfTenthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEleventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEleventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfTwelfthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfTwelfthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //各主栅线上/下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsDetectRegionNG);
                //各主栅线头部/尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOrTailNG);

                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //第一个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfFirstPoint);
                //第二个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfSecondPoint);

                hv_filmDistanceOfFirstPoint = "";
                hv_filmDistanceOfSecondPoint = "";
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                //第一根主栅线
                //RowOfFirstMainLine := CenterRow + (2 * halfWidth / 13) * 5.5 * sinValue
                //ColumnOfFirstMainLine := CenterColumn - (2 * halfWidth / 13) * 5.5 * cosValue - 20
                //台湾友达12BB版型
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 5.5) * hv_sinValue);
                hv_ColumnOfFirstMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 5.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFirstMainLine, out hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFirstMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第二根主栅线
                //RowOfSecondMainLine := CenterRow + (2 * halfWidth / 13) * 4.5 * sinValue
                //ColumnOfSecondMainLine := CenterColumn - (2 * halfWidth / 13) * 4.5 * cosValue - 20
                //台湾友达12BB版型
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 4.5) * hv_sinValue);
                hv_ColumnOfSecondMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 4.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSecondMainLine, out hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSecondMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第三根主栅线
                //RowOfThirdMainLine := CenterRow + (2 * halfWidth / 13) * 3.5 * sinValue
                //ColumnOfThirdMainLine := CenterColumn - (2 * halfWidth / 13) * 3.5 * cosValue - 20
                //台湾友达12BB版型
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 3.5) * hv_sinValue);
                hv_ColumnOfThirdMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 3.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfThirdMainLine, out hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfThirdMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第四根主栅线
                //RowOfFourthMainLine := CenterRow + (2 * halfWidth / 13) * 2.5 * sinValue
                //ColumnOfFourthMainLine := CenterColumn - (2 * halfWidth / 13) * 2.5 * cosValue - 10
                //台湾友达12BB版型
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 2.5) * hv_sinValue);
                hv_ColumnOfFourthMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 2.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFourthMainLine, out hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFourthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第五根主栅线
                //RowOfFifthMainLine := CenterRow + (2 * halfWidth / 13) * 1.5 * sinValue
                //ColumnOfFifthMainLine := CenterColumn - (2 * halfWidth / 13) * 1.5 * cosValue
                //台湾友达12BB版型
                hv_RowOfFifthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 1.5) * hv_sinValue);
                hv_ColumnOfFifthMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 1.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFifthMainLine, out hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFifthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第六根主栅线
                //RowOfSixthMainLine := CenterRow + (2 * halfWidth / 13) * 0.5 * sinValue
                //ColumnOfSixthMainLine := CenterColumn - (2 * halfWidth / 13) * 0.5 * cosValue
                //台湾友达12BB版型
                hv_RowOfSixthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 14) * 0.5) * hv_sinValue);
                hv_ColumnOfSixthMainLine = hv_CenterColumn - ((((2 * hv_halfWidth) / 14) * 0.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSixthMainLine, out hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSixthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第七根主栅线
                //RowOfSeventhMainLine := CenterRow - (2 * halfWidth / 13) * 0.5 * sinValue
                //ColumnOfSeventhMainLine := CenterColumn + (2 * halfWidth / 13) * 0.5 * cosValue + 10
                //台湾友达12BB版型
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 0.5) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 0.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSeventhMainLine, out hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSeventhMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第八根主栅线
                //RowOfEighthMainLine := CenterRow - (2 * halfWidth / 13) * 1.5 * sinValue
                //ColumnOfEighthMainLine := CenterColumn + (2 * halfWidth / 13) * 1.5 * cosValue + 20
                //台湾友达12BB版型
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 1.5) * hv_sinValue);
                hv_ColumnOfEighthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 1.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfEighthMainLine, out hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfEighthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第九根主栅线
                //RowOfNinthMainLine := CenterRow - (2 * halfWidth / 13) * 2.5 * sinValue
                //ColumnOfNinthMainLine := CenterColumn + (2 * halfWidth / 13) * 2.5 * cosValue + 30
                //台湾友达12BB版型
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 2.5) * hv_sinValue);
                hv_ColumnOfNinthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 2.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfNinthMainLine, out hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfNinthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第十根主栅线
                //RowOfTenthMainLine := CenterRow - (2 * halfWidth / 13) * 3.5 * sinValue
                //ColumnOfTenthMainLine := CenterColumn + (2 * halfWidth / 13) * 3.5 * cosValue + 30
                //台湾友达12BB版型
                hv_RowOfTenthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 3.5) * hv_sinValue);
                hv_ColumnOfTenthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 3.5) * hv_cosValue)) + 30;
                //disp_rectangle2 (windowHandle, RowOfTenthMainLine, ColumnOfTenthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfTenthMainLine.Dispose(); ho_mainLineRegionOutOfTenthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfTenthMainLine, out ho_mainLineRegionOutOfTenthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfTenthMainLine, hv_ColumnOfTenthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfTenthMainLine, out hv_isHeadOrTailNGOfTenthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfTenthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfTenthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第十一根主栅线
                //RowOfEleventhMainLine := CenterRow - (2 * halfWidth / 13) * 4.5 * sinValue
                //ColumnOfEleventhMainLine := CenterColumn + (2 * halfWidth / 13) * 4.5 * cosValue + 40
                //台湾友达12BB版型
                hv_RowOfEleventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 4.5) * hv_sinValue);
                hv_ColumnOfEleventhMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 4.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfEleventhMainLine, ColumnOfEleventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEleventhMainLine.Dispose(); ho_mainLineRegionOutOfEleventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEleventhMainLine, out ho_mainLineRegionOutOfEleventhMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfEleventhMainLine, hv_ColumnOfEleventhMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfEleventhMainLine,
                    out hv_isHeadOrTailNGOfEleventhMainLine, out hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEleventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEleventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfEleventhMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfEleventhMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //第十二根主栅线
                //RowOfTwelfthMainLine := CenterRow - (2 * halfWidth / 13) * 5.5 * sinValue
                //ColumnOfTwelfthMainLine := CenterColumn + (2 * halfWidth / 13) * 5.5 * cosValue + 40
                //台湾友达12BB版型
                hv_RowOfTwelfthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 14) * 5.5) * hv_sinValue);
                hv_ColumnOfTwelfthMainLine = hv_CenterColumn + ((((2 * hv_halfWidth) / 14) * 5.5) * hv_cosValue);
                //disp_rectangle2 (windowHandle, RowOfTwelfthMainLine, ColumnOfTwelfthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfTwelfthMainLine.Dispose(); ho_mainLineRegionOutOfTwelfthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfTwelfthMainLine, out ho_mainLineRegionOutOfTwelfthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfTwelfthMainLine, hv_ColumnOfTwelfthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfTwelfthMainLine, out hv_isHeadOrTailNGOfTwelfthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfTwelfthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfTwelfthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfTwelfthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfTwelfthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                //合并MBB第一个和第二个点宽度数组
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceArrayOfSecondPoint,
                    out hv_filmDistanceArray);
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();
                ho_weldingNGRegionOutOfEleventhMainLine.Dispose();
                ho_mainLineRegionOutOfEleventhMainLine.Dispose();
                ho_weldingNGRegionOutOfTwelfthMainLine.Dispose();
                ho_mainLineRegionOutOfTwelfthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();
                ho_weldingNGRegionOutOfEleventhMainLine.Dispose();
                ho_mainLineRegionOutOfEleventhMainLine.Dispose();
                ho_weldingNGRegionOutOfTwelfthMainLine.Dispose();
                ho_mainLineRegionOutOfTwelfthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void LoadParameter(HTuple hv_Parameter, HTuple hv_ParameterTemp, out HTuple hv_FindParaNumber)
        {



            // Local control variables 

            HTuple hv_Position = null, hv_FindParaPosition = null;
            HTuple hv_FindParaTotalLength = null, hv_FindParaLength = null;
            HTuple hv_Substring = null, hv_IsEqual = null;
            // Initialize local and output iconic variables 
            HOperatorSet.TupleStrstr(hv_Parameter, hv_ParameterTemp, out hv_Position);
            HOperatorSet.TupleFind(hv_Position, 0, out hv_FindParaPosition);
            HOperatorSet.TupleStrlen(hv_Parameter.TupleSelect(hv_FindParaPosition), out hv_FindParaTotalLength);
            HOperatorSet.TupleStrlen(hv_ParameterTemp, out hv_FindParaLength);
            HOperatorSet.TupleSubstr(hv_Parameter.TupleSelect(hv_FindParaPosition), hv_FindParaLength + 1,
                hv_FindParaTotalLength - 2, out hv_Substring);
            HOperatorSet.TupleStrstr(hv_Substring, "=", out hv_IsEqual);
            if ((int)(new HTuple(hv_IsEqual.TupleEqual(0))) != 0)
            {
                HOperatorSet.TupleSubstr(hv_Parameter.TupleSelect(hv_FindParaPosition), hv_FindParaLength + 2,
                    hv_FindParaTotalLength - 2, out hv_Substring);
            }
            HOperatorSet.TupleNumber(hv_Substring, out hv_FindParaNumber);

            return;
        }

        public void ReadParameterFromIni(HTuple hv_FileHandle, HTuple hv_FaceType, out HTuple hv_MainLineNum,
            out HTuple hv_IsFullWafer, out HTuple hv_SubMainLineNum, out HTuple hv_IsBackDetect,
            out HTuple hv_IsUsingWidthResolutionCalibrate, out HTuple hv_WidthResolution,
            out HTuple hv_WaferWidth, out HTuple hv_IsUsingHeightResolutionCalibrate, out HTuple hv_HeightResolution,
            out HTuple hv_ViceLineInterval, out HTuple hv_IsUsingFilmShiftingDetect, out HTuple hv_TopShieldLengthOfTopRegion,
            out HTuple hv_BottomShieldLengthOfTopRegion, out HTuple hv_TopShieldLengthOfBottomRegion,
            out HTuple hv_BottomShieldLengthOfBottomRegion, out HTuple hv_LocationMainLineThresh,
            out HTuple hv_FilmWidthThresh, out HTuple hv_FilmWidthOffSet, out HTuple hv_IsUsingFilmMissDetect,
            out HTuple hv_WeldWidthThresh, out HTuple hv_FirstDetectPosForTopRegion, out HTuple hv_SecondDetectPosForTopRegion,
            out HTuple hv_FirstDetectPosForBottomRegion, out HTuple hv_SecondDetectPosForBottomRegion,
            out HTuple hv_IsUsingHeadAndTailFilmShiftingDetect, out HTuple hv_HeadAndTailFilmWidthThresh,
            out HTuple hv_HeadAndTailFilmShieldLength, out HTuple hv_HeadAndTailFilmDetectRange,
            out HTuple hv_IsUsingWaferEdgeCalibration, out HTuple hv_LocationWaferEdgeThresh,
            out HTuple hv_WaferEdgeCalibrationRegionDilationPixel, out HTuple hv_IsUsingDistanceDetect,
            out HTuple hv_MinimumDistanceThresh, out HTuple hv_MaxDistanceThresh, out HTuple hv_ClassDistanceThresh,
            out HTuple hv_IsUsingEdgeDefectDetect, out HTuple hv_EdgeBigDefectWidthThresh,
            out HTuple hv_EdgeBigDefectHeightThresh, out HTuple hv_EdgeSmallDefectDetectDepth,
            out HTuple hv_EdgeSmallDefectGrayThresh, out HTuple hv_EdgeSmallDefectWidthThresh,
            out HTuple hv_EdgeSmallDefectHeightThresh, out HTuple hv_EdgeSmallDefectGrayMeanThresh,
            out HTuple hv_EdgeSmallDefectGrayDeviationThresh, out HTuple hv_CornerDefectAreaRatioThresh,
            out HTuple hv_IsUsingSurfaceDirtyDetect, out HTuple hv_SurfaceDefectGrayThresh,
            out HTuple hv_SurfaceDefectWidthThresh, out HTuple hv_SurfaceDefectHeightThresh,
            out HTuple hv_SurfaceDefectDetectIndentDepth, out HTuple hv_SurfaceDefectViceLineShieldWidth,
            out HTuple hv_SurfaceDefectViceLineShieldLeftPosOffSet, out HTuple hv_SurfaceDefectViceLineShieldRightPosOffSet,
            out HTuple hv_SurfaceScratchGrayThresh, out HTuple hv_SurfaceScratchWidthThresh,
            out HTuple hv_SurfaceScratchHeightThresh, out HTuple hv_IsUsingBrokenLineDetect,
            out HTuple hv_BrokenLineGrayThresh, out HTuple hv_BrokenLineWidthThresh, out HTuple hv_BrokenLineHeightThresh,
            out HTuple hv_BrokenLineDetectIndentDepth, out HTuple hv_IsUsingStartWeldingDetect,
            out HTuple hv_StartWeldingDistanceMaxThresh, out HTuple hv_StartWeldingDistanceMinThresh,
            out HTuple hv_IsUsingSurfaceColorDiffDetect, out HTuple hv_IsUsingChinese)
        {



            // Local iconic variables 

            // Local control variables 

            HTuple hv_Index = null, hv_Para = null, hv_OutLine = new HTuple();
            HTuple hv_IsEOF = new HTuple(), hv_Parameter = new HTuple();
            HTuple hv_ParameterTemp = null, hv_FindParaNumber = null;
            // Initialize local and output iconic variables 
            hv_IsUsingChinese = new HTuple();
            hv_Index = 0;
            HOperatorSet.TupleGenConst(0, 0, out hv_Para);
            //提取文件中的所有参数
            do
            {
                HOperatorSet.FreadLine(hv_FileHandle, out hv_OutLine, out hv_IsEOF);
                if (hv_Parameter == null)
                    hv_Parameter = new HTuple();
                hv_Parameter[hv_Index] = hv_OutLine;
                hv_Index = hv_Index + 1;
            }
            while ((int)(new HTuple(hv_IsEOF.TupleEqual(1))) == 0);
            hv_ParameterTemp = "MainLineNum";
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_MainLineNum = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "IsFullWafer";
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsFullWafer = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "SubMainLineNum";
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SubMainLineNum = hv_FindParaNumber.Clone();

            //ParameterTemp := 'IsBackDetect'
            //LoadParameter (Parameter, ParameterTemp, FindParaNumber)
            //IsBackDetect := FindParaNumber
            //是否为背面串检
            hv_IsBackDetect = 0;

            hv_ParameterTemp = "IsUsingWidthResolutionCalibrate" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingWidthResolutionCalibrate = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "WidthResolution" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_WidthResolution = hv_FindParaNumber.Clone();

            //硅片宽度(单位mm)
            hv_ParameterTemp = "WaferWidth";
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_WaferWidth = hv_FindParaNumber.Clone();



            //是否启用高度分辨率校准
            hv_ParameterTemp = "IsUsingHeightResolutionCalibrate" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingHeightResolutionCalibrate = hv_FindParaNumber.Clone();
            //高度分辨率
            hv_ParameterTemp = "HeightResolution" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_HeightResolution = hv_FindParaNumber.Clone();
            //****新增参数*******
            //副栅线间距(单位mm)
            hv_ParameterTemp = "ViceLineInterval";
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_ViceLineInterval = hv_FindParaNumber.Clone();
            //*******************

            //是否启用膜偏、露白检测
            hv_ParameterTemp = "IsUsingFilmShiftingDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingFilmShiftingDetect = hv_FindParaNumber.Clone();
            //*****新增参数*******
            //屏蔽区域(mm)
            hv_ParameterTemp = "TopShieldLengthOfTopRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_TopShieldLengthOfTopRegion = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "BottomShieldLengthOfTopRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BottomShieldLengthOfTopRegion = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "TopShieldLengthOfBottomRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_TopShieldLengthOfBottomRegion = hv_FindParaNumber.Clone();

            hv_ParameterTemp = "BottomShieldLengthOfBottomRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BottomShieldLengthOfBottomRegion = hv_FindParaNumber.Clone();

            //*******************
            //主栅线定位阈值
            hv_ParameterTemp = "LocationMainLineThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_LocationMainLineThresh = hv_FindParaNumber.Clone();

            //贴膜宽度阈值(mm)
            hv_ParameterTemp = "FilmWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_FilmWidthThresh = hv_FindParaNumber.Clone();

            //贴膜宽度补偿值(mm)
            hv_ParameterTemp = "FilmWidthOffSet" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_FilmWidthOffSet = hv_FindParaNumber.Clone();

            //是否启用膜短、膜缺失检测
            hv_ParameterTemp = "IsUsingFilmMissDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingFilmMissDetect = hv_FindParaNumber.Clone();

            //焊带宽度阈值(mm)
            hv_ParameterTemp = "WeldWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_WeldWidthThresh = hv_FindParaNumber.Clone();

            //MBB九栅焊带检测参数
            //上半片头部大矩形检测位置(mm)
            hv_ParameterTemp = "FirstDetectPosForTopRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_FirstDetectPosForTopRegion = hv_FindParaNumber.Clone();

            //上半片靠近头部第一段窄区域检测位置(mm)
            hv_ParameterTemp = "SecondDetectPosForTopRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SecondDetectPosForTopRegion = hv_FindParaNumber.Clone();

            //下半片头部大矩形区域检测位置(mm)
            hv_ParameterTemp = "FirstDetectPosForBottomRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_FirstDetectPosForBottomRegion = hv_FindParaNumber.Clone();

            //下半片靠近头部第一段窄区域检测位置(mm)
            hv_ParameterTemp = "SecondDetectPosForBottomRegion" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SecondDetectPosForBottomRegion = hv_FindParaNumber.Clone();

            //是否启用头尾膜检
            hv_ParameterTemp = "IsUsingHeadAndTailFilmShiftingDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingHeadAndTailFilmShiftingDetect = hv_FindParaNumber.Clone();

            //头尾膜检宽度阈值(mm)
            hv_ParameterTemp = "HeadAndTailFilmWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_HeadAndTailFilmWidthThresh = hv_FindParaNumber.Clone();

            //*****新增参数*******
            //头尾膜检缩进距离(mm)
            hv_ParameterTemp = "HeadAndTailFilmShieldLength" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_HeadAndTailFilmShieldLength = hv_FindParaNumber.Clone();

            //头尾膜检范围(mm)
            hv_ParameterTemp = "HeadAndTailFilmDetectRange" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_HeadAndTailFilmDetectRange = hv_FindParaNumber.Clone();

            //*******************

            //*****新增参数*******
            //是否开启上、下电池片Region边缘优化
            hv_ParameterTemp = "IsUsingWaferEdgeCalibration" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingWaferEdgeCalibration = hv_FindParaNumber.Clone();

            //上、下电池片Region边缘优化定位灰度差值
            hv_ParameterTemp = "LocationWaferEdgeThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_LocationWaferEdgeThresh = hv_FindParaNumber.Clone();

            //上、下电池片Region边缘优化区域膨胀像素
            hv_ParameterTemp = "WaferEdgeCalibrationRegionDilationPixel" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_WaferEdgeCalibrationRegionDilationPixel = hv_FindParaNumber.Clone();

            //*******************

            //是否启用片间距检测
            hv_ParameterTemp = "IsUsingDistanceDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingDistanceDetect = hv_FindParaNumber.Clone();

            //最小片间距阈值(mm)
            hv_ParameterTemp = "MinimumDistanceThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_MinimumDistanceThresh = hv_FindParaNumber.Clone();
            //最大片间距阈值(mm)
            hv_ParameterTemp = "MaxDistanceThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_MaxDistanceThresh = hv_FindParaNumber.Clone();

            //*****新增参数******
            //最小串间距阈值(mm)
            hv_ParameterTemp = "ClassDistanceThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_ClassDistanceThresh = hv_FindParaNumber.Clone();

            //*******************

            //是否启用边缺陷检测
            hv_ParameterTemp = "IsUsingEdgeDefectDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingEdgeDefectDetect = hv_FindParaNumber.Clone();

            //边缘大缺陷宽度阈值(mm)
            hv_ParameterTemp = "EdgeBigDefectWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeBigDefectWidthThresh = hv_FindParaNumber.Clone();

            //边缘大缺陷高度阈值(mm)
            hv_ParameterTemp = "EdgeBigDefectHeightThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeBigDefectHeightThresh = hv_FindParaNumber.Clone();

            //边缘小缺陷检测深度(mm)
            hv_ParameterTemp = "EdgeSmallDefectDetectDepth" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectDetectDepth = hv_FindParaNumber.Clone();

            //边缘小缺陷与周围背景像素灰度差阈值
            hv_ParameterTemp = "EdgeSmallDefectGrayThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectGrayThresh = hv_FindParaNumber.Clone();

            //边缘小缺陷宽度阈值(mm)
            hv_ParameterTemp = "EdgeSmallDefectWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectWidthThresh = hv_FindParaNumber.Clone();

            //边缘小缺陷高度阈值(mm)
            hv_ParameterTemp = "EdgeSmallDefectHeightThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectHeightThresh = hv_FindParaNumber.Clone();

            //边缘小缺陷灰度均值阈值
            hv_ParameterTemp = "EdgeSmallDefectGrayMeanThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectGrayMeanThresh = hv_FindParaNumber.Clone();

            //边缘小缺陷灰度方差阈值
            hv_ParameterTemp = "EdgeSmallDefectGrayDeviationThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_EdgeSmallDefectGrayDeviationThresh = hv_FindParaNumber.Clone();

            //角部缺陷阈值(边缘小缺陷检测深度*边缘小缺陷检测深度)：单晶默认0.7；多晶默认0.5
            hv_ParameterTemp = "CornerDefectAreaRatioThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_CornerDefectAreaRatioThresh = hv_FindParaNumber.Clone();
            //是否启用表面缺陷检测
            hv_ParameterTemp = "IsUsingSurfaceDefectDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingSurfaceDirtyDetect = hv_FindParaNumber.Clone();

            //表面缺陷与周围背景像素灰度差阈值
            hv_ParameterTemp = "SurfaceDefectGrayThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectGrayThresh = hv_FindParaNumber.Clone();

            //表面缺陷宽度阈值(mm)
            hv_ParameterTemp = "SurfaceDefectWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectWidthThresh = hv_FindParaNumber.Clone();

            //表面缺陷高度阈值(mm)
            hv_ParameterTemp = "SurfaceDefectHeightThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectHeightThresh = hv_FindParaNumber.Clone();

            //表面缺陷缩进距离(mm)
            hv_ParameterTemp = "SurfaceDefectDetectIndentDepth" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectDetectIndentDepth = hv_FindParaNumber.Clone();

            //纵向栅线屏蔽像素
            hv_ParameterTemp = "SurfaceDefectViceLineShieldWidth" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectViceLineShieldWidth = hv_FindParaNumber.Clone();

            //纵向栅线屏蔽左侧位置补偿
            hv_ParameterTemp = "SurfaceDefectViceLineShieldLeftPosOffSet" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectViceLineShieldLeftPosOffSet = hv_FindParaNumber.Clone();

            //纵向栅线屏蔽右侧位置补偿
            hv_ParameterTemp = "SurfaceDefectViceLineShieldRightPosOffSet" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceDefectViceLineShieldRightPosOffSet = hv_FindParaNumber.Clone();

            //表面划痕与周围背景像素灰度差阈值
            hv_ParameterTemp = "SurfaceScratchGrayThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceScratchGrayThresh = hv_FindParaNumber.Clone();

            //表面划痕宽度阈值(mm)
            hv_ParameterTemp = "SurfaceScratchWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceScratchWidthThresh = hv_FindParaNumber.Clone();

            //表面划痕高度阈值(mm)
            hv_ParameterTemp = "SurfaceScratchHeightThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_SurfaceScratchHeightThresh = hv_FindParaNumber.Clone();

            //是否启用断栅、氧化检测
            hv_ParameterTemp = "IsUsingBrokenLineDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingBrokenLineDetect = hv_FindParaNumber.Clone();

            //断栅与周围背景像素灰度差阈值
            hv_ParameterTemp = "BrokenLineGrayThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BrokenLineGrayThresh = hv_FindParaNumber.Clone();

            //断栅宽度阈值(mm)
            hv_ParameterTemp = "BrokenLineWidthThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BrokenLineWidthThresh = hv_FindParaNumber.Clone();

            //断栅高度阈值(mm)
            hv_ParameterTemp = "BrokenLineHeightThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BrokenLineHeightThresh = hv_FindParaNumber.Clone();

            //断栅检测缩进距离(mm)
            hv_ParameterTemp = "BrokenLineDetectIndentDepth" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_BrokenLineDetectIndentDepth = hv_FindParaNumber.Clone();


            //是否启用起焊点检测
            hv_ParameterTemp = "IsUsingStartWeldingDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingStartWeldingDetect = hv_FindParaNumber.Clone();

            //起焊点距边界最大距离阈值
            hv_ParameterTemp = "StartWeldingDistanceMaxThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_StartWeldingDistanceMaxThresh = hv_FindParaNumber.Clone();

            //起焊点距边界最小距离阈值
            hv_ParameterTemp = "StartWeldingDistanceMinThresh" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_StartWeldingDistanceMinThresh = hv_FindParaNumber.Clone();

            //是否启用色差检测
            hv_ParameterTemp = "IsUsingSurfaceColorDiffDetect" + hv_FaceType;
            LoadParameter(hv_Parameter, hv_ParameterTemp, out hv_FindParaNumber);
            hv_IsUsingSurfaceColorDiffDetect = hv_FindParaNumber.Clone();

            //是否开启参数辅助框显示
            //ParameterTemp := 'IsUsingChinese'
            //LoadParameter (Parameter, ParameterTemp, FindParaNumber)
            //IsUsingChinese := FindParaNumber
            //是否开启参数辅助框显示
            //IsUsingChinese := false


            return;
        }

        public void WidthResolutionCalibrateFunctionForFiveMainLine(HObject ho_imageForFilmDetect,
            HObject ho_detectRegion, HTuple hv_width, HTuple hv_height, HTuple hv_heightResolution,
            HTuple hv_mainLineNum, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_locationMainLineThresh, HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_widthResolution, HTuple hv_windowHandle, out HTuple hv_isException,
            out HTuple hv_FilmDistanceArrayOfFirstMainLine)
        {




            // Local iconic variables 

            // Local control variables 

            HTuple hv_PI = null, hv_exceptionInfo = null;
            HTuple hv_CenterRow = null, hv_CenterColumn = null, hv_Phi = null;
            HTuple hv_halfWidth = null, hv_halfHeight = null, hv_cosValue = null;
            HTuple hv_sinValue = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_isExceptionOut = null;
            // Initialize local and output iconic variables 
            //**********************************************
            hv_PI = 3.1415926;
            //**********************************************
            //局部变量
            //主栅线宽度(mm)
            //mainLineWidth := 0.6
            hv_isException = 0;
            hv_exceptionInfo = "";
            //**********************************************
            HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                out hv_Phi, out hv_halfWidth, out hv_halfHeight);
            HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
            HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);

            //gray_opening_rect (imageForFilmDetect, imageOpening, 1, mainLineWidth / 0.04)

            //第一根主栅线
            hv_RowOfThirdMainLine = hv_CenterRow.Clone();
            hv_ColumnOfThirdMainLine = hv_CenterColumn.Clone();
            //记录第一根主栅线间隔一定距离寻宽数组
            GetFilmDistanceOfSingleMainLine(ho_imageForFilmDetect, ho_detectRegion, hv_width,
                hv_height, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi, 100,
                hv_halfHeight, hv_locationMainLineThresh, hv_topShieldLength, hv_headAndTailFilmShieldLength,
                hv_headAndTailFilmDetectRange, hv_bottomShieldLength, hv_heightResolution,
                hv_windowHandle, out hv_FilmDistanceArrayOfFirstMainLine, out hv_isExceptionOut);
            if ((int)(hv_isExceptionOut) != 0)
            {
                hv_isException = 1;

                return;
            }

            return;
        }

        public void FindInnerEdgePointFuction(HObject ho_RedChannelROIImage, HObject ho_EdgeRegion,
            HTuple hv_OpeningHeight, HTuple hv_OpeningWidth, out HTuple hv_RowBegin, out HTuple hv_ColBegin,
            out HTuple hv_RowEnd, out HTuple hv_ColEnd)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_EdgeImage = null, ho_EdgeImageForFindGridLine = null;
            HObject ho_GridLineRegion = null, ho_GridLineRegionConnection = null;
            HObject ho_Skeleton = null, ho_Contours = null, ho_ContoursSplit = null;

            // Local control variables 

            HTuple hv_UsedThreshold1 = new HTuple(), hv_GridLineRegionConnectionNumbers = new HTuple();
            HTuple hv_Rect2Len1Value = new HTuple(), hv_Rect2Len1MaxValue = new HTuple();
            HTuple hv_Rect2Len1MaxValueIndex = new HTuple(), hv_ContoursNumber = new HTuple();
            HTuple hv_ContoursLength = new HTuple(), hv_ContoursMaxLength = new HTuple();
            HTuple hv_Index = new HTuple(), hv_Nr = new HTuple(), hv_Nc = new HTuple();
            HTuple hv_Dist = new HTuple(), hv_Row1 = new HTuple();
            HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
            HTuple hv_Column2 = new HTuple(), hv_Exception = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_EdgeImage);
            HOperatorSet.GenEmptyObj(out ho_EdgeImageForFindGridLine);
            HOperatorSet.GenEmptyObj(out ho_GridLineRegion);
            HOperatorSet.GenEmptyObj(out ho_GridLineRegionConnection);
            HOperatorSet.GenEmptyObj(out ho_Skeleton);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
            hv_RowBegin = new HTuple();
            hv_ColBegin = new HTuple();
            hv_RowEnd = new HTuple();
            hv_ColEnd = new HTuple();
            try
            {
                try
                {
                    //寻找外边界细栅线
                    ho_EdgeImage.Dispose();
                    HOperatorSet.ReduceDomain(ho_RedChannelROIImage, ho_EdgeRegion, out ho_EdgeImage
                        );
                    ho_EdgeImageForFindGridLine.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_EdgeImage, out ho_EdgeImageForFindGridLine,
                        hv_OpeningHeight, hv_OpeningWidth);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.GrayClosingRect(ho_EdgeImageForFindGridLine, out ExpTmpOutVar_0,
                            hv_OpeningHeight, hv_OpeningWidth + 50);
                        ho_EdgeImageForFindGridLine.Dispose();
                        ho_EdgeImageForFindGridLine = ExpTmpOutVar_0;
                    }
                    ho_GridLineRegion.Dispose();
                    HOperatorSet.BinaryThreshold(ho_EdgeImageForFindGridLine, out ho_GridLineRegion,
                        "max_separability", "light", out hv_UsedThreshold1);

                    //避免干扰
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_GridLineRegion, out ExpTmpOutVar_0, hv_OpeningWidth,
                            hv_OpeningHeight);
                        ho_GridLineRegion.Dispose();
                        ho_GridLineRegion = ExpTmpOutVar_0;
                    }

                    //找到最长Region
                    ho_GridLineRegionConnection.Dispose();
                    HOperatorSet.Connection(ho_GridLineRegion, out ho_GridLineRegionConnection
                        );
                    HOperatorSet.CountObj(ho_GridLineRegionConnection, out hv_GridLineRegionConnectionNumbers);
                    if ((int)(new HTuple(hv_GridLineRegionConnectionNumbers.TupleGreater(1))) != 0)
                    {
                        HOperatorSet.RegionFeatures(ho_GridLineRegionConnection, "rect2_len1",
                            out hv_Rect2Len1Value);
                        HOperatorSet.TupleMax(hv_Rect2Len1Value, out hv_Rect2Len1MaxValue);
                        HOperatorSet.TupleFindFirst(hv_Rect2Len1Value, hv_Rect2Len1MaxValue, out hv_Rect2Len1MaxValueIndex);
                        ho_GridLineRegion.Dispose();
                        HOperatorSet.SelectObj(ho_GridLineRegionConnection, out ho_GridLineRegion,
                            hv_Rect2Len1MaxValueIndex + 1);
                    }

                    //region转XLD
                    ho_Skeleton.Dispose();
                    HOperatorSet.Skeleton(ho_GridLineRegion, out ho_Skeleton);
                    ho_Contours.Dispose();
                    HOperatorSet.GenContoursSkeletonXld(ho_Skeleton, out ho_Contours, 1, "filter");
                    ho_ContoursSplit.Dispose();
                    HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines_circles",
                        5, 4, 2);
                    HOperatorSet.CountObj(ho_ContoursSplit, out hv_ContoursNumber);
                    if ((int)(new HTuple(hv_ContoursNumber.TupleGreater(1))) != 0)
                    {
                        HOperatorSet.LengthXld(ho_ContoursSplit, out hv_ContoursLength);
                        HOperatorSet.TupleMax(hv_ContoursLength, out hv_ContoursMaxLength);
                        //2020.05.09-防止有两个一样的最大值
                        HOperatorSet.TupleFindFirst(hv_ContoursLength, hv_ContoursMaxLength, out hv_Index);
                        ho_Contours.Dispose();
                        HOperatorSet.SelectObj(ho_ContoursSplit, out ho_Contours, hv_Index + 1);
                        //select_shape_xld (Contours, Contours, 'contlength', 'and', ContoursMaxLength, 99999)
                    }

                    HOperatorSet.FitLineContourXld(ho_Contours, "tukey", -1, 0, 5, 2, out hv_RowBegin,
                        out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc,
                        out hv_Dist);
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_RowBegin, hv_ColBegin, hv_RowEnd,
                        hv_ColEnd);
                    if ((int)(new HTuple(hv_ContoursNumber.TupleEqual(0))) != 0)
                    {
                        HOperatorSet.SmallestRectangle1(ho_EdgeRegion, out hv_Row1, out hv_Column1,
                            out hv_Row2, out hv_Column2);
                        if ((int)(new HTuple(hv_OpeningWidth.TupleEqual(1))) != 0)
                        {
                            hv_RowBegin = hv_Row1.Clone();
                            hv_ColBegin = hv_Column2.Clone();
                            hv_RowEnd = hv_Row2.Clone();
                            hv_ColEnd = hv_Column2.Clone();
                        }
                        else
                        {
                            hv_RowBegin = hv_Row1.Clone();
                            hv_ColBegin = hv_Column1.Clone();
                            hv_RowEnd = hv_Row1.Clone();
                            hv_ColEnd = hv_Column2.Clone();
                        }

                    }


                }
                // catch (Exception) 
                catch (HalconException HDevExpDefaultException1)
                {
                    HDevExpDefaultException1.ToHTuple(out hv_Exception);
                    ho_EdgeImage.Dispose();
                    ho_EdgeImageForFindGridLine.Dispose();
                    ho_GridLineRegion.Dispose();
                    ho_GridLineRegionConnection.Dispose();
                    ho_Skeleton.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();

                    return;
                }
                ho_EdgeImage.Dispose();
                ho_EdgeImageForFindGridLine.Dispose();
                ho_GridLineRegion.Dispose();
                ho_GridLineRegionConnection.Dispose();
                ho_Skeleton.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_EdgeImage.Dispose();
                ho_EdgeImageForFindGridLine.Dispose();
                ho_GridLineRegion.Dispose();
                ho_GridLineRegionConnection.Dispose();
                ho_Skeleton.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void FindInnerEdgeRegionOfTopFuction(HObject ho_RedChannelROIImage, HObject ho_RegionTrans,
            out HObject ho_InnerEdgeRegion, HTuple hv_EdgeDefectDetectIndentDepth, HTuple hv_windowHandle,
            out HTuple hv_isTopInnerRegionCalibrateFinish)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionTransErosion = null, ho_RegionErosion1 = null;
            HObject ho_RegionDifference1 = null, ho_ConnectedRegions1 = null;
            HObject ho_SortedRegions1 = null, ho_LeftEdgeRegion = null;
            HObject ho_RightEdgeRegion = null, ho_RegionErosion = null;
            HObject ho_RegionDifference = null, ho_ConnectedRegions = null;
            HObject ho_SortedRegions = null, ho_BottomEdgeRegion = null;
            HObject ho_InnerEdgeContour = null;

            // Local control variables 

            HTuple hv_LeftRowBegin = new HTuple(), hv_LeftColBegin = new HTuple();
            HTuple hv_LeftRowEnd = new HTuple(), hv_LeftColEnd = new HTuple();
            HTuple hv_RightRowBegin = new HTuple(), hv_RightColBegin = new HTuple();
            HTuple hv_RightRowEnd = new HTuple(), hv_RightColEnd = new HTuple();
            HTuple hv_BottomRowBegin = new HTuple(), hv_BottomColBegin = new HTuple();
            HTuple hv_BottomRowEnd = new HTuple(), hv_BottomColEnd = new HTuple();
            HTuple hv_UpperLeftConnerRow = new HTuple(), hv_UpperLeftConnerColumn = new HTuple();
            HTuple hv_IsOverlapping1 = new HTuple(), hv_UpperRightConnerRow = new HTuple();
            HTuple hv_UpperRighConnertColumn = new HTuple(), hv_DownLeftConnerRow = new HTuple();
            HTuple hv_DownLeftConnerColumn = new HTuple(), hv_DownRightConnerRow = new HTuple();
            HTuple hv_DownRightConnerColumn = new HTuple(), hv_RowOfInnerRegionContour = new HTuple();
            HTuple hv_ColOfInnerRegionContour = new HTuple(), hv_RowPointNumber = new HTuple();
            HTuple hv_Exception = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionTransErosion);
            HOperatorSet.GenEmptyObj(out ho_RegionErosion1);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions1);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionErosion);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeContour);
            hv_isTopInnerRegionCalibrateFinish = new HTuple();
            try
            {
                try
                {
                    ho_InnerEdgeRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_InnerEdgeRegion);
                    hv_isTopInnerRegionCalibrateFinish = 0;
                    //2019-4-21寻找栅线内的边界
                    ho_TopRegionTransErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_RegionTrans, out ho_TopRegionTransErosion,
                        hv_EdgeDefectDetectIndentDepth * 0.5, hv_EdgeDefectDetectIndentDepth * 0.5);
                    //大致定位上半片左、右、下边缘位置
                    ho_RegionErosion1.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegionTransErosion, out ho_RegionErosion1,
                        hv_EdgeDefectDetectIndentDepth * 2, 1);
                    ho_RegionDifference1.Dispose();
                    HOperatorSet.Difference(ho_TopRegionTransErosion, ho_RegionErosion1, out ho_RegionDifference1
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_RegionDifference1, out ExpTmpOutVar_0,
                            1, 20);
                        ho_RegionDifference1.Dispose();
                        ho_RegionDifference1 = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionDifference1, out ho_ConnectedRegions1);
                    ho_SortedRegions1.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegions1, out ho_SortedRegions1, "upper_left",
                        "true", "column");
                    ho_LeftEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_LeftEdgeRegion, 1);
                    ho_RightEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_RightEdgeRegion, 2);

                    ho_RegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegionTransErosion, out ho_RegionErosion,
                        1, hv_EdgeDefectDetectIndentDepth * 2);
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_TopRegionTransErosion, ho_RegionErosion, out ho_RegionDifference
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ExpTmpOutVar_0, 20,
                            1);
                        ho_RegionDifference.Dispose();
                        ho_RegionDifference = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionDifference, out ho_ConnectedRegions);
                    ho_SortedRegions.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegions, out ho_SortedRegions, "upper_left",
                        "true", "row");
                    ho_BottomEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomEdgeRegion, 2);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_LeftEdgeRegion, 100,
                        1, out hv_LeftRowBegin, out hv_LeftColBegin, out hv_LeftRowEnd, out hv_LeftColEnd);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_RightEdgeRegion, 100,
                        1, out hv_RightRowBegin, out hv_RightColBegin, out hv_RightRowEnd, out hv_RightColEnd);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_BottomEdgeRegion, 1,
                        100, out hv_BottomRowBegin, out hv_BottomColBegin, out hv_BottomRowEnd,
                        out hv_BottomColEnd);

                    //左上角点
                    HOperatorSet.IntersectionLines(0, 100, 0, 200, hv_LeftRowBegin, hv_LeftColBegin,
                        hv_LeftRowEnd, hv_LeftColEnd, out hv_UpperLeftConnerRow, out hv_UpperLeftConnerColumn,
                        out hv_IsOverlapping1);

                    //右上角点
                    HOperatorSet.IntersectionLines(0, 100, 0, 200, hv_RightRowBegin, hv_RightColBegin,
                        hv_RightRowEnd, hv_RightColEnd, out hv_UpperRightConnerRow, out hv_UpperRighConnertColumn,
                        out hv_IsOverlapping1);

                    //左下角点
                    HOperatorSet.IntersectionLines(hv_LeftRowBegin, hv_LeftColBegin, hv_LeftRowEnd,
                        hv_LeftColEnd, hv_BottomRowBegin, hv_BottomColBegin, hv_BottomRowEnd,
                        hv_BottomColEnd, out hv_DownLeftConnerRow, out hv_DownLeftConnerColumn,
                        out hv_IsOverlapping1);

                    //右下角点
                    HOperatorSet.IntersectionLines(hv_RightRowBegin, hv_RightColBegin, hv_RightRowEnd,
                        hv_RightColEnd, hv_BottomRowBegin, hv_BottomColBegin, hv_BottomRowEnd,
                        hv_BottomColEnd, out hv_DownRightConnerRow, out hv_DownRightConnerColumn,
                        out hv_IsOverlapping1);

                    HOperatorSet.TupleGenConst(0, 0, out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleGenConst(0, 0, out hv_ColOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperRightConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperRighConnertColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_DownRightConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_DownRightConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_DownLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_DownLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);
                    ho_InnerEdgeContour.Dispose();
                    HOperatorSet.GenRegionPolygon(out ho_InnerEdgeContour, hv_RowOfInnerRegionContour,
                        hv_ColOfInnerRegionContour);
                    ho_InnerEdgeRegion.Dispose();
                    HOperatorSet.FillUp(ho_InnerEdgeContour, out ho_InnerEdgeRegion);
                    //disp_region (InnerEdgeRegion, windowHandle)
                    //巡边完成点亮Flag
                    HOperatorSet.TupleLength(hv_RowOfInnerRegionContour, out hv_RowPointNumber);
                    if ((int)(new HTuple(hv_RowPointNumber.TupleEqual(5))) != 0)
                    {
                        hv_isTopInnerRegionCalibrateFinish = 1;
                    }

                }
                // catch (Exception) 
                catch (HalconException HDevExpDefaultException1)
                {
                    HDevExpDefaultException1.ToHTuple(out hv_Exception);
                    ho_TopRegionTransErosion.Dispose();
                    ho_RegionErosion1.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SortedRegions1.Dispose();
                    ho_LeftEdgeRegion.Dispose();
                    ho_RightEdgeRegion.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_BottomEdgeRegion.Dispose();
                    ho_InnerEdgeContour.Dispose();

                    return;
                }
                ho_TopRegionTransErosion.Dispose();
                ho_RegionErosion1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions1.Dispose();
                ho_LeftEdgeRegion.Dispose();
                ho_RightEdgeRegion.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionDifference.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_BottomEdgeRegion.Dispose();
                ho_InnerEdgeContour.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionTransErosion.Dispose();
                ho_RegionErosion1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions1.Dispose();
                ho_LeftEdgeRegion.Dispose();
                ho_RightEdgeRegion.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionDifference.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_BottomEdgeRegion.Dispose();
                ho_InnerEdgeContour.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void FindInnerEdgeRegionOfBottomFuction(HObject ho_RedChannelROIImage,
            HObject ho_RegionTrans, out HObject ho_InnerEdgeRegion, HTuple hv_EdgeDefectDetectIndentDepth,
            HTuple hv_height, HTuple hv_windowHandle, HTuple hv_isFullWafer, out HTuple hv_isBottomInnerRegionCalibrateFinish)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_BottomRegionTransErosion = null, ho_RegionErosion1 = null;
            HObject ho_RegionDifference1 = null, ho_ConnectedRegions1 = null;
            HObject ho_SortedRegions1 = null, ho_LeftEdgeRegion = null;
            HObject ho_RightEdgeRegion = null, ho_RegionErosion = null;
            HObject ho_RegionDifference = null, ho_ConnectedRegions = null;
            HObject ho_SortedRegions = null, ho_TopEdgeRegion = null, ho_InnerEdgeContour = null;

            // Local control variables 

            HTuple hv_LeftRowBegin = new HTuple(), hv_LeftColBegin = new HTuple();
            HTuple hv_LeftRowEnd = new HTuple(), hv_LeftColEnd = new HTuple();
            HTuple hv_RightRowBegin = new HTuple(), hv_RightColBegin = new HTuple();
            HTuple hv_RightRowEnd = new HTuple(), hv_RightColEnd = new HTuple();
            HTuple hv_TopRowBegin = new HTuple(), hv_TopColBegin = new HTuple();
            HTuple hv_TopRowEnd = new HTuple(), hv_TopColEnd = new HTuple();
            HTuple hv_UpperLeftConnerRow = new HTuple(), hv_UpperLeftConnerColumn = new HTuple();
            HTuple hv_IsOverlapping1 = new HTuple(), hv_UpperRightConnerRow = new HTuple();
            HTuple hv_UpperRighConnertColumn = new HTuple(), hv_DownLeftConnerRow = new HTuple();
            HTuple hv_DownLeftConnerColumn = new HTuple(), hv_DownRightConnerRow = new HTuple();
            HTuple hv_DownRightConnerColumn = new HTuple(), hv_RowOfInnerRegionContour = new HTuple();
            HTuple hv_ColOfInnerRegionContour = new HTuple(), hv_RowPointNumber = new HTuple();
            HTuple hv_Exception = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionTransErosion);
            HOperatorSet.GenEmptyObj(out ho_RegionErosion1);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions1);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionErosion);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeContour);
            hv_isBottomInnerRegionCalibrateFinish = new HTuple();
            try
            {
                try
                {
                    ho_InnerEdgeRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_InnerEdgeRegion);
                    hv_isBottomInnerRegionCalibrateFinish = 0;
                    //2019-4-21寻找栅线内的边界
                    if ((int)(new HTuple(hv_isFullWafer.TupleEqual(0))) != 0)
                    {
                        //2020.04.23-原0.7，现更改为0.3
                        ho_BottomRegionTransErosion.Dispose();
                        HOperatorSet.ErosionRectangle1(ho_RegionTrans, out ho_BottomRegionTransErosion,
                            hv_EdgeDefectDetectIndentDepth * 0.5, hv_EdgeDefectDetectIndentDepth * 0.3);
                    }
                    else
                    {
                        ho_BottomRegionTransErosion.Dispose();
                        HOperatorSet.ErosionRectangle1(ho_RegionTrans, out ho_BottomRegionTransErosion,
                            hv_EdgeDefectDetectIndentDepth * 0.5, hv_EdgeDefectDetectIndentDepth * 0.5);
                    }
                    //大致定位上半片左、右、下边缘位置
                    ho_RegionErosion1.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegionTransErosion, out ho_RegionErosion1,
                        hv_EdgeDefectDetectIndentDepth * 2, 1);
                    ho_RegionDifference1.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionTransErosion, ho_RegionErosion1, out ho_RegionDifference1
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_RegionDifference1, out ExpTmpOutVar_0,
                            1, 20);
                        ho_RegionDifference1.Dispose();
                        ho_RegionDifference1 = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionDifference1, out ho_ConnectedRegions1);
                    ho_SortedRegions1.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegions1, out ho_SortedRegions1, "upper_left",
                        "true", "column");
                    ho_LeftEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_LeftEdgeRegion, 1);
                    ho_RightEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_RightEdgeRegion, 2);

                    ho_RegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegionTransErosion, out ho_RegionErosion,
                        1, hv_EdgeDefectDetectIndentDepth * 2);
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionTransErosion, ho_RegionErosion, out ho_RegionDifference
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ExpTmpOutVar_0, 20,
                            1);
                        ho_RegionDifference.Dispose();
                        ho_RegionDifference = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionDifference, out ho_ConnectedRegions);
                    ho_SortedRegions.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegions, out ho_SortedRegions, "upper_left",
                        "true", "row");
                    ho_TopEdgeRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopEdgeRegion, 1);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_LeftEdgeRegion, 100,
                        1, out hv_LeftRowBegin, out hv_LeftColBegin, out hv_LeftRowEnd, out hv_LeftColEnd);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_RightEdgeRegion, 100,
                        1, out hv_RightRowBegin, out hv_RightColBegin, out hv_RightRowEnd, out hv_RightColEnd);
                    FindInnerEdgePointFuction(ho_RedChannelROIImage, ho_TopEdgeRegion, 1, 100,
                        out hv_TopRowBegin, out hv_TopColBegin, out hv_TopRowEnd, out hv_TopColEnd);

                    //左上角点
                    HOperatorSet.IntersectionLines(hv_TopRowBegin, hv_TopColBegin, hv_TopRowEnd,
                        hv_TopColEnd, hv_LeftRowBegin, hv_LeftColBegin, hv_LeftRowEnd, hv_LeftColEnd,
                        out hv_UpperLeftConnerRow, out hv_UpperLeftConnerColumn, out hv_IsOverlapping1);

                    //右上角点
                    HOperatorSet.IntersectionLines(hv_TopRowBegin, hv_TopColBegin, hv_TopRowEnd,
                        hv_TopColEnd, hv_RightRowBegin, hv_RightColBegin, hv_RightRowEnd, hv_RightColEnd,
                        out hv_UpperRightConnerRow, out hv_UpperRighConnertColumn, out hv_IsOverlapping1);

                    //左下角点
                    HOperatorSet.IntersectionLines(hv_LeftRowBegin, hv_LeftColBegin, hv_LeftRowEnd,
                        hv_LeftColEnd, hv_height - 1, 100, hv_height - 1, 200, out hv_DownLeftConnerRow,
                        out hv_DownLeftConnerColumn, out hv_IsOverlapping1);

                    //右下角点
                    HOperatorSet.IntersectionLines(hv_RightRowBegin, hv_RightColBegin, hv_RightRowEnd,
                        hv_RightColEnd, hv_height - 1, 100, hv_height - 1, 200, out hv_DownRightConnerRow,
                        out hv_DownRightConnerColumn, out hv_IsOverlapping1);

                    HOperatorSet.TupleGenConst(0, 0, out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleGenConst(0, 0, out hv_ColOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperRightConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperRighConnertColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_DownRightConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_DownRightConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_DownLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_DownLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);

                    HOperatorSet.TupleConcat(hv_RowOfInnerRegionContour, hv_UpperLeftConnerRow,
                        out hv_RowOfInnerRegionContour);
                    HOperatorSet.TupleConcat(hv_ColOfInnerRegionContour, hv_UpperLeftConnerColumn,
                        out hv_ColOfInnerRegionContour);
                    ho_InnerEdgeContour.Dispose();
                    HOperatorSet.GenRegionPolygon(out ho_InnerEdgeContour, hv_RowOfInnerRegionContour,
                        hv_ColOfInnerRegionContour);
                    ho_InnerEdgeRegion.Dispose();
                    HOperatorSet.FillUp(ho_InnerEdgeContour, out ho_InnerEdgeRegion);
                    //disp_region (InnerEdgeRegion, windowHandle)
                    //巡边完成点亮Flag
                    HOperatorSet.TupleLength(hv_RowOfInnerRegionContour, out hv_RowPointNumber);
                    if ((int)(new HTuple(hv_RowPointNumber.TupleEqual(5))) != 0)
                    {
                        hv_isBottomInnerRegionCalibrateFinish = 1;
                    }
                }
                // catch (Exception) 
                catch (HalconException HDevExpDefaultException1)
                {
                    HDevExpDefaultException1.ToHTuple(out hv_Exception);
                    ho_BottomRegionTransErosion.Dispose();
                    ho_RegionErosion1.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SortedRegions1.Dispose();
                    ho_LeftEdgeRegion.Dispose();
                    ho_RightEdgeRegion.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_TopEdgeRegion.Dispose();
                    ho_InnerEdgeContour.Dispose();

                    return;
                }
                ho_BottomRegionTransErosion.Dispose();
                ho_RegionErosion1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions1.Dispose();
                ho_LeftEdgeRegion.Dispose();
                ho_RightEdgeRegion.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionDifference.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_TopEdgeRegion.Dispose();
                ho_InnerEdgeContour.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_BottomRegionTransErosion.Dispose();
                ho_RegionErosion1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions1.Dispose();
                ho_LeftEdgeRegion.Dispose();
                ho_RightEdgeRegion.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionDifference.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_TopEdgeRegion.Dispose();
                ho_InnerEdgeContour.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetFilmDistanceOfSingleMainLine(HObject ho_ImageOpening, HObject ho_DetectRegion,
            HTuple hv_imageWidth, HTuple hv_imageHeight, HTuple hv_centerRowOfSingleMainLineDetect,
            HTuple hv_centerColumnOfSingleMainLineDetect, HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect,
            HTuple hv_halfHeightOfSingleMainLineDetect, HTuple hv_locationMainLineThresh,
            HTuple hv_topShieldLength, HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_bottomShieldLength, HTuple hv_heightResolution, HTuple hv_windowHandle,
            out HTuple hv_FilmDistanceArray, out HTuple hv_isExceptionOut)
        {




            // Local iconic variables 

            // Local control variables 

            HTuple hv_PI = new HTuple(), hv_DistanceRealWorldTemp = new HTuple();
            HTuple hv_DistanceRealWorld = new HTuple(), hv_topShieldPixelLength = new HTuple();
            HTuple hv_bottomShieldPixelLength = new HTuple(), hv_headAndTailFilmShieldPixelLength = new HTuple();
            HTuple hv_headAndTailFilmDetectPixelRange = new HTuple();
            HTuple hv_stepPixelDistance = new HTuple(), hv_cosValue = new HTuple();
            HTuple hv_sinValue = new HTuple(), hv_TotalStep = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectStartTime = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectEndTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectStartTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectEndTime = new HTuple();
            HTuple hv_Index = new HTuple(), hv_RowTemp = new HTuple();
            HTuple hv_ColumnTemp = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowOfLeftMainLinePoints = new HTuple(), hv_ColumnOfLeftMainLinePoints = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_NumTempOfLeftPos = new HTuple(), hv_RowOfRightMainLinePoints = new HTuple();
            HTuple hv_ColumnOfRightMainLinePoints = new HTuple(), hv_NumTempOfRightPos = new HTuple();
            HTuple hv_RowStartPoint = new HTuple(), hv_ColumnStartPoint = new HTuple();
            HTuple hv_RowEndPoint = new HTuple(), hv_ColumnEndPoint = new HTuple();
            HTuple hv_DistanceTemp = new HTuple(), hv_Exception = null;
            // Initialize local and output iconic variables 
            hv_FilmDistanceArray = new HTuple();
            hv_isExceptionOut = new HTuple();
            try
            {
                hv_PI = 3.1415926;
                //*****输出*******
                hv_isExceptionOut = 0;
                //***局部变量****
                //主栅线左右对应点距离默认为-1
                hv_DistanceRealWorldTemp = -1;
                hv_DistanceRealWorld = -1;
                //常规膜检上屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_topShieldLength / hv_heightResolution, out hv_topShieldPixelLength);
                //常规膜检下屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_bottomShieldLength / hv_heightResolution, out hv_bottomShieldPixelLength);

                //头尾膜检屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmShieldLength / hv_heightResolution,
                    out hv_headAndTailFilmShieldPixelLength);
                //头尾膜检像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmDetectRange / hv_heightResolution,
                    out hv_headAndTailFilmDetectPixelRange);

                //膜检采样像素级间隔,默认设置采样间隔为1.5mm
                HOperatorSet.TupleFloor(0.5 / hv_heightResolution, out hv_stepPixelDistance);
                //弧度Phi的Cos值
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                //弧度Phi的Sin值
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);

                //膜宽数组
                HOperatorSet.TupleGenConst(0, 0, out hv_FilmDistanceArray);
                //总寻点次数
                HOperatorSet.TupleFloor(hv_halfHeightOfSingleMainLineDetect / hv_stepPixelDistance,
                    out hv_TotalStep);
                //*******上片处理********

                //上半部分
                //常规膜检开始次数
                HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                //下半部分
                //常规膜检截止次数
                HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectEndTime);
                //头尾膜检开始次数
                HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                    out hv_HeadAndTailFilmDetectStartTime);
                //头尾膜检截止次数
                HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                    out hv_HeadAndTailFilmDetectEndTime);

                //上半部分寻点处理
                HTuple end_val43 = hv_TotalStep;
                HTuple step_val43 = 1;
                for (hv_Index = hv_FilmShiftingAndFilmMissDetectStartTime; hv_Index.Continue(end_val43, step_val43); hv_Index = hv_Index.TupleAdd(step_val43))
                {
                    hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                    hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                    if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                        0)))) != 0)
                    {
                        continue;
                    }
                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, StepDistance)
                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                        hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "bilinear", out hv_MeasureHandle);
                    //主栅线左侧寻点
                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                        "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                    //主栅线右侧寻点
                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                        "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                    //判断是否检测到主栅线左右侧点
                    if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                        0)))) != 0)
                    {
                        //赋值左侧的点
                        hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                        hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                        //赋值右侧的点
                        hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                        hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint, hv_ColumnStartPoint,
                            26, 0);
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                            26, 0);
                        //判断定位到的点是否出界
                        if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleLess(
                            0))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleLess(0))))).TupleOr(
                            new HTuple(hv_RowEndPoint.TupleLess(0))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }

                        //计算主栅线单个小检测框中左右边缘点的像素距离
                        HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                            hv_ColumnEndPoint, out hv_DistanceTemp);
                        HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceTemp, out hv_FilmDistanceArray);
                    }
                }

                //下半部分寻点处理
                HTuple end_val81 = 1;
                HTuple step_val81 = -1;
                for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val81, step_val81); hv_Index = hv_Index.TupleAdd(step_val81))
                {
                    hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                    hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                    if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                        0)))) != 0)
                    {
                        continue;
                    }
                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                        hv_stepPixelDistance, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                        out hv_MeasureHandle);
                    //主栅线左侧寻点
                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                        "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                    //主栅线右侧寻点
                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                        "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                    //判断是否检测到主栅线左右侧点
                    if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                        0)))) != 0)
                    {
                        //赋值左侧的点
                        hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                        hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                        //赋值右侧的点
                        hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                        hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint, hv_ColumnStartPoint,
                            26, 0);
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint, hv_ColumnEndPoint,
                            26, 0);
                        //计算主栅线单个小检测框中左右边缘点的像素距离
                        HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                            hv_ColumnEndPoint, out hv_DistanceTemp);
                        HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceTemp, out hv_FilmDistanceArray);
                    }
                }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                hv_isExceptionOut = 1;
            }

            return;
        }

        public void AlgorithmicUpdateLog()
        {

            // Initialize local and output iconic variables 

            return;
            //*****2019-3-19-秦子亮
            //优化由于光源位置造成下半片成像上部分有阴影，造成边角误检问题。
            //*****

            //*****2019-3-20-秦子亮
            //增加单多晶判断，从而对应使用不同的开运算尺寸结构，避免由于单多晶皮带缝脏污、多晶孔洞造成的缺角误检问题。
            //*****

            //*****2019-3-22-秦子亮
            //halcon中增加自动获取config文件参数，并分为手动和自动参数导入。提高现场问题排查效率以及算法可维护性。
            //*****

            //*****2019-3-25-秦子亮
            //增加是否少片功能
            //*****

            //*****2019-3-29-秦子亮
            //1.增加大的断栅漏检算法，避免断栅太大漏检。
            //2.避免串检结束当前串最后一片偏出正常区域报异常问题，将40调整到120（压片）
            //*****

            //*****2019-4-4-秦子亮
            //增加非边角检测区域较亮异物检测算法。
            //*****

            //*****2019-4-8-秦子亮
            //2019-3-19优化的半片缺角误检算法往前调整。避免直接抓取的缺角因阴影误检。
            //*****

            //*****2019-4-9-秦子亮
            //添加界面边缘破损灰度均值显示，方便客户区别烧节点和真正缺角，便于设置合适参数。
            //*****

            //*****2019-4-11-秦子亮
            //1.下半片上部分寻点由之前的2改为1，膜短、缺失寻点失败点计数由3改为1，避免贴膜时最头部缺失造成的漏检。当不贴膜时，下半片上部分屏蔽应该设置为起焊点位置。
            //2.起焊点异常增加红色点显示功能。
            //*****

            //*****2019-4-12-秦子亮
            //1.规避头尾膜和常规膜检区域检测膜偏露白重复检测，避免当常规检偏膜露白设置参数小于头尾膜时，重合区域误检问题。
            //2.增加硅片倾斜造成上下片片间距成八角状缺陷检测算法判断。
            //*****

            //*****2019-4-16-秦子亮
            //由之前利用片子整体宽度计算分辨率改为利用五栅没贴焊带片主栅进行标定（今后无论生产几栅的片子，都要用五栅标定）
            //*****

            //*****2019-4-18-秦子亮
            //1.优化上下片左右边缘寻点算法。避免因单晶寻点寻到角部点较多导致拟合直线不贴合边界，造成边缘优化的边界倾斜，存在漏检以及后续检测不稳定。
            //2.由之前利用union2将不同区域抓取到的边角缺陷Region合并修改为concat_obj，避免两个重叠的区域合并。
            //*****

            //*****2019-4-21-秦子亮
            //根据硅片最外边界细栅线巡边，并显示边界，解决烧结点误检问题。
            //*****

            //*****2019-5-7-黄海龙
            //避免皮带打滑造成上半片出现彩条导致缺角误检问题。
            //*****

            //*****2019-5-9-黄海龙
            //判断背面检测硅片类型，将无印刷和印刷硅片对应封装函数，并增加无印刷硅片膜偏缺陷检测函数。
            //*****

            //*****2019-5-19-秦子亮
            //增加九栅搭接检测，搭接缺陷分为下半片上部分搭接多和搭接少，对应增加不同检测方式。
            //*****

            //*****2019-5-20-黄海龙
            //寻点抓取主栅线的时候为了更精准找到主栅线边界，去除寻点过程中的杂点，避免主栅线边界异常。
            //*****

            //*****2019-5-22-黄海龙
            //1.对巡边点排序（升序）避免获取的直线回折造成在拟合直线时不准确问题。
            //2.由于下半片头尾膜检膜偏的过大，开运算时将下一层栅线开掉，导致宽度正常，以至于漏检。优化算法，避免漏检。
            //*****

            //*****2019-6-12-秦子亮
            //1.整理算法，合并耗时较长的算子，避免算子冗余。针对耗时长的算子，在不改变检测精度前提下，通过更合理的设置算子参数降低算法检测时间。
            //2.将边角、表面、断栅缺陷对应封装成函数，同时各个缺陷检测对应也封装成函数，开启线程，并行处理，降低运行时间，算法提速。
            //*****

            //*****2019-8-16-黄海龙
            //1.修改12BB检测第二个检测点参数传入问题
            //2.修改边角缺陷检测图片出现彩条导致误检边角缺陷
            //3.新增12BB和9BB各个主栅线上/下半片，头/尾部是否NG信息输出
            //*****

            //*****2019-8-28-黄海龙
            //1.修改各主栅线宽度最大值显示
            //*****

            //*****2019-12-11-黄海龙
            //1.新增5BB和MBB各主栅线宽度数组输出

            //*****2020-04-29-张艳
            //1.新增通过边缘找区域的功能
            //2.优化寻找主栅线功能模块

            //*****2020-05-07-张艳
            //1.整合负间距TR和正间距代码

            //*****
        }

        public void DetectWeldingDefectFunctionForNineMainLineOfBackGray(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_widthResolution, HTuple hv_weldWidthThresh, HTuple hv_filmWidthThresh,
            out HTuple hv_isStartWeldingNG)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //opening_rectangle1 (detectRegion, detectRegion, halfWidth, halfHeight)
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 4) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 4) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 3) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 2) * hv_sinValue);
                hv_ColumnOfThirdMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 2) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 1) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 1) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow.Clone();
                hv_ColumnOfFifthMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第六根主栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 1) * hv_sinValue);
                hv_ColumnOfSixthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 1) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第七根主栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 2) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 2) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第八根主栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 3) * hv_sinValue);
                hv_ColumnOfEighthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 3) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第九根主栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 4) * hv_sinValue);
                hv_ColumnOfNinthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 4) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackGray(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldDefectOfSingleMainLineForBackGray(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_windowHandle, HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_halfHeight, HTuple hv_height,
            HTuple hv_width, HTuple hv_widthResolution, HTuple hv_weldWidthThresh, HTuple hv_filmWidthThresh)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionUpperLine, ho_BottomRegionDownLine;
            HObject ho_UpperAndDownLine, ho_Rectangle, ho_ImageReduced;
            HObject ho_ImageEdgeAmp, ho_Region1, ho_RegionClosing, ho_RegionFillUp;
            HObject ho_RegionOpening, ho_ConnectedRegions, ho_ObjectSelected = null;
            HObject ho_ImageForLightRegin = null, ho_LightRegion = null;
            HObject ho_RegionClosing1 = null, ho_ConnectedRegions1 = null;
            HObject ho_SelectedRegions = null, ho_ImageForDarkRegion = null;
            HObject ho_DarkRegion = null;

            // Local control variables 

            HTuple hv_MainLineRegionNumbers = null, hv_Index = null;
            HTuple hv_UsedThreshold1 = new HTuple(), hv_UsedThreshold2 = new HTuple();
            HTuple hv_LightRegionHeight = new HTuple(), hv_DarkRegionHeight = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi1 = new HTuple(), hv_LightRegionHalfHeight = new HTuple();
            HTuple hv_LightRegionHalfWidth = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopRegionUpperLine);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDownLine);
            HOperatorSet.GenEmptyObj(out ho_UpperAndDownLine);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_ImageEdgeAmp);
            HOperatorSet.GenEmptyObj(out ho_Region1);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageForLightRegin);
            HOperatorSet.GenEmptyObj(out ho_LightRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ImageForDarkRegion);
            HOperatorSet.GenEmptyObj(out ho_DarkRegion);
            try
            {
                if ((int)(hv_isUsingFilmShiftingDetect.TupleNot()) != 0)
                {
                    ho_TopRegionUpperLine.Dispose();
                    ho_BottomRegionDownLine.Dispose();
                    ho_UpperAndDownLine.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_ImageEdgeAmp.Dispose();
                    ho_Region1.Dispose();
                    ho_RegionClosing.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_ImageForLightRegin.Dispose();
                    ho_LightRegion.Dispose();
                    ho_RegionClosing1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_ImageForDarkRegion.Dispose();
                    ho_DarkRegion.Dispose();

                    return;
                }

                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);

                //避免边界处寻找到的白色区域不闭合
                ho_TopRegionUpperLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_TopRegionUpperLine, 0, 0, 0, hv_width);
                ho_BottomRegionDownLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_BottomRegionDownLine, hv_height - 1, 0, hv_height - 1,
                    hv_width);
                ho_UpperAndDownLine.Dispose();
                HOperatorSet.Union2(ho_TopRegionUpperLine, ho_BottomRegionDownLine, out ho_UpperAndDownLine
                    );

                //抓取高梯度区域
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle, hv_centerRowOfSingleMainLineDetect,
                    hv_centerColumnOfSingleMainLineDetect, hv_Phi, 100, hv_halfHeight);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForWeldingDetect, ho_Rectangle, out ho_ImageReduced
                    );
                ho_ImageEdgeAmp.Dispose();
                HOperatorSet.KirschAmp(ho_ImageReduced, out ho_ImageEdgeAmp);
                ho_Region1.Dispose();
                HOperatorSet.Threshold(ho_ImageEdgeAmp, out ho_Region1, 200, 255);
                ho_RegionClosing.Dispose();
                HOperatorSet.ClosingRectangle1(ho_Region1, out ho_RegionClosing, 20, 10);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_RegionClosing, ho_UpperAndDownLine, out ExpTmpOutVar_0
                        );
                    ho_RegionClosing.Dispose();
                    ho_RegionClosing = ExpTmpOutVar_0;
                }
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_RegionClosing, out ho_RegionFillUp);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, (hv_filmWidthThresh / hv_widthResolution) * 0.5,
                    20);
                //opening_rectangle1 (RegionFillUp, RegionOpening, 1.6 / 0.0418 * 0.5, 20)
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                HOperatorSet.CountObj(ho_ConnectedRegions, out hv_MainLineRegionNumbers);

                HTuple end_val26 = hv_MainLineRegionNumbers;
                HTuple step_val26 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
                {
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                    ho_ImageForLightRegin.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_ObjectSelected, out ho_ImageForLightRegin
                        );
                    ho_LightRegion.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForLightRegin, out ho_LightRegion, "max_separability",
                        "light", out hv_UsedThreshold1);
                    ho_RegionClosing1.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_LightRegion, out ho_RegionClosing1, 15,
                        1);
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing1, out ho_ConnectedRegions1);
                    ho_SelectedRegions.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_SelectedRegions,
                        "max_area", 70);
                    ho_LightRegion.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_SelectedRegions, out ho_LightRegion, 10,
                        20);

                    //dilation_rectangle1 (LightRegion, LightRegion, 5, 1)
                    ho_ImageForDarkRegion.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_LightRegion, out ho_ImageForDarkRegion
                        );
                    ho_DarkRegion.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForDarkRegion, out ho_DarkRegion, "max_separability",
                        "dark", out hv_UsedThreshold2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_DarkRegion, out ExpTmpOutVar_0, 5, 5);
                        ho_DarkRegion.Dispose();
                        ho_DarkRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.RegionFeatures(ho_LightRegion, "height", out hv_LightRegionHeight);
                    HOperatorSet.RegionFeatures(ho_DarkRegion, "height", out hv_DarkRegionHeight);
                    if ((int)(new HTuple(hv_DarkRegionHeight.TupleLess(hv_LightRegionHeight * 0.2))) != 0)
                    {
                        HOperatorSet.SmallestRectangle2(ho_LightRegion, out hv_Row, out hv_Column,
                            out hv_Phi1, out hv_LightRegionHalfHeight, out hv_LightRegionHalfWidth);
                        //*         if (LightRegionHalfWidth * 2 > 33)
                        if ((int)(new HTuple(((hv_LightRegionHalfWidth * 2)).TupleGreater(hv_filmWidthThresh / hv_widthResolution))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ConcatObj(ho_weldingNGRegionOut, ho_ObjectSelected, out ExpTmpOutVar_0
                                    );
                                ho_weldingNGRegionOut.Dispose();
                                ho_weldingNGRegionOut = ExpTmpOutVar_0;
                            }
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispRegion(ho_weldingNGRegionOut, hv_ExpDefaultWinHandle);
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ConcatObj(ho_weldingNGRegionOut, ho_ObjectSelected, out ExpTmpOutVar_0
                                    );
                                ho_weldingNGRegionOut.Dispose();
                                ho_weldingNGRegionOut = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                        }
                    }
                    else
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                    }
                }
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_Region1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_LightRegion.Dispose();
                ho_RegionClosing1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions.Dispose();
                ho_ImageForDarkRegion.Dispose();
                ho_DarkRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_Region1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_LightRegion.Dispose();
                ho_RegionClosing1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions.Dispose();
                ho_ImageForDarkRegion.Dispose();
                ho_DarkRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void BrokenLineDetectOfBottomImage(HObject ho_BottomRegion, HObject ho_BottomMainLineRegions,
            HObject ho_GreenChannelImage, HObject ho_RedChannelImage, out HObject ho_totalBrokenLineRegionOutOfBottomImage,
            HTuple hv_isBottomWaferExist, HTuple hv_brokenLineDetectIndentDepth, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_isBackDetect, HTuple hv_brokenLineGrayThresh,
            HTuple hv_brokenLineWidthThresh, HTuple hv_brokenLineHeightThresh, out HTuple hv_isBrokenLineOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_BrokenLineDetectRegion = null, ho_BrokenLineSuspiciousRegions = null;
            HObject ho_ImageForBrokenLineDetect = null, ho_ImageOpeningTemp = null;
            HObject ho_ImageForExtractViceLine = null, ho_ViceLineRegions = null;
            HObject ho_BrokenLineSuspiciousRegionsTemp = null, ho_ViceLineIntersectionRegionsForReduceImage = null;
            HObject ho_ImageForContrastBrokenLineDetect = null, ho_RegionDynThresh = null;
            HObject ho_ViceLineRegionsDilation = null, ho_RegionIntersection = null;
            HObject ho_BigBrokenLineRegion = null, ho_BigBrokenLineRegionErosion = null;
            HObject ho_BigBrokenLineConnectedRegions = null, ho_BigBrokenLineObjectSelected = null;
            HObject ho_RegionDilation1 = null, ho_BigBrokenLineBackGroundRegion = null;
            HObject ho_ConnectedBigBrokenLineBackGroundRegion = null;
            HObject ho_ConnectedRegions = null, ho_ObjectSelected = null;
            HObject ho_RegionDilation = null, ho_RegionDifference = null;
            HObject ho_BackGroundRegion = null;

            // Local control variables 

            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_HalfWidthOfBottomRegionForBrokenLineDetectRectangle = new HTuple();
            HTuple hv_HalfHeightOfBottomRegionForBrokenLineDetectRectangle = new HTuple();
            HTuple hv_UsedThreshold = new HTuple(), hv_BigBrokenLineRegionNumber = new HTuple();
            HTuple hv_Index1 = new HTuple(), hv_Area = new HTuple();
            HTuple hv_BigBrokenLineBackGroundMean = new HTuple(), hv_Deviation1 = new HTuple();
            HTuple hv_BigBrokenLineObjectSelectedMean = new HTuple();
            HTuple hv_Deviation2 = new HTuple(), hv_SubMean = new HTuple();
            HTuple hv_TotalNum = new HTuple(), hv_Index = new HTuple();
            HTuple hv_BackGroundMean = new HTuple(), hv_BackGroundDeviation = new HTuple();
            HTuple hv_ObjectSelectedMean = new HTuple(), hv_ObjectSelectedDeviation = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOutOfBottomImage);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineSuspiciousRegions);
            HOperatorSet.GenEmptyObj(out ho_ImageForBrokenLineDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningTemp);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractViceLine);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineSuspiciousRegionsTemp);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionRegionsForReduceImage);
            HOperatorSet.GenEmptyObj(out ho_ImageForContrastBrokenLineDetect);
            HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionsDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineRegion);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineRegionErosion);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation1);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineBackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedBigBrokenLineBackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            try
            {
                //初始化下半片断栅区域
                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOutOfBottomImage);
                //初始化下半片断栅检测结果
                hv_isBrokenLineOfBottomWafer = 0;
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //初始化断栅检测区域
                    ho_BrokenLineDetectRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BrokenLineDetectRegion);
                    //初始化断栅可疑区域
                    ho_BrokenLineSuspiciousRegions.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BrokenLineSuspiciousRegions);

                    //提取断栅检测区域及相关原始图像
                    ho_BrokenLineDetectRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegion, out ho_BrokenLineDetectRegion,
                        hv_brokenLineDetectIndentDepth / hv_widthResolution, hv_brokenLineDetectIndentDepth / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Difference(ho_BrokenLineDetectRegion, ho_BottomMainLineRegions,
                            out ExpTmpOutVar_0);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.SmallestRectangle2(ho_BrokenLineDetectRegion, out hv_Row, out hv_Column,
                        out hv_Phi, out hv_HalfWidthOfBottomRegionForBrokenLineDetectRectangle,
                        out hv_HalfHeightOfBottomRegionForBrokenLineDetectRectangle);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_BrokenLineDetectRegion, out ExpTmpOutVar_0,
                            1, hv_HalfHeightOfBottomRegionForBrokenLineDetectRectangle);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ErosionRectangle1(ho_BrokenLineDetectRegion, out ExpTmpOutVar_0,
                            9, 9);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    if ((int)(hv_isBackDetect) != 0)
                    {
                        ho_ImageForBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_GreenChannelImage, ho_BrokenLineDetectRegion,
                            out ho_ImageForBrokenLineDetect);
                    }
                    else
                    {
                        ho_ImageForBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_BrokenLineDetectRegion,
                            out ho_ImageForBrokenLineDetect);
                    }
                    //提取细栅线区域(横向)
                    ho_ImageOpeningTemp.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_ImageForBrokenLineDetect, out ho_ImageOpeningTemp,
                        1, 15);
                    ho_ImageForExtractViceLine.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageOpeningTemp, out ho_ImageForExtractViceLine,
                        1, 50);
                    ho_ViceLineRegions.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractViceLine, out ho_ViceLineRegions,
                        "max_separability", "light", out hv_UsedThreshold);
                    //剔除单点干扰
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ViceLineRegions, out ExpTmpOutVar_0, 50,
                            1);
                        ho_ViceLineRegions.Dispose();
                        ho_ViceLineRegions = ExpTmpOutVar_0;
                    }

                    //提取氧化区域
                    //closing_rectangle1 (ViceLineRegions, ViceLineDilationRegions, 0.5*HalfWidthOfBottomRegionForBrokenLineDetectRectangle, 1)
                    //difference (ViceLineDilationRegions, ViceLineRegions, DiffRegions)
                    //intersection (DiffRegions, BrokenLineDetectRegion, IntersectionRegions)
                    //opening_rectangle1 (IntersectionRegions, BrokenLineSuspiciousRegionsTemp, 2, 2)
                    //union2 (BrokenLineSuspiciousRegions, BrokenLineSuspiciousRegionsTemp, BrokenLineSuspiciousRegions)

                    //提取出最终细栅线的原始图像,并进行预处理
                    ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                    HOperatorSet.Intersection(ho_ViceLineRegions, ho_BrokenLineDetectRegion,
                        out ho_ViceLineIntersectionRegionsForReduceImage);
                    if ((int)(hv_isBackDetect) != 0)
                    {
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_GreenChannelImage, ho_ViceLineIntersectionRegionsForReduceImage,
                            out ho_ImageForContrastBrokenLineDetect);
                    }
                    else
                    {
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_ViceLineIntersectionRegionsForReduceImage,
                            out ho_ImageForContrastBrokenLineDetect);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.GrayOpeningRect(ho_ImageForContrastBrokenLineDetect, out ExpTmpOutVar_0,
                            1, 50);
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        ho_ImageForContrastBrokenLineDetect = ExpTmpOutVar_0;
                    }

                    //断栅筛选
                    ho_RegionDynThresh.Dispose();
                    HOperatorSet.DynThreshold(ho_ImageOpeningTemp, ho_ImageForExtractViceLine,
                        out ho_RegionDynThresh, hv_brokenLineGrayThresh, "dark");
                    ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDynThresh, out ho_BrokenLineSuspiciousRegionsTemp,
                        hv_brokenLineWidthThresh / hv_widthResolution, hv_brokenLineHeightThresh / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BrokenLineSuspiciousRegions, ho_BrokenLineSuspiciousRegionsTemp,
                            out ExpTmpOutVar_0);
                        ho_BrokenLineSuspiciousRegions.Dispose();
                        ho_BrokenLineSuspiciousRegions = ExpTmpOutVar_0;
                    }

                    //2019-3-29大的断栅检测
                    //获取大断栅region
                    ho_ViceLineRegionsDilation.Dispose();
                    HOperatorSet.DilationRectangle1(ho_ViceLineRegions, out ho_ViceLineRegionsDilation,
                        300, 1);
                    ho_RegionIntersection.Dispose();
                    HOperatorSet.Intersection(ho_ViceLineRegionsDilation, ho_BrokenLineDetectRegion,
                        out ho_RegionIntersection);
                    ho_BigBrokenLineRegion.Dispose();
                    HOperatorSet.Difference(ho_RegionIntersection, ho_ViceLineRegions, out ho_BigBrokenLineRegion
                        );
                    ho_BigBrokenLineRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BigBrokenLineRegion, out ho_BigBrokenLineRegionErosion,
                        10, 3);
                    ho_BigBrokenLineConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_BigBrokenLineRegionErosion, out ho_BigBrokenLineConnectedRegions
                        );
                    //2019-4-16添加长度筛选
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_BigBrokenLineConnectedRegions, out ExpTmpOutVar_0,
                            "rect2_len1", "and", (hv_brokenLineWidthThresh / hv_widthResolution) * 0.5,
                            99999);
                        ho_BigBrokenLineConnectedRegions.Dispose();
                        ho_BigBrokenLineConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_BigBrokenLineConnectedRegions, out hv_BigBrokenLineRegionNumber);
                    HTuple end_val59 = hv_BigBrokenLineRegionNumber;
                    HTuple step_val59 = 1;
                    for (hv_Index1 = 1; hv_Index1.Continue(end_val59, step_val59); hv_Index1 = hv_Index1.TupleAdd(step_val59))
                    {
                        ho_BigBrokenLineObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_BigBrokenLineConnectedRegions, out ho_BigBrokenLineObjectSelected,
                            hv_Index1);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_BigBrokenLineObjectSelected, out hv_Area, out hv_Row,
                            out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //求背景与疑似断栅灰度差
                        ho_RegionDilation1.Dispose();
                        HOperatorSet.DilationRectangle1(ho_BigBrokenLineObjectSelected, out ho_RegionDilation1,
                            1, 10);
                        ho_BigBrokenLineBackGroundRegion.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation1, ho_BigBrokenLineObjectSelected,
                            out ho_BigBrokenLineBackGroundRegion);

                        //2019-4-1避免误检
                        ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                        HOperatorSet.Connection(ho_BigBrokenLineBackGroundRegion, out ho_ConnectedBigBrokenLineBackGroundRegion
                            );
                        //2019-4-16避免因片子倾斜造成误检
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Intersection(ho_ConnectedBigBrokenLineBackGroundRegion, ho_BrokenLineDetectRegion,
                                out ExpTmpOutVar_0);
                            ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                            ho_ConnectedBigBrokenLineBackGroundRegion = ExpTmpOutVar_0;
                        }

                        HOperatorSet.Intensity(ho_ConnectedBigBrokenLineBackGroundRegion, ho_ImageForExtractViceLine,
                            out hv_BigBrokenLineBackGroundMean, out hv_Deviation1);
                        //tuple_max (BigBrokenLineBackGroundMean, BigBrokenLineBackGroundMean)

                        HOperatorSet.Intensity(ho_BigBrokenLineObjectSelected, ho_ImageForExtractViceLine,
                            out hv_BigBrokenLineObjectSelectedMean, out hv_Deviation2);
                        hv_SubMean = hv_BigBrokenLineObjectSelectedMean - hv_BigBrokenLineBackGroundMean;
                        HOperatorSet.TupleAbs(hv_SubMean, out hv_SubMean);
                        HOperatorSet.TupleMax(hv_SubMean, out hv_SubMean);
                        if ((int)(new HTuple(hv_SubMean.TupleLessEqual(5))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalBrokenLineRegionOutOfBottomImage, ho_BigBrokenLineObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();
                                ho_totalBrokenLineRegionOutOfBottomImage = ExpTmpOutVar_0;
                            }
                            hv_isBrokenLineOfBottomWafer = 1;
                        }
                    }

                    //根据可疑区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_BrokenLineSuspiciousRegions, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val91 = hv_TotalNum;
                    HTuple step_val91 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val91, step_val91); hv_Index = hv_Index.TupleAdd(step_val91))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_ViceLineRegions, out ho_BackGroundRegion
                            );
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForContrastBrokenLineDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForContrastBrokenLineDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((hv_BackGroundMean - hv_ObjectSelectedMean)).TupleGreaterEqual(
                            hv_brokenLineGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalBrokenLineRegionOutOfBottomImage, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();
                                ho_totalBrokenLineRegionOutOfBottomImage = ExpTmpOutVar_0;
                            }
                            hv_isBrokenLineOfBottomWafer = 1;
                        }
                    }
                }
                ho_BrokenLineDetectRegion.Dispose();
                ho_BrokenLineSuspiciousRegions.Dispose();
                ho_ImageForBrokenLineDetect.Dispose();
                ho_ImageOpeningTemp.Dispose();
                ho_ImageForExtractViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                ho_ImageForContrastBrokenLineDetect.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ViceLineRegionsDilation.Dispose();
                ho_RegionIntersection.Dispose();
                ho_BigBrokenLineRegion.Dispose();
                ho_BigBrokenLineRegionErosion.Dispose();
                ho_BigBrokenLineConnectedRegions.Dispose();
                ho_BigBrokenLineObjectSelected.Dispose();
                ho_RegionDilation1.Dispose();
                ho_BigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_BrokenLineDetectRegion.Dispose();
                ho_BrokenLineSuspiciousRegions.Dispose();
                ho_ImageForBrokenLineDetect.Dispose();
                ho_ImageOpeningTemp.Dispose();
                ho_ImageForExtractViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                ho_ImageForContrastBrokenLineDetect.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ViceLineRegionsDilation.Dispose();
                ho_RegionIntersection.Dispose();
                ho_BigBrokenLineRegion.Dispose();
                ho_BigBrokenLineRegionErosion.Dispose();
                ho_BigBrokenLineConnectedRegions.Dispose();
                ho_BigBrokenLineObjectSelected.Dispose();
                ho_RegionDilation1.Dispose();
                ho_BigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void BrokenLineDetectFunction(HObject ho_TopMainLineRegions, HObject ho_BottomRegion,
            HObject ho_TopRegion, HObject ho_BottomMainLineRegions, HObject ho_GreenChannelImage,
            HObject ho_RedChannelImage, out HObject ho_totalBrokenLineRegionOut, HTuple hv_isUsingBrokenLineDetect,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_brokenLineDetectIndentDepth,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_isBackDetect,
            HTuple hv_brokenLineGrayThresh, HTuple hv_brokenLineWidthThresh, HTuple hv_brokenLineHeightThresh,
            HTuple hv_isDetectOfTopWafer, HTuple hv_isDetectOfBottomWafer, out HTuple hv_isBrokenLineOfTopWafer,
            out HTuple hv_isBrokenLineOfBottomWafer)
        {




            // Local iconic variables 

            HObject ho_totalBrokenLineRegionOutOfTopImage;
            HObject ho_totalBrokenLineRegionOutOfBottomImage;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOutOfTopImage);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOutOfBottomImage);
            try
            {
                //断栅缺陷结果初始化，防止功能切除异常。
                hv_isBrokenLineOfTopWafer = 0;
                hv_isBrokenLineOfBottomWafer = 0;
                //断栅区域初始化
                ho_totalBrokenLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOut);
                //2020.05.12-初始化上下半片断栅区域
                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOutOfTopImage);
                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOutOfBottomImage);
                if ((int)(hv_isUsingBrokenLineDetect) != 0)
                {
                    //上半片处理
                    //par_start<BrokenLineDetectOfTopImage> : BrokenLineDetectOfTopImage (TopMainLineRegions, GreenChannelImage, TopRegion, RedChannelImage, totalBrokenLineRegionOutOfTopImage, isTopWaferExist, brokenLineDetectIndentDepth, widthResolution, heightResolution, isBackDetect, brokenLineGrayThresh, brokenLineWidthThresh, brokenLineHeightThresh, isBrokenLineOfTopWafer)
                    if ((int)(new HTuple(hv_isDetectOfTopWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                        BrokenLineDetectOfTopImage(ho_TopMainLineRegions, ho_GreenChannelImage,
                            ho_TopRegion, ho_RedChannelImage, out ho_totalBrokenLineRegionOutOfTopImage,
                            hv_isTopWaferExist, hv_brokenLineDetectIndentDepth, hv_widthResolution,
                            hv_heightResolution, hv_isBackDetect, hv_brokenLineGrayThresh, hv_brokenLineWidthThresh,
                            hv_brokenLineHeightThresh, out hv_isBrokenLineOfTopWafer);
                    }
                    //下半片处理
                    //par_start<BrokenLineDetectOfBottomImage> : BrokenLineDetectOfBottomImage (BottomRegion, BottomMainLineRegions, GreenChannelImage, RedChannelImage, totalBrokenLineRegionOutOfBottomImage, isBottomWaferExist, brokenLineDetectIndentDepth, widthResolution, heightResolution, isBackDetect, brokenLineGrayThresh, brokenLineWidthThresh, brokenLineHeightThresh, isBrokenLineOfBottomWafer)
                    if ((int)(new HTuple(hv_isDetectOfBottomWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalBrokenLineRegionOutOfBottomImage.Dispose();
                        BrokenLineDetectOfBottomImage(ho_BottomRegion, ho_BottomMainLineRegions,
                            ho_GreenChannelImage, ho_RedChannelImage, out ho_totalBrokenLineRegionOutOfBottomImage,
                            hv_isBottomWaferExist, hv_brokenLineDetectIndentDepth, hv_widthResolution,
                            hv_heightResolution, hv_isBackDetect, hv_brokenLineGrayThresh, hv_brokenLineWidthThresh,
                            hv_brokenLineHeightThresh, out hv_isBrokenLineOfBottomWafer);
                    }
                    //par_join ([BrokenLineDetectOfTopImage,BrokenLineDetectOfBottomImage])
                    //断栅总缺陷区域汇总
                    ho_totalBrokenLineRegionOut.Dispose();
                    HOperatorSet.Union2(ho_totalBrokenLineRegionOutOfTopImage, ho_totalBrokenLineRegionOutOfBottomImage,
                        out ho_totalBrokenLineRegionOut);
                }
                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                ho_totalBrokenLineRegionOutOfBottomImage.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SurfaceDefectDetectFunction(HObject ho_RegionFillUp, HObject ho_SelectedRegions,
            HObject ho_TopRegion, HObject ho_BottomRegion, HObject ho_TopMainLineRegions,
            HObject ho_BottomMainLineRegions, HObject ho_RedChannelImage, HObject ho_BlueChannelImage,
            out HObject ho_totalSurfaceDefectRegionOut, HTuple hv_isUsingSurfaceDefectDetect,
            HTuple hv_surfaceDefectHeightThresh, HTuple hv_surfaceDefectWidthThresh, HTuple hv_isTopWaferExist,
            HTuple hv_isBottomWaferExist, HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_subMainLineNum, HTuple hv_PI, HTuple hv_surfaceDefectViceLineShieldWidth,
            HTuple hv_isUsingChinese, HTuple hv_windowHandle, HTuple hv_surfaceScratchGrayThresh,
            HTuple hv_surfaceScratchHeightThresh, HTuple hv_width, HTuple hv_height, HTuple hv_surfaceScratchWidthThresh,
            HTuple hv_surfaceDefectViceLineShieldLeftPosOffSet, HTuple hv_surfaceDefectViceLineShieldRightPosOffSet,
            HTuple hv_surfaceDefectGrayThresh, HTuple hv_isUsingSurfaceColorDiffDetect,
            HTuple hv_CenterRowOfTopRegion, HTuple hv_CenterColumnOfTopRegion, HTuple hv_CenterRowOfBottomRegion,
            HTuple hv_CenterColumnOfBottomRegion, HTuple hv_isDetectOfTopWafer, HTuple hv_isDetectOfBottomWafer,
            out HTuple hv_isSurfaceDefectOfTopWafer, out HTuple hv_surfaceMeanGrayOfTopWaferOut,
            out HTuple hv_surfaceMeanGrayOfBottomWaferOut, out HTuple hv_isSurfaceDefectOfBottomWafer,
            out HTuple hv_isSurfaceScratchOfTopWafer, out HTuple hv_isSurfaceScratchOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_totalSurfaceDefectRegionOutOfTopImage;
            HObject ho_totalSurfaceDefectRegionOutOfBottomImage, ho_MiddleLightForeignRegion = null;
            HObject ho_MiddleLightForeignRegionHeightErosion = null, ho_MiddleLightForeignRegionWidthErosion = null;
            HObject ho_RegionIntersectionTop = null;

            // Local control variables 

            HTuple hv_MiddleLightForeignRegionHeightErosionArea = new HTuple();
            HTuple hv_MiddleLightForeignRegionWidthErosionArea = new HTuple();
            HTuple hv_RegionIntersectionTopArea = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOutOfTopImage);
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOutOfBottomImage);
            HOperatorSet.GenEmptyObj(out ho_MiddleLightForeignRegion);
            HOperatorSet.GenEmptyObj(out ho_MiddleLightForeignRegionHeightErosion);
            HOperatorSet.GenEmptyObj(out ho_MiddleLightForeignRegionWidthErosion);
            HOperatorSet.GenEmptyObj(out ho_RegionIntersectionTop);
            try
            {
                //表面缺陷结果初始化，防止功能切除异常。
                hv_isSurfaceDefectOfTopWafer = 0;
                hv_isSurfaceDefectOfBottomWafer = 0;
                hv_isSurfaceScratchOfTopWafer = 0;
                hv_isSurfaceScratchOfBottomWafer = 0;
                hv_surfaceMeanGrayOfTopWaferOut = -1;
                hv_surfaceMeanGrayOfBottomWaferOut = -1;
                //表面总缺陷区域初始化
                ho_totalSurfaceDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOut);
                //2020.05.12-表面缺陷结果区域初始化
                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOutOfTopImage);
                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOutOfBottomImage
                    );

                if ((int)(hv_isUsingSurfaceDefectDetect) != 0)
                {
                    //上半片处理
                    //par_start<SurfaceDefectDetectOfTopImage> : SurfaceDefectDetectOfTopImage (TopRegion, TopMainLineRegions, RedChannelImage, BlueChannelImage, totalSurfaceDefectRegionOutOfTopImage, isTopWaferExist, surfaceDefectDetectIndentDepth, widthResolution, heightResolution, subMainLineNum, PI, surfaceDefectViceLineShieldWidth, isUsingChinese, windowHandle, surfaceScratchGrayThresh, surfaceScratchHeightThresh, width, height, surfaceDefectWidthThresh, surfaceDefectHeightThresh, surfaceScratchWidthThresh, surfaceDefectViceLineShieldLeftPosOffSet, surfaceDefectViceLineShieldRightPosOffSet, surfaceDefectGrayThresh, isUsingSurfaceColorDiffDetect, CenterRowOfTopRegion1, CenterColumnOfTopRegion, isSurfaceDefectOfTopWafer, surfaceMeanGrayOfTopWaferOut, isSurfaceScratchOfTopWafer)
                    if ((int)(new HTuple(hv_isDetectOfTopWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                        SurfaceDefectDetectOfTopImage(ho_TopRegion, ho_TopMainLineRegions, ho_RedChannelImage,
                            ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOutOfTopImage,
                            hv_isTopWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution,
                            hv_heightResolution, hv_subMainLineNum, hv_PI, hv_surfaceDefectViceLineShieldWidth,
                            hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchHeightThresh,
                            hv_width, hv_height, hv_surfaceDefectWidthThresh, hv_surfaceDefectHeightThresh,
                            hv_surfaceScratchWidthThresh, hv_surfaceDefectViceLineShieldLeftPosOffSet,
                            hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                            hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion,
                            out hv_isSurfaceDefectOfTopWafer, out hv_surfaceMeanGrayOfTopWaferOut,
                            out hv_isSurfaceScratchOfTopWafer);
                    }
                    //下半片处理
                    //par_start<SurfaceDefectDetectOfBottomImage> : SurfaceDefectDetectOfBottomImage (BottomRegion, BottomMainLineRegions, RedChannelImage, BlueChannelImage, totalSurfaceDefectRegionOutOfBottomImage, isBottomWaferExist, surfaceDefectDetectIndentDepth, widthResolution, heightResolution, subMainLineNum, PI, isUsingChinese, surfaceDefectViceLineShieldWidth, windowHandle, surfaceScratchGrayThresh, surfaceScratchWidthThresh, surfaceScratchHeightThresh, width, height, surfaceDefectWidthThresh, surfaceDefectHeightThresh, surfaceDefectViceLineShieldLeftPosOffSet, surfaceDefectViceLineShieldRightPosOffSet, surfaceDefectGrayThresh, isUsingSurfaceColorDiffDetect, CenterRowOfBottomRegion1, CenterColumnOfBottomRegion, isSurfaceDefectOfBottomWafer, surfaceMeanGrayOfBottomWaferOut, isSurfaceScratchOfBottomWafer)
                    if ((int)(new HTuple(hv_isDetectOfBottomWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                        SurfaceDefectDetectOfBottomImage(ho_BottomRegion, ho_BottomMainLineRegions,
                            ho_RedChannelImage, ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOutOfBottomImage,
                            hv_isBottomWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution,
                            hv_heightResolution, hv_subMainLineNum, hv_PI, hv_isUsingChinese, hv_surfaceDefectViceLineShieldWidth,
                            hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchWidthThresh,
                            hv_surfaceScratchHeightThresh, hv_width, hv_height, hv_surfaceDefectWidthThresh,
                            hv_surfaceDefectHeightThresh, hv_surfaceDefectViceLineShieldLeftPosOffSet,
                            hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                            hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfBottomRegion, hv_CenterColumnOfBottomRegion,
                            out hv_isSurfaceDefectOfBottomWafer, out hv_surfaceMeanGrayOfBottomWaferOut,
                            out hv_isSurfaceScratchOfBottomWafer);
                    }
                    //par_join ([SurfaceDefectDetectOfTopImage,SurfaceDefectDetectOfBottomImage])
                    //上下半片表面检测结果汇总
                    ho_totalSurfaceDefectRegionOut.Dispose();
                    HOperatorSet.Union2(ho_totalSurfaceDefectRegionOutOfBottomImage, ho_totalSurfaceDefectRegionOutOfTopImage,
                        out ho_totalSurfaceDefectRegionOut);
                    //2019-4-4非边角处较亮异物检测
                    ho_MiddleLightForeignRegion.Dispose();
                    HOperatorSet.Difference(ho_RegionFillUp, ho_SelectedRegions, out ho_MiddleLightForeignRegion
                        );
                    ho_MiddleLightForeignRegionHeightErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_MiddleLightForeignRegion, out ho_MiddleLightForeignRegionHeightErosion,
                        1, hv_surfaceDefectHeightThresh / hv_heightResolution);
                    ho_MiddleLightForeignRegionWidthErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_MiddleLightForeignRegion, out ho_MiddleLightForeignRegionWidthErosion,
                        hv_surfaceDefectWidthThresh / hv_widthResolution, 1);
                    HOperatorSet.RegionFeatures(ho_MiddleLightForeignRegionHeightErosion, "area",
                        out hv_MiddleLightForeignRegionHeightErosionArea);
                    HOperatorSet.RegionFeatures(ho_MiddleLightForeignRegionWidthErosion, "area",
                        out hv_MiddleLightForeignRegionWidthErosionArea);
                    if ((int)((new HTuple(hv_MiddleLightForeignRegionHeightErosionArea.TupleGreater(
                        0))).TupleOr(new HTuple(hv_MiddleLightForeignRegionWidthErosionArea.TupleGreater(
                        0)))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_totalSurfaceDefectRegionOut, ho_MiddleLightForeignRegion,
                                out ExpTmpOutVar_0);
                            ho_totalSurfaceDefectRegionOut.Dispose();
                            ho_totalSurfaceDefectRegionOut = ExpTmpOutVar_0;
                        }
                        //判断缺陷位置在上半片还是下半片
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_RegionIntersectionTop.Dispose();
                            HOperatorSet.Intersection(ho_MiddleLightForeignRegion, ho_TopRegion,
                                out ho_RegionIntersectionTop);
                            HOperatorSet.RegionFeatures(ho_RegionIntersectionTop, "area", out hv_RegionIntersectionTopArea);
                            if ((int)(new HTuple(hv_RegionIntersectionTopArea.TupleGreater(0))) != 0)
                            {
                                hv_isSurfaceDefectOfTopWafer = 1;
                            }
                            else
                            {
                                hv_isSurfaceDefectOfBottomWafer = 1;
                            }
                        }
                        else
                        {
                            hv_isSurfaceDefectOfBottomWafer = 1;
                        }
                    }
                }
                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                ho_MiddleLightForeignRegion.Dispose();
                ho_MiddleLightForeignRegionHeightErosion.Dispose();
                ho_MiddleLightForeignRegionWidthErosion.Dispose();
                ho_RegionIntersectionTop.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                ho_MiddleLightForeignRegion.Dispose();
                ho_MiddleLightForeignRegionHeightErosion.Dispose();
                ho_MiddleLightForeignRegionWidthErosion.Dispose();
                ho_RegionIntersectionTop.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void EdgeDefectDetectFunction(HObject ho_RedChannelImage, HObject ho_SelectedRegions,
            HObject ho_CalibrateTopAroundRegion, HObject ho_ImageForFilmDetect, HObject ho_TopRegion,
            HObject ho_BottomRegion, HObject ho_ImageForExtractROI, HObject ho_TopMainLineRegions,
            HObject ho_BottomMainLineRegions, HObject ho_ImageForWeldNGDetect, HObject ho_CalibrateBottomAroundRegion,
            out HObject ho_totalEdgeDefectRegionOut, HTuple hv_isUsingEdgeDefectDetect,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_isTopRegionCalibrateFinish,
            HTuple hv_isBottomRegionCalibrateFinish, HTuple hv_windowHandle, HTuple hv_edgeBigDefectWidthThresh,
            HTuple hv_edgeBigDefectHeightThresh, HTuple hv_isFullWafer, HTuple hv_height,
            HTuple hv_mainLineNum, HTuple hv_widthResolution, HTuple hv_heightResolution,
            HTuple hv_edgeSmallDefectDetectDepth, HTuple hv_edgeSmallDefectWidthThresh,
            HTuple hv_edgeSmallDefectHeightThresh, HTuple hv_edgeSmallDefectGrayThresh,
            HTuple hv_IsTopMonocrystalline, HTuple hv_cornerDefectAreaRatioThresh, HTuple hv_isUsingChinese,
            HTuple hv_IsBottomMonocrystalline, HTuple hv_weldWidthThresh, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_isDetectOfTopWafer, HTuple hv_isDetectOfBottomWafer, out HTuple hv_isEdgeDefectOfTopWafer,
            out HTuple hv_isEdgeDefectOfBottomWafer, out HTuple hv_isStartWeldingNGOfBottomWafer)
        {




            // Local iconic variables 

            HObject ho_totalEdgeDefectOfTopRegion, ho_totalEdgeDefectOfBottomRegion;
            HObject ho_RedChannelROIImage = null, ho_ImageForEdgeDefectDetect = null;

            // Local control variables 

            HTuple hv_EdgeDefectDetectIndentDepth = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_RedChannelROIImage);
            HOperatorSet.GenEmptyObj(out ho_ImageForEdgeDefectDetect);
            try
            {
                //边角缺陷结果初始化，防止功能切除异常。
                hv_isEdgeDefectOfTopWafer = 0;
                hv_isEdgeDefectOfBottomWafer = 0;
                hv_isStartWeldingNGOfBottomWafer = 0;
                //2020.05.12- 边角缺陷区域初始化
                ho_totalEdgeDefectOfTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfTopRegion);
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfBottomRegion);


                ho_totalEdgeDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectRegionOut);
                if ((int)(hv_isUsingEdgeDefectDetect) != 0)
                {
                    //2019-4-17计算当前高度分辨率两个栅线间的像素个数，用于边角缺陷缩进
                    hv_EdgeDefectDetectIndentDepth = 1.5 / hv_heightResolution;
                    ho_RedChannelROIImage.Dispose();
                    HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_SelectedRegions, out ho_RedChannelROIImage
                        );
                    //消除细栅线的干扰
                    //2019-6-12提速，去除冗余开运算，用ImageForFilmDetect最为边角检测图像。
                    ho_ImageForEdgeDefectDetect.Dispose();
                    ho_ImageForEdgeDefectDetect = ho_ImageForFilmDetect.CopyObj(1, -1);
                    //gray_opening_rect (ImageForFilmDetect, ImageForEdgeDefectDetect, 1, 10)
                    //上半片处理
                    //cornerDefectAreaRatioThresh := 0.7
                    //par_start<EdgeDefectDetectOfTopImage> : EdgeDefectDetectOfTopImage (CalibrateTopAroundRegion, RedChannelROIImage, TopRegion, ImageForExtractROI, TopMainLineRegions, ImageForEdgeDefectDetect, totalEdgeDefectOfTopRegion, isTopWaferExist, isTopRegionCalibrateFinish, EdgeDefectDetectIndentDepth, windowHandle, edgeBigDefectWidthThresh, edgeBigDefectHeightThresh, widthResolution, heightResolution, edgeSmallDefectDetectDepth, edgeSmallDefectWidthThresh, edgeSmallDefectHeightThresh, edgeSmallDefectGrayThresh, IsTopMonocrystalline, cornerDefectAreaRatioThresh, isUsingChinese, isEdgeDefectOfTopWafer)
                    if ((int)(new HTuple(hv_isDetectOfTopWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalEdgeDefectOfTopRegion.Dispose();
                        EdgeDefectDetectOfTopImage(ho_CalibrateTopAroundRegion, ho_RedChannelROIImage,
                            ho_TopRegion, ho_ImageForExtractROI, ho_TopMainLineRegions, ho_ImageForEdgeDefectDetect,
                            out ho_totalEdgeDefectOfTopRegion, hv_isTopWaferExist, hv_isTopRegionCalibrateFinish,
                            hv_EdgeDefectDetectIndentDepth, hv_windowHandle, hv_edgeBigDefectWidthThresh,
                            hv_edgeBigDefectHeightThresh, hv_widthResolution, hv_heightResolution,
                            hv_edgeSmallDefectDetectDepth, hv_edgeSmallDefectWidthThresh, hv_edgeSmallDefectHeightThresh,
                            hv_edgeSmallDefectGrayThresh, hv_IsTopMonocrystalline, hv_cornerDefectAreaRatioThresh,
                            hv_isUsingChinese, out hv_isEdgeDefectOfTopWafer);
                    }
                    //下半片处理
                    //下半片处理
                    //par_start<EdgeDefectDetectOfBottomImage> : EdgeDefectDetectOfBottomImage (CalibrateBottomAroundRegion, RedChannelROIImage, BottomRegion, ImageForExtractROI, BottomMainLineRegions, ImageForWeldNGDetect, ImageForEdgeDefectDetect, totalEdgeDefectOfBottomRegion, isBottomWaferExist, isBottomRegionCalibrateFinish, EdgeDefectDetectIndentDepth, windowHandle, isFullWafer, height, mainLineNum, weldWidthThresh, widthResolution, heightResolution, edgeBigDefectWidthThresh, edgeBigDefectHeightThresh, edgeSmallDefectDetectDepth, edgeSmallDefectWidthThresh, edgeSmallDefectHeightThresh, edgeSmallDefectGrayThresh, IsBottomMonocrystalline, cornerDefectAreaRatioThresh, isUsingChinese, isUsingStartWeldingDetect1, isEdgeDefectOfBottomWafer, isStartWeldingNGOfBottomWafer)
                    if ((int)(new HTuple(hv_isDetectOfBottomWafer.TupleEqual(0))) != 0)
                    {
                        ho_totalEdgeDefectOfBottomRegion.Dispose();
                        EdgeDefectDetectOfBottomImage(ho_CalibrateBottomAroundRegion, ho_RedChannelROIImage,
                            ho_BottomRegion, ho_ImageForExtractROI, ho_BottomMainLineRegions, ho_ImageForWeldNGDetect,
                            ho_ImageForEdgeDefectDetect, out ho_totalEdgeDefectOfBottomRegion,
                            hv_isBottomWaferExist, hv_isBottomRegionCalibrateFinish, hv_EdgeDefectDetectIndentDepth,
                            hv_windowHandle, hv_isFullWafer, hv_height, hv_mainLineNum, hv_weldWidthThresh,
                            hv_widthResolution, hv_heightResolution, hv_edgeBigDefectWidthThresh,
                            hv_edgeBigDefectHeightThresh, hv_edgeSmallDefectDetectDepth, hv_edgeSmallDefectWidthThresh,
                            hv_edgeSmallDefectHeightThresh, hv_edgeSmallDefectGrayThresh, hv_IsBottomMonocrystalline,
                            hv_cornerDefectAreaRatioThresh, hv_isUsingChinese, hv_isUsingStartWeldingDetect,
                            out hv_isEdgeDefectOfBottomWafer, out hv_isStartWeldingNGOfBottomWafer);
                    }
                    //par_join ([EdgeDefectDetectOfTopImage,EdgeDefectDetectOfBottomImage])
                    //边角总缺陷区域汇总
                    ho_totalEdgeDefectRegionOut.Dispose();
                    HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_totalEdgeDefectOfBottomRegion,
                        out ho_totalEdgeDefectRegionOut);
                }
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_RedChannelROIImage.Dispose();
                ho_ImageForEdgeDefectDetect.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_RedChannelROIImage.Dispose();
                ho_ImageForEdgeDefectDetect.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void EdgeDefectDetectOfTopImage(HObject ho_CalibrateTopAroundRegion, HObject ho_RedChannelROIImage,
            HObject ho_TopRegion, HObject ho_ImageForExtractROI, HObject ho_TopMainLineRegions,
            HObject ho_ImageForEdgeDefectDetect, out HObject ho_totalEdgeDefectOfTopRegion,
            HTuple hv_isTopWaferExist, HTuple hv_isTopRegionCalibrateFinish, HTuple hv_EdgeDefectDetectIndentDepth,
            HTuple hv_windowHandle, HTuple hv_edgeBigDefectWidthThresh, HTuple hv_edgeBigDefectHeightThresh,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_edgeSmallDefectDetectDepth,
            HTuple hv_edgeSmallDefectWidthThresh, HTuple hv_edgeSmallDefectHeightThresh,
            HTuple hv_edgeSmallDefectGrayThresh, HTuple hv_IsTopMonocrystalline, HTuple hv_cornerDefectAreaRatioThresh,
            HTuple hv_isUsingChinese, out HTuple hv_isEdgeDefectOfTopWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_EdgeDefectSuspiciousRegion = null;
            HObject ho_TopRegionTrans = null, ho_TopEdgeDetectRegion = null;
            HObject ho_InnerEdgeRegion = null, ho_ErosionForGetUpRegion = null;
            HObject ho_ConnectedRegions2 = null, ho_UpRegionFromTopRegion = null;
            HObject ho_UpImageFromTopImage = null, ho_FirstColorLineRegion = null;
            HObject ho_ConnectedRegions3 = null, ho_ColorLineRegion = null;
            HObject ho_RegionDifference = null, ho_BigEdgeDefectRegion = null;
            HObject ho_TopRegionErosion = null, ho_EdgeRegions = null, ho_ConnectedRegions = null;
            HObject ho_BottomEdgeRegionOfTopRegion = null, ho_EdgeDetectRectangle = null;
            HObject ho_EdgeDetectErosionRegion = null, ho_EdgeDetectRegion = null;
            HObject ho_ImageReduced = null, ho_EdgeDefectSuspiciousRegionTemp = null;
            HObject ho_LeftEdgeRegionOfTopRegion = null, ho_LeftEdgeDetectRegion = null;
            HObject ho_ConnectedRegions1 = null, ho_ConnectedRegions4 = null;
            HObject ho_RightEdgeRegionOfTopRegion = null, ho_RightEdgeDetectRegion = null;
            HObject ho_ConnectedRegions5 = null, ho_ObjectSelected = null;
            HObject ho_RegionDilation = null, ho_BackGroundRegion = null;
            HObject ho_CornerRegions = null, ho_LeftBottomCornerRegion = null;
            HObject ho_LeftBottomCornerFullRegion = null, ho_LeftBottomCornerRealRegion = null;
            HObject ho_LeftBottomCornerRealRegionTrans = null, ho_LeftBottomCornerWhiteRegion = null;
            HObject ho_RightBottomCornerRegion = null, ho_RightBottomCornerFullRegion = null;
            HObject ho_RightBottomCornerRealRegion = null, ho_RightBottomCornerRealRegionTrans = null;
            HObject ho_RightBottomCornerWhiteRegion = null;

            // Local control variables 

            HTuple hv_isTopInnerRegionCalibrateFinish = new HTuple();
            HTuple hv_CenterRowOfTopRegion = new HTuple(), hv_CenterColumnOfTopRegion = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_halfWidth = new HTuple();
            HTuple hv_halfHeight = new HTuple(), hv_ColorLineRegionArea = new HTuple();
            HTuple hv_IsColorLineRegion = new HTuple(), hv_ConnectedRegionsNumbers = new HTuple();
            HTuple hv_isException = new HTuple(), hv_exceptionInfo = new HTuple();
            HTuple hv_RowTemp = new HTuple(), hv_ColumnTemp = new HTuple();
            HTuple hv_PhiTemp = new HTuple(), hv_halfWidthTemp = new HTuple();
            HTuple hv_halfHeightTemp = new HTuple(), hv_TotalNum = new HTuple();
            HTuple hv_Index = new HTuple(), hv_BackGroundMean = new HTuple();
            HTuple hv_BackGroundDeviation = new HTuple(), hv_ObjectSelectedMean = new HTuple();
            HTuple hv_ObjectSelectedDeviation = new HTuple(), hv_ObjectSelectedArea = new HTuple();
            HTuple hv_ObjectSelectedAreaRow = new HTuple(), hv_ObjectSelectedAreaColumn = new HTuple();
            HTuple hv_info = new HTuple(), hv_AreaOfLeftBottomCornerWhiteRegion = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_AreaOfRightBottomCornerWhiteRegion = new HTuple();
            HTuple hv_Area = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDefectSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_ErosionForGetUpRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_UpRegionFromTopRegion);
            HOperatorSet.GenEmptyObj(out ho_UpImageFromTopImage);
            HOperatorSet.GenEmptyObj(out ho_FirstColorLineRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
            HOperatorSet.GenEmptyObj(out ho_ColorLineRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BigEdgeDefectRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionErosion);
            HOperatorSet.GenEmptyObj(out ho_EdgeRegions);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeRegionOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectRectangle);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectErosionRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_EdgeDefectSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeRegionOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeRegionOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions5);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CornerRegions);
            HOperatorSet.GenEmptyObj(out ho_LeftBottomCornerRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftBottomCornerFullRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftBottomCornerRealRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftBottomCornerRealRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_LeftBottomCornerWhiteRegion);
            HOperatorSet.GenEmptyObj(out ho_RightBottomCornerRegion);
            HOperatorSet.GenEmptyObj(out ho_RightBottomCornerFullRegion);
            HOperatorSet.GenEmptyObj(out ho_RightBottomCornerRealRegion);
            HOperatorSet.GenEmptyObj(out ho_RightBottomCornerRealRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_RightBottomCornerWhiteRegion);
            try
            {
                //上半片处理
                //上半片边角缺陷区域
                ho_totalEdgeDefectOfTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfTopRegion);
                //上半片边角缺陷结果初始化
                hv_isEdgeDefectOfTopWafer = 0;
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //*********************边缘缺陷处理*************************
                    //边缘缺陷可疑区域初始化
                    ho_EdgeDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_EdgeDefectSuspiciousRegion);
                    //初始化空TopRegionTrans
                    ho_TopRegionTrans.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_TopRegionTrans);
                    //上半片边角检测区域
                    ho_TopEdgeDetectRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_TopEdgeDetectRegion);
                    //下边缘区域处理
                    if ((int)(hv_isTopRegionCalibrateFinish) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_TopRegionTrans, ho_CalibrateTopAroundRegion, out ExpTmpOutVar_0
                                );
                            ho_TopRegionTrans.Dispose();
                            ho_TopRegionTrans = ExpTmpOutVar_0;
                        }
                        //2019-4-21优化内边界巡边
                        ho_InnerEdgeRegion.Dispose();
                        FindInnerEdgeRegionOfTopFuction(ho_RedChannelROIImage, ho_TopRegionTrans,
                            out ho_InnerEdgeRegion, hv_EdgeDefectDetectIndentDepth, hv_windowHandle,
                            out hv_isTopInnerRegionCalibrateFinish);
                        if ((int)(new HTuple(hv_isTopInnerRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ErosionRectangle1(ho_TopRegionTrans, out ExpTmpOutVar_0,
                                    hv_EdgeDefectDetectIndentDepth, hv_EdgeDefectDetectIndentDepth);
                                ho_TopRegionTrans.Dispose();
                                ho_TopRegionTrans = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            ho_TopRegionTrans.Dispose();
                            ho_TopRegionTrans = ho_InnerEdgeRegion.CopyObj(1, -1);
                            HOperatorSet.DispRegion(ho_TopRegionTrans, hv_ExpDefaultWinHandle);
                        }
                    }
                    else
                    {
                        //shape_trans (TopRegion, TopRegionTrans, 'convex')
                        HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                            out hv_CenterColumnOfTopRegion, out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                        ho_TopRegionTrans.Dispose();
                        HOperatorSet.GenRectangle2(out ho_TopRegionTrans, hv_CenterRowOfTopRegion,
                            hv_CenterColumnOfTopRegion, hv_Phi, hv_halfWidth, hv_halfHeight);
                        //2019-4-21优化内边界巡边
                        ho_InnerEdgeRegion.Dispose();
                        FindInnerEdgeRegionOfTopFuction(ho_RedChannelROIImage, ho_TopRegionTrans,
                            out ho_InnerEdgeRegion, hv_EdgeDefectDetectIndentDepth, hv_windowHandle,
                            out hv_isTopInnerRegionCalibrateFinish);
                        if ((int)(new HTuple(hv_isTopInnerRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ErosionRectangle1(ho_TopRegionTrans, out ExpTmpOutVar_0,
                                    hv_EdgeDefectDetectIndentDepth, hv_EdgeDefectDetectIndentDepth);
                                ho_TopRegionTrans.Dispose();
                                ho_TopRegionTrans = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            ho_TopRegionTrans.Dispose();
                            ho_TopRegionTrans = ho_InnerEdgeRegion.CopyObj(1, -1);
                            HOperatorSet.DispRegion(ho_TopRegionTrans, hv_ExpDefaultWinHandle);
                        }
                    }
                    //2019-5-7避免皮带打滑造成上半片出现彩条导致缺角误检问题。
                    //提取彩条区域
                    ho_ErosionForGetUpRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegionTrans, out ho_ErosionForGetUpRegion,
                        1, hv_EdgeDefectDetectIndentDepth * 4);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Difference(ho_TopRegionTrans, ho_ErosionForGetUpRegion, out ExpTmpOutVar_0
                            );
                        ho_ErosionForGetUpRegion.Dispose();
                        ho_ErosionForGetUpRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ErosionForGetUpRegion, out ExpTmpOutVar_0,
                            20, 1);
                        ho_ErosionForGetUpRegion.Dispose();
                        ho_ErosionForGetUpRegion = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions2.Dispose();
                    HOperatorSet.Connection(ho_ErosionForGetUpRegion, out ho_ConnectedRegions2
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions2, out ExpTmpOutVar_0, "upper_left",
                            "true", "row");
                        ho_ConnectedRegions2.Dispose();
                        ho_ConnectedRegions2 = ExpTmpOutVar_0;
                    }
                    ho_UpRegionFromTopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions2, out ho_UpRegionFromTopRegion,
                        1);
                    ho_UpImageFromTopImage.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_UpRegionFromTopRegion,
                        out ho_UpImageFromTopImage);
                    ho_FirstColorLineRegion.Dispose();
                    HOperatorSet.Threshold(ho_UpImageFromTopImage, out ho_FirstColorLineRegion,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_FirstColorLineRegion, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, 1);
                        ho_FirstColorLineRegion.Dispose();
                        ho_FirstColorLineRegion = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions3.Dispose();
                    HOperatorSet.Connection(ho_FirstColorLineRegion, out ho_ConnectedRegions3
                        );
                    ho_ColorLineRegion.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_ColorLineRegion, (new HTuple("rectangularity")).TupleConcat(
                        "height"), "and", (new HTuple(0.8)).TupleConcat(0), (new HTuple(1)).TupleConcat(
                        hv_EdgeDefectDetectIndentDepth * 1.6));
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union1(ho_ColorLineRegion, out ExpTmpOutVar_0);
                        ho_ColorLineRegion.Dispose();
                        ho_ColorLineRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.RegionFeatures(ho_ColorLineRegion, "area", out hv_ColorLineRegionArea);
                    if ((int)(new HTuple(hv_ColorLineRegionArea.TupleGreater(0))) != 0)
                    {
                        hv_IsColorLineRegion = 1;
                    }
                    else
                    {
                        hv_IsColorLineRegion = 0;
                    }
                    //大缺陷
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_TopRegionTrans, ho_TopRegion, out ho_RegionDifference
                        );
                    ho_BigEdgeDefectRegion.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_BigEdgeDefectRegion,
                        hv_edgeBigDefectWidthThresh / hv_widthResolution, hv_edgeBigDefectHeightThresh / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_BigEdgeDefectRegion,
                            out ExpTmpOutVar_0);
                        ho_totalEdgeDefectOfTopRegion.Dispose();
                        ho_totalEdgeDefectOfTopRegion = ExpTmpOutVar_0;
                    }
                    //小缺陷
                    ho_TopRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegionTrans, out ho_TopRegionErosion,
                        1, (hv_edgeSmallDefectDetectDepth * 2) / hv_heightResolution);
                    ho_EdgeRegions.Dispose();
                    HOperatorSet.Difference(ho_TopRegionTrans, ho_TopRegionErosion, out ho_EdgeRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeRegions, out ExpTmpOutVar_0, hv_edgeSmallDefectDetectDepth / hv_widthResolution,
                            1);
                        ho_EdgeRegions.Dispose();
                        ho_EdgeRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "row");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    //2019-4-12防止上半片高度太小以及参数边角检测深度太大报异常。
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_ConnectedRegionsNumbers);
                    if ((int)(new HTuple(hv_ConnectedRegionsNumbers.TupleLess(2))) != 0)
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "上片高度太小或者参数边角检测深度设置太大，请排查原因！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Height of upper cell too small or edge/corner insp depth too large. Please check!";
                        }

                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_TopRegionTrans.Dispose();
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_InnerEdgeRegion.Dispose();
                        ho_ErosionForGetUpRegion.Dispose();
                        ho_ConnectedRegions2.Dispose();
                        ho_UpRegionFromTopRegion.Dispose();
                        ho_UpImageFromTopImage.Dispose();
                        ho_FirstColorLineRegion.Dispose();
                        ho_ConnectedRegions3.Dispose();
                        ho_ColorLineRegion.Dispose();
                        ho_RegionDifference.Dispose();
                        ho_BigEdgeDefectRegion.Dispose();
                        ho_TopRegionErosion.Dispose();
                        ho_EdgeRegions.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_BottomEdgeRegionOfTopRegion.Dispose();
                        ho_EdgeDetectRectangle.Dispose();
                        ho_EdgeDetectErosionRegion.Dispose();
                        ho_EdgeDetectRegion.Dispose();
                        ho_ImageReduced.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_LeftEdgeRegionOfTopRegion.Dispose();
                        ho_LeftEdgeDetectRegion.Dispose();
                        ho_ConnectedRegions1.Dispose();
                        ho_ConnectedRegions4.Dispose();
                        ho_RightEdgeRegionOfTopRegion.Dispose();
                        ho_RightEdgeDetectRegion.Dispose();
                        ho_ConnectedRegions5.Dispose();
                        ho_ObjectSelected.Dispose();
                        ho_RegionDilation.Dispose();
                        ho_BackGroundRegion.Dispose();
                        ho_CornerRegions.Dispose();
                        ho_LeftBottomCornerRegion.Dispose();
                        ho_LeftBottomCornerFullRegion.Dispose();
                        ho_LeftBottomCornerRealRegion.Dispose();
                        ho_LeftBottomCornerRealRegionTrans.Dispose();
                        ho_LeftBottomCornerWhiteRegion.Dispose();
                        ho_RightBottomCornerRegion.Dispose();
                        ho_RightBottomCornerFullRegion.Dispose();
                        ho_RightBottomCornerRealRegion.Dispose();
                        ho_RightBottomCornerRealRegionTrans.Dispose();
                        ho_RightBottomCornerWhiteRegion.Dispose();

                        return;
                    }
                    ho_BottomEdgeRegionOfTopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_BottomEdgeRegionOfTopRegion,
                        2);
                    HOperatorSet.SmallestRectangle2(ho_BottomEdgeRegionOfTopRegion, out hv_RowTemp,
                        out hv_ColumnTemp, out hv_PhiTemp, out hv_halfWidthTemp, out hv_halfHeightTemp);
                    ho_EdgeDetectRectangle.Dispose();
                    HOperatorSet.GenRectangle2(out ho_EdgeDetectRectangle, hv_RowTemp, hv_ColumnTemp,
                        hv_PhiTemp, hv_halfWidthTemp, hv_halfHeightTemp);
                    ho_EdgeDetectErosionRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_EdgeDetectRectangle, out ho_EdgeDetectErosionRegion,
                        (hv_edgeSmallDefectDetectDepth * 2) / hv_widthResolution, 1);
                    //剔除主栅线
                    ho_EdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_EdgeDetectErosionRegion, ho_TopMainLineRegions,
                        out ho_EdgeDetectRegion);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDetectRegion, out ExpTmpOutVar_0, 1,
                            (0.2 * hv_edgeSmallDefectDetectDepth) / hv_heightResolution);
                        ho_EdgeDetectRegion.Dispose();
                        ho_EdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopEdgeDetectRegion, ho_EdgeDetectRegion, out ExpTmpOutVar_0
                            );
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_TopEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    //抠出目标区域
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_EdgeDetectRegion,
                        out ho_ImageReduced);
                    //根据灰度阈值提取出可疑区域
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    //根据边缘缺陷的宽度、高度阈值进行初步筛选
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    //整合进待处理区域
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }

                    //提取两侧边缘
                    ho_TopRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegionTrans, out ho_TopRegionErosion,
                        (hv_edgeSmallDefectDetectDepth * 2) / hv_widthResolution, 1);
                    ho_EdgeRegions.Dispose();
                    HOperatorSet.Difference(ho_TopRegionTrans, ho_TopRegionErosion, out ho_EdgeRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeRegions, out ExpTmpOutVar_0, 1, hv_edgeSmallDefectDetectDepth / hv_heightResolution);
                        ho_EdgeRegions.Dispose();
                        ho_EdgeRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    //左侧边缘区域处理
                    ho_LeftEdgeRegionOfTopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_LeftEdgeRegionOfTopRegion,
                        1);
                    //shape_trans (LeftEdgeRegionOfTopRegion, RegionTrans, 'convex')
                    ho_LeftEdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_LeftEdgeRegionOfTopRegion, ho_BottomEdgeRegionOfTopRegion,
                        out ho_LeftEdgeDetectRegion);
                    //2019-4-18避免求different的时候角部有异常区域残留
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_LeftEdgeDetectRegion, out ho_ConnectedRegions1
                        );
                    ho_LeftEdgeDetectRegion.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_LeftEdgeDetectRegion,
                        "max_area", 70);

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopEdgeDetectRegion, ho_LeftEdgeDetectRegion, out ExpTmpOutVar_0
                            );
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_TopEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_LeftEdgeDetectRegion,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions4.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegionTemp, out ho_ConnectedRegions4
                        );
                    //2019-5-7避免皮带打滑造成上半片出现彩条导致缺角误检问题
                    if ((int)(hv_IsColorLineRegion) != 0)
                    {
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ConnectedRegions4, ho_ColorLineRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp, "overlaps_rel", 0, 90);
                    }
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //右侧边缘区域处理
                    ho_RightEdgeRegionOfTopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_RightEdgeRegionOfTopRegion,
                        2);
                    //shape_trans (RightEdgeRegionOfTopRegion, RegionTrans, 'convex')
                    ho_RightEdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_RightEdgeRegionOfTopRegion, ho_BottomEdgeRegionOfTopRegion,
                        out ho_RightEdgeDetectRegion);
                    //2019-4-18避免求different的时候角部有异常区域残留
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RightEdgeDetectRegion, out ho_ConnectedRegions1
                        );
                    ho_RightEdgeDetectRegion.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_RightEdgeDetectRegion,
                        "max_area", 70);

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopEdgeDetectRegion, ho_RightEdgeDetectRegion, out ExpTmpOutVar_0
                            );
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_TopEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_RightEdgeDetectRegion,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions5.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegionTemp, out ho_ConnectedRegions5
                        );
                    //2019-5-7避免皮带打滑造成上半片出现彩条导致缺角误检问题
                    if ((int)(hv_IsColorLineRegion) != 0)
                    {
                        //intersection (ColorLineRegion, RightEdgeDetectRegion, ColorLineRegion)
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ConnectedRegions5, ho_ColorLineRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp, "overlaps_rel", 0, 90);
                    }
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //根据可疑区域表面及几何特征进行二次筛选，剔除烧结点
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_ConnectedRegions, out ExpTmpOutVar_0, "area",
                            "and", 1, 999999);
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val147 = hv_TotalNum;
                    HTuple step_val147 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val147, step_val147); hv_Index = hv_Index.TupleAdd(step_val147))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_TopEdgeDetectRegion,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForEdgeDefectDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForEdgeDefectDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_edgeSmallDefectGrayThresh))) != 0)
                        {
                            //intensity (ObjectSelected, RedChannelImage, Mean, Deviation)
                            //烧结点区域灰度值不会超过120
                            //if (Mean >= edgeSmallDefectGrayMeanThresh and Deviation >= edgeSmallDefectGrayDeviationThresh)
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfTopRegion.Dispose();
                                ho_totalEdgeDefectOfTopRegion = ExpTmpOutVar_0;
                            }
                            //2019-4-9添加界面灰度均值显示，方便客户设置参数
                            HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_ObjectSelectedArea,
                                out hv_ObjectSelectedAreaRow, out hv_ObjectSelectedAreaColumn);
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_info = "灰度差：";
                            }
                            else
                            {
                                hv_info = "Grayscale Difference:";
                            }

                            disp_message_UserDefine(hv_windowHandle, hv_info + (((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                                ), hv_ObjectSelectedAreaRow + 50, hv_ObjectSelectedAreaColumn, "red");
                            //endif
                        }
                    }

                    //*********************角部缺陷处理*************************
                    //边缘缺陷可疑区域初始化
                    ho_EdgeDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_EdgeDefectSuspiciousRegion);
                    //提取角部区域
                    ho_CornerRegions.Dispose();
                    HOperatorSet.Difference(ho_EdgeDetectRectangle, ho_EdgeDetectErosionRegion,
                        out ho_CornerRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_CornerRegions, out ExpTmpOutVar_0, 1, (0.2 * hv_edgeSmallDefectDetectDepth) / hv_heightResolution);
                        ho_CornerRegions.Dispose();
                        ho_CornerRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_CornerRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    //左侧角部区域处理
                    ho_LeftBottomCornerRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_LeftBottomCornerRegion,
                        1);
                    //左侧角部区域全视野(包含硅片和角部空隙)
                    ho_LeftBottomCornerFullRegion.Dispose();
                    HOperatorSet.Intersection(ho_LeftBottomCornerRegion, ho_TopRegionTrans, out ho_LeftBottomCornerFullRegion
                        );
                    //左侧角部硅片区域
                    ho_LeftBottomCornerRealRegion.Dispose();
                    HOperatorSet.Intersection(ho_LeftBottomCornerFullRegion, ho_TopRegion, out ho_LeftBottomCornerRealRegion
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopEdgeDetectRegion, ho_LeftBottomCornerRealRegion,
                            out ExpTmpOutVar_0);
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_TopEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    //算法一：凸包算法，检测边缘凹坑
                    ho_LeftBottomCornerRealRegionTrans.Dispose();
                    HOperatorSet.ShapeTrans(ho_LeftBottomCornerRealRegion, out ho_LeftBottomCornerRealRegionTrans,
                        "convex");
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Difference(ho_LeftBottomCornerRealRegionTrans, ho_LeftBottomCornerRealRegion,
                        out ho_EdgeDefectSuspiciousRegionTemp);
                    //2019-4-18避免单晶孔洞造成误检
                    if ((int)(hv_IsTopMonocrystalline) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                (hv_edgeSmallDefectWidthThresh + 0.45) / hv_widthResolution, (hv_edgeSmallDefectHeightThresh + 0.45) / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                    }

                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //算法二：抠图算法
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_LeftBottomCornerRealRegionTrans,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    //2019-4-18避免单晶孔洞造成误检
                    if ((int)(hv_IsTopMonocrystalline) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                (hv_edgeSmallDefectWidthThresh + 0.45) / hv_widthResolution, (hv_edgeSmallDefectHeightThresh + 0.45) / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                    }
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //算法三：角部空白面积
                    ho_LeftBottomCornerWhiteRegion.Dispose();
                    HOperatorSet.Difference(ho_LeftBottomCornerFullRegion, ho_LeftBottomCornerRealRegion,
                        out ho_LeftBottomCornerWhiteRegion);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_LeftBottomCornerWhiteRegion, out ExpTmpOutVar_0,
                            5, 5);
                        ho_LeftBottomCornerWhiteRegion.Dispose();
                        ho_LeftBottomCornerWhiteRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.AreaCenter(ho_LeftBottomCornerWhiteRegion, out hv_AreaOfLeftBottomCornerWhiteRegion,
                        out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_AreaOfLeftBottomCornerWhiteRegion.TupleGreater((hv_cornerDefectAreaRatioThresh * (hv_edgeSmallDefectDetectDepth / hv_widthResolution)) * (hv_edgeSmallDefectDetectDepth / hv_heightResolution)))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_LeftBottomCornerWhiteRegion,
                                out ExpTmpOutVar_0);
                            ho_totalEdgeDefectOfTopRegion.Dispose();
                            ho_totalEdgeDefectOfTopRegion = ExpTmpOutVar_0;
                        }
                    }

                    //右侧角部区域处理
                    ho_RightBottomCornerRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_RightBottomCornerRegion,
                        2);
                    //右侧角部区域全视野(包含硅片和角部空隙)
                    ho_RightBottomCornerFullRegion.Dispose();
                    HOperatorSet.Intersection(ho_RightBottomCornerRegion, ho_TopRegionTrans,
                        out ho_RightBottomCornerFullRegion);
                    //右侧角部硅片区域
                    ho_RightBottomCornerRealRegion.Dispose();
                    HOperatorSet.Intersection(ho_RightBottomCornerFullRegion, ho_TopRegion, out ho_RightBottomCornerRealRegion
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopEdgeDetectRegion, ho_RightBottomCornerRealRegion,
                            out ExpTmpOutVar_0);
                        ho_TopEdgeDetectRegion.Dispose();
                        ho_TopEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    //算法一：凸包算法，检测边缘凹坑
                    ho_RightBottomCornerRealRegionTrans.Dispose();
                    HOperatorSet.ShapeTrans(ho_RightBottomCornerRealRegion, out ho_RightBottomCornerRealRegionTrans,
                        "convex");
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Difference(ho_RightBottomCornerRealRegionTrans, ho_RightBottomCornerRealRegion,
                        out ho_EdgeDefectSuspiciousRegionTemp);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //算法二：抠图算法
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_RightBottomCornerRealRegionTrans,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //算法三：角部空白面积
                    ho_RightBottomCornerWhiteRegion.Dispose();
                    HOperatorSet.Difference(ho_RightBottomCornerFullRegion, ho_RightBottomCornerRealRegion,
                        out ho_RightBottomCornerWhiteRegion);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_RightBottomCornerWhiteRegion, out ExpTmpOutVar_0,
                            5, 5);
                        ho_RightBottomCornerWhiteRegion.Dispose();
                        ho_RightBottomCornerWhiteRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.AreaCenter(ho_RightBottomCornerWhiteRegion, out hv_AreaOfRightBottomCornerWhiteRegion,
                        out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_AreaOfRightBottomCornerWhiteRegion.TupleGreater((hv_cornerDefectAreaRatioThresh * (hv_edgeSmallDefectDetectDepth / hv_widthResolution)) * (hv_edgeSmallDefectDetectDepth / hv_heightResolution)))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_RightBottomCornerWhiteRegion,
                                out ExpTmpOutVar_0);
                            ho_totalEdgeDefectOfTopRegion.Dispose();
                            ho_totalEdgeDefectOfTopRegion = ExpTmpOutVar_0;
                        }
                    }

                    //显示边间检测区域
                    //if (isUsingChinese)
                    //disp_obj (TopEdgeDetectRegion, windowHandle)
                    //endif

                    //根据可疑区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_ConnectedRegions, out ExpTmpOutVar_0, "area",
                            "and", 1, 999999);
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val255 = hv_TotalNum;
                    HTuple step_val255 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val255, step_val255); hv_Index = hv_Index.TupleAdd(step_val255))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_TopEdgeDetectRegion,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForEdgeDefectDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForEdgeDefectDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_edgeSmallDefectGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfTopRegion, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfTopRegion.Dispose();
                                ho_totalEdgeDefectOfTopRegion = ExpTmpOutVar_0;
                            }
                            //2019-4-9添加界面灰度均值显示，方便客户设置参数
                            HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_ObjectSelectedArea,
                                out hv_ObjectSelectedAreaRow, out hv_ObjectSelectedAreaColumn);
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_info = "灰度差：";
                            }
                            else
                            {
                                hv_info = "Grayscale Difference:";
                            }
                            disp_message_UserDefine(hv_windowHandle, hv_info + (((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                                ), hv_ObjectSelectedAreaRow + 50, hv_ObjectSelectedAreaColumn, "red");
                        }
                    }

                    //最终角部缺陷汇总
                    HOperatorSet.AreaCenter(ho_totalEdgeDefectOfTopRegion, out hv_Area, out hv_Row,
                        out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isEdgeDefectOfTopWafer = 1;
                    }
                    //union2 (totalEdgeDefectRegionOut, totalEdgeDefectOfTopRegion, totalEdgeDefectRegionOut)
                }
                ho_EdgeDefectSuspiciousRegion.Dispose();
                ho_TopRegionTrans.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_InnerEdgeRegion.Dispose();
                ho_ErosionForGetUpRegion.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_UpRegionFromTopRegion.Dispose();
                ho_UpImageFromTopImage.Dispose();
                ho_FirstColorLineRegion.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_ColorLineRegion.Dispose();
                ho_RegionDifference.Dispose();
                ho_BigEdgeDefectRegion.Dispose();
                ho_TopRegionErosion.Dispose();
                ho_EdgeRegions.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_BottomEdgeRegionOfTopRegion.Dispose();
                ho_EdgeDetectRectangle.Dispose();
                ho_EdgeDetectErosionRegion.Dispose();
                ho_EdgeDetectRegion.Dispose();
                ho_ImageReduced.Dispose();
                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                ho_LeftEdgeRegionOfTopRegion.Dispose();
                ho_LeftEdgeDetectRegion.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_RightEdgeRegionOfTopRegion.Dispose();
                ho_RightEdgeDetectRegion.Dispose();
                ho_ConnectedRegions5.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_CornerRegions.Dispose();
                ho_LeftBottomCornerRegion.Dispose();
                ho_LeftBottomCornerFullRegion.Dispose();
                ho_LeftBottomCornerRealRegion.Dispose();
                ho_LeftBottomCornerRealRegionTrans.Dispose();
                ho_LeftBottomCornerWhiteRegion.Dispose();
                ho_RightBottomCornerRegion.Dispose();
                ho_RightBottomCornerFullRegion.Dispose();
                ho_RightBottomCornerRealRegion.Dispose();
                ho_RightBottomCornerRealRegionTrans.Dispose();
                ho_RightBottomCornerWhiteRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_EdgeDefectSuspiciousRegion.Dispose();
                ho_TopRegionTrans.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_InnerEdgeRegion.Dispose();
                ho_ErosionForGetUpRegion.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_UpRegionFromTopRegion.Dispose();
                ho_UpImageFromTopImage.Dispose();
                ho_FirstColorLineRegion.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_ColorLineRegion.Dispose();
                ho_RegionDifference.Dispose();
                ho_BigEdgeDefectRegion.Dispose();
                ho_TopRegionErosion.Dispose();
                ho_EdgeRegions.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_BottomEdgeRegionOfTopRegion.Dispose();
                ho_EdgeDetectRectangle.Dispose();
                ho_EdgeDetectErosionRegion.Dispose();
                ho_EdgeDetectRegion.Dispose();
                ho_ImageReduced.Dispose();
                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                ho_LeftEdgeRegionOfTopRegion.Dispose();
                ho_LeftEdgeDetectRegion.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_RightEdgeRegionOfTopRegion.Dispose();
                ho_RightEdgeDetectRegion.Dispose();
                ho_ConnectedRegions5.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_CornerRegions.Dispose();
                ho_LeftBottomCornerRegion.Dispose();
                ho_LeftBottomCornerFullRegion.Dispose();
                ho_LeftBottomCornerRealRegion.Dispose();
                ho_LeftBottomCornerRealRegionTrans.Dispose();
                ho_LeftBottomCornerWhiteRegion.Dispose();
                ho_RightBottomCornerRegion.Dispose();
                ho_RightBottomCornerFullRegion.Dispose();
                ho_RightBottomCornerRealRegion.Dispose();
                ho_RightBottomCornerRealRegionTrans.Dispose();
                ho_RightBottomCornerWhiteRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void EdgeDefectDetectOfBottomImage(HObject ho_CalibrateBottomAroundRegion,
            HObject ho_RedChannelROIImage, HObject ho_BottomRegion, HObject ho_ImageForExtractROI,
            HObject ho_BottomMainLineRegions, HObject ho_ImageForWeldNGDetect, HObject ho_ImageForEdgeDefectDetect,
            out HObject ho_totalEdgeDefectOfBottomRegion, HTuple hv_isBottomWaferExist,
            HTuple hv_isBottomRegionCalibrateFinish, HTuple hv_EdgeDefectDetectIndentDepth,
            HTuple hv_windowHandle, HTuple hv_isFullWafer, HTuple hv_height, HTuple hv_mainLineNum,
            HTuple hv_weldWidthThresh, HTuple hv_widthResolution, HTuple hv_heightResolution,
            HTuple hv_edgeBigDefectWidthThresh, HTuple hv_edgeBigDefectHeightThresh, HTuple hv_edgeSmallDefectDetectDepth,
            HTuple hv_edgeSmallDefectWidthThresh, HTuple hv_edgeSmallDefectHeightThresh,
            HTuple hv_edgeSmallDefectGrayThresh, HTuple hv_IsBottomMonocrystalline, HTuple hv_cornerDefectAreaRatioThresh,
            HTuple hv_isUsingChinese, HTuple hv_isUsingStartWeldingDetect, out HTuple hv_isEdgeDefectOfBottomWafer,
            out HTuple hv_isStartWeldingNGOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_EdgeDefectSuspiciousRegion = null;
            HObject ho_BottomRegionTrans = null, ho_BottomEdgeDetectRegion = null;
            HObject ho_BottomRegionTransTemp = null, ho_InnerEdgeRegion = null;
            HObject ho_ErosionForGetUpRegion = null, ho_ConnectedRegions2 = null;
            HObject ho_DownRegionFromBottomRegion = null, ho_DownImageFromBottomImage = null;
            HObject ho_FirstColorLineRegion = null, ho_ConnectedRegions3 = null;
            HObject ho_ColorLineRegion = null, ho_OutEdgeRegion = null;
            HObject ho_OutEdgeRegionOpening = null, ho_ConnectedRegions4 = null;
            HObject ho_SortedRegions1 = null, ho_UpperOutEdgeOfBottomRegion = null;
            HObject ho_BottomMainLineDilationRegions = null, ho_UpperOutEdgesOfBottomRegion = null;
            HObject ho_StartWeldingOfBottomWaferRegion = null, ho_StartWeldingSelected = null;
            HObject ho_ImageReduced1 = null, ho_ImageClosing = null, ho_Region = null;
            HObject ho_RegionOpening = null, ho_RegionErosion = null, ho_ImageReducedForStartWelding = null;
            HObject ho_ImageEdgeAmp = null, ho_HighAmpRegion = null, ho_RegionClosing = null;
            HObject ho_SuspectStartWeldingRegion = null, ho_IsNullRegion = null;
            HObject ho_ImageReduced2 = null, ho_RegionDifference = null;
            HObject ho_BigEdgeDefectRegion = null, ho_BottomRegionErosion = null;
            HObject ho_EdgeRegions = null, ho_ConnectedRegions = null, ho_TopEdgeRegionOfBottomRegion = null;
            HObject ho_EdgeDetectRectangle = null, ho_EdgeDetectErosionRegion = null;
            HObject ho_EdgeDetectRegion = null, ho_ImageReduced = null;
            HObject ho_EdgeDefectSuspiciousRegionTemp = null, ho_LeftEdgeRegionOfBottomRegion = null;
            HObject ho_LeftEdgeDetectRegion = null, ho_ConnectedRegions1 = null;
            HObject ho_ConnectedRegions6 = null, ho_RightEdgeRegionOfBottomRegion = null;
            HObject ho_RightEdgeDetectRegion = null, ho_ConnectedRegions5 = null;
            HObject ho_ObjectSelected = null, ho_RegionDilation = null;
            HObject ho_BackGroundRegion = null, ho_CornerRegions = null;
            HObject ho_LeftTopCornerRegion = null, ho_RightTopCornerRegion = null;
            HObject ho_LeftTopCornerFullRegion = null, ho_LeftTopCornerRealRegion = null;
            HObject ho_LeftTopCornerRealRegionTrans = null, ho_LeftTopCornerWhiteRegion = null;
            HObject ho_RightTopCornerFullRegion = null, ho_RightTopCornerRealRegion = null;
            HObject ho_RightTopCornerRealRegionTrans = null, ho_RightTopCornerWhiteRegion = null;

            // Local control variables 

            HTuple hv_isBottomInnerRegionCalibrateFinish = new HTuple();
            HTuple hv_CenterRowOfBottomRegion = new HTuple(), hv_CenterColumnOfBottomRegion = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_halfWidth = new HTuple();
            HTuple hv_halfHeight = new HTuple(), hv_ColorLineRegionArea = new HTuple();
            HTuple hv_IsColorLineRegion = new HTuple(), hv_StartWeldingOfBottomWaferRegionCount = new HTuple();
            HTuple hv_Index2 = new HTuple(), hv_UsedThreshold1 = new HTuple();
            HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
            HTuple hv_Phi2 = new HTuple(), hv_Length11 = new HTuple();
            HTuple hv_Length21 = new HTuple(), hv_IsNullRegionArea = new HTuple();
            HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
            HTuple hv_RowTemp = new HTuple(), hv_ColumnTemp = new HTuple();
            HTuple hv_MeasureHandle = new HTuple(), hv_RowEdgeFirst = new HTuple();
            HTuple hv_ColumnEdgeFirst = new HTuple(), hv_AmplitudeFirst = new HTuple();
            HTuple hv_RowEdgeSecond = new HTuple(), hv_ColumnEdgeSecond = new HTuple();
            HTuple hv_AmplitudeSecond = new HTuple(), hv_IntraDistance = new HTuple();
            HTuple hv_InterDistance = new HTuple(), hv_IntraDistanceLength = new HTuple();
            HTuple hv_PiexDisMax = new HTuple(), hv_PiexDisMin = new HTuple();
            HTuple hv_PhiTemp = new HTuple(), hv_halfWidthTemp = new HTuple();
            HTuple hv_halfHeightTemp = new HTuple(), hv_TotalNum = new HTuple();
            HTuple hv_Index = new HTuple(), hv_BackGroundMean = new HTuple();
            HTuple hv_BackGroundDeviation = new HTuple(), hv_ObjectSelectedMean = new HTuple();
            HTuple hv_ObjectSelectedDeviation = new HTuple(), hv_ObjectSelectedArea = new HTuple();
            HTuple hv_ObjectSelectedAreaRow = new HTuple(), hv_ObjectSelectedAreaColumn = new HTuple();
            HTuple hv_info = new HTuple(), hv_AreaOfLeftTopCornerWhiteRegion = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_AreaOfRightTopCornerWhiteRegion = new HTuple();
            HTuple hv_Area = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDefectSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionTransTemp);
            HOperatorSet.GenEmptyObj(out ho_InnerEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_ErosionForGetUpRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_DownRegionFromBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_DownImageFromBottomImage);
            HOperatorSet.GenEmptyObj(out ho_FirstColorLineRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
            HOperatorSet.GenEmptyObj(out ho_ColorLineRegion);
            HOperatorSet.GenEmptyObj(out ho_OutEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_OutEdgeRegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions1);
            HOperatorSet.GenEmptyObj(out ho_UpperOutEdgeOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineDilationRegions);
            HOperatorSet.GenEmptyObj(out ho_UpperOutEdgesOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_StartWeldingOfBottomWaferRegion);
            HOperatorSet.GenEmptyObj(out ho_StartWeldingSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
            HOperatorSet.GenEmptyObj(out ho_ImageClosing);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_RegionErosion);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForStartWelding);
            HOperatorSet.GenEmptyObj(out ho_ImageEdgeAmp);
            HOperatorSet.GenEmptyObj(out ho_HighAmpRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_SuspectStartWeldingRegion);
            HOperatorSet.GenEmptyObj(out ho_IsNullRegion);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BigEdgeDefectRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionErosion);
            HOperatorSet.GenEmptyObj(out ho_EdgeRegions);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeRegionOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectRectangle);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectErosionRegion);
            HOperatorSet.GenEmptyObj(out ho_EdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_EdgeDefectSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeRegionOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions6);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeRegionOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions5);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CornerRegions);
            HOperatorSet.GenEmptyObj(out ho_LeftTopCornerRegion);
            HOperatorSet.GenEmptyObj(out ho_RightTopCornerRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftTopCornerFullRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftTopCornerRealRegion);
            HOperatorSet.GenEmptyObj(out ho_LeftTopCornerRealRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_LeftTopCornerWhiteRegion);
            HOperatorSet.GenEmptyObj(out ho_RightTopCornerFullRegion);
            HOperatorSet.GenEmptyObj(out ho_RightTopCornerRealRegion);
            HOperatorSet.GenEmptyObj(out ho_RightTopCornerRealRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_RightTopCornerWhiteRegion);
            try
            {
                //下半片处理
                //下半片边角缺陷区域
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfBottomRegion);
                //上半片边角缺陷结果初始化
                hv_isEdgeDefectOfBottomWafer = 0;
                hv_isStartWeldingNGOfBottomWafer = 0;
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //*********************边缘缺陷处理*************************
                    //边缘缺陷可疑区域初始化
                    ho_EdgeDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_EdgeDefectSuspiciousRegion);
                    //初始化空BottomRegionTrans
                    ho_BottomRegionTrans.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BottomRegionTrans);
                    //上半片边角检测区域
                    ho_BottomEdgeDetectRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BottomEdgeDetectRegion);
                    //下边缘区域处理
                    if ((int)(hv_isBottomRegionCalibrateFinish) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_BottomRegionTrans, ho_CalibrateBottomAroundRegion,
                                out ExpTmpOutVar_0);
                            ho_BottomRegionTrans.Dispose();
                            ho_BottomRegionTrans = ExpTmpOutVar_0;
                        }
                        ho_BottomRegionTransTemp.Dispose();
                        ho_BottomRegionTransTemp = ho_BottomRegionTrans.CopyObj(1, -1);
                        ho_InnerEdgeRegion.Dispose();
                        FindInnerEdgeRegionOfBottomFuction(ho_RedChannelROIImage, ho_BottomRegionTrans,
                            out ho_InnerEdgeRegion, hv_EdgeDefectDetectIndentDepth, hv_height,
                            hv_windowHandle, hv_isFullWafer, out hv_isBottomInnerRegionCalibrateFinish);
                        if ((int)(new HTuple(hv_isBottomInnerRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ErosionRectangle1(ho_BottomRegionTrans, out ExpTmpOutVar_0,
                                    hv_EdgeDefectDetectIndentDepth, hv_EdgeDefectDetectIndentDepth);
                                ho_BottomRegionTrans.Dispose();
                                ho_BottomRegionTrans = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            ho_BottomRegionTrans.Dispose();
                            ho_BottomRegionTrans = ho_InnerEdgeRegion.CopyObj(1, -1);
                            HOperatorSet.DispRegion(ho_BottomRegionTrans, hv_ExpDefaultWinHandle);
                        }
                    }
                    else
                    {
                        //shape_trans (BottomRegion, BottomRegionTrans, 'convex')
                        HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                            out hv_CenterColumnOfBottomRegion, out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                        ho_BottomRegionTrans.Dispose();
                        HOperatorSet.GenRectangle2(out ho_BottomRegionTrans, hv_CenterRowOfBottomRegion,
                            hv_CenterColumnOfBottomRegion, hv_Phi, hv_halfWidth, hv_halfHeight);
                        ho_BottomRegionTransTemp.Dispose();
                        ho_BottomRegionTransTemp = ho_BottomRegion.CopyObj(1, -1);
                        ho_InnerEdgeRegion.Dispose();
                        FindInnerEdgeRegionOfBottomFuction(ho_RedChannelROIImage, ho_BottomRegionTrans,
                            out ho_InnerEdgeRegion, hv_EdgeDefectDetectIndentDepth, hv_height,
                            hv_windowHandle, hv_isFullWafer, out hv_isBottomInnerRegionCalibrateFinish);
                        if ((int)(new HTuple(hv_isBottomInnerRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ErosionRectangle1(ho_BottomRegionTrans, out ExpTmpOutVar_0,
                                    hv_EdgeDefectDetectIndentDepth, hv_EdgeDefectDetectIndentDepth);
                                ho_BottomRegionTrans.Dispose();
                                ho_BottomRegionTrans = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            ho_BottomRegionTrans.Dispose();
                            ho_BottomRegionTrans = ho_InnerEdgeRegion.CopyObj(1, -1);
                            HOperatorSet.DispRegion(ho_BottomRegionTrans, hv_ExpDefaultWinHandle);
                        }
                    }
                    //2019-6-14避免皮带打滑造成下半片出现彩条导致缺角误检问题。
                    //提取彩条区域
                    ho_ErosionForGetUpRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegionTrans, out ho_ErosionForGetUpRegion,
                        1, hv_EdgeDefectDetectIndentDepth * 4);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Difference(ho_BottomRegionTrans, ho_ErosionForGetUpRegion, out ExpTmpOutVar_0
                            );
                        ho_ErosionForGetUpRegion.Dispose();
                        ho_ErosionForGetUpRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ErosionForGetUpRegion, out ExpTmpOutVar_0,
                            20, 1);
                        ho_ErosionForGetUpRegion.Dispose();
                        ho_ErosionForGetUpRegion = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions2.Dispose();
                    HOperatorSet.Connection(ho_ErosionForGetUpRegion, out ho_ConnectedRegions2
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions2, out ExpTmpOutVar_0, "upper_left",
                            "true", "row");
                        ho_ConnectedRegions2.Dispose();
                        ho_ConnectedRegions2 = ExpTmpOutVar_0;
                    }
                    ho_DownRegionFromBottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions2, out ho_DownRegionFromBottomRegion,
                        2);
                    ho_DownImageFromBottomImage.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_DownRegionFromBottomRegion,
                        out ho_DownImageFromBottomImage);
                    ho_FirstColorLineRegion.Dispose();
                    HOperatorSet.Threshold(ho_DownImageFromBottomImage, out ho_FirstColorLineRegion,
                        20, 255);
                    ho_ConnectedRegions3.Dispose();
                    HOperatorSet.Connection(ho_FirstColorLineRegion, out ho_ConnectedRegions3
                        );
                    ho_ColorLineRegion.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_ColorLineRegion, (new HTuple("rectangularity")).TupleConcat(
                        "height"), "and", (new HTuple(0.8)).TupleConcat(0), (new HTuple(1)).TupleConcat(
                        hv_EdgeDefectDetectIndentDepth * 1.6));
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union1(ho_ColorLineRegion, out ExpTmpOutVar_0);
                        ho_ColorLineRegion.Dispose();
                        ho_ColorLineRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.RegionFeatures(ho_ColorLineRegion, "area", out hv_ColorLineRegionArea);
                    if ((int)(new HTuple(hv_ColorLineRegionArea.TupleGreater(0))) != 0)
                    {
                        hv_IsColorLineRegion = 1;
                    }
                    else
                    {
                        hv_IsColorLineRegion = 0;
                    }

                    //2020-03-18 9栅正面搭接检测
                    if ((int)(hv_isUsingStartWeldingDetect) != 0)
                    {
                        if ((int)(new HTuple(hv_mainLineNum.TupleEqual(9))) != 0)
                        {
                            ho_OutEdgeRegion.Dispose();
                            HOperatorSet.Difference(ho_BottomRegionTransTemp, ho_BottomRegionTrans,
                                out ho_OutEdgeRegion);
                            ho_OutEdgeRegionOpening.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_OutEdgeRegion, out ho_OutEdgeRegionOpening,
                                100, 1);
                            ho_ConnectedRegions4.Dispose();
                            HOperatorSet.Connection(ho_OutEdgeRegionOpening, out ho_ConnectedRegions4
                                );
                            ho_SortedRegions1.Dispose();
                            HOperatorSet.SortRegion(ho_ConnectedRegions4, out ho_SortedRegions1,
                                "upper_left", "true", "row");
                            ho_UpperOutEdgeOfBottomRegion.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions1, out ho_UpperOutEdgeOfBottomRegion,
                                1);
                            ho_BottomMainLineDilationRegions.Dispose();
                            HOperatorSet.DilationRectangle1(ho_BottomMainLineRegions, out ho_BottomMainLineDilationRegions,
                                25, 1);
                            ho_UpperOutEdgesOfBottomRegion.Dispose();
                            HOperatorSet.Intersection(ho_UpperOutEdgeOfBottomRegion, ho_BottomMainLineDilationRegions,
                                out ho_UpperOutEdgesOfBottomRegion);
                            ho_StartWeldingOfBottomWaferRegion.Dispose();
                            HOperatorSet.Connection(ho_UpperOutEdgesOfBottomRegion, out ho_StartWeldingOfBottomWaferRegion
                                );
                            HOperatorSet.CountObj(ho_StartWeldingOfBottomWaferRegion, out hv_StartWeldingOfBottomWaferRegionCount);
                            HTuple end_val70 = hv_StartWeldingOfBottomWaferRegionCount;
                            HTuple step_val70 = 1;
                            for (hv_Index2 = 1; hv_Index2.Continue(end_val70, step_val70); hv_Index2 = hv_Index2.TupleAdd(step_val70))
                            {
                                ho_StartWeldingSelected.Dispose();
                                HOperatorSet.SelectObj(ho_StartWeldingOfBottomWaferRegion, out ho_StartWeldingSelected,
                                    hv_Index2);
                                ho_ImageReduced1.Dispose();
                                HOperatorSet.ReduceDomain(ho_ImageForWeldNGDetect, ho_StartWeldingSelected,
                                    out ho_ImageReduced1);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.MultImage(ho_ImageReduced1, ho_ImageReduced1, out ExpTmpOutVar_0,
                                        0.04, 0);
                                    ho_ImageReduced1.Dispose();
                                    ho_ImageReduced1 = ExpTmpOutVar_0;
                                }
                                ho_ImageClosing.Dispose();
                                HOperatorSet.GrayClosingRect(ho_ImageReduced1, out ho_ImageClosing,
                                    1, 50);
                                ho_Region.Dispose();
                                HOperatorSet.BinaryThreshold(ho_ImageClosing, out ho_Region, "max_separability",
                                    "light", out hv_UsedThreshold1);
                                ho_RegionOpening.Dispose();
                                HOperatorSet.OpeningRectangle1(ho_Region, out ho_RegionOpening, 10,
                                    5);
                                ho_RegionErosion.Dispose();
                                HOperatorSet.ErosionRectangle1(ho_RegionOpening, out ho_RegionErosion,
                                    14, 1);
                                HOperatorSet.SmallestRectangle2(ho_RegionErosion, out hv_Row2, out hv_Column2,
                                    out hv_Phi2, out hv_Length11, out hv_Length21);
                                ho_ImageReducedForStartWelding.Dispose();
                                HOperatorSet.ReduceDomain(ho_ImageForWeldNGDetect, ho_RegionErosion,
                                    out ho_ImageReducedForStartWelding);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.GrayOpeningRect(ho_ImageReducedForStartWelding, out ExpTmpOutVar_0,
                                        1, 4);
                                    ho_ImageReducedForStartWelding.Dispose();
                                    ho_ImageReducedForStartWelding = ExpTmpOutVar_0;
                                }
                                ho_ImageEdgeAmp.Dispose();
                                HOperatorSet.KirschAmp(ho_ImageReducedForStartWelding, out ho_ImageEdgeAmp
                                    );
                                ho_HighAmpRegion.Dispose();
                                HOperatorSet.Threshold(ho_ImageEdgeAmp, out ho_HighAmpRegion, 200,
                                    255);
                                ho_RegionClosing.Dispose();
                                HOperatorSet.ClosingRectangle1(ho_HighAmpRegion, out ho_RegionClosing,
                                    hv_weldWidthThresh / hv_widthResolution, 1);
                                ho_SuspectStartWeldingRegion.Dispose();
                                HOperatorSet.OpeningRectangle1(ho_RegionClosing, out ho_SuspectStartWeldingRegion,
                                    hv_weldWidthThresh / hv_widthResolution, 1);
                                ho_IsNullRegion.Dispose();
                                HOperatorSet.ErosionRectangle1(ho_SuspectStartWeldingRegion, out ho_IsNullRegion,
                                    1, (hv_Length21 * 2) * 0.85);
                                HOperatorSet.RegionFeatures(ho_IsNullRegion, "area", out hv_IsNullRegionArea);
                                if ((int)(new HTuple(hv_IsNullRegionArea.TupleGreater(0))) != 0)
                                {
                                    //判断是否起焊点异常
                                    ho_ImageReduced2.Dispose();
                                    HOperatorSet.ReduceDomain(ho_ImageForWeldNGDetect, ho_RegionErosion,
                                        out ho_ImageReduced2);
                                    HOperatorSet.GetImageSize(ho_ImageReduced2, out hv_Width, out hv_Height);
                                    hv_RowTemp = hv_Row2.Clone();
                                    hv_ColumnTemp = hv_Column2.Clone();
                                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi2, 100, 2)
                                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi2,
                                        100, 2, hv_Width, hv_Height, "bilinear", out hv_MeasureHandle);
                                    HOperatorSet.MeasurePairs(ho_ImageReduced1, hv_MeasureHandle, 1,
                                        100, "all", "all", out hv_RowEdgeFirst, out hv_ColumnEdgeFirst,
                                        out hv_AmplitudeFirst, out hv_RowEdgeSecond, out hv_ColumnEdgeSecond,
                                        out hv_AmplitudeSecond, out hv_IntraDistance, out hv_InterDistance);
                                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                                    HOperatorSet.TupleLength(hv_IntraDistance, out hv_IntraDistanceLength);
                                    if ((int)(new HTuple(hv_IntraDistanceLength.TupleEqual(1))) != 0)
                                    {
                                        if ((int)(new HTuple(((hv_IntraDistance.TupleSelect(0))).TupleGreater(
                                            5))) != 0)
                                        {
                                            hv_isStartWeldingNGOfBottomWafer = 1;
                                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                            HOperatorSet.DispRegion(ho_RegionErosion, hv_ExpDefaultWinHandle);
                                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                        }
                                    }
                                    else
                                    {
                                        HOperatorSet.TupleMax(hv_IntraDistance, out hv_PiexDisMax);
                                        HOperatorSet.TupleMin(hv_IntraDistance, out hv_PiexDisMin);
                                        if ((int)(new HTuple(((hv_PiexDisMax - hv_PiexDisMin)).TupleGreaterEqual(
                                            2))) != 0)
                                        {
                                            hv_isStartWeldingNGOfBottomWafer = 1;
                                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                            HOperatorSet.DispRegion(ho_RegionErosion, hv_ExpDefaultWinHandle);
                                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                        }
                                    }
                                    //isStartWeldingNGOfBottomWafer := true
                                    //set_color (windowHandle, 'red')
                                    //disp_region (RegionErosion, windowHandle)
                                    //set_color (windowHandle, 'green')
                                }
                            }
                        }
                    }



                    //2019-5-19增加九栅搭接检测
                    //if (mainLineNum == 9)
                    //difference (BottomRegionTransTemp, BottomRegionTrans, OutEdgeRegion)
                    //opening_rectangle1 (OutEdgeRegion, OutEdgeRegionOpening, 100, 1)
                    //connection (OutEdgeRegionOpening, ConnectedRegions4)
                    //sort_region (ConnectedRegions4, SortedRegions1, 'upper_left', 'true', 'row')
                    //select_obj (SortedRegions1, UpperOutEdgeOfBottomRegion, 1)
                    //erosion_rectangle1 (BottomMainLineRegions, BottomMainLineErosionRegions, 25, 1)
                    //intersection (UpperOutEdgeOfBottomRegion, BottomMainLineErosionRegions, UpperOutEdgesOfBottomRegion)
                    //connection (UpperOutEdgesOfBottomRegion, StartWeldingOfBottomWaferRegion)
                    //count_obj (StartWeldingOfBottomWaferRegion, StartWeldingOfBottomWaferRegionCount)
                    //for Index2 := 1 to StartWeldingOfBottomWaferRegionCount by 1
                    //select_obj (StartWeldingOfBottomWaferRegion, StartWeldingSelected, Index2)
                    //smallest_rectangle2 (StartWeldingSelected, Row1, Column1, Phi1, Length1, Length2)
                    //reduce_domain (ImageForWeldNGDetect, StartWeldingSelected, ImageReduced1)
                    //kirsch_amp (ImageReduced1, ImageEdgeAmp)
                    //threshold (ImageEdgeAmp, HighAmpRegion, 200, 255)
                    //closing_rectangle1 (HighAmpRegion, RegionClosing, weldWidthThresh / widthResolution, 1)
                    //opening_rectangle1 (RegionClosing, SuspectStartWeldingRegion, weldWidthThresh / widthResolution, 1)
                    //erosion_rectangle1 (SuspectStartWeldingRegion, IsNullRegion, 1, Length2*2*0.85)
                    //region_features (IsNullRegion, 'area', IsNullRegionArea)
                    //if (IsNullRegionArea > 0)
                    //判断是否起焊点异常
                    //isStartWeldingNGOfBottomWafer := true
                    //set_color (windowHandle, 'red')
                    //disp_region (StartWeldingSelected, windowHandle)
                    //set_color (windowHandle, 'green')
                    //endif
                    //endfor
                    //endif
                    //      *大缺陷
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionTrans, ho_BottomRegion, out ho_RegionDifference
                        );
                    ho_BigEdgeDefectRegion.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_BigEdgeDefectRegion,
                        hv_edgeBigDefectWidthThresh / hv_widthResolution, hv_edgeBigDefectHeightThresh / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalEdgeDefectOfBottomRegion, ho_BigEdgeDefectRegion,
                            out ExpTmpOutVar_0);
                        ho_totalEdgeDefectOfBottomRegion.Dispose();
                        ho_totalEdgeDefectOfBottomRegion = ExpTmpOutVar_0;
                    }
                    //小缺陷
                    ho_BottomRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegionTrans, out ho_BottomRegionErosion,
                        1, (hv_edgeSmallDefectDetectDepth * 2) / hv_heightResolution);
                    ho_EdgeRegions.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionTrans, ho_BottomRegionErosion, out ho_EdgeRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeRegions, out ExpTmpOutVar_0, hv_edgeSmallDefectDetectDepth / hv_widthResolution,
                            1);
                        ho_EdgeRegions.Dispose();
                        ho_EdgeRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "row");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    ho_TopEdgeRegionOfBottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_TopEdgeRegionOfBottomRegion,
                        1);
                    HOperatorSet.SmallestRectangle2(ho_TopEdgeRegionOfBottomRegion, out hv_RowTemp,
                        out hv_ColumnTemp, out hv_PhiTemp, out hv_halfWidthTemp, out hv_halfHeightTemp);
                    ho_EdgeDetectRectangle.Dispose();
                    HOperatorSet.GenRectangle2(out ho_EdgeDetectRectangle, hv_RowTemp, hv_ColumnTemp,
                        hv_PhiTemp, hv_halfWidthTemp, hv_halfHeightTemp);
                    ho_EdgeDetectErosionRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_EdgeDetectRectangle, out ho_EdgeDetectErosionRegion,
                        (hv_edgeSmallDefectDetectDepth * 2) / hv_widthResolution, 1);
                    //剔除主栅线
                    ho_EdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_EdgeDetectErosionRegion, ho_BottomMainLineRegions,
                        out ho_EdgeDetectRegion);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDetectRegion, out ExpTmpOutVar_0, 1,
                            (0.2 * hv_edgeSmallDefectDetectDepth) / hv_heightResolution);
                        ho_EdgeDetectRegion.Dispose();
                        ho_EdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_EdgeDetectRegion, out ExpTmpOutVar_0
                            );
                        ho_BottomEdgeDetectRegion.Dispose();
                        ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    //抠出目标区域
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_EdgeDetectRegion,
                        out ho_ImageReduced);
                    //根据灰度阈值提取出可疑区域
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    //根据边缘缺陷的宽度、高度阈值进行初步筛选
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    //整合进待处理区域
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //提取两侧边缘
                    ho_BottomRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegionTrans, out ho_BottomRegionErosion,
                        (hv_edgeSmallDefectDetectDepth * 2) / hv_widthResolution, 1);
                    ho_EdgeRegions.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionTrans, ho_BottomRegionErosion, out ho_EdgeRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeRegions, out ExpTmpOutVar_0, 1, hv_edgeSmallDefectDetectDepth / hv_heightResolution);
                        ho_EdgeRegions.Dispose();
                        ho_EdgeRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    //左侧边缘区域处理
                    ho_LeftEdgeRegionOfBottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_LeftEdgeRegionOfBottomRegion,
                        1);
                    //shape_trans (LeftEdgeRegionOfTopRegion, RegionTrans, 'convex')
                    ho_LeftEdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_LeftEdgeRegionOfBottomRegion, ho_TopEdgeRegionOfBottomRegion,
                        out ho_LeftEdgeDetectRegion);
                    //2019-4-18避免求different的时候角部有异常区域残留
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_LeftEdgeDetectRegion, out ho_ConnectedRegions1
                        );
                    ho_LeftEdgeDetectRegion.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_LeftEdgeDetectRegion,
                        "max_area", 70);

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_LeftEdgeDetectRegion, out ExpTmpOutVar_0
                            );
                        ho_BottomEdgeDetectRegion.Dispose();
                        ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_LeftEdgeDetectRegion,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions6.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegionTemp, out ho_ConnectedRegions6
                        );
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    //2019-6-14避免皮带打滑造成下半片出现彩条导致缺角误检问题
                    if ((int)(hv_IsColorLineRegion) != 0)
                    {
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ConnectedRegions6, ho_ColorLineRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp, "overlaps_rel", 0, 90);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //右侧边缘区域处理
                    ho_RightEdgeRegionOfBottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_RightEdgeRegionOfBottomRegion,
                        2);
                    //shape_trans (RightEdgeRegionOfTopRegion, RegionTrans, 'convex')
                    ho_RightEdgeDetectRegion.Dispose();
                    HOperatorSet.Difference(ho_RightEdgeRegionOfBottomRegion, ho_TopEdgeRegionOfBottomRegion,
                        out ho_RightEdgeDetectRegion);
                    //2019-4-18避免求different的时候角部有异常区域残留
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RightEdgeDetectRegion, out ho_ConnectedRegions1
                        );
                    ho_RightEdgeDetectRegion.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_RightEdgeDetectRegion,
                        "max_area", 70);

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_RightEdgeDetectRegion,
                            out ExpTmpOutVar_0);
                        ho_BottomEdgeDetectRegion.Dispose();
                        ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                    }
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_RightEdgeDetectRegion,
                        out ho_ImageReduced);
                    ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                        25, 255);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                            hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions5.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegionTemp, out ho_ConnectedRegions5
                        );
                    //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                    //2019-6-14避免皮带打滑造成下半片出现彩条导致缺角误检问题
                    if ((int)(hv_IsColorLineRegion) != 0)
                    {
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ConnectedRegions5, ho_ColorLineRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp, "overlaps_rel", 0, 90);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                            out ExpTmpOutVar_0);
                        ho_EdgeDefectSuspiciousRegion.Dispose();
                        ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                    }
                    //根据可疑区域表面及几何特征进行二次筛选，剔除烧结点
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_ConnectedRegions, out ExpTmpOutVar_0, "area",
                            "and", 1, 99999);
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val231 = hv_TotalNum;
                    HTuple step_val231 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val231, step_val231); hv_Index = hv_Index.TupleAdd(step_val231))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_BottomEdgeDetectRegion,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForEdgeDefectDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForEdgeDefectDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_edgeSmallDefectGrayThresh))) != 0)
                        {
                            //intensity (ObjectSelected, RedChannelImage, Mean, Deviation)
                            //烧结点区域灰度值不会超过120,方差不会超过30
                            //if (Mean >= edgeSmallDefectGrayMeanThresh and Deviation >= edgeSmallDefectGrayDeviationThresh)
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfBottomRegion, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfBottomRegion.Dispose();
                                ho_totalEdgeDefectOfBottomRegion = ExpTmpOutVar_0;
                            }
                            //2019-4-9添加界面灰度均值显示，方便客户设置参数
                            HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_ObjectSelectedArea,
                                out hv_ObjectSelectedAreaRow, out hv_ObjectSelectedAreaColumn);
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_info = "灰度差：";
                            }
                            else
                            {
                                hv_info = "Grayscale Difference:";
                            }
                            disp_message_UserDefine(hv_windowHandle, hv_info + (((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                                ), hv_ObjectSelectedAreaRow + 50, hv_ObjectSelectedAreaColumn, "red");
                            //endif
                        }
                    }

                    //*********************角部缺陷处理*************************
                    //边缘缺陷可疑区域初始化
                    ho_EdgeDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_EdgeDefectSuspiciousRegion);
                    //提取角部区域
                    ho_CornerRegions.Dispose();
                    HOperatorSet.Difference(ho_EdgeDetectRectangle, ho_EdgeDetectErosionRegion,
                        out ho_CornerRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_CornerRegions, out ExpTmpOutVar_0, 1, (0.2 * hv_edgeSmallDefectDetectDepth) / hv_heightResolution);
                        ho_CornerRegions.Dispose();
                        ho_CornerRegions = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_CornerRegions, out ho_ConnectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    //提取左侧角部区域
                    ho_LeftTopCornerRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_LeftTopCornerRegion, 1);
                    //提取右侧角部区域
                    ho_RightTopCornerRegion.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_RightTopCornerRegion,
                        2);

                    if ((int)(hv_isFullWafer) != 0)
                    {
                        //全片
                        //左侧角部区域全视野(包含硅片和角部空隙)
                        ho_LeftTopCornerFullRegion.Dispose();
                        HOperatorSet.Intersection(ho_LeftTopCornerRegion, ho_BottomRegionTrans,
                            out ho_LeftTopCornerFullRegion);
                        //左侧角部硅片区域
                        ho_LeftTopCornerRealRegion.Dispose();
                        HOperatorSet.Intersection(ho_LeftTopCornerFullRegion, ho_BottomRegion,
                            out ho_LeftTopCornerRealRegion);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_LeftTopCornerRealRegion,
                                out ExpTmpOutVar_0);
                            ho_BottomEdgeDetectRegion.Dispose();
                            ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                        }
                        //算法一：凸包算法，检测边缘凹坑
                        ho_LeftTopCornerRealRegionTrans.Dispose();
                        HOperatorSet.ShapeTrans(ho_LeftTopCornerRealRegion, out ho_LeftTopCornerRealRegionTrans,
                            "convex");
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Difference(ho_LeftTopCornerRealRegionTrans, ho_LeftTopCornerRealRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp);
                        //2019-4-18避免单晶孔洞造成误检
                        if ((int)(hv_IsBottomMonocrystalline) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                    (hv_edgeSmallDefectWidthThresh + 0.45) / hv_widthResolution, (hv_edgeSmallDefectHeightThresh + 0.45) / hv_heightResolution);
                                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                                ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                    hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                                ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                            }
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法二：抠图算法
                        ho_ImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_LeftTopCornerRealRegionTrans,
                            out ho_ImageReduced);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                            25, 255);
                        //2019-4-18避免单晶孔洞造成误检
                        if ((int)(hv_IsBottomMonocrystalline) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                    (hv_edgeSmallDefectWidthThresh + 0.45) / hv_widthResolution, (hv_edgeSmallDefectHeightThresh + 0.45) / hv_heightResolution);
                                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                                ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                            }
                        }
                        else
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                    hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                                ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                            }
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法三：角部空白面积
                        ho_LeftTopCornerWhiteRegion.Dispose();
                        HOperatorSet.Difference(ho_LeftTopCornerFullRegion, ho_LeftTopCornerRealRegion,
                            out ho_LeftTopCornerWhiteRegion);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_LeftTopCornerWhiteRegion, out ExpTmpOutVar_0,
                                5, 5);
                            ho_LeftTopCornerWhiteRegion.Dispose();
                            ho_LeftTopCornerWhiteRegion = ExpTmpOutVar_0;
                        }
                        HOperatorSet.AreaCenter(ho_LeftTopCornerWhiteRegion, out hv_AreaOfLeftTopCornerWhiteRegion,
                            out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_AreaOfLeftTopCornerWhiteRegion.TupleGreater((hv_cornerDefectAreaRatioThresh * (hv_edgeSmallDefectDetectDepth / hv_widthResolution)) * (hv_edgeSmallDefectDetectDepth / hv_heightResolution)))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfBottomRegion, ho_LeftTopCornerWhiteRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfBottomRegion.Dispose();
                                ho_totalEdgeDefectOfBottomRegion = ExpTmpOutVar_0;
                            }
                        }

                        //右侧角部区域全视野(包含硅片和角部空隙)
                        ho_RightTopCornerFullRegion.Dispose();
                        HOperatorSet.Intersection(ho_RightTopCornerRegion, ho_BottomRegionTrans,
                            out ho_RightTopCornerFullRegion);
                        //右侧角部硅片区域
                        ho_RightTopCornerRealRegion.Dispose();
                        HOperatorSet.Intersection(ho_RightTopCornerFullRegion, ho_BottomRegion,
                            out ho_RightTopCornerRealRegion);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_RightTopCornerRealRegion,
                                out ExpTmpOutVar_0);
                            ho_BottomEdgeDetectRegion.Dispose();
                            ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                        }
                        //算法一：凸包算法，检测边缘凹坑
                        ho_RightTopCornerRealRegionTrans.Dispose();
                        HOperatorSet.ShapeTrans(ho_RightTopCornerRealRegion, out ho_RightTopCornerRealRegionTrans,
                            "convex");
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Difference(ho_RightTopCornerRealRegionTrans, ho_RightTopCornerRealRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法二：抠图算法
                        ho_ImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_RightTopCornerRealRegionTrans,
                            out ho_ImageReduced);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                            25, 255);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法三：角部空白面积
                        ho_RightTopCornerWhiteRegion.Dispose();
                        HOperatorSet.Difference(ho_RightTopCornerFullRegion, ho_RightTopCornerRealRegion,
                            out ho_RightTopCornerWhiteRegion);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RightTopCornerWhiteRegion, out ExpTmpOutVar_0,
                                5, 5);
                            ho_RightTopCornerWhiteRegion.Dispose();
                            ho_RightTopCornerWhiteRegion = ExpTmpOutVar_0;
                        }
                        HOperatorSet.AreaCenter(ho_RightTopCornerWhiteRegion, out hv_AreaOfRightTopCornerWhiteRegion,
                            out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_AreaOfRightTopCornerWhiteRegion.TupleGreater((hv_cornerDefectAreaRatioThresh * (hv_edgeSmallDefectDetectDepth / hv_widthResolution)) * (hv_edgeSmallDefectDetectDepth / hv_heightResolution)))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfBottomRegion, ho_RightTopCornerWhiteRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfBottomRegion.Dispose();
                                ho_totalEdgeDefectOfBottomRegion = ExpTmpOutVar_0;
                            }
                        }
                    }
                    else
                    {
                        //半片
                        //左侧角部区域全视野(包含硅片和角部缺陷)
                        ho_LeftTopCornerFullRegion.Dispose();
                        HOperatorSet.Intersection(ho_LeftTopCornerRegion, ho_BottomRegionTrans,
                            out ho_LeftTopCornerFullRegion);

                        //2019-3-19 避免阴影造成的误检
                        //smallest_rectangle1 (LeftTopCornerFullRegion, Row11, Column11, Row21, Column21)
                        //gen_rectangle1 (LeftTopCornerFullRegion, Row11+8, Column11, Row21, Column21)

                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_LeftTopCornerFullRegion,
                                out ExpTmpOutVar_0);
                            ho_BottomEdgeDetectRegion.Dispose();
                            ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                        }
                        //左侧角部硅片区域
                        ho_LeftTopCornerRealRegion.Dispose();
                        HOperatorSet.Intersection(ho_LeftTopCornerFullRegion, ho_BottomRegion,
                            out ho_LeftTopCornerRealRegion);
                        //算法一：直接抠出缺陷
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Difference(ho_LeftTopCornerFullRegion, ho_LeftTopCornerRealRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法二：抠图算法
                        ho_ImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_LeftTopCornerFullRegion,
                            out ho_ImageReduced);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                            25, 255);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }

                        //右侧角部区域全视野(包含硅片和角部缺陷)
                        ho_RightTopCornerFullRegion.Dispose();
                        HOperatorSet.Intersection(ho_RightTopCornerRegion, ho_BottomRegionTrans,
                            out ho_RightTopCornerFullRegion);
                        //2019-3-19 避免阴影造成的误检
                        //smallest_rectangle1 (RightTopCornerFullRegion, Row11, Column11, Row21, Column21)
                        //gen_rectangle1 (RightTopCornerFullRegion, Row11+8, Column11, Row21, Column21)

                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_BottomEdgeDetectRegion, ho_RightTopCornerFullRegion,
                                out ExpTmpOutVar_0);
                            ho_BottomEdgeDetectRegion.Dispose();
                            ho_BottomEdgeDetectRegion = ExpTmpOutVar_0;
                        }
                        //右侧角部硅片区域
                        ho_RightTopCornerRealRegion.Dispose();
                        HOperatorSet.Intersection(ho_RightTopCornerFullRegion, ho_BottomRegion,
                            out ho_RightTopCornerRealRegion);
                        //算法一：直接抠出缺陷
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Difference(ho_RightTopCornerFullRegion, ho_RightTopCornerRealRegion,
                            out ho_EdgeDefectSuspiciousRegionTemp);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //算法二：抠图算法
                        ho_ImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForEdgeDefectDetect, ho_RightTopCornerFullRegion,
                            out ho_ImageReduced);
                        ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_EdgeDefectSuspiciousRegionTemp,
                            25, 255);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_EdgeDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_edgeSmallDefectWidthThresh / hv_widthResolution, hv_edgeSmallDefectHeightThresh / hv_heightResolution);
                            ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                            ho_EdgeDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        //union2 (EdgeDefectSuspiciousRegion, EdgeDefectSuspiciousRegionTemp, EdgeDefectSuspiciousRegion)
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_EdgeDefectSuspiciousRegion, ho_EdgeDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_EdgeDefectSuspiciousRegion.Dispose();
                            ho_EdgeDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                    }

                    //显示边间检测区域
                    //if (isUsingChinese)
                    //disp_obj (BottomEdgeDetectRegion, windowHandle)
                    //endif

                    //根据可疑区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_EdgeDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_ConnectedRegions, out ExpTmpOutVar_0, "area",
                            "and", 1, 99999);
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val384 = hv_TotalNum;
                    HTuple step_val384 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val384, step_val384); hv_Index = hv_Index.TupleAdd(step_val384))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_BottomEdgeDetectRegion,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForEdgeDefectDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForEdgeDefectDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_edgeSmallDefectGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalEdgeDefectOfBottomRegion, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalEdgeDefectOfBottomRegion.Dispose();
                                ho_totalEdgeDefectOfBottomRegion = ExpTmpOutVar_0;
                            }
                            hv_isEdgeDefectOfBottomWafer = 1;
                            //2019-4-9添加界面灰度均值显示，方便客户设置参数
                            HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_ObjectSelectedArea,
                                out hv_ObjectSelectedAreaRow, out hv_ObjectSelectedAreaColumn);
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_info = "灰度差：";
                            }
                            else
                            {
                                hv_info = "Grayscale Difference:";
                            }
                            disp_message_UserDefine(hv_windowHandle, hv_info + (((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                                ), hv_ObjectSelectedAreaRow + 50, hv_ObjectSelectedAreaColumn, "red");
                        }
                    }

                    //最终角部缺陷汇总
                    HOperatorSet.AreaCenter(ho_totalEdgeDefectOfBottomRegion, out hv_Area, out hv_Row,
                        out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isEdgeDefectOfBottomWafer = 1;
                    }
                    //union2 (totalEdgeDefectRegionOut, totalEdgeDefectOfBottomRegion, totalEdgeDefectRegionOut)
                }
                ho_EdgeDefectSuspiciousRegion.Dispose();
                ho_BottomRegionTrans.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_BottomRegionTransTemp.Dispose();
                ho_InnerEdgeRegion.Dispose();
                ho_ErosionForGetUpRegion.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_DownRegionFromBottomRegion.Dispose();
                ho_DownImageFromBottomImage.Dispose();
                ho_FirstColorLineRegion.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_ColorLineRegion.Dispose();
                ho_OutEdgeRegion.Dispose();
                ho_OutEdgeRegionOpening.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_SortedRegions1.Dispose();
                ho_UpperOutEdgeOfBottomRegion.Dispose();
                ho_BottomMainLineDilationRegions.Dispose();
                ho_UpperOutEdgesOfBottomRegion.Dispose();
                ho_StartWeldingOfBottomWaferRegion.Dispose();
                ho_StartWeldingSelected.Dispose();
                ho_ImageReduced1.Dispose();
                ho_ImageClosing.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening.Dispose();
                ho_RegionErosion.Dispose();
                ho_ImageReducedForStartWelding.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_HighAmpRegion.Dispose();
                ho_RegionClosing.Dispose();
                ho_SuspectStartWeldingRegion.Dispose();
                ho_IsNullRegion.Dispose();
                ho_ImageReduced2.Dispose();
                ho_RegionDifference.Dispose();
                ho_BigEdgeDefectRegion.Dispose();
                ho_BottomRegionErosion.Dispose();
                ho_EdgeRegions.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_TopEdgeRegionOfBottomRegion.Dispose();
                ho_EdgeDetectRectangle.Dispose();
                ho_EdgeDetectErosionRegion.Dispose();
                ho_EdgeDetectRegion.Dispose();
                ho_ImageReduced.Dispose();
                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                ho_LeftEdgeRegionOfBottomRegion.Dispose();
                ho_LeftEdgeDetectRegion.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ConnectedRegions6.Dispose();
                ho_RightEdgeRegionOfBottomRegion.Dispose();
                ho_RightEdgeDetectRegion.Dispose();
                ho_ConnectedRegions5.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_CornerRegions.Dispose();
                ho_LeftTopCornerRegion.Dispose();
                ho_RightTopCornerRegion.Dispose();
                ho_LeftTopCornerFullRegion.Dispose();
                ho_LeftTopCornerRealRegion.Dispose();
                ho_LeftTopCornerRealRegionTrans.Dispose();
                ho_LeftTopCornerWhiteRegion.Dispose();
                ho_RightTopCornerFullRegion.Dispose();
                ho_RightTopCornerRealRegion.Dispose();
                ho_RightTopCornerRealRegionTrans.Dispose();
                ho_RightTopCornerWhiteRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_EdgeDefectSuspiciousRegion.Dispose();
                ho_BottomRegionTrans.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_BottomRegionTransTemp.Dispose();
                ho_InnerEdgeRegion.Dispose();
                ho_ErosionForGetUpRegion.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_DownRegionFromBottomRegion.Dispose();
                ho_DownImageFromBottomImage.Dispose();
                ho_FirstColorLineRegion.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_ColorLineRegion.Dispose();
                ho_OutEdgeRegion.Dispose();
                ho_OutEdgeRegionOpening.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_SortedRegions1.Dispose();
                ho_UpperOutEdgeOfBottomRegion.Dispose();
                ho_BottomMainLineDilationRegions.Dispose();
                ho_UpperOutEdgesOfBottomRegion.Dispose();
                ho_StartWeldingOfBottomWaferRegion.Dispose();
                ho_StartWeldingSelected.Dispose();
                ho_ImageReduced1.Dispose();
                ho_ImageClosing.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening.Dispose();
                ho_RegionErosion.Dispose();
                ho_ImageReducedForStartWelding.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_HighAmpRegion.Dispose();
                ho_RegionClosing.Dispose();
                ho_SuspectStartWeldingRegion.Dispose();
                ho_IsNullRegion.Dispose();
                ho_ImageReduced2.Dispose();
                ho_RegionDifference.Dispose();
                ho_BigEdgeDefectRegion.Dispose();
                ho_BottomRegionErosion.Dispose();
                ho_EdgeRegions.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_TopEdgeRegionOfBottomRegion.Dispose();
                ho_EdgeDetectRectangle.Dispose();
                ho_EdgeDetectErosionRegion.Dispose();
                ho_EdgeDetectRegion.Dispose();
                ho_ImageReduced.Dispose();
                ho_EdgeDefectSuspiciousRegionTemp.Dispose();
                ho_LeftEdgeRegionOfBottomRegion.Dispose();
                ho_LeftEdgeDetectRegion.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ConnectedRegions6.Dispose();
                ho_RightEdgeRegionOfBottomRegion.Dispose();
                ho_RightEdgeDetectRegion.Dispose();
                ho_ConnectedRegions5.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_CornerRegions.Dispose();
                ho_LeftTopCornerRegion.Dispose();
                ho_RightTopCornerRegion.Dispose();
                ho_LeftTopCornerFullRegion.Dispose();
                ho_LeftTopCornerRealRegion.Dispose();
                ho_LeftTopCornerRealRegionTrans.Dispose();
                ho_LeftTopCornerWhiteRegion.Dispose();
                ho_RightTopCornerFullRegion.Dispose();
                ho_RightTopCornerRealRegion.Dispose();
                ho_RightTopCornerRealRegionTrans.Dispose();
                ho_RightTopCornerWhiteRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SurfaceDefectDetectOfTopImage(HObject ho_TopRegion, HObject ho_TopMainLineRegions,
            HObject ho_RedChannelImage, HObject ho_BlueChannelImage, out HObject ho_totalSurfaceDefectRegionOutOfTopImage,
            HTuple hv_isTopWaferExist, HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_subMainLineNum, HTuple hv_PI, HTuple hv_surfaceDefectViceLineShieldWidth,
            HTuple hv_isUsingChinese, HTuple hv_windowHandle, HTuple hv_surfaceScratchGrayThresh,
            HTuple hv_surfaceScratchHeightThresh, HTuple hv_width, HTuple hv_height, HTuple hv_surfaceDefectWidthThresh,
            HTuple hv_surfaceDefectHeightThresh, HTuple hv_surfaceScratchWidthThresh, HTuple hv_surfaceDefectViceLineShieldLeftPosOffSet,
            HTuple hv_surfaceDefectViceLineShieldRightPosOffSet, HTuple hv_surfaceDefectGrayThresh,
            HTuple hv_isUsingSurfaceColorDiffDetect, HTuple hv_CenterRowOfTopRegion, HTuple hv_CenterColumnOfTopRegion,
            out HTuple hv_isSurfaceDefectOfTopWafer, out HTuple hv_surfaceMeanGrayOfTopWaferOut,
            out HTuple hv_isSurfaceScratchOfTopWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_ViceLineFilterRegion, ho_SurfaceDefectSuspiciousRegion = null;
            HObject ho_SurfaceScratchSuspiciousRegion = null, ho_TotalShieldRegions = null;
            HObject ho_SurfaceDefectSpetialSuspiciousRegion = null, ho_TopRegionErosionForSurfaceDetect = null;
            HObject ho_TopRegionForSurfaceDetect = null, ho_ConnectedRegions = null;
            HObject ho_ObjectSelected = null, ho_ImageReduce = null, ho_ImageOpeningWithOutViceLine = null;
            HObject ho_ViceLineRegions = null, ho_ViceLineIntersectionRegionClosing = null;
            HObject ho_ViceLineIntersectionConnectedRegions = null, ho_ViceLineFilterSelectedRegions = null;
            HObject ho_ViceLineFilterObjectSelected = null, ho_ViceLineRegionOpening = null;
            HObject ho_ViceLineFilterRegionDifference = null, ho_ViceLineRegionFilterIntersection = null;
            HObject ho_ImageOpening = null, ho_Region = null, ho_ConnectedRegions1 = null;
            HObject ho_ParallelViceLine = null, ho_ParallelViceLineDilation = null;
            HObject ho_TotalViceLineRegions = null, ho_ObjectSelectedWithOutVileLine = null;
            HObject ho_HighpassImage = null, ho_ThresholdHighPassImageRegion = null;
            HObject ho_OpeningThresholdHighPassImageRegion = null, ho_ClosingThresholdHighPassImageRegion = null;
            HObject ho_ThresholdHighPassImageRegionConnection = null;
            HObject ho_ConnectedSurfaceDefectSuspiciousRegions = null;
            HObject ho_SurfaceScratchSuspiciousRegionTemp = null, ho_SurfaceDefectSuspiciousRegionTemp = null;
            HObject ho_RegionDilation = null, ho_RegionDifference = null;
            HObject ho_BackGroundRegion = null, ho_SelectedRegion = null;

            // Local control variables 

            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_hwidth = new HTuple();
            HTuple hv_HalfHeightOfTopRegionForSurfaceDetectRectangle = new HTuple();
            HTuple hv_Number = new HTuple(), hv_Index = new HTuple();
            HTuple hv_UsedThreshold = new HTuple(), hv_ViceLineFilterNumber = new HTuple();
            HTuple hv_Index3 = new HTuple(), hv_ObjectSelectedOfWidthValue = new HTuple();
            HTuple hv_TotalNum = new HTuple(), hv_Area = new HTuple();
            HTuple hv_BackGroundMean = new HTuple(), hv_BackGroundDeviation = new HTuple();
            HTuple hv_SelectedMean = new HTuple(), hv_ObjectSelectedDeviation = new HTuple();
            HTuple hv_ObjectSelectedMean = new HTuple(), hv_info = new HTuple();
            HTuple hv_COfRow = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOutOfTopImage);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterRegion);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_SurfaceScratchSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_TotalShieldRegions);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSpetialSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionErosionForSurfaceDetect);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForSurfaceDetect);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageReduce);
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningWithOutViceLine);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionRegionClosing);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterSelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterRegionDifference);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionFilterIntersection);
            HOperatorSet.GenEmptyObj(out ho_ImageOpening);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_ParallelViceLine);
            HOperatorSet.GenEmptyObj(out ho_ParallelViceLineDilation);
            HOperatorSet.GenEmptyObj(out ho_TotalViceLineRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelectedWithOutVileLine);
            HOperatorSet.GenEmptyObj(out ho_HighpassImage);
            HOperatorSet.GenEmptyObj(out ho_ThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_OpeningThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_ClosingThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_ThresholdHighPassImageRegionConnection);
            HOperatorSet.GenEmptyObj(out ho_ConnectedSurfaceDefectSuspiciousRegions);
            HOperatorSet.GenEmptyObj(out ho_SurfaceScratchSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegion);
            try
            {
                //上半片处理
                //局部变量初始化，防止上半片不存在报异常
                //上半片平均灰度值初始化
                hv_surfaceMeanGrayOfTopWaferOut = -1;
                //上半片表面缺陷结果区域初始化
                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOutOfTopImage);
                ho_ViceLineFilterRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_ViceLineFilterRegion);
                //上半片表面缺陷检测结果初始化
                hv_isSurfaceDefectOfTopWafer = 0;
                hv_isSurfaceScratchOfTopWafer = 0;
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //表面缺陷常规处理可疑区域初始化
                    ho_SurfaceDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceDefectSuspiciousRegion);
                    //表面划痕常规处理可疑区域初始化
                    ho_SurfaceScratchSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceScratchSuspiciousRegion);
                    //纵向细栅线特殊处理区域初始化
                    ho_TotalShieldRegions.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_TotalShieldRegions);
                    //纵向细栅线特殊处理可疑区域初始化
                    ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceDefectSpetialSuspiciousRegion);

                    //提取出表面检测区域
                    ho_TopRegionErosionForSurfaceDetect.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegion, out ho_TopRegionErosionForSurfaceDetect,
                        hv_surfaceDefectDetectIndentDepth / hv_widthResolution, hv_surfaceDefectDetectIndentDepth / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ShapeTrans(ho_TopRegionErosionForSurfaceDetect, out ExpTmpOutVar_0,
                            "convex");
                        ho_TopRegionErosionForSurfaceDetect.Dispose();
                        ho_TopRegionErosionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Intersection(ho_TopRegionErosionForSurfaceDetect, ho_TopRegion,
                            out ExpTmpOutVar_0);
                        ho_TopRegionErosionForSurfaceDetect.Dispose();
                        ho_TopRegionErosionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    ho_TopRegionForSurfaceDetect.Dispose();
                    HOperatorSet.Difference(ho_TopRegionErosionForSurfaceDetect, ho_TopMainLineRegions,
                        out ho_TopRegionForSurfaceDetect);
                    HOperatorSet.SmallestRectangle2(ho_TopRegionForSurfaceDetect, out hv_Row,
                        out hv_Column, out hv_Phi, out hv_hwidth, out hv_HalfHeightOfTopRegionForSurfaceDetectRectangle);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_TopRegionForSurfaceDetect, out ExpTmpOutVar_0,
                            1, hv_HalfHeightOfTopRegionForSurfaceDetectRectangle);
                        ho_TopRegionForSurfaceDetect.Dispose();
                        ho_TopRegionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ErosionRectangle1(ho_TopRegionForSurfaceDetect, out ExpTmpOutVar_0,
                            15, 15);
                        ho_TopRegionForSurfaceDetect.Dispose();
                        ho_TopRegionForSurfaceDetect = ExpTmpOutVar_0;
                    }

                    //***较小的亮脏污处理(小于细栅线)****
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_TopRegionForSurfaceDetect, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_Number);

                    //7.12测试程序
                    HTuple end_val35 = hv_Number;
                    HTuple step_val35 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val35, step_val35); hv_Index = hv_Index.TupleAdd(step_val35))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        ho_ImageReduce.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_ObjectSelected, out ho_ImageReduce
                            );
                        //剔除横向细栅线
                        ho_ImageOpeningWithOutViceLine.Dispose();
                        HOperatorSet.GrayOpeningRect(ho_ImageReduce, out ho_ImageOpeningWithOutViceLine,
                            1, 20);
                        //7.17修改二值化抓取细栅线改为全局阈值50-255
                        ho_ViceLineRegions.Dispose();
                        HOperatorSet.Threshold(ho_ImageOpeningWithOutViceLine, out ho_ViceLineRegions,
                            30, 255);
                        //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                        ho_ViceLineIntersectionRegionClosing.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_ViceLineRegions, out ho_ViceLineIntersectionRegionClosing,
                            1, (1.5 / hv_heightResolution) * 0.5);
                        ho_ViceLineIntersectionConnectedRegions.Dispose();
                        HOperatorSet.Connection(ho_ViceLineIntersectionRegionClosing, out ho_ViceLineIntersectionConnectedRegions
                            );
                        ho_ViceLineFilterSelectedRegions.Dispose();
                        HOperatorSet.SelectShape(ho_ViceLineIntersectionConnectedRegions, out ho_ViceLineFilterSelectedRegions,
                            "height", "and", (1.5 / hv_heightResolution) * 0.5, 99999);
                        HOperatorSet.CountObj(ho_ViceLineFilterSelectedRegions, out hv_ViceLineFilterNumber);
                        HTuple end_val47 = hv_ViceLineFilterNumber;
                        HTuple step_val47 = 1;
                        for (hv_Index3 = 1; hv_Index3.Continue(end_val47, step_val47); hv_Index3 = hv_Index3.TupleAdd(step_val47))
                        {
                            ho_ViceLineFilterObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_ViceLineFilterSelectedRegions, out ho_ViceLineFilterObjectSelected,
                                hv_Index3);
                            HOperatorSet.RegionFeatures(ho_ViceLineFilterObjectSelected, "width",
                                out hv_ObjectSelectedOfWidthValue);
                            ho_ViceLineRegionOpening.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_ViceLineFilterObjectSelected, out ho_ViceLineRegionOpening,
                                hv_ObjectSelectedOfWidthValue * 0.9, 1);
                            ho_ViceLineFilterRegionDifference.Dispose();
                            HOperatorSet.Difference(ho_ViceLineFilterObjectSelected, ho_ViceLineRegionOpening,
                                out ho_ViceLineFilterRegionDifference);
                            ho_ViceLineRegionFilterIntersection.Dispose();
                            HOperatorSet.Intersection(ho_ViceLineFilterRegionDifference, ho_ViceLineRegions,
                                out ho_ViceLineRegionFilterIntersection);
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_ViceLineFilterRegion, ho_ViceLineRegionFilterIntersection,
                                    out ExpTmpOutVar_0);
                                ho_ViceLineFilterRegion.Dispose();
                                ho_ViceLineFilterRegion = ExpTmpOutVar_0;
                            }
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Difference(ho_ViceLineRegions, ho_ViceLineFilterRegion, out ExpTmpOutVar_0
                                );
                            ho_ViceLineRegions.Dispose();
                            ho_ViceLineRegions = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_ViceLineRegions, out ExpTmpOutVar_0,
                                300, 1);
                            ho_ViceLineRegions.Dispose();
                            ho_ViceLineRegions = ExpTmpOutVar_0;
                        }

                        ho_ImageOpening.Dispose();
                        HOperatorSet.GrayOpeningRect(ho_ImageReduce, out ho_ImageOpening, 20, 1);
                        //7.17修改二值化抓取细栅线改为全局阈值50-255
                        ho_Region.Dispose();
                        HOperatorSet.Threshold(ho_ImageOpening, out ho_Region, 30, 255);
                        //binary_threshold (ImageOpening, Region, 'max_separability', 'light', UsedThreshold)
                        ho_ConnectedRegions1.Dispose();
                        HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions1);
                        ho_ParallelViceLine.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_ParallelViceLine,
                            ((new HTuple("rectangularity")).TupleConcat("height")).TupleConcat(
                            "width"), "and", (((new HTuple(0.6)).TupleConcat((1.5 / hv_heightResolution) * 0.5))).TupleConcat(
                            2), (((new HTuple(1)).TupleConcat((1.5 / hv_heightResolution) * 1.5))).TupleConcat(
                            12));
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_ParallelViceLine, out ExpTmpOutVar_0,
                                4, 1);
                            ho_ParallelViceLine.Dispose();
                            ho_ParallelViceLine = ExpTmpOutVar_0;
                        }
                        ho_ParallelViceLineDilation.Dispose();
                        HOperatorSet.DilationRectangle1(ho_ParallelViceLine, out ho_ParallelViceLineDilation,
                            1, 300);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union1(ho_ParallelViceLineDilation, out ExpTmpOutVar_0);
                            ho_ParallelViceLineDilation.Dispose();
                            ho_ParallelViceLineDilation = ExpTmpOutVar_0;
                        }
                        ho_TotalViceLineRegions.Dispose();
                        HOperatorSet.Union2(ho_ViceLineRegions, ho_ParallelViceLine, out ho_TotalViceLineRegions
                            );
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Difference(ho_TopRegionForSurfaceDetect, ho_TotalViceLineRegions,
                                out ExpTmpOutVar_0);
                            ho_TopRegionForSurfaceDetect.Dispose();
                            ho_TopRegionForSurfaceDetect = ExpTmpOutVar_0;
                        }
                        ho_ObjectSelectedWithOutVileLine.Dispose();
                        HOperatorSet.Difference(ho_ObjectSelected, ho_TotalViceLineRegions, out ho_ObjectSelectedWithOutVileLine
                            );


                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ReduceDomain(ho_ImageReduce, ho_ObjectSelectedWithOutVileLine,
                                out ExpTmpOutVar_0);
                            ho_ImageReduce.Dispose();
                            ho_ImageReduce = ExpTmpOutVar_0;
                        }


                        //高通滤波+Sobel算子提取可疑划痕
                        ho_HighpassImage.Dispose();
                        HOperatorSet.HighpassImage(ho_ImageReduce, out ho_HighpassImage, 40, 1);
                        ho_ThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.Threshold(ho_HighpassImage, out ho_ThresholdHighPassImageRegion,
                            128 + hv_surfaceScratchGrayThresh, 255);
                        ho_OpeningThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.OpeningRectangle1(ho_ThresholdHighPassImageRegion, out ho_OpeningThresholdHighPassImageRegion,
                            2, 2);
                        //7.18膨胀可疑划痕区域，防止划痕无法连接
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_OpeningThresholdHighPassImageRegion,
                                out ExpTmpOutVar_0, 5, 5);
                            ho_OpeningThresholdHighPassImageRegion.Dispose();
                            ho_OpeningThresholdHighPassImageRegion = ExpTmpOutVar_0;
                        }
                        ho_ClosingThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_OpeningThresholdHighPassImageRegion,
                            out ho_ClosingThresholdHighPassImageRegion, 10, 10);



                        //防止部分纵向细栅线未剔除造成误检
                        ho_ThresholdHighPassImageRegionConnection.Dispose();
                        HOperatorSet.Connection(ho_ClosingThresholdHighPassImageRegion, out ho_ThresholdHighPassImageRegionConnection
                            );
                        ho_ClosingThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ThresholdHighPassImageRegionConnection,
                            ho_ParallelViceLineDilation, out ho_ClosingThresholdHighPassImageRegion,
                            "overlaps_rel", 0, 90);
                        ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                        HOperatorSet.Connection(ho_ClosingThresholdHighPassImageRegion, out ho_ConnectedSurfaceDefectSuspiciousRegions
                            );
                        ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedSurfaceDefectSuspiciousRegions, out ho_SurfaceScratchSuspiciousRegionTemp,
                            (new HTuple("width")).TupleConcat("height"), "or", ((hv_surfaceScratchWidthThresh / hv_widthResolution)).TupleConcat(
                            hv_surfaceScratchHeightThresh / hv_heightResolution), hv_width.TupleConcat(
                            hv_height));
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_SurfaceScratchSuspiciousRegion, ho_SurfaceScratchSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_SurfaceScratchSuspiciousRegion.Dispose();
                            ho_SurfaceScratchSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //阈值分割，提取可疑大脏污
                        ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.BinaryThreshold(ho_ImageReduce, out ho_SurfaceDefectSuspiciousRegionTemp,
                            "max_separability", "light", out hv_UsedThreshold);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_SurfaceDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_surfaceDefectWidthThresh / hv_widthResolution, hv_surfaceDefectHeightThresh / hv_heightResolution);
                            ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                            ho_SurfaceDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_SurfaceDefectSuspiciousRegion, ho_SurfaceDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_SurfaceDefectSuspiciousRegion.Dispose();
                            ho_SurfaceDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                    }


                    //针对最左端区域进行脏污检测
                    //select_obj (ConnectedRegions, FirstRegionForSurfaceDetect, 1)
                    //reduce_domain (RedChannelImage, FirstRegionForSurfaceDetect, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (TopRegionForSurfaceDetect, ViceLineRegions, TopRegionForSurfaceDetect)
                    //difference (FirstRegionForSurfaceDetect, ViceLineRegions, FirstRegionForSurfaceDetectWithOutVileLine)
                    //reduce_domain (ImageReduce, FirstRegionForSurfaceDetectWithOutVileLine, ImageReduce)
                    //针对四分流电池片进行纵向细栅处理
                    //if (subMainLineNum == 3)
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (FirstRegionForSurfaceDetect, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, FirstRegionForSurfaceDetectWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (TopRegionForSurfaceDetect, ShieldRectangle, TopRegionForSurfaceDetect)
                    //difference (FirstRegionForSurfaceDetectWithOutVileLine, ShieldRectangle, FirstRegionForSurfaceDetectWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, FirstRegionForSurfaceDetectWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //else
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //endif

                    //针对最右端区域进行脏污检测
                    //select_obj (ConnectedRegions, LastRegionForSurfaceDetect, Number)
                    //reduce_domain (RedChannelImage, LastRegionForSurfaceDetect, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (TopRegionForSurfaceDetect, ViceLineRegions, TopRegionForSurfaceDetect)
                    //difference (LastRegionForSurfaceDetect, ViceLineRegions, LastRegionForSurfaceDetectWithOutVileLine)
                    //reduce_domain (ImageReduce, LastRegionForSurfaceDetectWithOutVileLine, ImageReduce)
                    //针对四分流电池片进行纵向细栅处理
                    //if (subMainLineNum == 3)
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (LastRegionForSurfaceDetect, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, LastRegionForSurfaceDetectWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (TopRegionForSurfaceDetect, ShieldRectangle, TopRegionForSurfaceDetect)
                    //difference (LastRegionForSurfaceDetectWithOutVileLine, ShieldRectangle, LastRegionForSurfaceDetectWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, LastRegionForSurfaceDetectWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //else
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //endif

                    //针对带有纵向细栅线的区域进行脏污检测
                    //for Index := 2 to Number-1 by 1
                    //select_obj (ConnectedRegions, ObjectSelected, Index)
                    //reduce_domain (RedChannelImage, ObjectSelected, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (TopRegionForSurfaceDetect, ViceLineRegions, TopRegionForSurfaceDetect)
                    //difference (ObjectSelected, ViceLineRegions, ObjectSelectedWithOutVileLine)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLine, ImageReduce)
                    //剔除纵向细栅线
                    //if (subMainLineNum == 0)
                    //无纵向细栅线，无分流
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //elseif (subMainLineNum == 1)
                    //1条纵向细栅线，二分流
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, ObjectSelectedWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (TopRegionForSurfaceDetect, ShieldRectangle, TopRegionForSurfaceDetect)
                    //difference (ObjectSelectedWithOutVileLine, ShieldRectangle, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //elseif (subMainLineNum == 2)
                    //2条纵向细栅线，三分流
                    //双纵向细栅线处理，屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //lengthTemp := 2 * halfWidthTemp / 3
                    //屏蔽区域1
                    //rowTemp := centerRowTemp + (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp - (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp - (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp + (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //lengthTemp := 2 * halfHeightTemp / 3
                    //屏蔽区域1
                    //rowTemp := centerRowTemp - (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp + (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp + (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp - (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //union2 (ShieldRectangleFirst, ShieldRectangleSecond, ShieldRectangle)
                    //intersection (ShieldRectangle, ObjectSelectedWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //剔除屏蔽区域
                    //difference (TopRegionForSurfaceDetect, ShieldRectangleFirst, TopRegionForSurfaceDetect)
                    //difference (TopRegionForSurfaceDetect, ShieldRectangleSecond, TopRegionForSurfaceDetect)
                    //difference (ObjectSelectedWithOutVileLine, ShieldRectangleFirst, ObjectSelectedWithOutVileLinePartOne)
                    //difference (ObjectSelectedWithOutVileLinePartOne, ShieldRectangleSecond, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //elseif (subMainLineNum == 3)
                    //3条纵向细栅线，四分流
                    //三纵向细栅线处理，屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //lengthTemp := 2 * halfWidthTemp / 4
                    //屏蔽区域1
                    //rowTemp := centerRowTemp + (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp - (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp - (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp + (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域3
                    //gen_rectangle2 (ShieldRectangleThird, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif

                    //else
                    //lengthTemp := 2 * halfHeightTemp / 4
                    //屏蔽区域1
                    //rowTemp := centerRowTemp - (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp + (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp + (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp - (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域3
                    //gen_rectangle2 (ShieldRectangleThird, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif

                    //endif
                    //纵向细栅线区域单独处理
                    //union2 (ShieldRectangleFirst, ShieldRectangleSecond, ShieldRectangleFS)
                    //union2 (ShieldRectangleFS, ShieldRectangleThird, ShieldRectangleTotal)
                    //intersection (ShieldRectangleTotal, ObjectSelectedWithOutVileLine, ShieldRectangleTotal)
                    //union2 (TotalShieldRegions, ShieldRectangleTotal, TotalShieldRegions)

                    //剔除屏蔽区域
                    //difference (TopRegionForSurfaceDetect, ShieldRectangleTotal, TopRegionForSurfaceDetect)
                    //difference (ObjectSelectedWithOutVileLine, ShieldRectangleTotal, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //endif
                    //endfor

                    //根据可疑划痕区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_SurfaceScratchSuspiciousRegion, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val422 = hv_TotalNum;
                    HTuple step_val422 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val422, step_val422); hv_Index = hv_Index.TupleAdd(step_val422))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_TopRegionForSurfaceDetect,
                            out ho_BackGroundRegion);
                        ho_SelectedRegion.Dispose();
                        HOperatorSet.Intersection(ho_ObjectSelected, ho_TopRegionForSurfaceDetect,
                            out ho_SelectedRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_RedChannelImage, out hv_BackGroundMean,
                            out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_SelectedRegion, ho_RedChannelImage, out hv_SelectedMean,
                            out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_SelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_surfaceScratchGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalSurfaceDefectRegionOutOfTopImage, ho_SelectedRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                                ho_totalSurfaceDefectRegionOutOfTopImage = ExpTmpOutVar_0;
                            }
                            hv_isSurfaceScratchOfTopWafer = 1;
                        }
                    }


                    //根据可疑大脏污区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_SurfaceDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val446 = hv_TotalNum;
                    HTuple step_val446 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val446, step_val446); hv_Index = hv_Index.TupleAdd(step_val446))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_TopRegionForSurfaceDetect,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_RedChannelImage, out hv_BackGroundMean,
                            out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_RedChannelImage, out hv_ObjectSelectedMean,
                            out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_surfaceDefectGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalSurfaceDefectRegionOutOfTopImage, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalSurfaceDefectRegionOutOfTopImage.Dispose();
                                ho_totalSurfaceDefectRegionOutOfTopImage = ExpTmpOutVar_0;
                            }
                            hv_isSurfaceDefectOfTopWafer = 1;
                        }
                    }

                    //色差计算：上半片Blue通道平均灰度值, 靠外部程序逻辑判断是否为色差串
                    if ((int)(hv_isUsingSurfaceColorDiffDetect) != 0)
                    {
                        HOperatorSet.GrayFeatures(ho_TopRegionForSurfaceDetect, ho_BlueChannelImage,
                            "mean", out hv_surfaceMeanGrayOfTopWaferOut);
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_info = "颜色均值：";
                        }
                        else
                        {
                            hv_info = "Average Color:";
                        }
                        //2020.05.14-颜色均值位置显示
                        if ((int)(new HTuple(hv_CenterRowOfTopRegion.TupleGreater(70))) != 0)
                        {
                            hv_COfRow = hv_CenterRowOfTopRegion - 70;
                        }
                        else
                        {
                            hv_COfRow = hv_CenterRowOfTopRegion.Clone();
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_info + hv_surfaceMeanGrayOfTopWaferOut,
                            hv_COfRow, hv_CenterColumnOfTopRegion, "green");
                    }

                    //特殊处理区域(纵向细栅线)
                    //reduce_domain (RedChannelImage, TotalShieldRegions, ImageOfTotalShieldRegions)
                    //轻微横向灰度开运算，剔除纵向细栅线
                    //gray_opening_rect (ImageOfTotalShieldRegions, ImageOfTotalShieldRegions, 1, 15)
                    //寻找大脏污点
                    //binary_threshold (ImageOfTotalShieldRegions, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSpetialSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSpetialSuspiciousRegion)

                    //根据可疑区域表面及几何特征进行二次筛选
                    //connection (SurfaceDefectSpetialSuspiciousRegion, ConnectedRegions)
                    //count_obj (ConnectedRegions, TotalNum)
                    //for Index := 1 to TotalNum by 1
                    //select_obj (ConnectedRegions, ObjectSelected, Index)
                    //判断是否为空区域
                    //area_center (ObjectSelected, Area, Row, Column)
                    //if (Area <= 0)
                    //continue
                    //endif
                    //根据膨胀找到相邻背景，判断灰度差
                    //dilation_circle (ObjectSelected, RegionDilation, 20)
                    //difference (RegionDilation, ObjectSelected, RegionDifference)
                    //intersection (RegionDifference, TotalShieldRegions, BackGroundRegion)
                    //intensity (BackGroundRegion, ImageOfTotalShieldRegions, BackGroundMean, BackGroundDeviation)
                    //intensity (ObjectSelected, ImageOfTotalShieldRegions, ObjectSelectedMean, ObjectSelectedDeviation)
                    //if (abs(ObjectSelectedMean-BackGroundMean)>=surfaceDefectGrayThresh)
                    //union2 (totalSurfaceDefectRegionOutOfTopImage, ObjectSelected, totalSurfaceDefectRegionOutOfTopImage)
                    //isSurfaceDefectOfTopWafer := true
                    //endif
                    //endfor

                }
                ho_ViceLineFilterRegion.Dispose();
                ho_SurfaceDefectSuspiciousRegion.Dispose();
                ho_SurfaceScratchSuspiciousRegion.Dispose();
                ho_TotalShieldRegions.Dispose();
                ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                ho_TopRegionErosionForSurfaceDetect.Dispose();
                ho_TopRegionForSurfaceDetect.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageReduce.Dispose();
                ho_ImageOpeningWithOutViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_ViceLineIntersectionRegionClosing.Dispose();
                ho_ViceLineIntersectionConnectedRegions.Dispose();
                ho_ViceLineFilterSelectedRegions.Dispose();
                ho_ViceLineFilterObjectSelected.Dispose();
                ho_ViceLineRegionOpening.Dispose();
                ho_ViceLineFilterRegionDifference.Dispose();
                ho_ViceLineRegionFilterIntersection.Dispose();
                ho_ImageOpening.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ParallelViceLine.Dispose();
                ho_ParallelViceLineDilation.Dispose();
                ho_TotalViceLineRegions.Dispose();
                ho_ObjectSelectedWithOutVileLine.Dispose();
                ho_HighpassImage.Dispose();
                ho_ThresholdHighPassImageRegion.Dispose();
                ho_OpeningThresholdHighPassImageRegion.Dispose();
                ho_ClosingThresholdHighPassImageRegion.Dispose();
                ho_ThresholdHighPassImageRegionConnection.Dispose();
                ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_SelectedRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ViceLineFilterRegion.Dispose();
                ho_SurfaceDefectSuspiciousRegion.Dispose();
                ho_SurfaceScratchSuspiciousRegion.Dispose();
                ho_TotalShieldRegions.Dispose();
                ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                ho_TopRegionErosionForSurfaceDetect.Dispose();
                ho_TopRegionForSurfaceDetect.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageReduce.Dispose();
                ho_ImageOpeningWithOutViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_ViceLineIntersectionRegionClosing.Dispose();
                ho_ViceLineIntersectionConnectedRegions.Dispose();
                ho_ViceLineFilterSelectedRegions.Dispose();
                ho_ViceLineFilterObjectSelected.Dispose();
                ho_ViceLineRegionOpening.Dispose();
                ho_ViceLineFilterRegionDifference.Dispose();
                ho_ViceLineRegionFilterIntersection.Dispose();
                ho_ImageOpening.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ParallelViceLine.Dispose();
                ho_ParallelViceLineDilation.Dispose();
                ho_TotalViceLineRegions.Dispose();
                ho_ObjectSelectedWithOutVileLine.Dispose();
                ho_HighpassImage.Dispose();
                ho_ThresholdHighPassImageRegion.Dispose();
                ho_OpeningThresholdHighPassImageRegion.Dispose();
                ho_ClosingThresholdHighPassImageRegion.Dispose();
                ho_ThresholdHighPassImageRegionConnection.Dispose();
                ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_SelectedRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SurfaceDefectDetectOfBottomImage(HObject ho_BottomRegion, HObject ho_BottomMainLineRegions,
            HObject ho_RedChannelImage, HObject ho_BlueChannelImage, out HObject ho_totalSurfaceDefectRegionOutOfBottomImage,
            HTuple hv_isBottomWaferExist, HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_subMainLineNum, HTuple hv_PI, HTuple hv_isUsingChinese,
            HTuple hv_surfaceDefectViceLineShieldWidth, HTuple hv_windowHandle, HTuple hv_surfaceScratchGrayThresh,
            HTuple hv_surfaceScratchWidthThresh, HTuple hv_surfaceScratchHeightThresh, HTuple hv_width,
            HTuple hv_height, HTuple hv_surfaceDefectWidthThresh, HTuple hv_surfaceDefectHeightThresh,
            HTuple hv_surfaceDefectViceLineShieldLeftPosOffSet, HTuple hv_surfaceDefectViceLineShieldRightPosOffSet,
            HTuple hv_surfaceDefectGrayThresh, HTuple hv_isUsingSurfaceColorDiffDetect,
            HTuple hv_CenterRowOfBottomRegion, HTuple hv_CenterColumnOfBottomRegion, out HTuple hv_isSurfaceDefectOfBottomWafer,
            out HTuple hv_surfaceMeanGrayOfBottomWaferOut, out HTuple hv_isSurfaceScratchOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_ViceLineFilterRegion, ho_SurfaceDefectSuspiciousRegion = null;
            HObject ho_SurfaceScratchSuspiciousRegion = null, ho_TotalShieldRegions = null;
            HObject ho_SurfaceDefectSpetialSuspiciousRegion = null, ho_BottomRegionErosionForSurfaceDetect = null;
            HObject ho_BottomRegionForSurfaceDetect = null, ho_ConnectedRegions = null;
            HObject ho_ObjectSelected = null, ho_ImageReduce = null, ho_ImageOpeningWithOutViceLine = null;
            HObject ho_ViceLineRegions = null, ho_ViceLineIntersectionRegionClosing = null;
            HObject ho_ViceLineIntersectionConnectedRegions = null, ho_ViceLineFilterSelectedRegions = null;
            HObject ho_ViceLineFilterObjectSelected = null, ho_ViceLineRegionOpening = null;
            HObject ho_ViceLineFilterRegionDifference = null, ho_ViceLineRegionFilterIntersection = null;
            HObject ho_ImageOpening = null, ho_Region = null, ho_ConnectedRegions1 = null;
            HObject ho_ParallelViceLine = null, ho_ParallelViceLineDilation = null;
            HObject ho_ObjectSelectedWithOutVileLine = null, ho_HighpassImage = null;
            HObject ho_ThresholdHighPassImageRegion = null, ho_OpeningThresholdHighPassImageRegion = null;
            HObject ho_ClosingThresholdHighPassImageRegion = null, ho_ThresholdHighPassImageRegionConnection = null;
            HObject ho_ConnectedSurfaceDefectSuspiciousRegions = null;
            HObject ho_SurfaceScratchSuspiciousRegionTemp = null, ho_SurfaceDefectSuspiciousRegionTemp = null;
            HObject ho_RegionDilation = null, ho_RegionDifference = null;
            HObject ho_BackGroundRegion = null, ho_SelectedRegion = null;

            // Local control variables 

            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_hwidth = new HTuple();
            HTuple hv_HalfHeightOfBottomRegionForSurfaceDetectRectangle = new HTuple();
            HTuple hv_Number = new HTuple(), hv_Index = new HTuple();
            HTuple hv_UsedThreshold = new HTuple(), hv_ViceLineFilterNumber = new HTuple();
            HTuple hv_Index3 = new HTuple(), hv_ObjectSelectedOfWidthValue = new HTuple();
            HTuple hv_TotalNum = new HTuple(), hv_Area = new HTuple();
            HTuple hv_BackGroundMean = new HTuple(), hv_BackGroundDeviation = new HTuple();
            HTuple hv_SelectedMean = new HTuple(), hv_ObjectSelectedDeviation = new HTuple();
            HTuple hv_ObjectSelectedMean = new HTuple(), hv_info = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOutOfBottomImage);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterRegion);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_SurfaceScratchSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_TotalShieldRegions);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSpetialSuspiciousRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionErosionForSurfaceDetect);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForSurfaceDetect);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageReduce);
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningWithOutViceLine);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionRegionClosing);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterSelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ViceLineFilterRegionDifference);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionFilterIntersection);
            HOperatorSet.GenEmptyObj(out ho_ImageOpening);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_ParallelViceLine);
            HOperatorSet.GenEmptyObj(out ho_ParallelViceLineDilation);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelectedWithOutVileLine);
            HOperatorSet.GenEmptyObj(out ho_HighpassImage);
            HOperatorSet.GenEmptyObj(out ho_ThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_OpeningThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_ClosingThresholdHighPassImageRegion);
            HOperatorSet.GenEmptyObj(out ho_ThresholdHighPassImageRegionConnection);
            HOperatorSet.GenEmptyObj(out ho_ConnectedSurfaceDefectSuspiciousRegions);
            HOperatorSet.GenEmptyObj(out ho_SurfaceScratchSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_SurfaceDefectSuspiciousRegionTemp);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegion);
            try
            {
                //下半片处理
                //局部变量初始化，防止下半片不存在报异常
                //下半片平均灰度值初始化
                hv_surfaceMeanGrayOfBottomWaferOut = -1;
                //下半片表面缺陷结果区域初始化
                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOutOfBottomImage
                    );
                ho_ViceLineFilterRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_ViceLineFilterRegion);
                //下半片表面缺陷检测结果初始化
                hv_isSurfaceDefectOfBottomWafer = 0;
                hv_isSurfaceScratchOfBottomWafer = 0;
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //表面缺陷可疑区域初始化
                    ho_SurfaceDefectSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceDefectSuspiciousRegion);
                    //表面划痕常规处理可疑区域初始化
                    ho_SurfaceScratchSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceScratchSuspiciousRegion);
                    //纵向细栅线特殊处理区域初始化
                    ho_TotalShieldRegions.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_TotalShieldRegions);
                    //纵向细栅线特殊处理可疑区域初始化
                    ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SurfaceDefectSpetialSuspiciousRegion);

                    //提取出表面检测区域
                    ho_BottomRegionErosionForSurfaceDetect.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BottomRegion, out ho_BottomRegionErosionForSurfaceDetect,
                        hv_surfaceDefectDetectIndentDepth / hv_widthResolution, hv_surfaceDefectDetectIndentDepth / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ShapeTrans(ho_BottomRegionErosionForSurfaceDetect, out ExpTmpOutVar_0,
                            "convex");
                        ho_BottomRegionErosionForSurfaceDetect.Dispose();
                        ho_BottomRegionErosionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Intersection(ho_BottomRegionErosionForSurfaceDetect, ho_BottomRegion,
                            out ExpTmpOutVar_0);
                        ho_BottomRegionErosionForSurfaceDetect.Dispose();
                        ho_BottomRegionErosionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    ho_BottomRegionForSurfaceDetect.Dispose();
                    HOperatorSet.Difference(ho_BottomRegionErosionForSurfaceDetect, ho_BottomMainLineRegions,
                        out ho_BottomRegionForSurfaceDetect);
                    HOperatorSet.SmallestRectangle2(ho_BottomRegionForSurfaceDetect, out hv_Row,
                        out hv_Column, out hv_Phi, out hv_hwidth, out hv_HalfHeightOfBottomRegionForSurfaceDetectRectangle);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_BottomRegionForSurfaceDetect, out ExpTmpOutVar_0,
                            1, hv_HalfHeightOfBottomRegionForSurfaceDetectRectangle);
                        ho_BottomRegionForSurfaceDetect.Dispose();
                        ho_BottomRegionForSurfaceDetect = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ErosionRectangle1(ho_BottomRegionForSurfaceDetect, out ExpTmpOutVar_0,
                            15, 15);
                        ho_BottomRegionForSurfaceDetect.Dispose();
                        ho_BottomRegionForSurfaceDetect = ExpTmpOutVar_0;
                    }

                    //***较小的亮脏污处理(小于细栅线)****
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_BottomRegionForSurfaceDetect, out ho_ConnectedRegions
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_ConnectedRegions, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_ConnectedRegions.Dispose();
                        ho_ConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_Number);



                    //7.12测试程序
                    HTuple end_val37 = hv_Number;
                    HTuple step_val37 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val37, step_val37); hv_Index = hv_Index.TupleAdd(step_val37))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        ho_ImageReduce.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_ObjectSelected, out ho_ImageReduce
                            );
                        //剔除横向细栅线
                        ho_ImageOpeningWithOutViceLine.Dispose();
                        HOperatorSet.GrayOpeningRect(ho_ImageReduce, out ho_ImageOpeningWithOutViceLine,
                            1, 20);
                        //7.17修改二值化抓取细栅线改为全局阈值50-255
                        ho_ViceLineRegions.Dispose();
                        HOperatorSet.Threshold(ho_ImageOpeningWithOutViceLine, out ho_ViceLineRegions,
                            30, 255);
                        //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                        ho_ViceLineIntersectionRegionClosing.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_ViceLineRegions, out ho_ViceLineIntersectionRegionClosing,
                            1, (1.5 / hv_heightResolution) * 0.5);
                        ho_ViceLineIntersectionConnectedRegions.Dispose();
                        HOperatorSet.Connection(ho_ViceLineIntersectionRegionClosing, out ho_ViceLineIntersectionConnectedRegions
                            );
                        ho_ViceLineFilterSelectedRegions.Dispose();
                        HOperatorSet.SelectShape(ho_ViceLineIntersectionConnectedRegions, out ho_ViceLineFilterSelectedRegions,
                            "height", "and", (1.5 / hv_heightResolution) * 0.5, 99999);
                        HOperatorSet.CountObj(ho_ViceLineFilterSelectedRegions, out hv_ViceLineFilterNumber);
                        HTuple end_val49 = hv_ViceLineFilterNumber;
                        HTuple step_val49 = 1;
                        for (hv_Index3 = 1; hv_Index3.Continue(end_val49, step_val49); hv_Index3 = hv_Index3.TupleAdd(step_val49))
                        {
                            ho_ViceLineFilterObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_ViceLineFilterSelectedRegions, out ho_ViceLineFilterObjectSelected,
                                hv_Index3);
                            HOperatorSet.RegionFeatures(ho_ViceLineFilterObjectSelected, "width",
                                out hv_ObjectSelectedOfWidthValue);
                            ho_ViceLineRegionOpening.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_ViceLineFilterObjectSelected, out ho_ViceLineRegionOpening,
                                hv_ObjectSelectedOfWidthValue * 0.9, 1);
                            ho_ViceLineFilterRegionDifference.Dispose();
                            HOperatorSet.Difference(ho_ViceLineFilterObjectSelected, ho_ViceLineRegionOpening,
                                out ho_ViceLineFilterRegionDifference);
                            ho_ViceLineRegionFilterIntersection.Dispose();
                            HOperatorSet.Intersection(ho_ViceLineFilterRegionDifference, ho_ViceLineRegions,
                                out ho_ViceLineRegionFilterIntersection);
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_ViceLineFilterRegion, ho_ViceLineRegionFilterIntersection,
                                    out ExpTmpOutVar_0);
                                ho_ViceLineFilterRegion.Dispose();
                                ho_ViceLineFilterRegion = ExpTmpOutVar_0;
                            }
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Difference(ho_ViceLineRegions, ho_ViceLineFilterRegion, out ExpTmpOutVar_0
                                );
                            ho_ViceLineRegions.Dispose();
                            ho_ViceLineRegions = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_ViceLineRegions, out ExpTmpOutVar_0,
                                300, 1);
                            ho_ViceLineRegions.Dispose();
                            ho_ViceLineRegions = ExpTmpOutVar_0;
                        }

                        ho_ImageOpening.Dispose();
                        HOperatorSet.GrayOpeningRect(ho_ImageReduce, out ho_ImageOpening, 20, 1);
                        //7.17修改二值化抓取细栅线改为全局阈值50-255
                        ho_Region.Dispose();
                        HOperatorSet.Threshold(ho_ImageOpening, out ho_Region, 30, 255);
                        //binary_threshold (ImageOpening, Region, 'max_separability', 'light', UsedThreshold1)
                        ho_ConnectedRegions1.Dispose();
                        HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions1);
                        ho_ParallelViceLine.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_ParallelViceLine,
                            ((new HTuple("rectangularity")).TupleConcat("height")).TupleConcat(
                            "width"), "and", (((new HTuple(0.6)).TupleConcat((1.5 / hv_heightResolution) * 0.5))).TupleConcat(
                            3), (((new HTuple(1)).TupleConcat((1.5 / hv_heightResolution) * 1.5))).TupleConcat(
                            12));
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_ParallelViceLine, out ExpTmpOutVar_0,
                                4, 1);
                            ho_ParallelViceLine.Dispose();
                            ho_ParallelViceLine = ExpTmpOutVar_0;
                        }
                        ho_ParallelViceLineDilation.Dispose();
                        HOperatorSet.DilationRectangle1(ho_ParallelViceLine, out ho_ParallelViceLineDilation,
                            1, 300);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union1(ho_ParallelViceLineDilation, out ExpTmpOutVar_0);
                            ho_ParallelViceLineDilation.Dispose();
                            ho_ParallelViceLineDilation = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_ViceLineRegions, ho_ParallelViceLine, out ExpTmpOutVar_0
                                );
                            ho_ViceLineRegions.Dispose();
                            ho_ViceLineRegions = ExpTmpOutVar_0;
                        }

                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Difference(ho_BottomRegionForSurfaceDetect, ho_ViceLineRegions,
                                out ExpTmpOutVar_0);
                            ho_BottomRegionForSurfaceDetect.Dispose();
                            ho_BottomRegionForSurfaceDetect = ExpTmpOutVar_0;
                        }
                        ho_ObjectSelectedWithOutVileLine.Dispose();
                        HOperatorSet.Difference(ho_ObjectSelected, ho_ViceLineRegions, out ho_ObjectSelectedWithOutVileLine
                            );

                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ReduceDomain(ho_ImageReduce, ho_ObjectSelectedWithOutVileLine,
                                out ExpTmpOutVar_0);
                            ho_ImageReduce.Dispose();
                            ho_ImageReduce = ExpTmpOutVar_0;
                        }

                        //高通滤波+Sobel算子提取可疑划痕
                        ho_HighpassImage.Dispose();
                        HOperatorSet.HighpassImage(ho_ImageReduce, out ho_HighpassImage, 40, 1);
                        ho_ThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.Threshold(ho_HighpassImage, out ho_ThresholdHighPassImageRegion,
                            128 + hv_surfaceScratchGrayThresh, 255);
                        ho_OpeningThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.OpeningRectangle1(ho_ThresholdHighPassImageRegion, out ho_OpeningThresholdHighPassImageRegion,
                            2, 2);
                        //7.18膨胀可疑划痕区域，防止划痕无法连接
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.DilationRectangle1(ho_OpeningThresholdHighPassImageRegion,
                                out ExpTmpOutVar_0, 5, 5);
                            ho_OpeningThresholdHighPassImageRegion.Dispose();
                            ho_OpeningThresholdHighPassImageRegion = ExpTmpOutVar_0;
                        }
                        ho_ClosingThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_OpeningThresholdHighPassImageRegion,
                            out ho_ClosingThresholdHighPassImageRegion, 10, 10);
                        //防止部分纵向细栅线未剔除造成误检
                        ho_ThresholdHighPassImageRegionConnection.Dispose();
                        HOperatorSet.Connection(ho_ClosingThresholdHighPassImageRegion, out ho_ThresholdHighPassImageRegionConnection
                            );
                        ho_ClosingThresholdHighPassImageRegion.Dispose();
                        HOperatorSet.SelectShapeProto(ho_ThresholdHighPassImageRegionConnection,
                            ho_ParallelViceLineDilation, out ho_ClosingThresholdHighPassImageRegion,
                            "overlaps_rel", 0, 90);
                        ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                        HOperatorSet.Connection(ho_ClosingThresholdHighPassImageRegion, out ho_ConnectedSurfaceDefectSuspiciousRegions
                            );
                        ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedSurfaceDefectSuspiciousRegions, out ho_SurfaceScratchSuspiciousRegionTemp,
                            (new HTuple("width")).TupleConcat("height"), "or", ((hv_surfaceScratchWidthThresh / hv_widthResolution)).TupleConcat(
                            hv_surfaceScratchHeightThresh / hv_heightResolution), hv_width.TupleConcat(
                            hv_height));
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_SurfaceScratchSuspiciousRegion, ho_SurfaceScratchSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_SurfaceScratchSuspiciousRegion.Dispose();
                            ho_SurfaceScratchSuspiciousRegion = ExpTmpOutVar_0;
                        }
                        //阈值分割，提取可疑大脏污
                        ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                        HOperatorSet.BinaryThreshold(ho_ImageReduce, out ho_SurfaceDefectSuspiciousRegionTemp,
                            "max_separability", "light", out hv_UsedThreshold);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_SurfaceDefectSuspiciousRegionTemp, out ExpTmpOutVar_0,
                                hv_surfaceDefectWidthThresh / hv_widthResolution, hv_surfaceDefectHeightThresh / hv_heightResolution);
                            ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                            ho_SurfaceDefectSuspiciousRegionTemp = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_SurfaceDefectSuspiciousRegion, ho_SurfaceDefectSuspiciousRegionTemp,
                                out ExpTmpOutVar_0);
                            ho_SurfaceDefectSuspiciousRegion.Dispose();
                            ho_SurfaceDefectSuspiciousRegion = ExpTmpOutVar_0;
                        }
                    }
















                    //针对最左端区域进行脏污检测
                    //select_obj (ConnectedRegions, FirstRegionForSurfaceDetect, 1)
                    //reduce_domain (RedChannelImage, FirstRegionForSurfaceDetect, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (BottomRegionForSurfaceDetect, ViceLineRegions, BottomRegionForSurfaceDetect)
                    //difference (FirstRegionForSurfaceDetect, ViceLineRegions, FirstRegionForSurfaceDetectWithOutVileLine)
                    //reduce_domain (ImageReduce, FirstRegionForSurfaceDetectWithOutVileLine, ImageReduce)
                    //针对四分流电池片进行纵向细栅处理
                    //if (subMainLineNum == 3)
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (FirstRegionForSurfaceDetect, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, FirstRegionForSurfaceDetectWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangle, BottomRegionForSurfaceDetect)
                    //difference (FirstRegionForSurfaceDetectWithOutVileLine, ShieldRectangle, FirstRegionForSurfaceDetectWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, FirstRegionForSurfaceDetectWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //else
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)

                    //endif

                    //针对最右端区域进行脏污检测
                    //select_obj (ConnectedRegions, LastRegionForSurfaceDetect, Number)
                    //reduce_domain (RedChannelImage, LastRegionForSurfaceDetect, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (BottomRegionForSurfaceDetect, ViceLineRegions, BottomRegionForSurfaceDetect)
                    //difference (LastRegionForSurfaceDetect, ViceLineRegions, LastRegionForSurfaceDetectWithOutVileLine)
                    //reduce_domain (ImageReduce, LastRegionForSurfaceDetectWithOutVileLine, ImageReduce)
                    //针对四分流电池片进行纵向细栅处理
                    //if (subMainLineNum == 3)
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (LastRegionForSurfaceDetect, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, LastRegionForSurfaceDetectWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangle, BottomRegionForSurfaceDetect)
                    //difference (LastRegionForSurfaceDetectWithOutVileLine, ShieldRectangle, LastRegionForSurfaceDetectWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, LastRegionForSurfaceDetectWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //else
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //endif

                    //针对带有纵向细栅线的区域进行脏污检测
                    //for Index := 2 to Number-1 by 1
                    //select_obj (ConnectedRegions, ObjectSelected, Index)
                    //reduce_domain (RedChannelImage, ObjectSelected, ImageReduce)
                    //剔除横向细栅线
                    //gray_opening_rect (ImageReduce, ImageOpeningWithOutViceLine, 1, 20)
                    //binary_threshold (ImageOpeningWithOutViceLine, ViceLineRegions, 'max_separability', 'light', UsedThreshold)
                    //dilation_rectangle1 (ViceLineRegions, ViceLineRegions, 300, 1)
                    //difference (BottomRegionForSurfaceDetect, ViceLineRegions, BottomRegionForSurfaceDetect)
                    //difference (ObjectSelected, ViceLineRegions, ObjectSelectedWithOutVileLine)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLine, ImageReduce)
                    //剔除纵向细栅线
                    //if (subMainLineNum == 0)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //elseif (subMainLineNum == 1)
                    //单纵向细栅线处理,屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //gen_rectangle2 (ShieldRectangle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //intersection (ShieldRectangle, ObjectSelectedWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //屏蔽纵向细栅线单独处理
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangle, BottomRegionForSurfaceDetect)
                    //difference (ObjectSelected, ShieldRectangle, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //elseif (subMainLineNum == 2)
                    //双纵向细栅线处理，屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //lengthTemp := 2 * halfWidthTemp / 3
                    //屏蔽区域1
                    //rowTemp := centerRowTemp + (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp - (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp - (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp + (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //else
                    //lengthTemp := 2 * halfHeightTemp / 3
                    //屏蔽区域1
                    //rowTemp := centerRowTemp - (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp + (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp + (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp - (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //endif
                    //纵向细栅线区域单独处理
                    //union2 (ShieldRectangleFirst, ShieldRectangleSecond, ShieldRectangle)
                    //intersection (ShieldRectangle, ObjectSelectedWithOutVileLine, ShieldRectangle)
                    //union2 (TotalShieldRegions, ShieldRectangle, TotalShieldRegions)

                    //剔除屏蔽区域
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangleFirst, BottomRegionForSurfaceDetect)
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangleSecond, BottomRegionForSurfaceDetect)
                    //difference (ObjectSelected, ShieldRectangleFirst, ObjectSelectedWithOutVileLinePartOne)
                    //difference (ObjectSelectedWithOutVileLinePartOne, ShieldRectangleSecond, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //elseif (subMainLineNum == 3)
                    //3条纵向细栅线，四分流
                    //三纵向细栅线处理，屏蔽纵向细栅线区域
                    //smallest_rectangle2 (ObjectSelected, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, halfHeightTemp)
                    //if (phiTemp <= 0.25 * PI and phiTemp >= -0.25 * PI)
                    //lengthTemp := 2 * halfWidthTemp / 4
                    //屏蔽区域1
                    //rowTemp := centerRowTemp + (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp - (halfWidthTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp - (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //colTemp := centerColTemp + (halfWidthTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif
                    //屏蔽区域3
                    //gen_rectangle2 (ShieldRectangleThird, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, surfaceDefectViceLineShieldWidth, halfHeightTemp)
                    //endif

                    //else
                    //lengthTemp := 2 * halfHeightTemp / 4
                    //屏蔽区域1
                    //rowTemp := centerRowTemp - (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp + (halfHeightTemp - lengthTemp - surfaceDefectViceLineShieldLeftPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleFirst, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域2
                    //rowTemp := centerRowTemp + (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * cos(phiTemp)
                    //colTemp := centerColTemp - (halfHeightTemp - lengthTemp + surfaceDefectViceLineShieldRightPosOffSet) * sin(phiTemp)
                    //gen_rectangle2 (ShieldRectangleSecond, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, rowTemp, colTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif
                    //屏蔽区域3
                    //gen_rectangle2 (ShieldRectangleThird, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //if (isUsingChinese)
                    //disp_rectangle2 (windowHandle, centerRowTemp, centerColTemp, phiTemp, halfWidthTemp, surfaceDefectViceLineShieldWidth)
                    //endif

                    //endif
                    //纵向细栅线区域单独处理
                    //union2 (ShieldRectangleFirst, ShieldRectangleSecond, ShieldRectangleFS)
                    //union2 (ShieldRectangleFS, ShieldRectangleThird, ShieldRectangleTotal)
                    //intersection (ShieldRectangleTotal, ObjectSelectedWithOutVileLine, ShieldRectangleTotal)
                    //union2 (TotalShieldRegions, ShieldRectangleTotal, TotalShieldRegions)

                    //剔除屏蔽区域
                    //difference (BottomRegionForSurfaceDetect, ShieldRectangleTotal, BottomRegionForSurfaceDetect)
                    //difference (ObjectSelectedWithOutVileLine, ShieldRectangleTotal, ObjectSelectedWithOutVileLinePartOne)
                    //reduce_domain (ImageReduce, ObjectSelectedWithOutVileLinePartOne, ImageReduce)
                    //高通滤波+Sobel算子提取可疑划痕
                    //highpass_image (ImageReduce, HighpassImage, 40, 1)
                    //threshold (HighpassImage, ThresholdHighPassImageRegion, 128 + surfaceScratchGrayThresh, 255)
                    //opening_rectangle1 (ThresholdHighPassImageRegion, OpeningThresholdHighPassImageRegion, 2, 2)
                    //closing_rectangle1 (OpeningThresholdHighPassImageRegion, ClosingThresholdHighPassImageRegion, 10, 10)
                    //connection (ClosingThresholdHighPassImageRegion, ConnectedSurfaceDefectSuspiciousRegions)
                    //select_shape (ConnectedSurfaceDefectSuspiciousRegions, SurfaceScratchSuspiciousRegionTemp, ['width','height'], 'or', [surfaceScratchWidthThresh/widthResolution,surfaceScratchHeightThresh/heightResolution], [width,height])
                    //union2 (SurfaceScratchSuspiciousRegion, SurfaceScratchSuspiciousRegionTemp, SurfaceScratchSuspiciousRegion)
                    //阈值分割，提取可疑大脏污
                    //binary_threshold (ImageReduce, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegion)
                    //endif
                    //endfor

                    //根据可疑划痕区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_SurfaceScratchSuspiciousRegion, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val427 = hv_TotalNum;
                    HTuple step_val427 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val427, step_val427); hv_Index = hv_Index.TupleAdd(step_val427))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_BottomRegionForSurfaceDetect,
                            out ho_BackGroundRegion);
                        ho_SelectedRegion.Dispose();
                        HOperatorSet.Intersection(ho_ObjectSelected, ho_BottomRegionForSurfaceDetect,
                            out ho_SelectedRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_RedChannelImage, out hv_BackGroundMean,
                            out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_SelectedRegion, ho_RedChannelImage, out hv_SelectedMean,
                            out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_SelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_surfaceScratchGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalSurfaceDefectRegionOutOfBottomImage, ho_SelectedRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                                ho_totalSurfaceDefectRegionOutOfBottomImage = ExpTmpOutVar_0;
                            }
                            hv_isSurfaceScratchOfBottomWafer = 1;
                        }
                    }

                    //根据可疑大脏污区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_SurfaceDefectSuspiciousRegion, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val450 = hv_TotalNum;
                    HTuple step_val450 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val450, step_val450); hv_Index = hv_Index.TupleAdd(step_val450))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_BottomRegionForSurfaceDetect,
                            out ho_BackGroundRegion);
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_RedChannelImage, out hv_BackGroundMean,
                            out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_RedChannelImage, out hv_ObjectSelectedMean,
                            out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((((hv_ObjectSelectedMean - hv_BackGroundMean)).TupleAbs()
                            )).TupleGreaterEqual(hv_surfaceDefectGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalSurfaceDefectRegionOutOfBottomImage, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalSurfaceDefectRegionOutOfBottomImage.Dispose();
                                ho_totalSurfaceDefectRegionOutOfBottomImage = ExpTmpOutVar_0;
                            }
                            hv_isSurfaceDefectOfBottomWafer = 1;
                        }
                    }

                    //色差计算：下半片Blue通道平均灰度值, 靠外部程序逻辑判断是否为色差串
                    if ((int)(hv_isUsingSurfaceColorDiffDetect) != 0)
                    {
                        HOperatorSet.GrayFeatures(ho_BottomRegionForSurfaceDetect, ho_BlueChannelImage,
                            "mean", out hv_surfaceMeanGrayOfBottomWaferOut);
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_info = "颜色均值：";
                        }
                        else
                        {
                            hv_info = "Average Color:";
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_info + hv_surfaceMeanGrayOfBottomWaferOut,
                            hv_CenterRowOfBottomRegion, hv_CenterColumnOfBottomRegion, "green");
                    }

                    //特殊处理区域(纵向细栅线)
                    //reduce_domain (RedChannelImage, TotalShieldRegions, ImageOfTotalShieldRegions)
                    //轻微横向灰度开运算，剔除纵向细栅线
                    //gray_opening_rect (ImageOfTotalShieldRegions, ImageOfTotalShieldRegions, 1, 10)
                    //寻找小脏污点
                    //binary_threshold (ImageOfTotalShieldRegions, SurfaceDefectSuspiciousRegionTemp, 'max_separability', 'light', UsedThreshold)
                    //opening_rectangle1 (SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSuspiciousRegionTemp, surfaceDefectWidthThresh/widthResolution, surfaceDefectHeightThresh/heightResolution)
                    //union2 (SurfaceDefectSpetialSuspiciousRegion, SurfaceDefectSuspiciousRegionTemp, SurfaceDefectSpetialSuspiciousRegion)

                    //根据可疑区域表面及几何特征进行二次筛选
                    //connection (SurfaceDefectSpetialSuspiciousRegion, ConnectedRegions)
                    //count_obj (ConnectedRegions, TotalNum)
                    //for Index := 1 to TotalNum by 1
                    //select_obj (ConnectedRegions, ObjectSelected, Index)
                    //判断是否为空区域
                    //area_center (ObjectSelected, Area, Row, Column)
                    //if (Area <= 0)
                    //continue
                    //endif
                    //根据膨胀找到相邻背景，判断灰度差
                    //dilation_circle (ObjectSelected, RegionDilation, 20)
                    //difference (RegionDilation, ObjectSelected, RegionDifference)
                    //intersection (RegionDifference, TotalShieldRegions, BackGroundRegion)
                    //intensity (BackGroundRegion, ImageOfTotalShieldRegions, BackGroundMean, BackGroundDeviation)
                    //intensity (ObjectSelected, ImageOfTotalShieldRegions, ObjectSelectedMean, ObjectSelectedDeviation)
                    //if (abs(ObjectSelectedMean-BackGroundMean)>=surfaceDefectGrayThresh)
                    //union2 (totalSurfaceDefectRegionOutOfBottomImage, ObjectSelected, totalSurfaceDefectRegionOutOfBottomImage)
                    //isSurfaceDefectOfBottomWafer := true
                    //endif
                    //endfor
                }
                ho_ViceLineFilterRegion.Dispose();
                ho_SurfaceDefectSuspiciousRegion.Dispose();
                ho_SurfaceScratchSuspiciousRegion.Dispose();
                ho_TotalShieldRegions.Dispose();
                ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                ho_BottomRegionErosionForSurfaceDetect.Dispose();
                ho_BottomRegionForSurfaceDetect.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageReduce.Dispose();
                ho_ImageOpeningWithOutViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_ViceLineIntersectionRegionClosing.Dispose();
                ho_ViceLineIntersectionConnectedRegions.Dispose();
                ho_ViceLineFilterSelectedRegions.Dispose();
                ho_ViceLineFilterObjectSelected.Dispose();
                ho_ViceLineRegionOpening.Dispose();
                ho_ViceLineFilterRegionDifference.Dispose();
                ho_ViceLineRegionFilterIntersection.Dispose();
                ho_ImageOpening.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ParallelViceLine.Dispose();
                ho_ParallelViceLineDilation.Dispose();
                ho_ObjectSelectedWithOutVileLine.Dispose();
                ho_HighpassImage.Dispose();
                ho_ThresholdHighPassImageRegion.Dispose();
                ho_OpeningThresholdHighPassImageRegion.Dispose();
                ho_ClosingThresholdHighPassImageRegion.Dispose();
                ho_ThresholdHighPassImageRegionConnection.Dispose();
                ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_SelectedRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ViceLineFilterRegion.Dispose();
                ho_SurfaceDefectSuspiciousRegion.Dispose();
                ho_SurfaceScratchSuspiciousRegion.Dispose();
                ho_TotalShieldRegions.Dispose();
                ho_SurfaceDefectSpetialSuspiciousRegion.Dispose();
                ho_BottomRegionErosionForSurfaceDetect.Dispose();
                ho_BottomRegionForSurfaceDetect.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageReduce.Dispose();
                ho_ImageOpeningWithOutViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_ViceLineIntersectionRegionClosing.Dispose();
                ho_ViceLineIntersectionConnectedRegions.Dispose();
                ho_ViceLineFilterSelectedRegions.Dispose();
                ho_ViceLineFilterObjectSelected.Dispose();
                ho_ViceLineRegionOpening.Dispose();
                ho_ViceLineFilterRegionDifference.Dispose();
                ho_ViceLineRegionFilterIntersection.Dispose();
                ho_ImageOpening.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_ParallelViceLine.Dispose();
                ho_ParallelViceLineDilation.Dispose();
                ho_ObjectSelectedWithOutVileLine.Dispose();
                ho_HighpassImage.Dispose();
                ho_ThresholdHighPassImageRegion.Dispose();
                ho_OpeningThresholdHighPassImageRegion.Dispose();
                ho_ClosingThresholdHighPassImageRegion.Dispose();
                ho_ThresholdHighPassImageRegionConnection.Dispose();
                ho_ConnectedSurfaceDefectSuspiciousRegions.Dispose();
                ho_SurfaceScratchSuspiciousRegionTemp.Dispose();
                ho_SurfaceDefectSuspiciousRegionTemp.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();
                ho_SelectedRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void BrokenLineDetectOfTopImage(HObject ho_TopMainLineRegions, HObject ho_GreenChannelImage,
            HObject ho_TopRegion, HObject ho_RedChannelImage, out HObject ho_totalBrokenLineRegionOutOfTopImage,
            HTuple hv_isTopWaferExist, HTuple hv_brokenLineDetectIndentDepth, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_isBackDetect, HTuple hv_brokenLineGrayThresh,
            HTuple hv_brokenLineWidthThresh, HTuple hv_brokenLineHeightThresh, out HTuple hv_isBrokenLineOfTopWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_BrokenLineDetectRegion = null, ho_BrokenLineSuspiciousRegions = null;
            HObject ho_ImageForBrokenLineDetect = null, ho_ImageOpeningTemp = null;
            HObject ho_ImageForExtractViceLine = null, ho_ViceLineRegions = null;
            HObject ho_BrokenLineSuspiciousRegionsTemp = null, ho_ViceLineIntersectionRegionsForReduceImage = null;
            HObject ho_ImageForContrastBrokenLineDetect = null, ho_RegionDynThresh = null;
            HObject ho_ViceLineRegionsDilation = null, ho_RegionIntersection = null;
            HObject ho_BigBrokenLineRegion = null, ho_BigBrokenLineRegionErosion = null;
            HObject ho_BigBrokenLineConnectedRegions = null, ho_BigBrokenLineObjectSelected = null;
            HObject ho_RegionDilation1 = null, ho_BigBrokenLineBackGroundRegion = null;
            HObject ho_ConnectedBigBrokenLineBackGroundRegion = null;
            HObject ho_ConnectedRegions = null, ho_ObjectSelected = null;
            HObject ho_RegionDilation = null, ho_RegionDifference = null;
            HObject ho_BackGroundRegion = null;

            // Local control variables 

            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_HalfWidthOfTopRegionForBrokenLineDetectRectangle = new HTuple();
            HTuple hv_HalfHeightOfTopRegionForBrokenLineDetectRectangle = new HTuple();
            HTuple hv_UsedThreshold = new HTuple(), hv_BigBrokenLineRegionNumber = new HTuple();
            HTuple hv_Index1 = new HTuple(), hv_Area = new HTuple();
            HTuple hv_BigBrokenLineBackGroundMean = new HTuple(), hv_Deviation1 = new HTuple();
            HTuple hv_BigBrokenLineObjectSelectedMean = new HTuple();
            HTuple hv_Deviation2 = new HTuple(), hv_SubMean = new HTuple();
            HTuple hv_TotalNum = new HTuple(), hv_Index = new HTuple();
            HTuple hv_BackGroundMean = new HTuple(), hv_BackGroundDeviation = new HTuple();
            HTuple hv_ObjectSelectedMean = new HTuple(), hv_ObjectSelectedDeviation = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOutOfTopImage);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineSuspiciousRegions);
            HOperatorSet.GenEmptyObj(out ho_ImageForBrokenLineDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningTemp);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractViceLine);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BrokenLineSuspiciousRegionsTemp);
            HOperatorSet.GenEmptyObj(out ho_ViceLineIntersectionRegionsForReduceImage);
            HOperatorSet.GenEmptyObj(out ho_ImageForContrastBrokenLineDetect);
            HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
            HOperatorSet.GenEmptyObj(out ho_ViceLineRegionsDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineRegion);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineRegionErosion);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation1);
            HOperatorSet.GenEmptyObj(out ho_BigBrokenLineBackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedBigBrokenLineBackGroundRegion);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_BackGroundRegion);
            try
            {
                //初始化上半片断栅区域
                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOutOfTopImage);
                //初始化上半片断栅检测结果
                hv_isBrokenLineOfTopWafer = 0;
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //初始化断栅检测区域
                    ho_BrokenLineDetectRegion.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BrokenLineDetectRegion);
                    //初始化断栅可疑区域
                    ho_BrokenLineSuspiciousRegions.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_BrokenLineSuspiciousRegions);

                    //提取断栅检测区域及相关原始图像
                    ho_BrokenLineDetectRegion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_TopRegion, out ho_BrokenLineDetectRegion,
                        hv_brokenLineDetectIndentDepth / hv_widthResolution, hv_brokenLineDetectIndentDepth / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Difference(ho_BrokenLineDetectRegion, ho_TopMainLineRegions,
                            out ExpTmpOutVar_0);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.SmallestRectangle2(ho_BrokenLineDetectRegion, out hv_Row, out hv_Column,
                        out hv_Phi, out hv_HalfWidthOfTopRegionForBrokenLineDetectRectangle,
                        out hv_HalfHeightOfTopRegionForBrokenLineDetectRectangle);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_BrokenLineDetectRegion, out ExpTmpOutVar_0,
                            1, hv_HalfHeightOfTopRegionForBrokenLineDetectRectangle);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ErosionRectangle1(ho_BrokenLineDetectRegion, out ExpTmpOutVar_0,
                            9, 9);
                        ho_BrokenLineDetectRegion.Dispose();
                        ho_BrokenLineDetectRegion = ExpTmpOutVar_0;
                    }
                    if ((int)(hv_isBackDetect) != 0)
                    {
                        ho_ImageForBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_GreenChannelImage, ho_BrokenLineDetectRegion,
                            out ho_ImageForBrokenLineDetect);
                    }
                    else
                    {
                        ho_ImageForBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_BrokenLineDetectRegion,
                            out ho_ImageForBrokenLineDetect);
                    }
                    //提取细栅线区域(横向)
                    //2019-6-12 50改为15，细栅线10个pix完全可以开掉。闭运算100改为50，对于小的断栅已足够，大的断栅有对应检测。
                    ho_ImageOpeningTemp.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_ImageForBrokenLineDetect, out ho_ImageOpeningTemp,
                        1, 15);
                    ho_ImageForExtractViceLine.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageOpeningTemp, out ho_ImageForExtractViceLine,
                        1, 50);
                    ho_ViceLineRegions.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractViceLine, out ho_ViceLineRegions,
                        "max_separability", "light", out hv_UsedThreshold);
                    //剔除单点干扰
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ViceLineRegions, out ExpTmpOutVar_0, 50,
                            1);
                        ho_ViceLineRegions.Dispose();
                        ho_ViceLineRegions = ExpTmpOutVar_0;
                    }

                    //提取氧化区域
                    //closing_rectangle1 (ViceLineRegions, ViceLineDilationRegions, 0.5*HalfWidthOfTopRegionForBrokenLineDetectRectangle, 1)
                    //difference (ViceLineDilationRegions, ViceLineRegions, DiffRegions)
                    //intersection (DiffRegions, BrokenLineDetectRegion, IntersectionRegions)
                    //opening_rectangle1 (IntersectionRegions, BrokenLineSuspiciousRegionsTemp, 2, 2)
                    //union2 (BrokenLineSuspiciousRegions, BrokenLineSuspiciousRegionsTemp, BrokenLineSuspiciousRegions)

                    //提取出最终细栅线的原始图像并做预处理
                    ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                    HOperatorSet.Intersection(ho_ViceLineRegions, ho_BrokenLineDetectRegion,
                        out ho_ViceLineIntersectionRegionsForReduceImage);
                    if ((int)(hv_isBackDetect) != 0)
                    {
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_GreenChannelImage, ho_ViceLineIntersectionRegionsForReduceImage,
                            out ho_ImageForContrastBrokenLineDetect);
                    }
                    else
                    {
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_ViceLineIntersectionRegionsForReduceImage,
                            out ho_ImageForContrastBrokenLineDetect);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.GrayOpeningRect(ho_ImageForContrastBrokenLineDetect, out ExpTmpOutVar_0,
                            1, 50);
                        ho_ImageForContrastBrokenLineDetect.Dispose();
                        ho_ImageForContrastBrokenLineDetect = ExpTmpOutVar_0;
                    }

                    //断栅筛选
                    ho_RegionDynThresh.Dispose();
                    HOperatorSet.DynThreshold(ho_ImageOpeningTemp, ho_ImageForExtractViceLine,
                        out ho_RegionDynThresh, hv_brokenLineGrayThresh, "dark");
                    ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDynThresh, out ho_BrokenLineSuspiciousRegionsTemp,
                        hv_brokenLineWidthThresh / hv_widthResolution, hv_brokenLineHeightThresh / hv_heightResolution);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BrokenLineSuspiciousRegions, ho_BrokenLineSuspiciousRegionsTemp,
                            out ExpTmpOutVar_0);
                        ho_BrokenLineSuspiciousRegions.Dispose();
                        ho_BrokenLineSuspiciousRegions = ExpTmpOutVar_0;
                    }

                    //2019-3-29大的断栅检测
                    //获取大断栅region
                    ho_ViceLineRegionsDilation.Dispose();
                    HOperatorSet.DilationRectangle1(ho_ViceLineRegions, out ho_ViceLineRegionsDilation,
                        300, 1);
                    ho_RegionIntersection.Dispose();
                    HOperatorSet.Intersection(ho_ViceLineRegionsDilation, ho_BrokenLineDetectRegion,
                        out ho_RegionIntersection);
                    ho_BigBrokenLineRegion.Dispose();
                    HOperatorSet.Difference(ho_RegionIntersection, ho_ViceLineRegions, out ho_BigBrokenLineRegion
                        );
                    ho_BigBrokenLineRegionErosion.Dispose();
                    HOperatorSet.ErosionRectangle1(ho_BigBrokenLineRegion, out ho_BigBrokenLineRegionErosion,
                        10, 3);
                    ho_BigBrokenLineConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_BigBrokenLineRegionErosion, out ho_BigBrokenLineConnectedRegions
                        );
                    //2019-4-16添加长度筛选
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_BigBrokenLineConnectedRegions, out ExpTmpOutVar_0,
                            "rect2_len1", "and", (hv_brokenLineWidthThresh / hv_widthResolution) * 0.5,
                            99999);
                        ho_BigBrokenLineConnectedRegions.Dispose();
                        ho_BigBrokenLineConnectedRegions = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_BigBrokenLineConnectedRegions, out hv_BigBrokenLineRegionNumber);
                    HTuple end_val60 = hv_BigBrokenLineRegionNumber;
                    HTuple step_val60 = 1;
                    for (hv_Index1 = 1; hv_Index1.Continue(end_val60, step_val60); hv_Index1 = hv_Index1.TupleAdd(step_val60))
                    {
                        ho_BigBrokenLineObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_BigBrokenLineConnectedRegions, out ho_BigBrokenLineObjectSelected,
                            hv_Index1);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_BigBrokenLineObjectSelected, out hv_Area, out hv_Row,
                            out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //求背景与疑似断栅灰度差
                        ho_RegionDilation1.Dispose();
                        HOperatorSet.DilationRectangle1(ho_BigBrokenLineObjectSelected, out ho_RegionDilation1,
                            1, 10);
                        ho_BigBrokenLineBackGroundRegion.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation1, ho_BigBrokenLineObjectSelected,
                            out ho_BigBrokenLineBackGroundRegion);
                        //2019-4-1避免误检
                        ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                        HOperatorSet.Connection(ho_BigBrokenLineBackGroundRegion, out ho_ConnectedBigBrokenLineBackGroundRegion
                            );
                        //2019-4-16避免因片子倾斜造成误检
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Intersection(ho_ConnectedBigBrokenLineBackGroundRegion, ho_BrokenLineDetectRegion,
                                out ExpTmpOutVar_0);
                            ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                            ho_ConnectedBigBrokenLineBackGroundRegion = ExpTmpOutVar_0;
                        }
                        HOperatorSet.Intensity(ho_ConnectedBigBrokenLineBackGroundRegion, ho_ImageForExtractViceLine,
                            out hv_BigBrokenLineBackGroundMean, out hv_Deviation1);

                        HOperatorSet.Intensity(ho_BigBrokenLineObjectSelected, ho_ImageForExtractViceLine,
                            out hv_BigBrokenLineObjectSelectedMean, out hv_Deviation2);
                        hv_SubMean = hv_BigBrokenLineObjectSelectedMean - hv_BigBrokenLineBackGroundMean;
                        HOperatorSet.TupleAbs(hv_SubMean, out hv_SubMean);
                        HOperatorSet.TupleMax(hv_SubMean, out hv_SubMean);

                        if ((int)(new HTuple(hv_SubMean.TupleLessEqual(5))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalBrokenLineRegionOutOfTopImage, ho_BigBrokenLineObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                                ho_totalBrokenLineRegionOutOfTopImage = ExpTmpOutVar_0;
                            }
                            hv_isBrokenLineOfTopWafer = 1;
                        }
                    }

                    //根据可疑区域表面及几何特征进行二次筛选
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_BrokenLineSuspiciousRegions, out ho_ConnectedRegions
                        );
                    HOperatorSet.CountObj(ho_ConnectedRegions, out hv_TotalNum);
                    HTuple end_val90 = hv_TotalNum;
                    HTuple step_val90 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val90, step_val90); hv_Index = hv_Index.TupleAdd(step_val90))
                    {
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                        //判断是否为空区域
                        HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_Row, out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleLessEqual(0))) != 0)
                        {
                            continue;
                        }
                        //根据膨胀找到相邻背景，判断灰度差
                        ho_RegionDilation.Dispose();
                        HOperatorSet.DilationCircle(ho_ObjectSelected, out ho_RegionDilation, 20);
                        ho_RegionDifference.Dispose();
                        HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                            );
                        ho_BackGroundRegion.Dispose();
                        HOperatorSet.Intersection(ho_RegionDifference, ho_ViceLineRegions, out ho_BackGroundRegion
                            );
                        HOperatorSet.Intensity(ho_BackGroundRegion, ho_ImageForContrastBrokenLineDetect,
                            out hv_BackGroundMean, out hv_BackGroundDeviation);
                        HOperatorSet.Intensity(ho_ObjectSelected, ho_ImageForContrastBrokenLineDetect,
                            out hv_ObjectSelectedMean, out hv_ObjectSelectedDeviation);
                        if ((int)(new HTuple(((hv_BackGroundMean - hv_ObjectSelectedMean)).TupleGreaterEqual(
                            hv_brokenLineGrayThresh))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalBrokenLineRegionOutOfTopImage, ho_ObjectSelected,
                                    out ExpTmpOutVar_0);
                                ho_totalBrokenLineRegionOutOfTopImage.Dispose();
                                ho_totalBrokenLineRegionOutOfTopImage = ExpTmpOutVar_0;
                            }
                            hv_isBrokenLineOfTopWafer = 1;
                        }
                    }
                }
                ho_BrokenLineDetectRegion.Dispose();
                ho_BrokenLineSuspiciousRegions.Dispose();
                ho_ImageForBrokenLineDetect.Dispose();
                ho_ImageOpeningTemp.Dispose();
                ho_ImageForExtractViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                ho_ImageForContrastBrokenLineDetect.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ViceLineRegionsDilation.Dispose();
                ho_RegionIntersection.Dispose();
                ho_BigBrokenLineRegion.Dispose();
                ho_BigBrokenLineRegionErosion.Dispose();
                ho_BigBrokenLineConnectedRegions.Dispose();
                ho_BigBrokenLineObjectSelected.Dispose();
                ho_RegionDilation1.Dispose();
                ho_BigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_BrokenLineDetectRegion.Dispose();
                ho_BrokenLineSuspiciousRegions.Dispose();
                ho_ImageForBrokenLineDetect.Dispose();
                ho_ImageOpeningTemp.Dispose();
                ho_ImageForExtractViceLine.Dispose();
                ho_ViceLineRegions.Dispose();
                ho_BrokenLineSuspiciousRegionsTemp.Dispose();
                ho_ViceLineIntersectionRegionsForReduceImage.Dispose();
                ho_ImageForContrastBrokenLineDetect.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ViceLineRegionsDilation.Dispose();
                ho_RegionIntersection.Dispose();
                ho_BigBrokenLineRegion.Dispose();
                ho_BigBrokenLineRegionErosion.Dispose();
                ho_BigBrokenLineConnectedRegions.Dispose();
                ho_BigBrokenLineObjectSelected.Dispose();
                ho_RegionDilation1.Dispose();
                ho_BigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedBigBrokenLineBackGroundRegion.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_BackGroundRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForNineMainLineOfBackBlue(HObject ho_RedChannelImage,
            HObject ho_ImageForWeldingDetect, HObject ho_detectRegion, out HObject ho_weldingNGRegionOut,
            out HObject ho_mainLineRegionOut, HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_widthResolution, HTuple hv_filmWidthThresh,
            out HTuple hv_isStartWeldingNG)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //opening_rectangle1 (detectRegion, detectRegion, halfWidth, halfHeight)
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 4) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 4) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 3) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 2) * hv_sinValue);
                hv_ColumnOfThirdMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 2) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 1) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 1) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow.Clone();
                hv_ColumnOfFifthMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第六根主栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 1) * hv_sinValue);
                hv_ColumnOfSixthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 1) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第七根主栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 2) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 2) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第八根主栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 3) * hv_sinValue);
                hv_ColumnOfEighthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 3) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                //第九根主栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 4) * hv_sinValue);
                hv_ColumnOfNinthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 4) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBackBlue(ho_RedChannelImage, ho_ImageForWeldingDetect,
                    ho_detectRegion, out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }

                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldDefectOfSingleMainLineForBackBlue(HObject ho_RedChannelImage,
            HObject ho_ImageForWeldingDetect, HObject ho_detectRegion, out HObject ho_weldingNGRegionOut,
            out HObject ho_mainLineRegionOut, HTuple hv_windowHandle, HTuple hv_centerRowOfSingleMainLineDetect,
            HTuple hv_centerColumnOfSingleMainLineDetect, HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect,
            HTuple hv_halfHeightOfSingleMainLineDetect, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_halfHeight, HTuple hv_height, HTuple hv_width, HTuple hv_widthResolution,
            HTuple hv_filmWidthThresh)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionUpperLine, ho_BottomRegionDownLine;
            HObject ho_UpperAndDownLine, ho_Rectangle, ho_ImageReduced;
            HObject ho_Region1, ho_ImageEdgeAmp, ho_RegionWhite, ho_RegionWhiteClosing;
            HObject ho_RegionWhiteFillUp, ho_RegionOpening5, ho_RegionOpening1;
            HObject ho_RegionClosing, ho_RegionFillUp, ho_RegionOpening;
            HObject ho_ConnectedRegions, ho_RegionDilation1, ho_RegionDifference1;
            HObject ho_ConnectedRegions4, ho_ObjectSelected = null, ho_ImageForLightRegin = null;
            HObject ho_Region = null, ho_ConnectedRegions3 = null, ho_SelectedRegions1 = null;
            HObject ho_RegionDilation = null, ho_RegionOpening2 = null;
            HObject ho_ConnectedRegions1 = null, ho_SelectedRegions = null;
            HObject ho_ImageReduced1 = null, ho_Region2 = null, ho_RegionClosing2 = null;
            HObject ho_RegionOpening3 = null, ho_RegionDifference = null;
            HObject ho_RegionOpening4 = null, ho_ConnectedRegions2 = null;
            HObject ho_ImageReduced2 = null, ho_Region4 = null, ho_DarkRegion = null;
            HObject ho_MainLineObjectSelected = null;

            // Local control variables 

            HTuple hv_UsedThreshold = null, hv_RegionFillUpWidth = null;
            HTuple hv_MainLineRegionNumbers = null, hv_Number = null;
            HTuple hv_Index = null, hv_UsedThreshold2 = new HTuple();
            HTuple hv_Value = new HTuple(), hv_SelectRegionMaxValue = new HTuple();
            HTuple hv_Value1 = new HTuple(), hv_EdgeRegionNum = new HTuple();
            HTuple hv_UsedThreshold1 = new HTuple(), hv_Mean = new HTuple();
            HTuple hv_Deviation = new HTuple(), hv_LightRegionWidth = new HTuple();
            HTuple hv_DarkRegionHeight = new HTuple(), hv_LightRegionHeight = new HTuple();
            HTuple hv_MainLineObjectSelectedWidth = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopRegionUpperLine);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDownLine);
            HOperatorSet.GenEmptyObj(out ho_UpperAndDownLine);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_Region1);
            HOperatorSet.GenEmptyObj(out ho_ImageEdgeAmp);
            HOperatorSet.GenEmptyObj(out ho_RegionWhite);
            HOperatorSet.GenEmptyObj(out ho_RegionWhiteClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionWhiteFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening5);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation1);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageForLightRegin);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening2);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
            HOperatorSet.GenEmptyObj(out ho_Region2);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing2);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening3);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening4);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
            HOperatorSet.GenEmptyObj(out ho_Region4);
            HOperatorSet.GenEmptyObj(out ho_DarkRegion);
            HOperatorSet.GenEmptyObj(out ho_MainLineObjectSelected);
            try
            {
                if ((int)(hv_isUsingFilmShiftingDetect.TupleNot()) != 0)
                {
                    ho_TopRegionUpperLine.Dispose();
                    ho_BottomRegionDownLine.Dispose();
                    ho_UpperAndDownLine.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_Region1.Dispose();
                    ho_ImageEdgeAmp.Dispose();
                    ho_RegionWhite.Dispose();
                    ho_RegionWhiteClosing.Dispose();
                    ho_RegionWhiteFillUp.Dispose();
                    ho_RegionOpening5.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_RegionClosing.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_RegionDilation1.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_ConnectedRegions4.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_ImageForLightRegin.Dispose();
                    ho_Region.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_RegionDilation.Dispose();
                    ho_RegionOpening2.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_ImageReduced1.Dispose();
                    ho_Region2.Dispose();
                    ho_RegionClosing2.Dispose();
                    ho_RegionOpening3.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening4.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ImageReduced2.Dispose();
                    ho_Region4.Dispose();
                    ho_DarkRegion.Dispose();
                    ho_MainLineObjectSelected.Dispose();

                    return;
                }
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);

                //避免边界处寻找到的白色区域不闭合
                ho_TopRegionUpperLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_TopRegionUpperLine, 0, 0, 0, hv_width);
                ho_BottomRegionDownLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_BottomRegionDownLine, hv_height - 1, 0, hv_height - 1,
                    hv_width);
                ho_UpperAndDownLine.Dispose();
                HOperatorSet.Union2(ho_TopRegionUpperLine, ho_BottomRegionDownLine, out ho_UpperAndDownLine
                    );

                //抓取高梯度区域
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle, hv_centerRowOfSingleMainLineDetect,
                    hv_centerColumnOfSingleMainLineDetect, hv_Phi, 100, hv_halfHeight);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForWeldingDetect, ho_Rectangle, out ho_ImageReduced
                    );
                ho_Region1.Dispose();
                HOperatorSet.BinaryThreshold(ho_ImageReduced, out ho_Region1, "max_separability",
                    "light", out hv_UsedThreshold);

                ho_ImageEdgeAmp.Dispose();
                HOperatorSet.KirschAmp(ho_ImageReduced, out ho_ImageEdgeAmp);
                ho_RegionWhite.Dispose();
                HOperatorSet.Threshold(ho_ImageEdgeAmp, out ho_RegionWhite, 200, 255);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionWhite, out ExpTmpOutVar_0, 2, 2);
                    ho_RegionWhite.Dispose();
                    ho_RegionWhite = ExpTmpOutVar_0;
                }
                ho_RegionWhiteClosing.Dispose();
                HOperatorSet.ClosingRectangle1(ho_RegionWhite, out ho_RegionWhiteClosing, 50,
                    20);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_RegionWhiteClosing, ho_UpperAndDownLine, out ExpTmpOutVar_0
                        );
                    ho_RegionWhiteClosing.Dispose();
                    ho_RegionWhiteClosing = ExpTmpOutVar_0;
                }
                ho_RegionWhiteFillUp.Dispose();
                HOperatorSet.FillUp(ho_RegionWhiteClosing, out ho_RegionWhiteFillUp);
                ho_RegionOpening5.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionWhiteFillUp, out ho_RegionOpening5,
                    1, 80);



                ho_RegionOpening1.Dispose();
                HOperatorSet.OpeningRectangle1(ho_Region1, out ho_RegionOpening1, 1, 75);
                ho_RegionClosing.Dispose();
                HOperatorSet.ClosingRectangle1(ho_RegionOpening1, out ho_RegionClosing, 100,
                    10);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_RegionClosing, ho_UpperAndDownLine, out ExpTmpOutVar_0
                        );
                    ho_RegionClosing.Dispose();
                    ho_RegionClosing = ExpTmpOutVar_0;
                }
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_RegionClosing, out ho_RegionFillUp);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ExpTmpOutVar_0, 1, 20);
                    ho_RegionFillUp.Dispose();
                    ho_RegionFillUp = ExpTmpOutVar_0;
                }
                HOperatorSet.RegionFeatures(ho_RegionFillUp, "width", out hv_RegionFillUpWidth);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, hv_RegionFillUpWidth * 0.6,
                    1);

                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                HOperatorSet.CountObj(ho_ConnectedRegions, out hv_MainLineRegionNumbers);

                ho_RegionDilation1.Dispose();
                HOperatorSet.DilationRectangle1(ho_RegionOpening, out ho_RegionDilation1, 100,
                    1);
                ho_RegionDifference1.Dispose();
                HOperatorSet.Difference(ho_RegionOpening5, ho_RegionDilation1, out ho_RegionDifference1
                    );
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference1, out ExpTmpOutVar_0, 15,
                        20);
                    ho_RegionDifference1.Dispose();
                    ho_RegionDifference1 = ExpTmpOutVar_0;
                }
                ho_ConnectedRegions4.Dispose();
                HOperatorSet.Connection(ho_RegionDifference1, out ho_ConnectedRegions4);
                HOperatorSet.CountObj(ho_ConnectedRegions4, out hv_Number);


                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                HOperatorSet.DispRegion(ho_ConnectedRegions, hv_ExpDefaultWinHandle);

                HTuple end_val48 = hv_MainLineRegionNumbers;
                HTuple step_val48 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val48, step_val48); hv_Index = hv_Index.TupleAdd(step_val48))
                {
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                    ho_ImageForLightRegin.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_ObjectSelected, out ho_ImageForLightRegin
                        );

                    ho_Region.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForLightRegin, out ho_Region, "max_separability",
                        "light", out hv_UsedThreshold2);

                    //threshold (ImageForLightRegin, Region, 220, 255)
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_Region, out ExpTmpOutVar_0, 3, 25);
                        ho_Region.Dispose();
                        ho_Region = ExpTmpOutVar_0;
                    }
                    //fill_up (Region, Region)

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_Region, out ExpTmpOutVar_0, 25, 1);
                        ho_Region.Dispose();
                        ho_Region = ExpTmpOutVar_0;
                    }
                    ho_ConnectedRegions3.Dispose();
                    HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions3);
                    ho_SelectedRegions1.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions3, out ho_SelectedRegions1,
                        "max_area", 70);
                    ho_RegionDilation.Dispose();
                    HOperatorSet.DilationRectangle1(ho_SelectedRegions1, out ho_RegionDilation,
                        100, 1);
                    ho_RegionOpening2.Dispose();
                    HOperatorSet.Intersection(ho_ObjectSelected, ho_RegionDilation, out ho_RegionOpening2
                        );



                    //binary_threshold (ImageForLightRegin, LightRegion, 'max_separability', 'light', UsedThreshold)
                    //closing_rectangle1 (LightRegion, RegionClosing1, 15, 10)
                    //opening_rectangle1 (RegionClosing1, RegionOpening2, RegionFillUpWidth*0.6, 20)
                    HOperatorSet.RegionFeatures(ho_RegionOpening2, "area", out hv_Value);
                    if ((int)(new HTuple(hv_Value.TupleEqual(0))) != 0)
                    {
                        continue;
                    }
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening2, out ho_ConnectedRegions1);
                    ho_SelectedRegions.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions1, out ho_SelectedRegions,
                        "max_area", 70);
                    HOperatorSet.RegionFeatures(ho_SelectedRegions, "height", out hv_SelectRegionMaxValue);
                    if ((int)(new HTuple(hv_SelectRegionMaxValue.TupleLess(50))) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                        continue;
                    }


                    ho_ImageReduced1.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_SelectedRegions, out ho_ImageReduced1
                        );

                    //kirsch_amp (ImageReduced1, ImageEdgeAmp)
                    //threshold (ImageReduced1, RegionEdgeAmp, 200, 255)
                    //closing_rectangle1 (RegionEdgeAmp, RegionClosing3, 10, 10)

                    //binary_threshold (ImageReduced1, Region3, 'max_separability', 'dark', UsedThreshold2)

                    ho_Region2.Dispose();
                    HOperatorSet.Threshold(ho_ImageReduced1, out ho_Region2, 240, 255);
                    ho_RegionClosing2.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_Region2, out ho_RegionClosing2, 5, 25);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.FillUp(ho_RegionClosing2, out ExpTmpOutVar_0);
                        ho_RegionClosing2.Dispose();
                        ho_RegionClosing2 = ExpTmpOutVar_0;
                    }
                    HOperatorSet.RegionFeatures(ho_RegionClosing2, "height", out hv_Value1);
                    ho_RegionOpening3.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionClosing2, out ho_RegionOpening3,
                        1, hv_Value1 * 0.6);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_RegionOpening3, out ExpTmpOutVar_0, 25,
                            1);
                        ho_RegionOpening3.Dispose();
                        ho_RegionOpening3 = ExpTmpOutVar_0;
                    }

                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_SelectedRegions, ho_RegionOpening3, out ho_RegionDifference
                        );
                    ho_RegionOpening4.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_RegionOpening4,
                        5, hv_Value1 * 0.4);
                    ho_ConnectedRegions2.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening4, out ho_ConnectedRegions2);
                    HOperatorSet.CountObj(ho_ConnectedRegions2, out hv_EdgeRegionNum);
                    //if (EdgeRegionNum == 1)
                    //set_color (windowHandle, 'green')
                    //disp_region (SelectedRegions, windowHandle)
                    //continue
                    //endif
                    //if (EdgeRegionNum == 2)
                    //select_obj (ConnectedRegions2, EdgeLeftObjectSelected, 1)
                    //region_features (EdgeLeftObjectSelected, 'height', LeftHeightValue)
                    //opening_rectangle1 (EdgeLeftObjectSelected, EdgeLeftObjectSelected, 1, LeftHeightValue*0.8)
                    //select_obj (ConnectedRegions2, EdgeRightObjectSelected, 2)
                    //region_features (EdgeRightObjectSelected, 'height', RightHeightValue)
                    //opening_rectangle1 (EdgeRightObjectSelected, EdgeRightObjectSelected, 1, RightHeightValue*0.8)
                    //region_features (EdgeLeftObjectSelected, 'width', EdgeLeftWidthValue)
                    //region_features (EdgeRightObjectSelected, 'width', EdgeRightWidthValue)
                    //tuple_abs (EdgeLeftWidthValue-EdgeRightWidthValue, EdgeDiffAbs)
                    //if (EdgeDiffAbs > 4)
                    //set_color (windowHandle, 'green')
                    //disp_region (SelectedRegions, windowHandle)
                    //continue
                    //endif
                    //endif

                    ho_ImageReduced2.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced1, ho_RegionOpening3, out ho_ImageReduced2
                        );
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.GrayClosingRect(ho_ImageReduced2, out ExpTmpOutVar_0, 20, 1);
                        ho_ImageReduced2.Dispose();
                        ho_ImageReduced2 = ExpTmpOutVar_0;
                    }
                    ho_Region4.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageReduced2, out ho_Region4, "max_separability",
                        "dark", out hv_UsedThreshold1);

                    HOperatorSet.Intensity(ho_Region4, ho_ImageReduced2, out hv_Mean, out hv_Deviation);
                    if ((int)(new HTuple(hv_Mean.TupleGreater(220))) != 0)
                    {
                        ho_Region4.Dispose();
                        HOperatorSet.GenEmptyRegion(out ho_Region4);
                    }

                    HOperatorSet.RegionFeatures(ho_RegionOpening3, "width", out hv_LightRegionWidth);

                    ho_DarkRegion.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_Region4, out ho_DarkRegion, 1, 20);
                    HOperatorSet.RegionFeatures(ho_DarkRegion, "height", out hv_DarkRegionHeight);
                    HOperatorSet.RegionFeatures(ho_RegionOpening3, "height", out hv_LightRegionHeight);


                    if ((int)(new HTuple(hv_DarkRegionHeight.TupleLess(hv_LightRegionHeight * 0.15))) != 0)
                    {
                        if ((int)(new HTuple(((hv_Index + 1)).TupleGreater(hv_Number))) != 0)
                        {
                            ho_MainLineObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_ConnectedRegions4, out ho_MainLineObjectSelected,
                                hv_Index);
                        }
                        else
                        {
                            ho_MainLineObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_ConnectedRegions4, out ho_MainLineObjectSelected,
                                hv_Index + 1);
                        }

                        HOperatorSet.RegionFeatures(ho_MainLineObjectSelected, "width", out hv_MainLineObjectSelectedWidth);
                        if ((int)(new HTuple(hv_MainLineObjectSelectedWidth.TupleGreater(hv_filmWidthThresh / hv_widthResolution))) != 0)
                        {
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ConcatObj(ho_weldingNGRegionOut, ho_RegionOpening3, out ExpTmpOutVar_0
                                    );
                                ho_weldingNGRegionOut.Dispose();
                                ho_weldingNGRegionOut = ExpTmpOutVar_0;
                            }
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispRegion(ho_weldingNGRegionOut, hv_ExpDefaultWinHandle);
                        }
                        else
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispRegion(ho_SelectedRegions, hv_ExpDefaultWinHandle);
                            HOperatorSet.DispRegion(ho_DarkRegion, hv_ExpDefaultWinHandle);
                        }
                    }
                    else
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispRegion(ho_SelectedRegions, hv_ExpDefaultWinHandle);
                        HOperatorSet.DispRegion(ho_DarkRegion, hv_ExpDefaultWinHandle);
                    }



                }
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_Region1.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_RegionWhite.Dispose();
                ho_RegionWhiteClosing.Dispose();
                ho_RegionWhiteFillUp.Dispose();
                ho_RegionOpening5.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_RegionDilation1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionOpening2.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions.Dispose();
                ho_ImageReduced1.Dispose();
                ho_Region2.Dispose();
                ho_RegionClosing2.Dispose();
                ho_RegionOpening3.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening4.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ImageReduced2.Dispose();
                ho_Region4.Dispose();
                ho_DarkRegion.Dispose();
                ho_MainLineObjectSelected.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageReduced.Dispose();
                ho_Region1.Dispose();
                ho_ImageEdgeAmp.Dispose();
                ho_RegionWhite.Dispose();
                ho_RegionWhiteClosing.Dispose();
                ho_RegionWhiteFillUp.Dispose();
                ho_RegionOpening5.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_RegionDilation1.Dispose();
                ho_RegionDifference1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionOpening2.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions.Dispose();
                ho_ImageReduced1.Dispose();
                ho_Region2.Dispose();
                ho_RegionClosing2.Dispose();
                ho_RegionOpening3.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening4.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ImageReduced2.Dispose();
                ho_Region4.Dispose();
                ho_DarkRegion.Dispose();
                ho_MainLineObjectSelected.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetEdge(HObject ho_ImageRed, out HObject ho_EdgeAmplitudeRed, HTuple hv_OpenHeight,
            HTuple hv_OpenWidth, HTuple hv_Threshold, HTuple hv_Direct, HTuple hv_XTBDistance,
            HTuple hv_XBTDistance, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            HTuple hv_Region, HTuple hv_Height, HTuple hv_Num, HTuple hv_windowHandle, HTuple hv_ColOfTopL,
            HTuple hv_ColOfTopR, HTuple hv_ColOfBottomL, HTuple hv_ColOfBottomR, HTuple hv_widthOfWafer,
            out HTuple hv_Line1, out HTuple hv_Line2)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_ClosedEdges, ho_RegionClosing1 = null;
            HObject ho_ConnectedRegions1 = null, ho_RegionLR1 = null, ho_RegionClosing = null;
            HObject ho_ConnectedRegions = null, ho_RegionLR = null, ho_RegionLROpening = null;
            HObject ho_RegionLRDilation = null, ho_ConnectedRegions2 = null;
            HObject ho_SelectedLR = null, ho_SelectedLRLine = null, ho_SkeletonL = null;
            HObject ho_SkeletonR = null, ho_RegionOpening1 = null, ho_ClosedEdges1 = null;
            HObject ho_RegionOpening = null, ho_ConnectedRegionsWidth = null;
            HObject ho_SelectedTB = null, ho_RegionTB = null, ho_RegionTBClosing = null;
            HObject ho_RegionTBConnected = null, ho_SkeletonTB = null, ho_SkeletonT = null;
            HObject ho_SkeletonB = null;

            // Local control variables 

            HTuple hv_Width = null, hv_HeightUsed = new HTuple();
            HTuple hv_LRNum = new HTuple(), hv_L_RowBegin = new HTuple();
            HTuple hv_L_ColBegin = new HTuple(), hv_L_RowEnd = new HTuple();
            HTuple hv_L_ColEnd = new HTuple(), hv_R_RowBegin = new HTuple();
            HTuple hv_R_ColBegin = new HTuple(), hv_R_RowEnd = new HTuple();
            HTuple hv_R_ColEnd = new HTuple(), hv_TBNum = new HTuple();
            HTuple hv_T_RowBegin = new HTuple(), hv_T_ColBegin = new HTuple();
            HTuple hv_T_RowEnd = new HTuple(), hv_T_ColEnd = new HTuple();
            HTuple hv_B_RowBegin = new HTuple(), hv_B_ColBegin = new HTuple();
            HTuple hv_B_RowEnd = new HTuple(), hv_B_ColEnd = new HTuple();
            HTuple hv_Height_COPY_INP_TMP = hv_Height.Clone();
            HTuple hv_Num_COPY_INP_TMP = hv_Num.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitudeRed);
            HOperatorSet.GenEmptyObj(out ho_ClosedEdges);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_RegionLR1);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionLR);
            HOperatorSet.GenEmptyObj(out ho_RegionLROpening);
            HOperatorSet.GenEmptyObj(out ho_RegionLRDilation);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_SelectedLR);
            HOperatorSet.GenEmptyObj(out ho_SelectedLRLine);
            HOperatorSet.GenEmptyObj(out ho_SkeletonL);
            HOperatorSet.GenEmptyObj(out ho_SkeletonR);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_ClosedEdges1);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegionsWidth);
            HOperatorSet.GenEmptyObj(out ho_SelectedTB);
            HOperatorSet.GenEmptyObj(out ho_RegionTB);
            HOperatorSet.GenEmptyObj(out ho_RegionTBClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionTBConnected);
            HOperatorSet.GenEmptyObj(out ho_SkeletonTB);
            HOperatorSet.GenEmptyObj(out ho_SkeletonT);
            HOperatorSet.GenEmptyObj(out ho_SkeletonB);
            try
            {
                hv_Line1 = new HTuple();
                hv_Line2 = new HTuple();
                HOperatorSet.GetImageSize(ho_ImageRed, out hv_Width, out hv_Height_COPY_INP_TMP);
                ho_EdgeAmplitudeRed.Dispose(); ho_ClosedEdges.Dispose();
                SobelImage(ho_ImageRed, out ho_EdgeAmplitudeRed, out ho_ClosedEdges, hv_OpenHeight,
                    hv_OpenWidth, hv_Direct, hv_Threshold, hv_Width, hv_Height_COPY_INP_TMP,
                    hv_XTBDistance, hv_XBTDistance, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_Region);
                //
                //x 检测纵向边缘线，y检测横向边缘线及倒角
                if ((int)(new HTuple(hv_Direct.TupleEqual("x"))) != 0)
                {
                    //2020.04.13 区分上下高度
                    if ((int)(new HTuple(hv_Region.TupleEqual("T"))) != 0)
                    {
                        //2020.04.13 上下半片存在，但上下半片未能够区分
                        if ((int)(new HTuple(hv_XTBDistance.TupleEqual(0))) != 0)
                        {
                            ho_ClosedEdges.Dispose();
                            ho_RegionClosing1.Dispose();
                            ho_ConnectedRegions1.Dispose();
                            ho_RegionLR1.Dispose();
                            ho_RegionClosing.Dispose();
                            ho_ConnectedRegions.Dispose();
                            ho_RegionLR.Dispose();
                            ho_RegionLROpening.Dispose();
                            ho_RegionLRDilation.Dispose();
                            ho_ConnectedRegions2.Dispose();
                            ho_SelectedLR.Dispose();
                            ho_SelectedLRLine.Dispose();
                            ho_SkeletonL.Dispose();
                            ho_SkeletonR.Dispose();
                            ho_RegionOpening1.Dispose();
                            ho_ClosedEdges1.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegionsWidth.Dispose();
                            ho_SelectedTB.Dispose();
                            ho_RegionTB.Dispose();
                            ho_RegionTBClosing.Dispose();
                            ho_RegionTBConnected.Dispose();
                            ho_SkeletonTB.Dispose();
                            ho_SkeletonT.Dispose();
                            ho_SkeletonB.Dispose();

                            return;
                        }
                        else
                        {
                            hv_HeightUsed = hv_XTBDistance.Clone();
                        }
                    }
                    else if ((int)(new HTuple(hv_Region.TupleEqual("B"))) != 0)
                    {
                        if ((int)(new HTuple(hv_XBTDistance.TupleEqual(0))) != 0)
                        {
                            ho_ClosedEdges.Dispose();
                            ho_RegionClosing1.Dispose();
                            ho_ConnectedRegions1.Dispose();
                            ho_RegionLR1.Dispose();
                            ho_RegionClosing.Dispose();
                            ho_ConnectedRegions.Dispose();
                            ho_RegionLR.Dispose();
                            ho_RegionLROpening.Dispose();
                            ho_RegionLRDilation.Dispose();
                            ho_ConnectedRegions2.Dispose();
                            ho_SelectedLR.Dispose();
                            ho_SelectedLRLine.Dispose();
                            ho_SkeletonL.Dispose();
                            ho_SkeletonR.Dispose();
                            ho_RegionOpening1.Dispose();
                            ho_ClosedEdges1.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegionsWidth.Dispose();
                            ho_SelectedTB.Dispose();
                            ho_RegionTB.Dispose();
                            ho_RegionTBClosing.Dispose();
                            ho_RegionTBConnected.Dispose();
                            ho_SkeletonTB.Dispose();
                            ho_SkeletonT.Dispose();
                            ho_SkeletonB.Dispose();

                            return;
                        }
                        else
                        {
                            hv_HeightUsed = hv_Height_COPY_INP_TMP - hv_XBTDistance;
                        }
                    }
                    else
                    {
                        ho_ClosedEdges.Dispose();
                        ho_RegionClosing1.Dispose();
                        ho_ConnectedRegions1.Dispose();
                        ho_RegionLR1.Dispose();
                        ho_RegionClosing.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_RegionLR.Dispose();
                        ho_RegionLROpening.Dispose();
                        ho_RegionLRDilation.Dispose();
                        ho_ConnectedRegions2.Dispose();
                        ho_SelectedLR.Dispose();
                        ho_SelectedLRLine.Dispose();
                        ho_SkeletonL.Dispose();
                        ho_SkeletonR.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_ClosedEdges1.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_ConnectedRegionsWidth.Dispose();
                        ho_SelectedTB.Dispose();
                        ho_RegionTB.Dispose();
                        ho_RegionTBClosing.Dispose();
                        ho_RegionTBConnected.Dispose();
                        ho_SkeletonTB.Dispose();
                        ho_SkeletonT.Dispose();
                        ho_SkeletonB.Dispose();

                        return;
                    }
                    //
                    //2020.04.22-找到电池片内部 原30现改为15
                    ho_RegionClosing1.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_ClosedEdges, out ho_RegionClosing1, 3,
                        30);
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing1, out ho_ConnectedRegions1);
                    //*筛选纵向边缘
                    //2020.04.11 Height/8改为XTBDistance/8
                    ho_RegionLR1.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_RegionLR1, "height",
                        "and", hv_HeightUsed / 8, 99999);

                    ho_RegionClosing.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_RegionLR1, out ho_RegionClosing, 3, 100);
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing, out ho_ConnectedRegions);
                    //*筛选纵向边缘
                    //2020.04.11 Height/8改为XTBDistance/8
                    ho_RegionLR.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_RegionLR, "height",
                        "and", hv_HeightUsed / 8, 99999);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union1(ho_RegionLR, out ExpTmpOutVar_0);
                        ho_RegionLR.Dispose();
                        ho_RegionLR = ExpTmpOutVar_0;
                    }
                    //去除倒角
                    ho_RegionLROpening.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionLR, out ho_RegionLROpening, 1, hv_HeightUsed / 10);
                    //
                    ho_RegionLRDilation.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_RegionLROpening, out ho_RegionLRDilation,
                        1, hv_HeightUsed * 0.6);
                    ho_ConnectedRegions2.Dispose();
                    HOperatorSet.Connection(ho_RegionLRDilation, out ho_ConnectedRegions2);
                    //2020.04.11 HeightUsed*0.6 0.25破片
                    ho_SelectedLR.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions2, out ho_SelectedLR, "height",
                        "and", hv_HeightUsed * 0.6, 99999);
                    HOperatorSet.CountObj(ho_SelectedLR, out hv_LRNum);
                    if ((int)(new HTuple(hv_LRNum.TupleLess(2))) != 0)
                    {
                        ho_ClosedEdges.Dispose();
                        ho_RegionClosing1.Dispose();
                        ho_ConnectedRegions1.Dispose();
                        ho_RegionLR1.Dispose();
                        ho_RegionClosing.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_RegionLR.Dispose();
                        ho_RegionLROpening.Dispose();
                        ho_RegionLRDilation.Dispose();
                        ho_ConnectedRegions2.Dispose();
                        ho_SelectedLR.Dispose();
                        ho_SelectedLRLine.Dispose();
                        ho_SkeletonL.Dispose();
                        ho_SkeletonR.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_ClosedEdges1.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_ConnectedRegionsWidth.Dispose();
                        ho_SelectedTB.Dispose();
                        ho_RegionTB.Dispose();
                        ho_RegionTBClosing.Dispose();
                        ho_RegionTBConnected.Dispose();
                        ho_SkeletonTB.Dispose();
                        ho_SkeletonT.Dispose();
                        ho_SkeletonB.Dispose();

                        return;
                        //2020.04.28-找到外面皮带
                    }
                    else
                    {
                        ho_SelectedLRLine.Dispose();
                        GetLRLine(ho_SelectedLR, out ho_SelectedLRLine, hv_Width, hv_ColOfTopL,
                            hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR, hv_Region);
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Skeleton(ho_SelectedLRLine, out ExpTmpOutVar_0);
                        ho_SelectedLRLine.Dispose();
                        ho_SelectedLRLine = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Connection(ho_SelectedLRLine, out ExpTmpOutVar_0);
                        ho_SelectedLRLine.Dispose();
                        ho_SelectedLRLine = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_SelectedLRLine, out ExpTmpOutVar_0, "upper_left",
                            "true", "column");
                        ho_SelectedLRLine.Dispose();
                        ho_SelectedLRLine = ExpTmpOutVar_0;
                    }
                    HOperatorSet.CountObj(ho_SelectedLRLine, out hv_Num_COPY_INP_TMP);
                    ho_SkeletonL.Dispose();
                    HOperatorSet.SelectObj(ho_SelectedLRLine, out ho_SkeletonL, 1);
                    Skeleton2Line(ho_SkeletonL, out hv_L_RowBegin, out hv_L_ColBegin, out hv_L_RowEnd,
                        out hv_L_ColEnd);
                    hv_Line1 = new HTuple();
                    hv_Line1 = hv_Line1.TupleConcat(hv_L_RowBegin);
                    hv_Line1 = hv_Line1.TupleConcat(hv_L_ColBegin);
                    hv_Line1 = hv_Line1.TupleConcat(hv_L_RowEnd);
                    hv_Line1 = hv_Line1.TupleConcat(hv_L_ColEnd);
                    ho_SkeletonR.Dispose();
                    HOperatorSet.SelectObj(ho_SelectedLRLine, out ho_SkeletonR, hv_Num_COPY_INP_TMP);
                    Skeleton2Line(ho_SkeletonR, out hv_R_RowBegin, out hv_R_ColBegin, out hv_R_RowEnd,
                        out hv_R_ColEnd);
                    hv_Line2 = new HTuple();
                    hv_Line2 = hv_Line2.TupleConcat(hv_R_RowBegin);
                    hv_Line2 = hv_Line2.TupleConcat(hv_R_ColBegin);
                    hv_Line2 = hv_Line2.TupleConcat(hv_R_RowEnd);
                    hv_Line2 = hv_Line2.TupleConcat(hv_R_ColEnd);
                    //
                }
                else
                {
                    //黄边/阴影
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_ClosedEdges, out ho_RegionOpening1, 10,
                        1);
                    ho_RegionClosing1.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_RegionOpening1, out ho_RegionClosing1,
                        10, 1);
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing1, out ho_ConnectedRegions1);

                    //connection (ConnectedRegions1, ConnectedRegions3)
                    //select_obj (ConnectedRegions3, ObjectSelected, 7)
                    //region_features (ObjectSelected, 'width', Value)
                    //*2020.05.06 筛选横向边缘 0.035
                    if ((int)((new HTuple(hv_Num_COPY_INP_TMP.TupleEqual("1"))).TupleOr(new HTuple(hv_Num_COPY_INP_TMP.TupleEqual(
                        "6")))) != 0)
                    {
                        ho_ClosedEdges1.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_ClosedEdges1, "width",
                            "and", hv_widthOfWafer * 0.1, 9999);
                    }
                    else
                    {
                        //2020.05.14-避免皮带吸附孔0.1改为0.05
                        ho_ClosedEdges1.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_ClosedEdges1, "width",
                            "and", hv_widthOfWafer * 0.3, 9999);
                    }
                    //L := Width*0.03

                    //
                    ho_RegionOpening.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_ClosedEdges1, out ho_RegionOpening, 15,
                        1);
                    ho_RegionClosing.Dispose();
                    HOperatorSet.ClosingRectangle1(ho_RegionOpening, out ho_RegionClosing, 100,
                        1);
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing, out ho_ConnectedRegions);
                    //*筛选横向边缘
                    //if (Num=='1' or Num=='6')
                    //select_shape (ConnectedRegions, ConnectedRegionsWidth, ['width'], 'and', [widthOfWafer*0.1], [9999])
                    //else
                    ho_ConnectedRegionsWidth.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_ConnectedRegionsWidth,
                        "width", "and", hv_widthOfWafer * 0.3, 9999);
                    //endif
                    ho_SelectedTB.Dispose();
                    SelectFeature(ho_ConnectedRegionsWidth, out ho_SelectedTB, "width", hv_isTopWaferExist,
                        hv_isBottomWaferExist, hv_Height_COPY_INP_TMP, hv_OpenHeight);
                    //
                    HOperatorSet.CountObj(ho_SelectedTB, out hv_TBNum);
                    //若没找到两条横向边缘，则进一步闭合来查找
                    if ((int)(new HTuple(hv_TBNum.TupleLess(1))) != 0)
                    {
                        //2020.04.27背景复杂，找到边界比较少的情况
                        ho_RegionOpening1.Dispose();
                        HOperatorSet.OpeningRectangle1(ho_ClosedEdges, out ho_RegionOpening1, 10,
                            1);
                        ho_RegionClosing1.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_RegionOpening1, out ho_RegionClosing1,
                            65, 1);
                        ho_ConnectedRegions1.Dispose();
                        HOperatorSet.Connection(ho_RegionClosing1, out ho_ConnectedRegions1);
                        ho_ClosedEdges1.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_ClosedEdges1, "width",
                            "and", hv_widthOfWafer * 0.2, 9999);

                        ho_RegionOpening1.Dispose();
                        HOperatorSet.OpeningRectangle1(ho_ClosedEdges1, out ho_RegionOpening1,
                            15, 1);
                        ho_RegionClosing1.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_RegionOpening1, out ho_RegionClosing1,
                            100, 1);
                        ho_ConnectedRegions1.Dispose();
                        HOperatorSet.Connection(ho_RegionClosing1, out ho_ConnectedRegions1);

                        ho_RegionTB.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_RegionTB, "width",
                            "and", hv_widthOfWafer * 0.2, 9999);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union1(ho_RegionTB, out ExpTmpOutVar_0);
                            ho_RegionTB.Dispose();
                            ho_RegionTB = ExpTmpOutVar_0;
                        }
                        ho_RegionTBClosing.Dispose();
                        HOperatorSet.ClosingRectangle1(ho_RegionTB, out ho_RegionTBClosing, hv_Width * 0.04,
                            1);
                        ho_ConnectedRegions.Dispose();
                        HOperatorSet.Connection(ho_RegionTBClosing, out ho_ConnectedRegions);
                        ho_RegionTBConnected.Dispose();
                        SelectFeature(ho_ConnectedRegions, out ho_RegionTBConnected, "width", hv_isTopWaferExist,
                            hv_isBottomWaferExist, hv_Height_COPY_INP_TMP, hv_OpenHeight);
                        ho_SelectedTB.Dispose();
                        HOperatorSet.SelectShape(ho_RegionTBConnected, out ho_SelectedTB, "width",
                            "and", hv_widthOfWafer * 0.2, 9999);
                        HOperatorSet.CountObj(ho_SelectedTB, out hv_TBNum);
                        if ((int)(new HTuple(hv_TBNum.TupleLess(1))) != 0)
                        {
                            ho_ClosedEdges.Dispose();
                            ho_RegionClosing1.Dispose();
                            ho_ConnectedRegions1.Dispose();
                            ho_RegionLR1.Dispose();
                            ho_RegionClosing.Dispose();
                            ho_ConnectedRegions.Dispose();
                            ho_RegionLR.Dispose();
                            ho_RegionLROpening.Dispose();
                            ho_RegionLRDilation.Dispose();
                            ho_ConnectedRegions2.Dispose();
                            ho_SelectedLR.Dispose();
                            ho_SelectedLRLine.Dispose();
                            ho_SkeletonL.Dispose();
                            ho_SkeletonR.Dispose();
                            ho_RegionOpening1.Dispose();
                            ho_ClosedEdges1.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegionsWidth.Dispose();
                            ho_SelectedTB.Dispose();
                            ho_RegionTB.Dispose();
                            ho_RegionTBClosing.Dispose();
                            ho_RegionTBConnected.Dispose();
                            ho_SkeletonTB.Dispose();
                            ho_SkeletonT.Dispose();
                            ho_SkeletonB.Dispose();

                            return;
                        }
                    }
                    //
                    ho_SkeletonTB.Dispose();
                    HOperatorSet.Skeleton(ho_SelectedTB, out ho_SkeletonTB);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SortRegion(ho_SkeletonTB, out ExpTmpOutVar_0, "upper_left",
                            "true", "row");
                        ho_SkeletonTB.Dispose();
                        ho_SkeletonTB = ExpTmpOutVar_0;
                    }
                    if ((int)(new HTuple(hv_TBNum.TupleEqual(1))) != 0)
                    {
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_SkeletonT.Dispose();
                            HOperatorSet.SelectObj(ho_SkeletonTB, out ho_SkeletonT, 1);
                            SkeletonRow2Line(ho_SkeletonT, "T", out hv_T_RowBegin, out hv_T_ColBegin,
                                out hv_T_RowEnd, out hv_T_ColEnd);
                            hv_Line1 = new HTuple();
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_RowBegin);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_ColBegin);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_RowEnd);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_ColEnd);
                        }
                        if ((int)(hv_isBottomWaferExist) != 0)
                        {
                            ho_SkeletonB.Dispose();
                            HOperatorSet.SelectObj(ho_SkeletonTB, out ho_SkeletonB, 1);
                            SkeletonRow2Line(ho_SkeletonB, "B", out hv_B_RowBegin, out hv_B_ColBegin,
                                out hv_B_RowEnd, out hv_B_ColEnd);
                            hv_Line2 = new HTuple();
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_RowBegin);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_ColBegin);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_RowEnd);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_ColEnd);
                        }
                    }
                    else
                    {
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_SkeletonT.Dispose();
                            HOperatorSet.SelectObj(ho_SkeletonTB, out ho_SkeletonT, 1);
                            SkeletonRow2Line(ho_SkeletonT, "T", out hv_T_RowBegin, out hv_T_ColBegin,
                                out hv_T_RowEnd, out hv_T_ColEnd);
                            hv_Line1 = new HTuple();
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_RowBegin);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_ColBegin);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_RowEnd);
                            hv_Line1 = hv_Line1.TupleConcat(hv_T_ColEnd);
                        }
                        if ((int)(hv_isBottomWaferExist) != 0)
                        {
                            ho_SkeletonB.Dispose();
                            HOperatorSet.SelectObj(ho_SkeletonTB, out ho_SkeletonB, 2);
                            SkeletonRow2Line(ho_SkeletonB, "B", out hv_B_RowBegin, out hv_B_ColBegin,
                                out hv_B_RowEnd, out hv_B_ColEnd);
                            hv_Line2 = new HTuple();
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_RowBegin);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_ColBegin);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_RowEnd);
                            hv_Line2 = hv_Line2.TupleConcat(hv_B_ColEnd);
                            //disp_line (windowHandle, B_RowBegin, B_ColBegin, B_RowEnd, B_ColEnd)
                        }
                    }
                }
                //
                ho_ClosedEdges.Dispose();
                ho_RegionClosing1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_RegionLR1.Dispose();
                ho_RegionClosing.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_RegionLR.Dispose();
                ho_RegionLROpening.Dispose();
                ho_RegionLRDilation.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_SelectedLR.Dispose();
                ho_SelectedLRLine.Dispose();
                ho_SkeletonL.Dispose();
                ho_SkeletonR.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ClosedEdges1.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegionsWidth.Dispose();
                ho_SelectedTB.Dispose();
                ho_RegionTB.Dispose();
                ho_RegionTBClosing.Dispose();
                ho_RegionTBConnected.Dispose();
                ho_SkeletonTB.Dispose();
                ho_SkeletonT.Dispose();
                ho_SkeletonB.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ClosedEdges.Dispose();
                ho_RegionClosing1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_RegionLR1.Dispose();
                ho_RegionClosing.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_RegionLR.Dispose();
                ho_RegionLROpening.Dispose();
                ho_RegionLRDilation.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_SelectedLR.Dispose();
                ho_SelectedLRLine.Dispose();
                ho_SkeletonL.Dispose();
                ho_SkeletonR.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ClosedEdges1.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegionsWidth.Dispose();
                ho_SelectedTB.Dispose();
                ho_RegionTB.Dispose();
                ho_RegionTBClosing.Dispose();
                ho_RegionTBConnected.Dispose();
                ho_SkeletonTB.Dispose();
                ho_SkeletonT.Dispose();
                ho_SkeletonB.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SplitBlackRegion(HObject ho_Image, out HObject ho_BlackT, out HObject ho_BlackB,
            HTuple hv_Width, HTuple hv_Height, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            HTuple hv_OpenHeight, out HTuple hv_isEmpty, out HTuple hv_ColOfTopL, out HTuple hv_ColOfTopR,
            out HTuple hv_ColOfBottomL, out HTuple hv_ColOfBottomR)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_ImageResult, ho_Region, ho_RegionOpening;
            HObject ho_RegionClosing, ho_RegionOpening1 = null, ho_RegionFillUp;
            HObject ho_ConnectedRegions, ho_SelectedRegions, ho_RegionBorderOfTop = null;
            HObject ho_RegionOpeningOfTop = null, ho_ConnectedRegionsOfTop = null;
            HObject ho_SortedRegionsOfTop = null, ho_RegionBorderOfBottom = null;
            HObject ho_RegionOpeningOfBottom = null, ho_ConnectedRegionsOfBottom = null;
            HObject ho_SortedRegionsOfBottom = null;

            // Local control variables 

            HTuple hv_isUsingChinese = null, hv_UsedThreshold = null;
            HTuple hv_Number = null, hv_heightOfTop = new HTuple();
            HTuple hv_Number1 = new HTuple(), hv_RowOfTopL = new HTuple();
            HTuple hv_RowOfTopR = new HTuple(), hv_heightOfBottom = new HTuple();
            HTuple hv_Number2 = new HTuple(), hv_RowOfBottomL = new HTuple();
            HTuple hv_RowOfBottomR = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_BlackT);
            HOperatorSet.GenEmptyObj(out ho_BlackB);
            HOperatorSet.GenEmptyObj(out ho_ImageResult);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionBorderOfTop);
            HOperatorSet.GenEmptyObj(out ho_RegionOpeningOfTop);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegionsOfTop);
            HOperatorSet.GenEmptyObj(out ho_SortedRegionsOfTop);
            HOperatorSet.GenEmptyObj(out ho_RegionBorderOfBottom);
            HOperatorSet.GenEmptyObj(out ho_RegionOpeningOfBottom);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegionsOfBottom);
            HOperatorSet.GenEmptyObj(out ho_SortedRegionsOfBottom);
            try
            {
                hv_isUsingChinese = 1;
                hv_isEmpty = 0;
                ho_BlackT.Dispose();
                HOperatorSet.GenEmptyObj(out ho_BlackT);
                ho_BlackB.Dispose();
                HOperatorSet.GenEmptyObj(out ho_BlackB);
                //2020.05.13-上下电池片左右边界坐标初始化
                hv_ColOfTopL = 0;
                hv_ColOfTopR = 0;
                hv_ColOfBottomL = 0;
                hv_ColOfBottomR = 0;

                //区域寻找
                ho_ImageResult.Dispose();
                HOperatorSet.MultImage(ho_Image, ho_Image, out ho_ImageResult, 0.03, 0);
                ho_Region.Dispose();
                HOperatorSet.BinaryThreshold(ho_ImageResult, out ho_Region, "max_separability",
                    "dark", out hv_UsedThreshold);
                //去除背景皮带小黑点
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_Region, out ho_RegionOpening, 10, 5);
                ho_RegionClosing.Dispose();
                HOperatorSet.ClosingRectangle1(ho_RegionOpening, out ho_RegionClosing, 80,
                    5);
                if ((int)(new HTuple(hv_OpenHeight.TupleEqual(11))) != 0)
                {
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionClosing, out ho_RegionOpening1, hv_Width * 0.05,
                        1);
                }
                else
                {
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionClosing, out ho_RegionOpening1, hv_Width * 0.25,
                        1);
                }
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_RegionOpening1, out ho_RegionFillUp);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionFillUp, out ho_ConnectedRegions);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
                    "and", 9999, 99999999);
                HOperatorSet.CountObj(ho_SelectedRegions, out hv_Number);
                if ((int)(new HTuple(hv_Number.TupleEqual(1))) != 0)
                {
                    if ((int)(hv_isTopWaferExist.TupleAnd(hv_isBottomWaferExist)) != 0)
                    {
                        ho_ImageResult.Dispose();
                        ho_Region.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_RegionClosing.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_RegionFillUp.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions.Dispose();
                        ho_RegionBorderOfTop.Dispose();
                        ho_RegionOpeningOfTop.Dispose();
                        ho_ConnectedRegionsOfTop.Dispose();
                        ho_SortedRegionsOfTop.Dispose();
                        ho_RegionBorderOfBottom.Dispose();
                        ho_RegionOpeningOfBottom.Dispose();
                        ho_ConnectedRegionsOfBottom.Dispose();
                        ho_SortedRegionsOfBottom.Dispose();

                        return;
                    }
                    else
                    {
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_BlackT.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions, out ho_BlackT, 1);
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ShapeTrans(ho_BlackT, out ExpTmpOutVar_0, "convex");
                                ho_BlackT.Dispose();
                                ho_BlackT = ExpTmpOutVar_0;
                            }
                            //2020.05.13-上下半片左右边界输出，用于消除左右边界找到皮带或是电池片内部
                            //上半片左右区域
                            ho_RegionBorderOfTop.Dispose();
                            HOperatorSet.Boundary(ho_BlackT, out ho_RegionBorderOfTop, "outer");
                            ho_RegionOpeningOfTop.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_RegionBorderOfTop, out ho_RegionOpeningOfTop,
                                1, hv_Height * 0.005);
                            ho_ConnectedRegionsOfTop.Dispose();
                            HOperatorSet.Connection(ho_RegionOpeningOfTop, out ho_ConnectedRegionsOfTop
                                );
                            ho_SortedRegionsOfTop.Dispose();
                            HOperatorSet.SortRegion(ho_ConnectedRegionsOfTop, out ho_SortedRegionsOfTop,
                                "upper_left", "true", "column");
                            HOperatorSet.RegionFeatures(ho_SortedRegionsOfTop, "height", out hv_heightOfTop);
                            HOperatorSet.CountObj(ho_SortedRegionsOfTop, out hv_Number1);
                            if ((int)(new HTuple(hv_Number1.TupleLess(2))) != 0)
                            {
                                ho_ImageResult.Dispose();
                                ho_Region.Dispose();
                                ho_RegionOpening.Dispose();
                                ho_RegionClosing.Dispose();
                                ho_RegionOpening1.Dispose();
                                ho_RegionFillUp.Dispose();
                                ho_ConnectedRegions.Dispose();
                                ho_SelectedRegions.Dispose();
                                ho_RegionBorderOfTop.Dispose();
                                ho_RegionOpeningOfTop.Dispose();
                                ho_ConnectedRegionsOfTop.Dispose();
                                ho_SortedRegionsOfTop.Dispose();
                                ho_RegionBorderOfBottom.Dispose();
                                ho_RegionOpeningOfBottom.Dispose();
                                ho_ConnectedRegionsOfBottom.Dispose();
                                ho_SortedRegionsOfBottom.Dispose();

                                return;
                            }
                            else
                            {
                                //2020.05.15-左右边界找到后选择最长的两根作为实际边界
                                GetRowAndColOfLeftAndRightLine(ho_SortedRegionsOfTop, hv_heightOfTop,
                                    out hv_RowOfTopL, out hv_ColOfTopL, out hv_RowOfTopR, out hv_ColOfTopR);
                            }
                        }
                        if ((int)(hv_isBottomWaferExist) != 0)
                        {
                            ho_BlackB.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions, out ho_BlackB, 1);
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.ShapeTrans(ho_BlackB, out ExpTmpOutVar_0, "convex");
                                ho_BlackB.Dispose();
                                ho_BlackB = ExpTmpOutVar_0;
                            }
                            //下半片左右区域
                            ho_RegionBorderOfBottom.Dispose();
                            HOperatorSet.Boundary(ho_BlackB, out ho_RegionBorderOfBottom, "outer");
                            ho_RegionOpeningOfBottom.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_RegionBorderOfBottom, out ho_RegionOpeningOfBottom,
                                1, hv_Height * 0.005);
                            ho_ConnectedRegionsOfBottom.Dispose();
                            HOperatorSet.Connection(ho_RegionOpeningOfBottom, out ho_ConnectedRegionsOfBottom
                                );
                            ho_SortedRegionsOfBottom.Dispose();
                            HOperatorSet.SortRegion(ho_ConnectedRegionsOfBottom, out ho_SortedRegionsOfBottom,
                                "upper_left", "true", "column");
                            HOperatorSet.RegionFeatures(ho_SortedRegionsOfBottom, "height", out hv_heightOfBottom);
                            HOperatorSet.CountObj(ho_SortedRegionsOfBottom, out hv_Number2);
                            if ((int)(new HTuple(hv_Number2.TupleLess(2))) != 0)
                            {
                                ho_ImageResult.Dispose();
                                ho_Region.Dispose();
                                ho_RegionOpening.Dispose();
                                ho_RegionClosing.Dispose();
                                ho_RegionOpening1.Dispose();
                                ho_RegionFillUp.Dispose();
                                ho_ConnectedRegions.Dispose();
                                ho_SelectedRegions.Dispose();
                                ho_RegionBorderOfTop.Dispose();
                                ho_RegionOpeningOfTop.Dispose();
                                ho_ConnectedRegionsOfTop.Dispose();
                                ho_SortedRegionsOfTop.Dispose();
                                ho_RegionBorderOfBottom.Dispose();
                                ho_RegionOpeningOfBottom.Dispose();
                                ho_ConnectedRegionsOfBottom.Dispose();
                                ho_SortedRegionsOfBottom.Dispose();

                                return;
                            }
                            else
                            {
                                GetRowAndColOfLeftAndRightLine(ho_SortedRegionsOfBottom, hv_heightOfBottom,
                                    out hv_RowOfBottomL, out hv_ColOfBottomL, out hv_RowOfBottomR,
                                    out hv_ColOfBottomR);
                            }
                        }
                    }
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(2))) != 0)
                {
                    ho_BlackT.Dispose();
                    HOperatorSet.SelectObj(ho_SelectedRegions, out ho_BlackT, 1);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ShapeTrans(ho_BlackT, out ExpTmpOutVar_0, "convex");
                        ho_BlackT.Dispose();
                        ho_BlackT = ExpTmpOutVar_0;
                    }
                    ho_BlackB.Dispose();
                    HOperatorSet.SelectObj(ho_SelectedRegions, out ho_BlackB, 2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ShapeTrans(ho_BlackB, out ExpTmpOutVar_0, "convex");
                        ho_BlackB.Dispose();
                        ho_BlackB = ExpTmpOutVar_0;
                    }
                    //2020.05.13-上下半片左右边界输出，用于消除左右边界找到皮带或是电池片内部
                    //上半片左右区域
                    ho_RegionBorderOfTop.Dispose();
                    HOperatorSet.Boundary(ho_BlackT, out ho_RegionBorderOfTop, "outer");
                    ho_RegionOpeningOfTop.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionBorderOfTop, out ho_RegionOpeningOfTop,
                        1, hv_Height * 0.005);
                    ho_ConnectedRegionsOfTop.Dispose();
                    HOperatorSet.Connection(ho_RegionOpeningOfTop, out ho_ConnectedRegionsOfTop
                        );
                    ho_SortedRegionsOfTop.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegionsOfTop, out ho_SortedRegionsOfTop,
                        "upper_left", "true", "column");
                    HOperatorSet.RegionFeatures(ho_SortedRegionsOfTop, "height", out hv_heightOfTop);
                    HOperatorSet.CountObj(ho_SortedRegionsOfTop, out hv_Number1);
                    if ((int)(new HTuple(hv_Number1.TupleLess(2))) != 0)
                    {
                        ho_ImageResult.Dispose();
                        ho_Region.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_RegionClosing.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_RegionFillUp.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions.Dispose();
                        ho_RegionBorderOfTop.Dispose();
                        ho_RegionOpeningOfTop.Dispose();
                        ho_ConnectedRegionsOfTop.Dispose();
                        ho_SortedRegionsOfTop.Dispose();
                        ho_RegionBorderOfBottom.Dispose();
                        ho_RegionOpeningOfBottom.Dispose();
                        ho_ConnectedRegionsOfBottom.Dispose();
                        ho_SortedRegionsOfBottom.Dispose();

                        return;
                    }
                    else
                    {
                        GetRowAndColOfLeftAndRightLine(ho_SortedRegionsOfTop, hv_heightOfTop, out hv_RowOfTopL,
                            out hv_ColOfTopL, out hv_RowOfTopR, out hv_ColOfTopR);
                        //select_obj (SortedRegionsOfTop, ObjectSelectedOfTopL, 1)
                        //area_center (ObjectSelectedOfTopL, AreaOfTopL, RowOfTopL, ColOfTopL)
                        //select_obj (SortedRegionsOfTop, ObjectSelectedOfTopR, 2)
                        //area_center (ObjectSelectedOfTopR, AreaOfTopR, RowOfTopR, ColOfTopR)
                    }

                    //下半片左右区域
                    ho_RegionBorderOfBottom.Dispose();
                    HOperatorSet.Boundary(ho_BlackB, out ho_RegionBorderOfBottom, "outer");
                    ho_RegionOpeningOfBottom.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionBorderOfBottom, out ho_RegionOpeningOfBottom,
                        1, hv_Height * 0.005);
                    ho_ConnectedRegionsOfBottom.Dispose();
                    HOperatorSet.Connection(ho_RegionOpeningOfBottom, out ho_ConnectedRegionsOfBottom
                        );
                    ho_SortedRegionsOfBottom.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegionsOfBottom, out ho_SortedRegionsOfBottom,
                        "upper_left", "true", "column");
                    HOperatorSet.RegionFeatures(ho_SortedRegionsOfBottom, "height", out hv_heightOfBottom);
                    HOperatorSet.CountObj(ho_SortedRegionsOfBottom, out hv_Number2);
                    if ((int)(new HTuple(hv_Number2.TupleLess(2))) != 0)
                    {
                        ho_ImageResult.Dispose();
                        ho_Region.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_RegionClosing.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_RegionFillUp.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions.Dispose();
                        ho_RegionBorderOfTop.Dispose();
                        ho_RegionOpeningOfTop.Dispose();
                        ho_ConnectedRegionsOfTop.Dispose();
                        ho_SortedRegionsOfTop.Dispose();
                        ho_RegionBorderOfBottom.Dispose();
                        ho_RegionOpeningOfBottom.Dispose();
                        ho_ConnectedRegionsOfBottom.Dispose();
                        ho_SortedRegionsOfBottom.Dispose();

                        return;
                    }
                    else
                    {
                        GetRowAndColOfLeftAndRightLine(ho_SortedRegionsOfBottom, hv_heightOfBottom,
                            out hv_RowOfBottomL, out hv_ColOfBottomL, out hv_RowOfBottomR, out hv_ColOfBottomR);
                    }
                }
                ho_ImageResult.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionFillUp.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionBorderOfTop.Dispose();
                ho_RegionOpeningOfTop.Dispose();
                ho_ConnectedRegionsOfTop.Dispose();
                ho_SortedRegionsOfTop.Dispose();
                ho_RegionBorderOfBottom.Dispose();
                ho_RegionOpeningOfBottom.Dispose();
                ho_ConnectedRegionsOfBottom.Dispose();
                ho_SortedRegionsOfBottom.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ImageResult.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionFillUp.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionBorderOfTop.Dispose();
                ho_RegionOpeningOfTop.Dispose();
                ho_ConnectedRegionsOfTop.Dispose();
                ho_SortedRegionsOfTop.Dispose();
                ho_RegionBorderOfBottom.Dispose();
                ho_RegionOpeningOfBottom.Dispose();
                ho_ConnectedRegionsOfBottom.Dispose();
                ho_SortedRegionsOfBottom.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SobelImage(HObject ho_Image, out HObject ho_EdgeAmplitude, out HObject ho_ClosedEdges,
            HTuple hv_OpenHeight, HTuple hv_OpenWidth, HTuple hv_Direct, HTuple hv_Threshold,
            HTuple hv_Width, HTuple hv_Height, HTuple hv_XTBDistance, HTuple hv_XBTDistance,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_Region)
        {




            // Local iconic variables 

            HObject ho_Rectangle = null, ho_ImageT = null;
            HObject ho_ImageB = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
            HOperatorSet.GenEmptyObj(out ho_ClosedEdges);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ImageT);
            HOperatorSet.GenEmptyObj(out ho_ImageB);
            try
            {
                if ((int)(new HTuple(hv_Direct.TupleEqual("x"))) != 0)
                {
                    if ((int)(hv_isTopWaferExist.TupleAnd(new HTuple(hv_Region.TupleEqual("T")))) != 0)
                    {
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle, 0, 0, hv_XTBDistance + 10, hv_Width);
                        ho_ImageT.Dispose();
                        HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageT);
                        ho_EdgeAmplitude.Dispose(); ho_ClosedEdges.Dispose();
                        SolelImageEdge(ho_ImageT, out ho_EdgeAmplitude, out ho_ClosedEdges, hv_OpenHeight,
                            hv_OpenWidth, hv_Direct, hv_Threshold);
                    }
                    else
                    {
                        ho_Rectangle.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle, hv_XBTDistance - 10, 0, hv_Height,
                            hv_Width);
                        ho_ImageB.Dispose();
                        HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageB);
                        ho_EdgeAmplitude.Dispose(); ho_ClosedEdges.Dispose();
                        SolelImageEdge(ho_ImageB, out ho_EdgeAmplitude, out ho_ClosedEdges, hv_OpenHeight,
                            hv_OpenWidth, hv_Direct, hv_Threshold);
                    }
                }
                else
                {
                    ho_EdgeAmplitude.Dispose(); ho_ClosedEdges.Dispose();
                    SolelImageEdge(ho_Image, out ho_EdgeAmplitude, out ho_ClosedEdges, hv_OpenHeight,
                        hv_OpenWidth, hv_Direct, hv_Threshold);
                }
                //
                ho_Rectangle.Dispose();
                ho_ImageT.Dispose();
                ho_ImageB.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Rectangle.Dispose();
                ho_ImageT.Dispose();
                ho_ImageB.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void EdgeLocateChip(HObject ho_Image1, HObject ho_Image3, out HObject ho_TopRegion,
            out HObject ho_BottomRegion, HTuple hv_Width, HTuple hv_Height, HTuple hv_OpenHeight,
            HTuple hv_windowHandle, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            out HTuple hv_isFoundTopEdgeRegionOut, out HTuple hv_isFoundBottomEdgeRegionOut,
            out HTuple hv_RowOfLeftTopColorCornerPointRegionOut, out HTuple hv_ColOfLeftTopColorCornerPointRegionOut,
            out HTuple hv_RowOfRightTopColorCornerPointRegionOut, out HTuple hv_ColOfRightTopColorCornerPointRegionOut,
            out HTuple hv_RowOfLeftBottomColorCornerPointRegionOut, out HTuple hv_ColOfLeftBottomColorCornerPointRegionOut,
            out HTuple hv_RowOfRightBottomColorCornerPointRegionOut, out HTuple hv_ColOfRightBottomColorCornerPointRegionOut)
        {




            // Local iconic variables 

            HObject ho_EmptyObject, ho_BlackT, ho_BlackB;
            HObject ho_Rectangle1 = null, ho_Rectangle2 = null, ho_Rectangle3 = null;
            HObject ho_Rectangle4 = null, ho_Rectangle5 = null, ho_Rectangle6 = null;
            HObject ho_ImageReduced1, ho_EdgeAmplitudeTB1, ho_ImageReduced2;
            HObject ho_ImageReduced3, ho_ImageReduced4, ho_ImageReduced5;
            HObject ho_ImageReduced6, ho_EdgeAmplitudeTLR = null, ho_EdgeAmplitudeBLR = null;

            // Local control variables 

            HTuple hv_XTBDistance = null, hv_XBTDistance = null;
            HTuple hv_LineTB = null, hv_LineBT = null, hv_isEmpty = null;
            HTuple hv_ColOfTopL = null, hv_ColOfTopR = null, hv_ColOfBottomL = null;
            HTuple hv_ColOfBottomR = null, hv_widthOfWaferT = null;
            HTuple hv_widthOfWaferB = null, hv_widthOfWafer = new HTuple();
            HTuple hv_Row6 = new HTuple(), hv_LineTB1 = null, hv_LineBT1 = null;
            HTuple hv_LineTB2 = null, hv_LineBT2 = null, hv_LineTB3 = null;
            HTuple hv_LineBT3 = null, hv_LineTB4 = null, hv_LineBT4 = null;
            HTuple hv_LineTB5 = null, hv_LineBT5 = null, hv_LineTB6 = null;
            HTuple hv_LineBT6 = null, hv_TBLength = null, hv_BTLength = null;
            HTuple hv_EdgeLineTL = new HTuple(), hv_EdgeLineTR = new HTuple();
            HTuple hv_EdgeLineBL = new HTuple(), hv_EdgeLineBR = new HTuple();
            HTuple hv_LineTL = new HTuple(), hv_LineTR = new HTuple();
            HTuple hv_LineBL = new HTuple(), hv_LineBR = new HTuple();
            HTuple hv_isTopColorRegionOut = new HTuple(), hv_isBottomColorRegionOut = new HTuple();
            HTuple hv_LineTT = new HTuple(), hv_LineBB = new HTuple();
            HTuple hv_RowsT = new HTuple(), hv_ColsT = new HTuple();
            HTuple hv_TLRow = new HTuple(), hv_TLCol = new HTuple();
            HTuple hv_TRRow = new HTuple(), hv_TRCol = new HTuple();
            HTuple hv_RowsB = new HTuple(), hv_ColsB = new HTuple();
            HTuple hv_BLRow = new HTuple(), hv_BLCol = new HTuple();
            HTuple hv_BRRow = new HTuple(), hv_BRCol = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_EmptyObject);
            HOperatorSet.GenEmptyObj(out ho_BlackT);
            HOperatorSet.GenEmptyObj(out ho_BlackB);
            HOperatorSet.GenEmptyObj(out ho_Rectangle1);
            HOperatorSet.GenEmptyObj(out ho_Rectangle2);
            HOperatorSet.GenEmptyObj(out ho_Rectangle3);
            HOperatorSet.GenEmptyObj(out ho_Rectangle4);
            HOperatorSet.GenEmptyObj(out ho_Rectangle5);
            HOperatorSet.GenEmptyObj(out ho_Rectangle6);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitudeTB1);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced3);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced4);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced5);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced6);
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitudeTLR);
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitudeBLR);
            try
            {
                //2020.04.13
                hv_XTBDistance = 0;
                hv_XBTDistance = 0;
                ho_EmptyObject.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_EmptyObject);
                ho_TopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegion);
                ho_BottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegion);
                HOperatorSet.TupleGenConst(0, 0, out hv_LineTB);
                HOperatorSet.TupleGenConst(0, 0, out hv_LineBT);

                hv_isFoundTopEdgeRegionOut = 1;
                hv_isFoundBottomEdgeRegionOut = 1;

                //2020.05.09-初始化输出参数
                hv_RowOfLeftTopColorCornerPointRegionOut = -1;
                hv_ColOfLeftTopColorCornerPointRegionOut = -1;
                hv_RowOfRightTopColorCornerPointRegionOut = -1;
                hv_ColOfRightTopColorCornerPointRegionOut = -1;
                hv_RowOfLeftBottomColorCornerPointRegionOut = -1;
                hv_ColOfLeftBottomColorCornerPointRegionOut = -1;
                hv_RowOfRightBottomColorCornerPointRegionOut = -1;
                hv_ColOfRightBottomColorCornerPointRegionOut = -1;

                //
                ho_BlackT.Dispose(); ho_BlackB.Dispose();
                SplitBlackRegion(ho_Image1, out ho_BlackT, out ho_BlackB, hv_Width, hv_Height,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_OpenHeight, out hv_isEmpty,
                    out hv_ColOfTopL, out hv_ColOfTopR, out hv_ColOfBottomL, out hv_ColOfBottomR);
                //2020.04.21-横向分多次寻找 大片11 小片7
                //GetEdge (Image1, EdgeAmplitudeTB, 11, 1, 40, 'y', 0, 0, isTopWaferExist, isBottomWaferExist, 'TB', Height1, Num, windowHandle1, ColOfTopL1, ColOfTopR1, ColOfBottomL1, ColOfBottomR1, widthOfOneToSixWafer, LineTB, LineBT)
                //2020.05.14-电池片依据左右边缘分6分
                hv_widthOfWaferT = hv_ColOfTopR - hv_ColOfTopL;
                hv_widthOfWaferB = hv_ColOfBottomR - hv_ColOfBottomL;
                //2020.05.21-存在上下片只有一片的情况
                //* if (widthOfWaferT>Width/2 and widthOfWaferT<Width-200 and widthOfWaferB>Width/2 and widthOfWaferB<Width-200)
                if ((int)((new HTuple((new HTuple(hv_widthOfWaferT.TupleGreater(hv_Width / 2))).TupleAnd(
                    new HTuple(hv_widthOfWaferT.TupleLess(hv_Width - 200))))).TupleOr((new HTuple(hv_widthOfWaferB.TupleGreater(
                    hv_Width / 2))).TupleAnd(new HTuple(hv_widthOfWaferB.TupleLess(hv_Width - 200))))) != 0)
                {
                    if ((int)(new HTuple(hv_widthOfWaferB.TupleGreater(hv_widthOfWaferT))) != 0)
                    {
                        hv_widthOfWafer = hv_widthOfWaferB.Clone();
                    }
                    else
                    {
                        hv_widthOfWafer = hv_widthOfWaferT.Clone();
                    }
                }
                else
                {
                    hv_widthOfWafer = hv_Width.Clone();
                }
                if ((int)((new HTuple(hv_ColOfTopL.TupleGreater(0))).TupleOr(new HTuple(hv_ColOfBottomL.TupleGreater(
                    0)))) != 0)
                {
                    if ((int)(new HTuple(hv_ColOfTopL.TupleGreater(hv_ColOfBottomL))) != 0)
                    {
                        ho_Rectangle1.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle1, 0, hv_ColOfTopL - 10, hv_Height - 1,
                            hv_ColOfTopL + (hv_widthOfWafer / 6));
                    }
                    else
                    {
                        ho_Rectangle1.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle1, 0, hv_ColOfBottomL - 10, hv_Height - 1,
                            hv_ColOfBottomL + (hv_widthOfWafer / 6));
                    }
                }
                else
                {
                    ho_Rectangle1.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle1, 0, (hv_widthOfWafer / 12) - 10,
                        hv_Height - 1, hv_widthOfWafer / 6);
                }

                if ((int)(new HTuple(hv_ColOfTopL.TupleGreater(hv_ColOfBottomL))) != 0)
                {
                    ho_Rectangle2.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle2, 0, hv_ColOfTopL + (hv_widthOfWafer / 6),
                        hv_Height - 1, hv_ColOfTopL + ((2 * hv_widthOfWafer) / 6));
                    ho_Rectangle3.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle3, 0, hv_ColOfTopL + ((2 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfTopL + ((3 * hv_widthOfWafer) / 6));
                    ho_Rectangle4.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle4, 0, hv_ColOfTopL + ((3 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfTopL + ((4 * hv_widthOfWafer) / 6));
                    ho_Rectangle5.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle5, 0, hv_ColOfTopL + ((4 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfTopL + ((5 * hv_widthOfWafer) / 6));
                    hv_Row6 = hv_ColOfTopL + ((5 * hv_widthOfWafer) / 6);
                }
                else
                {
                    ho_Rectangle2.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle2, 0, hv_ColOfBottomL + (hv_widthOfWafer / 6),
                        hv_Height - 1, hv_ColOfBottomL + ((2 * hv_widthOfWafer) / 6));
                    ho_Rectangle3.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle3, 0, hv_ColOfBottomL + ((2 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfBottomL + ((3 * hv_widthOfWafer) / 6));
                    ho_Rectangle4.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle4, 0, hv_ColOfBottomL + ((3 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfBottomL + ((4 * hv_widthOfWafer) / 6));
                    ho_Rectangle5.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle5, 0, hv_ColOfBottomL + ((4 * hv_widthOfWafer) / 6),
                        hv_Height - 1, hv_ColOfBottomL + ((5 * hv_widthOfWafer) / 6));
                    hv_Row6 = hv_ColOfBottomL + ((5 * hv_widthOfWafer) / 6);
                }

                if ((int)((new HTuple((new HTuple(hv_ColOfTopR.TupleGreater(0))).TupleOr(new HTuple(hv_ColOfBottomR.TupleGreater(
                    0))))).TupleAnd((new HTuple(hv_Row6.TupleLess(hv_ColOfTopR))).TupleOr(new HTuple(hv_Row6.TupleLess(
                    hv_ColOfBottomR))))) != 0)
                {
                    if ((int)(new HTuple(hv_ColOfTopR.TupleGreater(hv_ColOfBottomR))) != 0)
                    {
                        ho_Rectangle6.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle6, 0, hv_Row6, hv_Height - 1,
                            hv_ColOfTopR + 10);
                    }
                    else
                    {
                        ho_Rectangle6.Dispose();
                        HOperatorSet.GenRectangle1(out ho_Rectangle6, 0, hv_Row6, hv_Height - 1,
                            hv_ColOfBottomR + 10);
                    }
                }
                else
                {
                    ho_Rectangle6.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle6, 0, hv_Row6, hv_Height - 1, ((11 * hv_widthOfWafer) / 12) + 10);
                }
                //gen_rectangle1 (Rectangle1, 0, Width/12, Height-1, Width/6)
                ho_ImageReduced1.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle1, out ho_ImageReduced1);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced1, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "1",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB1, out hv_LineBT1);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB1, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT1, out hv_LineBT);
                //
                //gen_rectangle1 (Rectangle2, 0, Width/6, Height-1, 2*Width/6)
                ho_ImageReduced2.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle2, out ho_ImageReduced2);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced2, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "2",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB2, out hv_LineBT2);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB2, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT2, out hv_LineBT);
                //
                //gen_rectangle1 (Rectangle3, 0, 2*Width/6, Height-1, 3*Width/6)
                ho_ImageReduced3.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle3, out ho_ImageReduced3);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced3, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "3",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB3, out hv_LineBT3);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB3, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT3, out hv_LineBT);
                //
                //gen_rectangle1 (Rectangle4, 0, 3*Width/6, Height-1, 4*Width/6)
                ho_ImageReduced4.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle4, out ho_ImageReduced4);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced4, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "4",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB4, out hv_LineBT4);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB4, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT4, out hv_LineBT);
                //
                //gen_rectangle1 (Rectangle5, 0, 4*Width/6, Height-1, 5*Width/6)
                ho_ImageReduced5.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle5, out ho_ImageReduced5);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced5, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "5",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB5, out hv_LineBT5);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB5, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT5, out hv_LineBT);

                //gen_rectangle1 (Rectangle6, 0, 5*Width/6, Height-1, 11*Width/12)
                ho_ImageReduced6.Dispose();
                HOperatorSet.ReduceDomain(ho_Image1, ho_Rectangle6, out ho_ImageReduced6);
                ho_EdgeAmplitudeTB1.Dispose();
                GetEdge(ho_ImageReduced6, out ho_EdgeAmplitudeTB1, hv_OpenHeight, 1, 40, "y",
                    0, 0, hv_isTopWaferExist, hv_isBottomWaferExist, "TB", hv_Height, "6",
                    hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                    hv_widthOfWafer / 6, out hv_LineTB6, out hv_LineBT6);
                HOperatorSet.TupleConcat(hv_LineTB, hv_LineTB6, out hv_LineTB);
                HOperatorSet.TupleConcat(hv_LineBT, hv_LineBT6, out hv_LineBT);
                //
                HOperatorSet.TupleLength(hv_LineTB, out hv_TBLength);
                HOperatorSet.TupleLength(hv_LineBT, out hv_BTLength);
                //2020.04.22-分6次查找，至少找到3次才算合格
                if ((int)((new HTuple(hv_TBLength.TupleGreaterEqual(12))).TupleOr(new HTuple(hv_BTLength.TupleGreaterEqual(
                    12)))) != 0)
                {
                    //2020.04.11-添加TB到X轴的距离BT到X的距离
                    if ((int)(new HTuple((new HTuple(hv_LineTB.TupleLength())).TupleGreater(0))) != 0)
                    {
                        HOperatorSet.DistancePl(0, 0, hv_LineTB.TupleSelect(0), hv_LineTB.TupleSelect(
                            1), hv_LineTB.TupleSelect(hv_TBLength - 2), hv_LineTB.TupleSelect(hv_TBLength - 1),
                            out hv_XTBDistance);
                    }
                    if ((int)(new HTuple((new HTuple(hv_LineBT.TupleLength())).TupleGreater(0))) != 0)
                    {
                        HOperatorSet.DistancePl(0, 0, hv_LineBT.TupleSelect(0), hv_LineBT.TupleSelect(
                            1), hv_LineBT.TupleSelect(hv_BTLength - 2), hv_LineBT.TupleSelect(hv_BTLength - 1),
                            out hv_XBTDistance);
                        //disp_line (200000, LineBT[0], LineBT[1], LineBT[BTLength-2], LineBT[BTLength-1])
                    }
                    //
                    //2020.04.11 灰度值20改为30
                    ho_EdgeAmplitudeTLR.Dispose();
                    GetEdge(ho_Image1, out ho_EdgeAmplitudeTLR, 1, 41, 30, "x", hv_XTBDistance,
                        hv_XBTDistance, hv_isTopWaferExist, hv_isBottomWaferExist, "T", hv_Height,
                        0, hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                        hv_widthOfWafer / 6, out hv_EdgeLineTL, out hv_EdgeLineTR);
                    ho_EdgeAmplitudeBLR.Dispose();
                    GetEdge(ho_Image1, out ho_EdgeAmplitudeBLR, 1, 41, 30, "x", hv_XTBDistance,
                        hv_XBTDistance, hv_isTopWaferExist, hv_isBottomWaferExist, "B", hv_Height,
                        0, hv_windowHandle, hv_ColOfTopL, hv_ColOfTopR, hv_ColOfBottomL, hv_ColOfBottomR,
                        hv_widthOfWafer / 6, out hv_EdgeLineBL, out hv_EdgeLineBR);
                    //
                    //2020.04.22-黄边为找到左右边界
                    PreventYellowAndBelt(hv_EdgeLineTL, hv_EdgeLineTR, hv_EdgeLineBL, hv_EdgeLineBR,
                        hv_isTopWaferExist, hv_isBottomWaferExist, out hv_LineTL, out hv_LineTR,
                        out hv_LineBL, out hv_LineBR, out hv_isTopColorRegionOut, out hv_isBottomColorRegionOut);
                    //
                    //
                    //*未找到边缘
                    //if (LineTB==[] and LineBT==[] and LineTL==[] and LineTR==[] and LineBL==[] and LineBR==[])
                    //test_equal_obj (BlackT, EmptyObject, IsEqual)
                    //if (IsEqual==false)
                    //TopRegion := BlackT
                    //endif
                    //test_equal_obj (BlackB, EmptyObject, IsEqual1)
                    //if (IsEqual1==false)
                    //BottomRegion := BlackB
                    //endif
                    //isUsingChinese := 1
                    //if (isEmpty)
                    //if (isUsingChinese)
                    //exceptionInfo := '空平台'
                    //else
                    //exceptionInfo := 'Empty Platform'
                    //endif
                    //disp_message_UserDefine (windowHandle, exceptionInfo, 100, 12, 'red')
                    //else
                    //if (isUsingChinese)
                    //exceptionInfo := '未能够分开上下区域'
                    //else
                    //exceptionInfo := 'Unable to separate Top and Bottom Region'
                    //endif
                    //disp_message_UserDefine (20000, exceptionInfo, 100, 12, 'red')
                    //endif
                    //return ()
                    //endif
                    //
                    hv_LineTT = new HTuple();
                    hv_LineTT[0] = 0;
                    hv_LineTT[1] = 0;
                    hv_LineTT[2] = 0;
                    hv_LineTT = hv_LineTT.TupleConcat(hv_Width - 1);
                    hv_LineBB = new HTuple();
                    hv_LineBB = hv_LineBB.TupleConcat(hv_Height - 1);
                    hv_LineBB = hv_LineBB.TupleConcat(0);
                    hv_LineBB = hv_LineBB.TupleConcat(hv_Height - 1);
                    hv_LineBB = hv_LineBB.TupleConcat(hv_Width - 1);
                    //
                    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
                    //2020.04.23-为了区分是否使用二值化找区域
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        //2020.04.13 计算上方区域四条边交点
                        if ((int)((new HTuple((new HTuple(hv_LineTB.TupleEqual(new HTuple()))).TupleOr(
                            new HTuple(hv_LineTL.TupleEqual(new HTuple()))))).TupleOr(new HTuple(hv_LineTR.TupleEqual(
                            new HTuple())))) != 0)
                        {
                            hv_isFoundTopEdgeRegionOut = 0;
                        }
                        else
                        {
                            //disp_line (windowHandle, LineTT[0], LineTT[1], LineTT[2], LineTT[3])
                            //disp_line (windowHandle, LineTB[0], LineTB[1], LineTB[TBLength-2], LineTB[TBLength-1])
                            //disp_line (windowHandle, LineTL[0], LineTL[1], LineTL[2], LineTL[3])
                            //disp_line (windowHandle, LineTR[0], LineTR[1], LineTR[2], LineTR[3])
                            GetLineCross(hv_LineTT, hv_LineTB, hv_LineTL, hv_LineTR, hv_TBLength,
                                "T", out hv_RowsT, out hv_ColsT, out hv_TLRow, out hv_TLCol, out hv_RowOfLeftTopColorCornerPointRegionOut,
                                out hv_ColOfLeftTopColorCornerPointRegionOut, out hv_RowOfRightTopColorCornerPointRegionOut,
                                out hv_ColOfRightTopColorCornerPointRegionOut, out hv_TRRow, out hv_TRCol);
                            //GetCross (LineTT, LineTB, LineTL, LineTR, TBLength, 'T', RowsT, ColsT)
                            ho_TopRegion.Dispose();
                            HOperatorSet.GenRegionPolygonFilled(out ho_TopRegion, hv_RowsT, hv_ColsT);
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispObj(ho_TopRegion, hv_ExpDefaultWinHandle);
                        }
                    }
                    if ((int)(hv_isBottomWaferExist) != 0)
                    {
                        //2020.04.13 计算下方区域四条边交点
                        if ((int)((new HTuple((new HTuple(hv_LineBT.TupleEqual(new HTuple()))).TupleOr(
                            new HTuple(hv_LineBL.TupleEqual(new HTuple()))))).TupleOr(new HTuple(hv_LineBR.TupleEqual(
                            new HTuple())))) != 0)
                        {
                            hv_isFoundBottomEdgeRegionOut = 0;
                        }
                        else
                        {
                            //disp_line (windowHandle, LineBT[0], LineBT[1], LineBT[BTLength-2], LineBT[BTLength-1])
                            //disp_line (windowHandle, LineBB[0], LineBB[1], LineBB[2], LineBB[3])
                            //disp_line (windowHandle, LineBL[0], LineBL[1], LineBL[2], LineBL[3])
                            //disp_line (windowHandle, LineBR[0], LineBR[1], LineBR[2], LineBR[3])
                            GetLineCross(hv_LineBT, hv_LineBB, hv_LineBL, hv_LineBR, hv_BTLength,
                                "B", out hv_RowsB, out hv_ColsB, out hv_RowOfLeftBottomColorCornerPointRegionOut,
                                out hv_ColOfLeftBottomColorCornerPointRegionOut, out hv_BLRow, out hv_BLCol,
                                out hv_BRRow, out hv_BRCol, out hv_RowOfRightBottomColorCornerPointRegionOut,
                                out hv_ColOfRightBottomColorCornerPointRegionOut);
                            //GetCross (LineBT, LineBB, LineBL, LineBR, BTLength, 'B', RowsB, ColsB)
                            ho_BottomRegion.Dispose();
                            HOperatorSet.GenRegionPolygonFilled(out ho_BottomRegion, hv_RowsB, hv_ColsB);
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispObj(ho_BottomRegion, hv_ExpDefaultWinHandle);
                        }
                    }
                }
                else
                {
                    hv_isFoundTopEdgeRegionOut = 0;
                    hv_isFoundBottomEdgeRegionOut = 0;
                }

                ho_EmptyObject.Dispose();
                ho_BlackT.Dispose();
                ho_BlackB.Dispose();
                ho_Rectangle1.Dispose();
                ho_Rectangle2.Dispose();
                ho_Rectangle3.Dispose();
                ho_Rectangle4.Dispose();
                ho_Rectangle5.Dispose();
                ho_Rectangle6.Dispose();
                ho_ImageReduced1.Dispose();
                ho_EdgeAmplitudeTB1.Dispose();
                ho_ImageReduced2.Dispose();
                ho_ImageReduced3.Dispose();
                ho_ImageReduced4.Dispose();
                ho_ImageReduced5.Dispose();
                ho_ImageReduced6.Dispose();
                ho_EdgeAmplitudeTLR.Dispose();
                ho_EdgeAmplitudeBLR.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_EmptyObject.Dispose();
                ho_BlackT.Dispose();
                ho_BlackB.Dispose();
                ho_Rectangle1.Dispose();
                ho_Rectangle2.Dispose();
                ho_Rectangle3.Dispose();
                ho_Rectangle4.Dispose();
                ho_Rectangle5.Dispose();
                ho_Rectangle6.Dispose();
                ho_ImageReduced1.Dispose();
                ho_EdgeAmplitudeTB1.Dispose();
                ho_ImageReduced2.Dispose();
                ho_ImageReduced3.Dispose();
                ho_ImageReduced4.Dispose();
                ho_ImageReduced5.Dispose();
                ho_ImageReduced6.Dispose();
                ho_EdgeAmplitudeTLR.Dispose();
                ho_EdgeAmplitudeBLR.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void Skeleton2Line(HObject ho_Skeleton, out HTuple hv_RowBegin, out HTuple hv_ColBegin,
            out HTuple hv_RowEnd, out HTuple hv_ColEnd)
        {



            // Local iconic variables 

            HObject ho_Contours, ho_ContoursSplit, ho_SelectedContours;

            // Local control variables 

            HTuple hv_Length = null, hv_Max = null, hv_Indices = null;
            HTuple hv_Nr = null, hv_Nc = null, hv_Dist = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
            HOperatorSet.GenEmptyObj(out ho_SelectedContours);
            try
            {
                //
                ho_Contours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_Skeleton, out ho_Contours, "center");
                ho_ContoursSplit.Dispose();
                HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines",
                    5, 4, 2);
                HOperatorSet.LengthXld(ho_ContoursSplit, out hv_Length);
                HOperatorSet.TupleMax(hv_Length, out hv_Max);
                HOperatorSet.TupleFindFirst(hv_Length, hv_Max, out hv_Indices);
                ho_SelectedContours.Dispose();
                HOperatorSet.SelectObj(ho_ContoursSplit, out ho_SelectedContours, hv_Indices + 1);
                HOperatorSet.FitLineContourXld(ho_SelectedContours, "tukey", -1, 0, 5, 2, out hv_RowBegin,
                    out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);
                //
                //
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_SelectedContours.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetCross(HTuple hv_LineT, HTuple hv_LineB, HTuple hv_LineL, HTuple hv_LineR,
            HTuple hv_Length, HTuple hv_Direct, out HTuple hv_Rows, out HTuple hv_Cols)
        {



            // Local iconic variables 

            // Local control variables 

            HTuple hv_RowLU = new HTuple(), hv_ColumnLU = new HTuple();
            HTuple hv_IsOverlapping = new HTuple(), hv_RowRU = new HTuple();
            HTuple hv_ColumnRU = new HTuple(), hv_RowLD = new HTuple();
            HTuple hv_ColumnLD = new HTuple(), hv_RowRD = new HTuple();
            HTuple hv_ColumnRD = new HTuple();
            // Initialize local and output iconic variables 
            //2020.04.21-分段选取
            if ((int)(new HTuple(hv_Direct.TupleEqual("T"))) != 0)
            {
                HOperatorSet.IntersectionLines(hv_LineT.TupleSelect(0), hv_LineT.TupleSelect(
                    1), hv_LineT.TupleSelect(2), hv_LineT.TupleSelect(3), hv_LineL.TupleSelect(
                    0), hv_LineL.TupleSelect(1), hv_LineL.TupleSelect(2), hv_LineL.TupleSelect(
                    3), out hv_RowLU, out hv_ColumnLU, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineT.TupleSelect(0), hv_LineT.TupleSelect(
                    1), hv_LineT.TupleSelect(2), hv_LineT.TupleSelect(3), hv_LineR.TupleSelect(
                    0), hv_LineR.TupleSelect(1), hv_LineR.TupleSelect(2), hv_LineR.TupleSelect(
                    3), out hv_RowRU, out hv_ColumnRU, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineB.TupleSelect(0), hv_LineB.TupleSelect(
                    1), hv_LineB.TupleSelect(hv_Length - 2), hv_LineB.TupleSelect(hv_Length - 1),
                    hv_LineL.TupleSelect(0), hv_LineL.TupleSelect(1), hv_LineL.TupleSelect(
                    2), hv_LineL.TupleSelect(3), out hv_RowLD, out hv_ColumnLD, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineB.TupleSelect(0), hv_LineB.TupleSelect(
                    1), hv_LineB.TupleSelect(hv_Length - 2), hv_LineB.TupleSelect(hv_Length - 1),
                    hv_LineR.TupleSelect(0), hv_LineR.TupleSelect(1), hv_LineR.TupleSelect(
                    2), hv_LineR.TupleSelect(3), out hv_RowRD, out hv_ColumnRD, out hv_IsOverlapping);
            }
            if ((int)(new HTuple(hv_Direct.TupleEqual("B"))) != 0)
            {
                HOperatorSet.IntersectionLines(hv_LineT.TupleSelect(0), hv_LineT.TupleSelect(
                    1), hv_LineT.TupleSelect(hv_Length - 2), hv_LineT.TupleSelect(hv_Length - 1),
                    hv_LineL.TupleSelect(0), hv_LineL.TupleSelect(1), hv_LineL.TupleSelect(
                    2), hv_LineL.TupleSelect(3), out hv_RowLU, out hv_ColumnLU, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineT.TupleSelect(0), hv_LineT.TupleSelect(
                    1), hv_LineT.TupleSelect(hv_Length - 2), hv_LineT.TupleSelect(hv_Length - 1),
                    hv_LineR.TupleSelect(0), hv_LineR.TupleSelect(1), hv_LineR.TupleSelect(
                    2), hv_LineR.TupleSelect(3), out hv_RowRU, out hv_ColumnRU, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineB.TupleSelect(0), hv_LineB.TupleSelect(
                    1), hv_LineB.TupleSelect(2), hv_LineB.TupleSelect(3), hv_LineL.TupleSelect(
                    0), hv_LineL.TupleSelect(1), hv_LineL.TupleSelect(2), hv_LineL.TupleSelect(
                    3), out hv_RowLD, out hv_ColumnLD, out hv_IsOverlapping);
                HOperatorSet.IntersectionLines(hv_LineB.TupleSelect(0), hv_LineB.TupleSelect(
                    1), hv_LineB.TupleSelect(2), hv_LineB.TupleSelect(3), hv_LineR.TupleSelect(
                    0), hv_LineR.TupleSelect(1), hv_LineR.TupleSelect(2), hv_LineR.TupleSelect(
                    3), out hv_RowRD, out hv_ColumnRD, out hv_IsOverlapping);
                //
            }
            hv_Rows = new HTuple();
            hv_Rows = hv_Rows.TupleConcat(hv_RowLU);
            hv_Rows = hv_Rows.TupleConcat(hv_RowLD);
            hv_Rows = hv_Rows.TupleConcat(hv_RowRD);
            hv_Rows = hv_Rows.TupleConcat(hv_RowRU);
            hv_Cols = new HTuple();
            hv_Cols = hv_Cols.TupleConcat(hv_ColumnLU);
            hv_Cols = hv_Cols.TupleConcat(hv_ColumnLD);
            hv_Cols = hv_Cols.TupleConcat(hv_ColumnRD);
            hv_Cols = hv_Cols.TupleConcat(hv_ColumnRU);

            return;
        }

        public void SelectFeature(HObject ho_ConnectedRegions, out HObject ho_res, HTuple hv_feature,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_Height, HTuple hv_OpenHeight)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_firstObj = null, ho_secondObj = null;

            // Local control variables 

            HTuple hv_NewRow = null, hv_Area = null, hv_Row = null;
            HTuple hv_Column = null, hv_Indices = null, hv_Length1 = null;
            HTuple hv_ValueSorted = new HTuple(), hv_first1 = new HTuple();
            HTuple hv_second1 = new HTuple(), hv_RowAgv1 = new HTuple();
            HTuple hv_second = new HTuple(), hv_first = new HTuple();
            HTuple hv_Index = new HTuple(), hv_L = new HTuple(), hv_Length = new HTuple();
            HTuple hv_NewValueSorted = new HTuple(), hv_RowAgv = new HTuple();
            HTuple hv_firstIndex = new HTuple(), hv_secondIndex = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_res);
            HOperatorSet.GenEmptyObj(out ho_firstObj);
            HOperatorSet.GenEmptyObj(out ho_secondObj);
            try
            {
                //选取输入区域中 特征feature按大小排序前两位的区域
                ho_res.Dispose();
                HOperatorSet.GenEmptyObj(out ho_res);
                //2020.04.27-存去除彩条之后的区域
                HOperatorSet.TupleGenConst(0, 0, out hv_NewRow);
                //
                //2020.04.21-求取坐标
                HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
                HOperatorSet.TupleSortIndex(hv_Row, out hv_Indices);
                HOperatorSet.TupleSelect(hv_Row, hv_Indices, out hv_Row);
                HOperatorSet.TupleSelect(hv_Column, hv_Indices, out hv_Column);
                //tuple_concat (Row, 1200, Row)
                //tuple_concat (Column, 1200, Column)
                HOperatorSet.TupleLength(hv_Row, out hv_Length1);
                if ((int)(new HTuple(hv_Length1.TupleLess(1))) != 0)
                {
                    ho_firstObj.Dispose();
                    ho_secondObj.Dispose();

                    return;
                    //2020.04.23-只存在半片
                }
                else if ((int)(new HTuple(hv_Length1.TupleEqual(1))) != 0)
                {
                    if ((int)(hv_isTopWaferExist.TupleAnd(hv_isBottomWaferExist)) != 0)
                    {
                        ho_firstObj.Dispose();
                        ho_secondObj.Dispose();

                        return;
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_res, ho_ConnectedRegions, out ExpTmpOutVar_0);
                            ho_res.Dispose();
                            ho_res = ExpTmpOutVar_0;
                        }
                    }
                }
                else if ((int)(new HTuple(hv_Length1.TupleGreaterEqual(2))) != 0)
                {
                    HOperatorSet.TupleSort(hv_Row, out hv_ValueSorted);
                    hv_first1 = hv_ValueSorted.TupleSelect(0);
                    hv_second1 = hv_ValueSorted.TupleSelect(hv_Length1 - 1);
                    hv_RowAgv1 = (hv_first1 + hv_second1) / 2;
                    //找到上面或下面细栅(数据为坐标)
                    //*     if ((second-first)>Height/4)
                    //防止上半片或下半片破损，只找到一个边缘
                    if ((int)(new HTuple(((hv_second1 - hv_first1)).TupleGreater(hv_OpenHeight))) != 0)
                    {
                        //2020.05.22-*去除彩条上面细栅
                        //2020.04.27-先去除彩条
                        HTuple end_val33 = hv_Length1 - 1;
                        HTuple step_val33 = 1;
                        for (hv_Index = 1; hv_Index.Continue(end_val33, step_val33); hv_Index = hv_Index.TupleAdd(step_val33))
                        {
                            if ((int)(new HTuple(hv_first1.TupleLess(200))) != 0)
                            {
                                //2020.05.06-有至少两条彩带
                                hv_first1 = hv_ValueSorted.TupleSelect(hv_Index);
                            }
                            else if ((int)((new HTuple(((hv_ValueSorted.TupleSelect(
                                hv_Index - 1))).TupleLess(hv_RowAgv1))).TupleAnd(new HTuple(hv_first1.TupleGreater(
                                200)))) != 0)
                            {
                                HOperatorSet.TupleConcat(hv_NewRow, hv_ValueSorted.TupleSelect(hv_Index - 1),
                                    out hv_NewRow);
                            }
                        }
                        HTuple end_val41 = hv_Length1 - 1;
                        HTuple step_val41 = 1;
                        for (hv_Index = 0; hv_Index.Continue(end_val41, step_val41); hv_Index = hv_Index.TupleAdd(step_val41))
                        {
                            hv_L = hv_Height - hv_second1;
                            if ((int)(new HTuple(hv_L.TupleLess(200))) != 0)
                            {
                                //2020.05.06-有至少两条彩带
                                hv_second1 = hv_ValueSorted.TupleSelect((hv_Length1 - 2) - hv_Index);
                            }
                            else if ((int)((new HTuple(hv_L.TupleGreater(200))).TupleAnd(
                                new HTuple(((hv_ValueSorted.TupleSelect((hv_Length1 - 1) - hv_Index))).TupleGreater(
                                hv_RowAgv1)))) != 0)
                            {
                                HOperatorSet.TupleConcat(hv_NewRow, hv_ValueSorted.TupleSelect((hv_Length1 - 1) - hv_Index),
                                    out hv_NewRow);
                            }
                        }

                        HOperatorSet.TupleLength(hv_NewRow, out hv_Length);
                        HOperatorSet.TupleSort(hv_NewRow, out hv_NewValueSorted);

                        hv_first = hv_NewValueSorted.TupleSelect(0);
                        hv_second = hv_NewValueSorted.TupleSelect(hv_Length - 1);
                        hv_RowAgv = (hv_first + hv_second) / 2;
                        //上边缘2020.04.28
                        HTuple end_val58 = hv_Length - 1;
                        HTuple step_val58 = 1;
                        for (hv_Index = 1; hv_Index.Continue(end_val58, step_val58); hv_Index = hv_Index.TupleAdd(step_val58))
                        {
                            if ((int)((new HTuple((new HTuple((new HTuple((((hv_NewValueSorted.TupleSelect(
                                hv_Index)) - hv_first)).TupleLess(2 * hv_OpenHeight))).TupleAnd(new HTuple((((hv_NewValueSorted.TupleSelect(
                                hv_Index)) - hv_first)).TupleGreater(hv_OpenHeight))))).TupleOr(new HTuple((((hv_NewValueSorted.TupleSelect(
                                hv_Index)) - hv_first)).TupleGreater(200))))).TupleAnd(new HTuple(((hv_NewValueSorted.TupleSelect(
                                hv_Index))).TupleLess(hv_RowAgv)))) != 0)
                            {
                                hv_first = hv_NewValueSorted.TupleSelect(hv_Index);
                            }
                            else
                            {
                                break;
                            }
                        }
                        //下面彩条和细栅
                        HTuple end_val66 = hv_Length - 2;
                        HTuple step_val66 = 1;
                        for (hv_Index = 0; hv_Index.Continue(end_val66, step_val66); hv_Index = hv_Index.TupleAdd(step_val66))
                        {
                            if ((int)((new HTuple(hv_second.TupleGreater(2 * (hv_NewValueSorted.TupleSelect(
                                (hv_Length - 2) - hv_Index))))).TupleAnd(new HTuple(((hv_NewValueSorted.TupleSelect(
                                (hv_Length - 2) - hv_Index))).TupleGreater(hv_RowAgv)))) != 0)
                            {
                                hv_second = hv_NewValueSorted.TupleSelect((hv_Length - 2) - hv_Index);
                            }
                            else
                            {
                                break;
                            }
                        }
                        //2020.05.06-上下边缘为同一条，则直接返回
                        if ((int)(new HTuple(hv_first.TupleEqual(hv_second))) != 0)
                        {
                            ho_firstObj.Dispose();
                            ho_secondObj.Dispose();

                            return;
                        }

                    }
                    else
                    {
                        ho_firstObj.Dispose();
                        ho_secondObj.Dispose();

                        return;
                    }
                    HOperatorSet.TupleFindFirst(hv_Row, hv_first, out hv_firstIndex);
                    HOperatorSet.TupleFindFirst(hv_Row, hv_second, out hv_secondIndex);
                    ho_firstObj.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_firstObj, hv_firstIndex + 1);
                    ho_secondObj.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_secondObj, hv_secondIndex + 1);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_res, ho_firstObj, out ExpTmpOutVar_0);
                        ho_res.Dispose();
                        ho_res = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_res, ho_secondObj, out ExpTmpOutVar_0);
                        ho_res.Dispose();
                        ho_res = ExpTmpOutVar_0;
                    }
                    //dev_display (res)
                }
                //
                //region_features (ConnectedRegions, feature, Value)
                //tuple_length (Value, Length)
                //if (Length<1)
                //return ()
                //else
                //tuple_sort (Value, ValueSorted)
                //first := ValueSorted[Length-1]
                //second := ValueSorted[Length-2]
                //tuple_find_first (Value, first, firstIndex)
                //tuple_find_first (Value, second, secondIndex)
                //select_obj (ConnectedRegions, firstObj, firstIndex+1)
                //select_obj (ConnectedRegions, secondObj, secondIndex+1)
                //concat_obj (res, firstObj, res)
                //concat_obj (res, secondObj, res)
                //endif
                //
                ho_firstObj.Dispose();
                ho_secondObj.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_firstObj.Dispose();
                ho_secondObj.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SolelImageEdge(HObject ho_Image, out HObject ho_EdgeAmplitude, out HObject ho_ClosedEdges,
            HTuple hv_OpenHeight, HTuple hv_OpenWidth, HTuple hv_Direct, HTuple hv_Threshold)
        {




            // Local iconic variables 

            HObject ho_ImageOpening, ho_RegionCrossings;
            HObject ho_RegionUnion, ho_ImageAbs;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
            HOperatorSet.GenEmptyObj(out ho_ClosedEdges);
            HOperatorSet.GenEmptyObj(out ho_ImageOpening);
            HOperatorSet.GenEmptyObj(out ho_RegionCrossings);
            HOperatorSet.GenEmptyObj(out ho_RegionUnion);
            HOperatorSet.GenEmptyObj(out ho_ImageAbs);
            try
            {
                //
                ho_ImageOpening.Dispose();
                HOperatorSet.GrayOpeningRect(ho_Image, out ho_ImageOpening, hv_OpenHeight,
                    hv_OpenWidth);
                ho_EdgeAmplitude.Dispose();
                HOperatorSet.SobelAmp(ho_ImageOpening, out ho_EdgeAmplitude, hv_Direct, 7);
                ho_RegionCrossings.Dispose();
                HOperatorSet.DualThreshold(ho_EdgeAmplitude, out ho_RegionCrossings, 20, hv_Threshold + 20,
                    hv_Threshold);
                ho_RegionUnion.Dispose();
                HOperatorSet.Union1(ho_RegionCrossings, out ho_RegionUnion);
                ho_ImageAbs.Dispose();
                HOperatorSet.AbsImage(ho_EdgeAmplitude, out ho_ImageAbs);
                ho_ClosedEdges.Dispose();
                HOperatorSet.CloseEdgesLength(ho_RegionUnion, ho_ImageAbs, out ho_ClosedEdges,
                    hv_Threshold / 2, 127);
                //
                ho_ImageOpening.Dispose();
                ho_RegionCrossings.Dispose();
                ho_RegionUnion.Dispose();
                ho_ImageAbs.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ImageOpening.Dispose();
                ho_RegionCrossings.Dispose();
                ho_RegionUnion.Dispose();
                ho_ImageAbs.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetLineCross(HTuple hv_LineT, HTuple hv_LineB, HTuple hv_LineL, HTuple hv_LineR,
            HTuple hv_Length, HTuple hv_Direct, out HTuple hv_Rows, out HTuple hv_Cols,
            out HTuple hv_TLRow, out HTuple hv_TLCol, out HTuple hv_BLRow, out HTuple hv_BLCol,
            out HTuple hv_BRRow, out HTuple hv_BRCol, out HTuple hv_TRRow, out HTuple hv_TRCol)
        {



            // Local iconic variables 

            HObject ho_TopContour, ho_TopLeftContour, ho_TopRightContour;

            // Local control variables 

            HTuple hv_TRowNum = null, hv_TColNum = null;
            HTuple hv_LRowNum = null, hv_LColNum = null, hv_RRowNum = null;
            HTuple hv_RColNum = null, hv_BRowNum = null, hv_BColNum = null;
            HTuple hv_TLength = null, hv_Index = null, hv_BLength = null;
            HTuple hv_LLength = null, hv_RLength = null, hv_Indices = null;
            HTuple hv_Indices1 = null, hv_Indices2 = null, hv_Indices3 = null;
            HTuple hv_RowOfTopTRegionBegin = null, hv_ColOfTopTRegionBegin = null;
            HTuple hv_RowOfTopTRegionEnd = null, hv_ColOfTopTRegionEnd = null;
            HTuple hv_Nr3 = null, hv_Nc3 = null, hv_Dist3 = null, hv_RowOfTopRegionBegin = null;
            HTuple hv_ColOfTopRegionBegin = null, hv_RowOfTopRegionEnd = null;
            HTuple hv_ColOfTopRegionEnd = null, hv_TopRowLeftEdgeBegin = null;
            HTuple hv_TopColLeftEdgeBegin = null, hv_TopRowLeftEdgeEnd = null;
            HTuple hv_TopColLeftEdgeEnd = null, hv_Nr = null, hv_Nc = null;
            HTuple hv_Dist = null, hv_TopRowRightEdgeBegin = null;
            HTuple hv_TopColRightEdgeBegin = null, hv_TopRowRightEdgeEnd = null;
            HTuple hv_TopColRightEdgeEnd = null, hv_Nr5 = null, hv_Nc5 = null;
            HTuple hv_Dist5 = null, hv_IsOverlapping4 = null, hv_IsOverlapping5 = null;
            HTuple hv_IsOverlapping = null, hv_IsOverlapping1 = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopContour);
            HOperatorSet.GenEmptyObj(out ho_TopLeftContour);
            HOperatorSet.GenEmptyObj(out ho_TopRightContour);
            try
            {
                //2020.04.21-分段选取
                HOperatorSet.TupleGenConst(0, 0, out hv_TRowNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_TColNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_LRowNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_LColNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_RRowNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_RColNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_BRowNum);
                HOperatorSet.TupleGenConst(0, 0, out hv_BColNum);
                //上边缘
                HOperatorSet.TupleLength(hv_LineT, out hv_TLength);
                HTuple end_val11 = hv_TLength - 1;
                HTuple step_val11 = 1;
                for (hv_Index = 0; hv_Index.Continue(end_val11, step_val11); hv_Index = hv_Index.TupleAdd(step_val11))
                {
                    if ((int)(new HTuple(((hv_Index % 2)).TupleEqual(0))) != 0)
                    {
                        HOperatorSet.TupleConcat(hv_TRowNum, hv_LineT.TupleSelect(hv_Index), out hv_TRowNum);
                    }
                    else
                    {
                        HOperatorSet.TupleConcat(hv_TColNum, hv_LineT.TupleSelect(hv_Index), out hv_TColNum);
                    }
                }
                //下边缘
                HOperatorSet.TupleLength(hv_LineB, out hv_BLength);
                HTuple end_val20 = hv_BLength - 1;
                HTuple step_val20 = 1;
                for (hv_Index = 0; hv_Index.Continue(end_val20, step_val20); hv_Index = hv_Index.TupleAdd(step_val20))
                {
                    if ((int)(new HTuple(((hv_Index % 2)).TupleEqual(0))) != 0)
                    {
                        HOperatorSet.TupleConcat(hv_BRowNum, hv_LineB.TupleSelect(hv_Index), out hv_BRowNum);
                    }
                    else
                    {
                        HOperatorSet.TupleConcat(hv_BColNum, hv_LineB.TupleSelect(hv_Index), out hv_BColNum);
                    }
                }
                //左边缘
                HOperatorSet.TupleLength(hv_LineL, out hv_LLength);
                HTuple end_val29 = hv_LLength - 1;
                HTuple step_val29 = 1;
                for (hv_Index = 0; hv_Index.Continue(end_val29, step_val29); hv_Index = hv_Index.TupleAdd(step_val29))
                {
                    if ((int)(new HTuple(((hv_Index % 2)).TupleEqual(0))) != 0)
                    {
                        HOperatorSet.TupleConcat(hv_LRowNum, hv_LineL.TupleSelect(hv_Index), out hv_LRowNum);
                    }
                    else
                    {
                        HOperatorSet.TupleConcat(hv_LColNum, hv_LineL.TupleSelect(hv_Index), out hv_LColNum);
                    }
                }
                //右边缘
                HOperatorSet.TupleLength(hv_LineR, out hv_RLength);
                HTuple end_val38 = hv_RLength - 1;
                HTuple step_val38 = 1;
                for (hv_Index = 0; hv_Index.Continue(end_val38, step_val38); hv_Index = hv_Index.TupleAdd(step_val38))
                {
                    if ((int)(new HTuple(((hv_Index % 2)).TupleEqual(0))) != 0)
                    {
                        HOperatorSet.TupleConcat(hv_RRowNum, hv_LineR.TupleSelect(hv_Index), out hv_RRowNum);
                    }
                    else
                    {
                        HOperatorSet.TupleConcat(hv_RColNum, hv_LineR.TupleSelect(hv_Index), out hv_RColNum);
                    }
                }
                //2020.04.22-排序
                HOperatorSet.TupleSortIndex(hv_TColNum, out hv_Indices);
                HOperatorSet.TupleSelect(hv_TRowNum, hv_Indices, out hv_TRowNum);
                HOperatorSet.TupleSelect(hv_TColNum, hv_Indices, out hv_TColNum);
                //
                HOperatorSet.TupleSortIndex(hv_BColNum, out hv_Indices1);
                HOperatorSet.TupleSelect(hv_BRowNum, hv_Indices1, out hv_BRowNum);
                HOperatorSet.TupleSelect(hv_BColNum, hv_Indices1, out hv_BColNum);
                //
                HOperatorSet.TupleSortIndex(hv_LColNum, out hv_Indices2);
                HOperatorSet.TupleSelect(hv_LRowNum, hv_Indices2, out hv_LRowNum);
                HOperatorSet.TupleSelect(hv_LColNum, hv_Indices2, out hv_LColNum);
                //
                HOperatorSet.TupleSortIndex(hv_RColNum, out hv_Indices3);
                HOperatorSet.TupleSelect(hv_RRowNum, hv_Indices3, out hv_RRowNum);
                HOperatorSet.TupleSelect(hv_RColNum, hv_Indices3, out hv_RColNum);
                //
                //上边缘
                ho_TopContour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TopContour, hv_TRowNum, hv_TColNum);
                HOperatorSet.FitLineContourXld(ho_TopContour, "tukey", -1, 0, 5, 2, out hv_RowOfTopTRegionBegin,
                    out hv_ColOfTopTRegionBegin, out hv_RowOfTopTRegionEnd, out hv_ColOfTopTRegionEnd,
                    out hv_Nr3, out hv_Nc3, out hv_Dist3);
                //disp_line (200000, RowOfTopTRegionBegin, ColOfTopTRegionBegin, RowOfTopTRegionEnd, ColOfTopTRegionEnd)
                //下边缘
                ho_TopContour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TopContour, hv_BRowNum, hv_BColNum);
                HOperatorSet.FitLineContourXld(ho_TopContour, "tukey", -1, 0, 5, 3, out hv_RowOfTopRegionBegin,
                    out hv_ColOfTopRegionBegin, out hv_RowOfTopRegionEnd, out hv_ColOfTopRegionEnd,
                    out hv_Nr3, out hv_Nc3, out hv_Dist3);
                //disp_line (200000, RowOfTopRegionBegin, ColOfTopRegionBegin, RowOfTopRegionEnd, ColOfTopRegionEnd)
                //左边缘
                ho_TopLeftContour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TopLeftContour, hv_LRowNum, hv_LColNum);
                HOperatorSet.FitLineContourXld(ho_TopLeftContour, "tukey", -1, 0, 5, 2, out hv_TopRowLeftEdgeBegin,
                    out hv_TopColLeftEdgeBegin, out hv_TopRowLeftEdgeEnd, out hv_TopColLeftEdgeEnd,
                    out hv_Nr, out hv_Nc, out hv_Dist);
                //disp_line (200000, TopRowLeftEdgeBegin, TopColLeftEdgeBegin, TopRowLeftEdgeEnd, TopColLeftEdgeEnd)
                //右边缘
                ho_TopRightContour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_TopRightContour, hv_RRowNum, hv_RColNum);
                HOperatorSet.FitLineContourXld(ho_TopRightContour, "tukey", -1, 0, 5, 2, out hv_TopRowRightEdgeBegin,
                    out hv_TopColRightEdgeBegin, out hv_TopRowRightEdgeEnd, out hv_TopColRightEdgeEnd,
                    out hv_Nr5, out hv_Nc5, out hv_Dist5);
                //disp_line (200000, TopRowRightEdgeBegin, TopColRightEdgeBegin, TopRowRightEdgeEnd, TopColRightEdgeEnd)
                //Y轴左上角
                HOperatorSet.IntersectionLines(hv_RowOfTopTRegionBegin, hv_ColOfTopTRegionBegin,
                    hv_RowOfTopTRegionEnd, hv_ColOfTopTRegionEnd, hv_TopRowLeftEdgeBegin, hv_TopColLeftEdgeBegin,
                    hv_TopRowLeftEdgeEnd, hv_TopColLeftEdgeEnd, out hv_TLRow, out hv_TLCol,
                    out hv_IsOverlapping4);
                //disp_cross (200000, TLRow, TLCol, 100, -0.3)
                //Y轴右上角
                HOperatorSet.IntersectionLines(hv_RowOfTopTRegionBegin, hv_ColOfTopTRegionBegin,
                    hv_RowOfTopTRegionEnd, hv_ColOfTopTRegionEnd, hv_TopRowRightEdgeBegin,
                    hv_TopColRightEdgeBegin, hv_TopRowRightEdgeEnd, hv_TopColRightEdgeEnd,
                    out hv_TRRow, out hv_TRCol, out hv_IsOverlapping5);
                //disp_cross (200000, TRRow, TRCol, 100, -0.3)
                //左下角
                HOperatorSet.IntersectionLines(hv_RowOfTopRegionBegin, hv_ColOfTopRegionBegin,
                    hv_RowOfTopRegionEnd, hv_ColOfTopRegionEnd, hv_TopRowLeftEdgeBegin, hv_TopColLeftEdgeBegin,
                    hv_TopRowLeftEdgeEnd, hv_TopColLeftEdgeEnd, out hv_BLRow, out hv_BLCol,
                    out hv_IsOverlapping);
                //disp_cross (200000, BLRow, BLCol, 100, -0.3)
                //右下角
                HOperatorSet.IntersectionLines(hv_RowOfTopRegionBegin, hv_ColOfTopRegionBegin,
                    hv_RowOfTopRegionEnd, hv_ColOfTopRegionEnd, hv_TopRowRightEdgeBegin, hv_TopColRightEdgeBegin,
                    hv_TopRowRightEdgeEnd, hv_TopColRightEdgeEnd, out hv_BRRow, out hv_BRCol,
                    out hv_IsOverlapping1);
                //disp_cross (200000, BRRow, BRCol, 100, -0.3)
                //拼接四个角点得到优化后TopRegion的外轮廓
                //tuple_gen_const (0, 0, RowOfColorTopRegionContour)
                //tuple_gen_const (0, 0, ColOfColorTopRegionContour)
                //tuple_concat (RowOfColorTopRegionContour, TLRow, RowOfColorTopRegionContour)
                //tuple_concat (ColOfColorTopRegionContour, TLCol, ColOfColorTopRegionContour)
                //tuple_concat (RowOfColorTopRegionContour, BLRow, RowOfColorTopRegionContour)
                //tuple_concat (ColOfColorTopRegionContour, BLCol, ColOfColorTopRegionContour)
                //tuple_concat (RowOfColorTopRegionContour, BRRow, RowOfColorTopRegionContour)
                //tuple_concat (ColOfColorTopRegionContour, BRCol, ColOfColorTopRegionContour)
                //tuple_concat (RowOfColorTopRegionContour, TRRow, RowOfColorTopRegionContour)
                //tuple_concat (ColOfColorTopRegionContour, TRCol, ColOfColorTopRegionContour)
                //tuple_concat (RowOfColorTopRegionContour, TLRow, RowOfColorTopRegionContour)
                //tuple_concat (ColOfColorTopRegionContour, TLCol, ColOfColorTopRegionContour)
                //gen_region_polygon (TopColorRegionOut, RowOfColorTopRegionContour, ColOfColorTopRegionContour)
                //fill_up (TopColorRegionOut, TopColorRegionOut)
                //
                hv_Rows = new HTuple();
                hv_Rows = hv_Rows.TupleConcat(hv_TLRow);
                hv_Rows = hv_Rows.TupleConcat(hv_BLRow);
                hv_Rows = hv_Rows.TupleConcat(hv_BRRow);
                hv_Rows = hv_Rows.TupleConcat(hv_TRRow);
                hv_Cols = new HTuple();
                hv_Cols = hv_Cols.TupleConcat(hv_TLCol);
                hv_Cols = hv_Cols.TupleConcat(hv_BLCol);
                hv_Cols = hv_Cols.TupleConcat(hv_BRCol);
                hv_Cols = hv_Cols.TupleConcat(hv_TRCol);
                ho_TopContour.Dispose();
                ho_TopLeftContour.Dispose();
                ho_TopRightContour.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopContour.Dispose();
                ho_TopLeftContour.Dispose();
                ho_TopRightContour.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void SkeletonRow2Line(HObject ho_Skeleton, HTuple hv_TRLine, out HTuple hv_RowBegin,
            out HTuple hv_ColBegin, out HTuple hv_RowEnd, out HTuple hv_ColEnd)
        {




            // Local iconic variables 

            HObject ho_Contours, ho_ContoursSplit, ho_ObjectSelected1 = null;
            HObject ho_SelectedContours;

            // Local control variables 

            HTuple hv_Row = null, hv_Col = null, hv_Rows = null;
            HTuple hv_Length = null, hv_Length1 = null, hv_Index = null;
            HTuple hv_RowBegin1 = new HTuple(), hv_ColBegin1 = new HTuple();
            HTuple hv_RowEnd1 = new HTuple(), hv_ColEnd1 = new HTuple();
            HTuple hv_Nr1 = new HTuple(), hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
            HTuple hv_RowTemp = new HTuple(), hv_ColTemp = new HTuple();
            HTuple hv_RowMin = new HTuple(), hv_RowMax = new HTuple();
            HTuple hv_Indices = null, hv_Nr = null, hv_Nc = null, hv_Dist = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
            HOperatorSet.GenEmptyObj(out ho_SelectedContours);
            try
            {
                HOperatorSet.TupleGenConst(0, 0, out hv_Row);
                HOperatorSet.TupleGenConst(0, 0, out hv_Col);
                //202.04.28-存放Row
                hv_Rows = 0;
                ho_Contours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_Skeleton, out ho_Contours, "center");
                ho_ContoursSplit.Dispose();
                HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines",
                    5, 4, 2);
                HOperatorSet.LengthXld(ho_ContoursSplit, out hv_Length);
                //2020.04.22-改为Row判断
                HOperatorSet.TupleLength(hv_Length, out hv_Length1);
                HTuple end_val9 = hv_Length1;
                HTuple step_val9 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val9, step_val9); hv_Index = hv_Index.TupleAdd(step_val9))
                {
                    ho_ObjectSelected1.Dispose();
                    HOperatorSet.SelectObj(ho_ContoursSplit, out ho_ObjectSelected1, hv_Index);
                    HOperatorSet.FitLineContourXld(ho_ObjectSelected1, "tukey", -1, 0, 5, 2,
                        out hv_RowBegin1, out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1,
                        out hv_Nc1, out hv_Dist1);
                    hv_RowTemp = (hv_RowBegin1 + hv_RowEnd1) / 2;
                    hv_ColTemp = (hv_ColBegin1 + hv_ColEnd1) / 2;
                    HOperatorSet.TupleConcat(hv_Row, hv_RowTemp, out hv_Row);
                    HOperatorSet.TupleConcat(hv_Col, hv_ColTemp, out hv_Col);
                }
                if ((int)(new HTuple(hv_TRLine.TupleEqual("T"))) != 0)
                {
                    HOperatorSet.TupleMin(hv_Row, out hv_RowMin);
                    hv_Rows = hv_RowMin.Clone();
                }
                else
                {
                    HOperatorSet.TupleMax(hv_Row, out hv_RowMax);
                    hv_Rows = hv_RowMax.Clone();
                }

                HOperatorSet.TupleFindFirst(hv_Row, hv_Rows, out hv_Indices);
                //
                //
                //tuple_max (Length, Max)
                //tuple_find_first (Length, Max, Indices)
                ho_SelectedContours.Dispose();
                HOperatorSet.SelectObj(ho_ContoursSplit, out ho_SelectedContours, hv_Indices + 1);
                HOperatorSet.FitLineContourXld(ho_SelectedContours, "tukey", -1, 0, 5, 2, out hv_RowBegin,
                    out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);
                //
                //
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_ObjectSelected1.Dispose();
                ho_SelectedContours.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void PreventYellowAndBelt(HTuple hv_EdgeLineTL, HTuple hv_EdgeLineTR, HTuple hv_EdgeLineBL,
            HTuple hv_EdgeLineBR, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            out HTuple hv_LineTL, out HTuple hv_LineTR, out HTuple hv_LineBL, out HTuple hv_LineBR,
            out HTuple hv_isTopColorRegionOut, out HTuple hv_isBottomColorRegionOut)
        {



            // Local iconic variables 
            HTuple hv_EdgeLineBL_COPY_INP_TMP = hv_EdgeLineBL.Clone();
            HTuple hv_EdgeLineBR_COPY_INP_TMP = hv_EdgeLineBR.Clone();
            HTuple hv_EdgeLineTL_COPY_INP_TMP = hv_EdgeLineTL.Clone();
            HTuple hv_EdgeLineTR_COPY_INP_TMP = hv_EdgeLineTR.Clone();

            // Initialize local and output iconic variables 
            hv_isTopColorRegionOut = new HTuple();
            hv_isBottomColorRegionOut = new HTuple();
            //防止黄边没找到边界
            if ((int)((new HTuple(hv_EdgeLineTL_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
                new HTuple(hv_EdgeLineBL_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
            {
                if ((int)((new HTuple(hv_EdgeLineBL_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleAnd(
                    new HTuple((new HTuple(hv_EdgeLineTL_COPY_INP_TMP.TupleLength())).TupleGreater(
                    0)))) != 0)
                {
                    hv_EdgeLineBL_COPY_INP_TMP = hv_EdgeLineTL_COPY_INP_TMP.Clone();
                }
                else if ((int)((new HTuple(hv_EdgeLineTL_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleAnd(
                    new HTuple((new HTuple(hv_EdgeLineBL_COPY_INP_TMP.TupleLength())).TupleGreater(
                    0)))) != 0)
                {
                    hv_EdgeLineTL_COPY_INP_TMP = hv_EdgeLineBL_COPY_INP_TMP.Clone();
                }
                else
                {
                    hv_isTopColorRegionOut = 0;
                }
            }
            //
            if ((int)((new HTuple(hv_EdgeLineTR_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
                new HTuple(hv_EdgeLineBR_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
            {
                if ((int)((new HTuple(hv_EdgeLineTR_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleAnd(
                    new HTuple((new HTuple(hv_EdgeLineBR_COPY_INP_TMP.TupleLength())).TupleGreater(
                    0)))) != 0)
                {
                    hv_EdgeLineTR_COPY_INP_TMP = hv_EdgeLineBR_COPY_INP_TMP.Clone();
                }
                else if ((int)((new HTuple(hv_EdgeLineBR_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleAnd(
                    new HTuple((new HTuple(hv_EdgeLineTR_COPY_INP_TMP.TupleLength())).TupleGreater(
                    0)))) != 0)
                {
                    hv_EdgeLineBR_COPY_INP_TMP = hv_EdgeLineTR_COPY_INP_TMP.Clone();
                }
                else
                {
                    hv_isBottomColorRegionOut = 0;
                }
            }
            //
            //2020.04.15-黄边找错边界
            //上边缘找错
            //if (|EdgeLineTL|>0 or |EdgeLineBR|>0)
            //if ((EdgeLineTL[|EdgeLineTL|-1]-EdgeLineBR[0])<(TopWidth-10))
            //if (isBottomWaferExist)
            //tuple_abs (EdgeLineTL[|EdgeLineTL|-1]-BRColNums[|BRColNums|-1], RAbs)
            //tuple_abs (EdgeLineBR[0] - BLColNums[0], LAbs)
            //if (RAbs > 10)
            //EdgeLineTL := BRColNums
            //EdgeLineTR := BRRowNums
            //endif
            //if (LAbs>10)
            //EdgeLineBR := BLColNums
            //EdgeLineBL := BLRowNums
            //endif
            //else
            //isTopColorRegionOut := false
            //2020.04.17 找错，数组清空
            //tuple_gen_const (0, 0, BLRowNums)
            //tuple_gen_const (0, 0, BLColNums)
            //tuple_gen_const (0, 0, BRRowNums)
            //tuple_gen_const (0, 0, BRColNums)
            //endif
            //endif
            //endif
            //
            //下边缘找错
            //if (|BRColNums|>0 or |BLColNums|>0)
            //if ((BRColNums[|BRColNums|-1]-BLColNums[0]) < (BottomWidth-10))
            //if (isTopWaferExist)
            //tuple_abs (EdgeLineTL[|EdgeLineTL|-1]-BRColNums[|BRColNums|-1], RAbs1)
            //tuple_abs (EdgeLineBR[0] - BLColNums[0], LAbs1)
            //if (RAbs1>10)
            //BRColNums := EdgeLineTL
            //BRRowNums := EdgeLineTR
            //endif
            //if (LAbs1>10)
            //BLColNums := EdgeLineBR
            //BLRowNums := EdgeLineBL
            //endif
            //else
            //isBottomColorRegionOut := false
            //2020.04.17 找错，数组清空
            //tuple_gen_const (0, 0, BLRowNums)
            //tuple_gen_const (0, 0, BLColNums)
            //tuple_gen_const (0, 0, BRRowNums)
            //tuple_gen_const (0, 0, BRColNums)
            //endif
            //
            //endif
            //endif
            //
            hv_LineTL = hv_EdgeLineTL_COPY_INP_TMP.Clone();
            hv_LineTR = hv_EdgeLineTR_COPY_INP_TMP.Clone();
            hv_LineBL = hv_EdgeLineBL_COPY_INP_TMP.Clone();
            hv_LineBR = hv_EdgeLineBR_COPY_INP_TMP.Clone();
            //
            //

            return;
        }

        public void DetectWeldingDefectFunctionForTenMainLineOfBack(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_widthResolution, HTuple hv_weldWidthThresh, HTuple hv_filmWidthThresh,
            out HTuple hv_isStartWeldingNG)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine, ho_weldingNGRegionOutOfTenthMainLine;
            HObject ho_mainLineRegionOutOfTenthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null, hv_RowOfTenthMainLine = null;
            HTuple hv_ColumnOfTenthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfTenthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfTenthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //opening_rectangle1 (detectRegion, detectRegion, halfWidth, halfHeight)
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                //
                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 4.3) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 4.3) * hv_cosValue)) - 17;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 3.3) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 3.3) * hv_cosValue)) - 22;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 2.3) * hv_sinValue);
                hv_ColumnOfThirdMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 2.3) * hv_cosValue)) - 32;
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 1.3) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 1.3) * hv_cosValue)) - 50;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 0.3) * hv_sinValue);
                hv_ColumnOfFifthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 0.3) * hv_cosValue)) - 65;
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第六根主栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 0.3) * hv_sinValue);
                hv_ColumnOfSixthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 0.3) * hv_cosValue)) + 60;
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第七根主栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 1.3) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 1.3) * hv_cosValue)) + 50;
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第八根主栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 2.3) * hv_sinValue);
                hv_ColumnOfEighthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 2.3) * hv_cosValue)) + 30;
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第九根主栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 3.3) * hv_sinValue);
                hv_ColumnOfNinthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 3.3) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第十根主栅线
                hv_RowOfTenthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 4.3) * hv_sinValue);
                hv_ColumnOfTenthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 4.3) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfTenthMainLine, ColumnOfTenthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfTenthMainLine.Dispose(); ho_mainLineRegionOutOfTenthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForBack(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfTenthMainLine, out ho_mainLineRegionOutOfTenthMainLine,
                    hv_windowHandle, hv_RowOfTenthMainLine, hv_ColumnOfTenthMainLine, hv_Phi,
                    100, hv_halfHeight, hv_isUsingFilmShiftingDetect, hv_halfHeight, hv_height,
                    hv_width, hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldDefectOfSingleMainLineForBack(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_windowHandle, HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_halfHeight, HTuple hv_height,
            HTuple hv_width, HTuple hv_widthResolution, HTuple hv_weldWidthThresh, HTuple hv_filmWidthThresh)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionUpperLine, ho_BottomRegionDownLine;
            HObject ho_UpperAndDownLine, ho_Rectangle1, ho_ImageReduced;
            HObject ho_ImageClosing, ho_Region, ho_RegionOpening1, ho_ConnectedRegions;
            HObject ho_ObjectSelected = null, ho_ImageForLightRegin = null;
            HObject ho_DarkRegion = null, ho_RegionDilation = null, ho_RegionDifference = null;
            HObject ho_RegionOpening2 = null, ho_ConnectedRegions2 = null;
            HObject ho_ObjectSelected1 = null, ho_ImageReduced1 = null;
            HObject ho_Region2 = null, ho_ConnectedRegions3 = null, ho_SelectedRegions1 = null;

            // Local control variables 

            HTuple hv_isWhiteLine = null, hv_MainLineRegionNumbers = null;
            HTuple hv_Index = null, hv_UsedThreshold = new HTuple();
            HTuple hv_LightRegionWidth = new HTuple(), hv_LightRegionHeight = new HTuple();
            HTuple hv_DarkRegionHeight = new HTuple(), hv_Area = new HTuple();
            HTuple hv_ObjectSelectedRow = new HTuple(), hv_ObjectSelectedColumn = new HTuple();
            HTuple hv_Area1 = new HTuple(), hv_DarkRow = new HTuple();
            HTuple hv_DarkColumn = new HTuple(), hv_Max = new HTuple();
            HTuple hv_Min = new HTuple(), hv_filmShiftWidth = new HTuple();
            HTuple hv_M = new HTuple(), hv_N = new HTuple(), hv_Number = new HTuple();
            HTuple hv_Index1 = new HTuple(), hv_ObjectSelectedHeight = new HTuple();
            HTuple hv_SelectedHeight = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopRegionUpperLine);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDownLine);
            HOperatorSet.GenEmptyObj(out ho_UpperAndDownLine);
            HOperatorSet.GenEmptyObj(out ho_Rectangle1);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_ImageClosing);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_ImageForLightRegin);
            HOperatorSet.GenEmptyObj(out ho_DarkRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening2);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
            HOperatorSet.GenEmptyObj(out ho_Region2);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
            try
            {
                if ((int)(hv_isUsingFilmShiftingDetect.TupleNot()) != 0)
                {
                    ho_TopRegionUpperLine.Dispose();
                    ho_BottomRegionDownLine.Dispose();
                    ho_UpperAndDownLine.Dispose();
                    ho_Rectangle1.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_ImageClosing.Dispose();
                    ho_Region.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_ImageForLightRegin.Dispose();
                    ho_DarkRegion.Dispose();
                    ho_RegionDilation.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening2.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ObjectSelected1.Dispose();
                    ho_ImageReduced1.Dispose();
                    ho_Region2.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions1.Dispose();

                    return;
                }
                //
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isWhiteLine = 1;
                //filmWidthThresh := 1.1
                //weldWidthThresh := 0.2
                //避免边界处寻找到的白色区域不闭合
                ho_TopRegionUpperLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_TopRegionUpperLine, 0, 0, 0, hv_width);
                ho_BottomRegionDownLine.Dispose();
                HOperatorSet.GenRectangle1(out ho_BottomRegionDownLine, hv_height - 1, 0, hv_height - 1,
                    hv_width);
                ho_UpperAndDownLine.Dispose();
                HOperatorSet.Union2(ho_TopRegionUpperLine, ho_BottomRegionDownLine, out ho_UpperAndDownLine
                    );
                //
                //gen_rectangle2 (Rectangle, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect, Phi, 100, halfHeight)
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_centerRowOfSingleMainLineDetect,
                    hv_centerColumnOfSingleMainLineDetect, hv_Phi, 30, hv_halfHeight);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_mainLineRegionOut);
                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForWeldingDetect, ho_Rectangle1, out ho_ImageReduced
                    );
                ho_ImageClosing.Dispose();
                HOperatorSet.GrayClosingRect(ho_ImageReduced, out ho_ImageClosing, 1, 10);
                //
                ho_Region.Dispose();
                HOperatorSet.Threshold(ho_ImageClosing, out ho_Region, 195, 255);
                ho_RegionOpening1.Dispose();
                HOperatorSet.OpeningRectangle1(ho_Region, out ho_RegionOpening1, 6, 2);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionOpening1, out ho_ConnectedRegions);
                HOperatorSet.CountObj(ho_ConnectedRegions, out hv_MainLineRegionNumbers);
                //
                HTuple end_val26 = hv_MainLineRegionNumbers;
                HTuple step_val26 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val26, step_val26); hv_Index = hv_Index.TupleAdd(step_val26))
                {
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_ConnectedRegions, out ho_ObjectSelected, hv_Index);
                    ho_ImageForLightRegin.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_ObjectSelected, out ho_ImageForLightRegin
                        );
                    ho_DarkRegion.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForLightRegin, out ho_DarkRegion, "max_separability",
                        "dark", out hv_UsedThreshold);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_DarkRegion, out ExpTmpOutVar_0, 5, 5);
                        ho_DarkRegion.Dispose();
                        ho_DarkRegion = ExpTmpOutVar_0;
                    }
                    HOperatorSet.RegionFeatures(ho_ObjectSelected, "width", out hv_LightRegionWidth);
                    HOperatorSet.RegionFeatures(ho_ObjectSelected, "height", out hv_LightRegionHeight);
                    HOperatorSet.RegionFeatures(ho_DarkRegion, "height", out hv_DarkRegionHeight);
                    HOperatorSet.AreaCenter(ho_ObjectSelected, out hv_Area, out hv_ObjectSelectedRow,
                        out hv_ObjectSelectedColumn);
                    HOperatorSet.AreaCenter(ho_DarkRegion, out hv_Area1, out hv_DarkRow, out hv_DarkColumn);
                    hv_Max = (hv_filmWidthThresh + hv_weldWidthThresh) / hv_widthResolution;
                    hv_Min = (hv_filmWidthThresh - hv_weldWidthThresh) / hv_widthResolution;
                    if ((int)(new HTuple(hv_LightRegionWidth.TupleGreater((hv_filmWidthThresh + hv_weldWidthThresh) / hv_widthResolution))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ConcatObj(ho_weldingNGRegionOut, ho_ObjectSelected, out ExpTmpOutVar_0
                                );
                            ho_weldingNGRegionOut.Dispose();
                            ho_weldingNGRegionOut = ExpTmpOutVar_0;
                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                        hv_filmShiftWidth = hv_LightRegionWidth * hv_widthResolution;
                        HOperatorSet.TupleString(hv_filmShiftWidth, ".2f", out hv_filmShiftWidth);
                        disp_message_UserDefine(hv_windowHandle, hv_filmShiftWidth, hv_ObjectSelectedRow,
                            hv_ObjectSelectedColumn + 12, "red");
                        HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                    }
                    else if ((int)(new HTuple(hv_LightRegionWidth.TupleLess((hv_filmWidthThresh - hv_weldWidthThresh) / hv_widthResolution))) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                    }
                    else
                    {
                        //
                        if ((int)(new HTuple((new HTuple((new HTuple(0)).TupleLess(hv_DarkRegionHeight))).TupleLess(
                            hv_LightRegionHeight * 0.2))) != 0)
                        {
                            hv_M = hv_ObjectSelectedColumn - (hv_LightRegionWidth / 2);
                            hv_N = hv_ObjectSelectedColumn + (hv_LightRegionWidth / 2);
                            //黑色焊带
                            if ((int)(new HTuple((new HTuple(((hv_ObjectSelectedColumn - (hv_LightRegionWidth / 2))).TupleLess(
                                hv_DarkColumn))).TupleLess(hv_ObjectSelectedColumn + (hv_LightRegionWidth / 2)))) != 0)
                            {
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                            }
                            else
                            {
                                ho_RegionDilation.Dispose();
                                HOperatorSet.DilationRectangle1(ho_ObjectSelected, out ho_RegionDilation,
                                    1, 60);
                                ho_RegionDifference.Dispose();
                                HOperatorSet.Difference(ho_RegionDilation, ho_ObjectSelected, out ho_RegionDifference
                                    );
                                ho_RegionOpening2.Dispose();
                                HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_RegionOpening2,
                                    hv_LightRegionWidth * 0.6, 1);
                                ho_ConnectedRegions2.Dispose();
                                HOperatorSet.Connection(ho_RegionOpening2, out ho_ConnectedRegions2
                                    );
                                HOperatorSet.CountObj(ho_ConnectedRegions2, out hv_Number);
                                HTuple end_val63 = hv_Number;
                                HTuple step_val63 = 1;
                                for (hv_Index1 = 1; hv_Index1.Continue(end_val63, step_val63); hv_Index1 = hv_Index1.TupleAdd(step_val63))
                                {
                                    ho_ObjectSelected1.Dispose();
                                    HOperatorSet.SelectObj(ho_ConnectedRegions2, out ho_ObjectSelected1,
                                        hv_Index1);
                                    HOperatorSet.RegionFeatures(ho_ObjectSelected1, "height", out hv_ObjectSelectedHeight);
                                    ho_ImageReduced1.Dispose();
                                    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_ObjectSelected1, out ho_ImageReduced1
                                        );
                                    ho_Region2.Dispose();
                                    HOperatorSet.Threshold(ho_ImageReduced1, out ho_Region2, 180, 255);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.OpeningRectangle1(ho_Region2, out ExpTmpOutVar_0, 1,
                                            3);
                                        ho_Region2.Dispose();
                                        ho_Region2 = ExpTmpOutVar_0;
                                    }
                                    ho_ConnectedRegions3.Dispose();
                                    HOperatorSet.Connection(ho_Region2, out ho_ConnectedRegions3);
                                    ho_SelectedRegions1.Dispose();
                                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions3, out ho_SelectedRegions1,
                                        "max_area", 70);
                                    HOperatorSet.RegionFeatures(ho_SelectedRegions1, "height", out hv_SelectedHeight);
                                    if ((int)(new HTuple((new HTuple((new HTuple(0)).TupleLess(hv_SelectedHeight))).TupleLess(
                                        hv_ObjectSelectedHeight * 0.2))) != 0)
                                    {
                                        hv_isWhiteLine = 0;
                                    }
                                    else
                                    {
                                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                        HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                                        hv_isWhiteLine = 1;
                                        break;
                                    }
                                }
                                if ((int)(new HTuple(hv_isWhiteLine.TupleEqual(0))) != 0)
                                {
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.ConcatObj(ho_weldingNGRegionOut, ho_ObjectSelected,
                                            out ExpTmpOutVar_0);
                                        ho_weldingNGRegionOut.Dispose();
                                        ho_weldingNGRegionOut = ExpTmpOutVar_0;
                                    }
                                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                    hv_filmShiftWidth = hv_LightRegionWidth * hv_widthResolution;
                                    HOperatorSet.TupleString(hv_filmShiftWidth, ".2f", out hv_filmShiftWidth);
                                    disp_message_UserDefine(hv_windowHandle, hv_filmShiftWidth, hv_ObjectSelectedRow,
                                        hv_ObjectSelectedColumn + 12, "red");
                                    HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                                }
                                //
                            }
                        }
                        else
                        {
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispRegion(ho_ObjectSelected, hv_ExpDefaultWinHandle);
                        }
                        //
                    }
                }
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle1.Dispose();
                ho_ImageReduced.Dispose();
                ho_ImageClosing.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_DarkRegion.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening2.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ObjectSelected1.Dispose();
                ho_ImageReduced1.Dispose();
                ho_Region2.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions1.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionUpperLine.Dispose();
                ho_BottomRegionDownLine.Dispose();
                ho_UpperAndDownLine.Dispose();
                ho_Rectangle1.Dispose();
                ho_ImageReduced.Dispose();
                ho_ImageClosing.Dispose();
                ho_Region.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_ImageForLightRegin.Dispose();
                ho_DarkRegion.Dispose();
                ho_RegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening2.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ObjectSelected1.Dispose();
                ho_ImageReduced1.Dispose();
                ho_Region2.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions1.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForTenMainLine(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_locationMainLineThresh, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_filmWidthThresh, HTuple hv_headAndTailFilmWidthThresh, HTuple hv_filmWidthOffset,
            HTuple hv_weldWidthThresh, HTuple hv_isTopRegion, HTuple hv_firstDetectPosForTopRegion,
            HTuple hv_secondDetectPosForTopRegion, HTuple hv_firstDetectPosForBottomRegion,
            HTuple hv_secondDetectPosForBottomRegion, HTuple hv_isUsingChinese, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_isBackDetect, out HTuple hv_isStartWeldingNG, out HTuple hv_IsDetectRegionNG,
            out HTuple hv_IsHeadOrTailNG, out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine;
            HObject ho_mainLineRegionOutOfFisrtMainLine, ho_weldingNGRegionOutOfSecondMainLine;
            HObject ho_mainLineRegionOutOfSecondMainLine, ho_weldingNGRegionOutOfThirdMainLine;
            HObject ho_mainLineRegionOutOfThirdMainLine, ho_weldingNGRegionOutOfFourthMainLine;
            HObject ho_mainLineRegionOutOfFourthMainLine, ho_weldingNGRegionOutOfFifthMainLine;
            HObject ho_mainLineRegionOutOfFifthMainLine, ho_weldingNGRegionOutOfSixthMainLine;
            HObject ho_mainLineRegionOutOfSixthMainLine, ho_weldingNGRegionOutOfSeventhMainLine;
            HObject ho_mainLineRegionOutOfSeventhMainLine, ho_weldingNGRegionOutOfEighthMainLine;
            HObject ho_mainLineRegionOutOfEighthMainLine, ho_weldingNGRegionOutOfNinthMainLine;
            HObject ho_mainLineRegionOutOfNinthMainLine, ho_weldingNGRegionOutOfTenthMainLine;
            HObject ho_mainLineRegionOutOfTenthMainLine;

            // Local control variables 

            HTuple hv_PI = null, hv_filmDistanceArrayOfFirstPoint = null;
            HTuple hv_filmDistanceArrayOfSecondPoint = null, hv_filmDistanceOfFirstPoint = null;
            HTuple hv_filmDistanceOfSecondPoint = null, hv_CenterRow = null;
            HTuple hv_CenterColumn = null, hv_Phi = null, hv_halfWidth = null;
            HTuple hv_halfHeight = null, hv_cosValue = null, hv_sinValue = null;
            HTuple hv_RowOfFirstMainLine = null, hv_ColumnOfFirstMainLine = null;
            HTuple hv_isStartWeldingNGOut = null, hv_isDetectRegionNGOfFirstMainLine = null;
            HTuple hv_isHeadOrTailNGOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_isDetectRegionNGOfSecondMainLine = null;
            HTuple hv_isHeadOrTailNGOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_isDetectRegionNGOfThirdMainLine = null;
            HTuple hv_isHeadOrTailNGOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_isDetectRegionNGOfFourthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_isDetectRegionNGOfFifthMainLine = null;
            HTuple hv_isHeadOrTailNGOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_isDetectRegionNGOfSixthMainLine = null;
            HTuple hv_isHeadOrTailNGOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_isDetectRegionNGOfSeventhMainLine = null;
            HTuple hv_isHeadOrTailNGOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_isDetectRegionNGOfEighthMainLine = null;
            HTuple hv_isHeadOrTailNGOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null, hv_isDetectRegionNGOfNinthMainLine = null;
            HTuple hv_isHeadOrTailNGOfNinthMainLine = null, hv_RowOfTenthMainLine = null;
            HTuple hv_ColumnOfTenthMainLine = null, hv_isDetectRegionNGOfTenthMainLine = null;
            HTuple hv_isHeadOrTailNGOfTenthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSecondMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfThirdMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFourthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFifthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSixthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfSeventhMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfEighthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfNinthMainLine);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfTenthMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfTenthMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //各主栅线上/下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsDetectRegionNG);
                //各主栅线头部/尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOrTailNG);
                //
                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //第一个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfFirstPoint);
                //第二个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfSecondPoint);
                //
                hv_filmDistanceOfFirstPoint = "";
                hv_filmDistanceOfSecondPoint = "";
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                //
                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 4.3) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 4.3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFirstMainLine, out hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFirstMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFirstMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 3.3) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 3.3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSecondMainLine.Dispose(); ho_mainLineRegionOutOfSecondMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSecondMainLine, out ho_mainLineRegionOutOfSecondMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSecondMainLine, out hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSecondMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSecondMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSecondMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 2.3) * hv_sinValue);
                hv_ColumnOfThirdMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 2.3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfThirdMainLine.Dispose(); ho_mainLineRegionOutOfThirdMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfThirdMainLine, out ho_mainLineRegionOutOfThirdMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfThirdMainLine, out hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfThirdMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfThirdMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfThirdMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 1.3) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 1.3) * hv_cosValue)) - 20;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFourthMainLine.Dispose(); ho_mainLineRegionOutOfFourthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFourthMainLine, out ho_mainLineRegionOutOfFourthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFourthMainLine, out hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFourthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFourthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFourthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 0.3) * hv_sinValue);
                hv_ColumnOfFifthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 0.3) * hv_cosValue)) - 60;
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfFifthMainLine.Dispose(); ho_mainLineRegionOutOfFifthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfFifthMainLine, out ho_mainLineRegionOutOfFifthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFifthMainLine, out hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFifthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFifthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFifthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第六根主栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 0.3) * hv_sinValue);
                hv_ColumnOfSixthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 0.3) * hv_cosValue)) + 60;
                //disp_rectangle2 (windowHandle, RowOfSixthMainLine, ColumnOfSixthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSixthMainLine.Dispose(); ho_mainLineRegionOutOfSixthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSixthMainLine, out ho_mainLineRegionOutOfSixthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSixthMainLine, out hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSixthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSixthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSixthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第七根主栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 1.3) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 1.3) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfSeventhMainLine, ColumnOfSeventhMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose(); ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfSeventhMainLine, out ho_mainLineRegionOutOfSeventhMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfSeventhMainLine, out hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfSeventhMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfSeventhMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfSeventhMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第八根主栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 2.3) * hv_sinValue);
                hv_ColumnOfEighthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 2.3) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfEighthMainLine, ColumnOfEighthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfEighthMainLine.Dispose(); ho_mainLineRegionOutOfEighthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfEighthMainLine, out ho_mainLineRegionOutOfEighthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfEighthMainLine, out hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfEighthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfEighthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfEighthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第九根主栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 3.3) * hv_sinValue);
                hv_ColumnOfNinthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 3.3) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfNinthMainLine, ColumnOfNinthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfNinthMainLine.Dispose(); ho_mainLineRegionOutOfNinthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfNinthMainLine, out ho_mainLineRegionOutOfNinthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfNinthMainLine, out hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfNinthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfNinthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfNinthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第十根主栅线
                hv_RowOfTenthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 4.3) * hv_sinValue);
                hv_ColumnOfTenthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 4.3) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfTenthMainLine, ColumnOfTenthMainLine, Phi, 100, halfHeight)
                ho_weldingNGRegionOutOfTenthMainLine.Dispose(); ho_mainLineRegionOutOfTenthMainLine.Dispose();
                DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                    out ho_weldingNGRegionOutOfTenthMainLine, out ho_mainLineRegionOutOfTenthMainLine,
                    hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                    hv_RowOfTenthMainLine, hv_ColumnOfTenthMainLine, hv_Phi, 100, hv_halfHeight,
                    hv_locationMainLineThresh, hv_filmWidthThresh, hv_headAndTailFilmWidthThresh,
                    hv_isTopRegion, hv_firstDetectPosForTopRegion, hv_secondDetectPosForTopRegion,
                    hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion, hv_weldWidthThresh,
                    hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                    out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfTenthMainLine, out hv_isHeadOrTailNGOfTenthMainLine,
                    out hv_filmDistanceOfFirstPoint, out hv_filmDistanceOfSecondPoint);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_weldingNGRegionOut.Dispose();
                    ho_weldingNGRegionOut = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfTenthMainLine,
                        out ExpTmpOutVar_0);
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                    out hv_filmDistanceArrayOfFirstPoint);
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                    out hv_filmDistanceArrayOfSecondPoint);
                HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfTenthMainLine,
                    out hv_IsDetectRegionNG);
                HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfTenthMainLine,
                    out hv_IsHeadOrTailNG);
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //合并MBB第一个和第二个点宽度数组
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceArrayOfSecondPoint,
                    out hv_filmDistanceArray);
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                ho_weldingNGRegionOutOfSecondMainLine.Dispose();
                ho_mainLineRegionOutOfSecondMainLine.Dispose();
                ho_weldingNGRegionOutOfThirdMainLine.Dispose();
                ho_mainLineRegionOutOfThirdMainLine.Dispose();
                ho_weldingNGRegionOutOfFourthMainLine.Dispose();
                ho_mainLineRegionOutOfFourthMainLine.Dispose();
                ho_weldingNGRegionOutOfFifthMainLine.Dispose();
                ho_mainLineRegionOutOfFifthMainLine.Dispose();
                ho_weldingNGRegionOutOfSixthMainLine.Dispose();
                ho_mainLineRegionOutOfSixthMainLine.Dispose();
                ho_weldingNGRegionOutOfSeventhMainLine.Dispose();
                ho_mainLineRegionOutOfSeventhMainLine.Dispose();
                ho_weldingNGRegionOutOfEighthMainLine.Dispose();
                ho_mainLineRegionOutOfEighthMainLine.Dispose();
                ho_weldingNGRegionOutOfNinthMainLine.Dispose();
                ho_mainLineRegionOutOfNinthMainLine.Dispose();
                ho_weldingNGRegionOutOfTenthMainLine.Dispose();
                ho_mainLineRegionOutOfTenthMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void ProcessingBackTenMainLineImage(HObject ho_oriImage, out HObject ho_totalFilmShiftingRegionOut,
            out HObject ho_totalFilmMissRegionOut, out HObject ho_totalHeadAndTailFilmShiftingRegionOut,
            out HObject ho_totalEdgeDefectRegionOut, out HObject ho_totalSurfaceDefectRegionOut,
            out HObject ho_totalBrokenLineRegionOut, HTuple hv_width, HTuple hv_height,
            HTuple hv_windowHandle, HTuple hv_mainLineNum, HTuple hv_isFullWafer, HTuple hv_subMainLineNum,
            HTuple hv_isBackDetect, HTuple hv_isUsingWidthResolutionCalibrate, HTuple hv_widthResolution,
            HTuple hv_waferWidth, HTuple hv_isUsingHeightResolutionCalibrate, HTuple hv_heightResolution,
            HTuple hv_viceLineInterval, HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLengthOfTopRegion,
            HTuple hv_bottomShieldLengthOfTopRegion, HTuple hv_topShieldLengthOfBottomRegion,
            HTuple hv_bottomShieldLengthOfBottomRegion, HTuple hv_locationMainLineThresh,
            HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet, HTuple hv_firstDetectPosForTopRegion,
            HTuple hv_secondDetectPosForTopRegion, HTuple hv_firstDetectPosForBottomRegion,
            HTuple hv_secondDetectPosForBottomRegion, HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh,
            HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmWidthThresh,
            HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_isUsingWaferEdgeCalibration, HTuple hv_locationWaferEdgeThresh, HTuple hv_waferEdgeCalibrationRegionDilationPixel,
            HTuple hv_isUsingDistanceDetect, HTuple hv_minimumDistanceThresh, HTuple hv_maxDistanceThresh,
            HTuple hv_classDistanceThresh, HTuple hv_isUsingEdgeDefectDetect, HTuple hv_edgeBigDefectWidthThresh,
            HTuple hv_edgeBigDefectHeightThresh, HTuple hv_edgeSmallDefectDetectDepth, HTuple hv_edgeSmallDefectGrayThresh,
            HTuple hv_edgeSmallDefectWidthThresh, HTuple hv_edgeSmallDefectHeightThresh,
            HTuple hv_edgeSmallDefectGrayMeanThresh, HTuple hv_edgeSmallDefectGrayDeviationThresh,
            HTuple hv_cornerDefectAreaRatioThresh, HTuple hv_isUsingSurfaceDefectDetect,
            HTuple hv_surfaceDefectGrayThresh, HTuple hv_surfaceDefectWidthThresh, HTuple hv_surfaceDefectHeightThresh,
            HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_surfaceDefectViceLineShieldRightPosOffSet, HTuple hv_surfaceScratchGrayThresh,
            HTuple hv_surfaceScratchWidthThresh, HTuple hv_surfaceScratchHeightThresh, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_startWeldingDistanceMaxThresh, HTuple hv_startWeldingDistanceMinThresh,
            HTuple hv_isUsingBrokenLineDetect, HTuple hv_brokenLineGrayThresh, HTuple hv_brokenLineWidthThresh,
            HTuple hv_brokenLineHeightThresh, HTuple hv_brokenLineDetectIndentDepth, HTuple hv_isUsingSurfaceColorDiffDetect,
            HTuple hv_isUsingChinese, out HTuple hv_isException, out HTuple hv_exceptionInfo,
            out HTuple hv_isTopWaferExist, out HTuple hv_isBottomWaferExist, out HTuple hv_isWidthResolutionCalibrateFinish,
            out HTuple hv_widthResolutionOut, out HTuple hv_isHeightResolutionCalibrateFinish,
            out HTuple hv_heightResolutionOut, out HTuple hv_isFilmShiftingOfTopWafer, out HTuple hv_isFilmShiftingOfBottomWafer,
            out HTuple hv_isFilmMissOfTopWafer, out HTuple hv_isFilmMissOfBottomWafer, out HTuple hv_isHeadAndTailFilmShiftingOfTopWafer,
            out HTuple hv_isHeadAndTailFilmShiftingOfBottomWafer, out HTuple hv_isEdgeDefectOfTopWafer,
            out HTuple hv_isEdgeDefectOfBottomWafer, out HTuple hv_isDistanceNG, out HTuple hv_isNextClass,
            out HTuple hv_isSurfaceDefectOfTopWafer, out HTuple hv_isSurfaceDefectOfBottomWafer,
            out HTuple hv_isSurfaceScratchOfTopWafer, out HTuple hv_isSurfaceScratchOfBottomWafer,
            out HTuple hv_isBrokenLineOfTopWafer, out HTuple hv_isBrokenLineOfBottomWafer,
            out HTuple hv_isStartWeldingNGOfBottomWafer, out HTuple hv_surfaceMeanGrayOfTopWaferOut,
            out HTuple hv_surfaceMeanGrayOfBottomWaferOut, out HTuple hv_IsTopWaferNG, out HTuple hv_IsBottomWaferNG,
            out HTuple hv_IsHeadOfWaferNG, out HTuple hv_IsTailOfWaferNG, out HTuple hv_filmDistanceArrayOfTopWafer,
            out HTuple hv_filmDistanceArrayOfBottomWafer, out HTuple hv_BackTenInfoOut)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_SecondRegion, ho_ThirdRegion, ho_FourthRegion;
            HObject ho_TopMainLineRegions, ho_BottomMainLineRegions;
            HObject ho_SecondMainLineRegions, ho_ThirdMainLineRegions;
            HObject ho_FourthMainLineRegions, ho_TopEdgeDetectRegion;
            HObject ho_BottomEdgeDetectRegion, ho_totalEdgeDefectOfTopRegion;
            HObject ho_totalEdgeDefectOfBottomRegion, ho_CalibrateTopAroundRegion;
            HObject ho_CalibrateBottomAroundRegion, ho_TopRegion, ho_BottomRegion;
            HObject ho_TopRegionForDistance, ho_BottomRegionForDistance;
            HObject ho_RedChannelImage, ho_GreenChannelImage, ho_BlueChannelImage;
            HObject ho_ImageResult, ho_RegionsOfBinaryThreshold, ho_SelectedRegions;
            HObject ho_RegionFillUp, ho_RegionOpening, ho_ConnectedRegions3;
            HObject ho_SelectedRegion, ho_SortedRegions1, ho_ImageForFilmDetect;
            HObject ho_ImageForWeldNGDetect, ho_ImageForHeadWeldNGDetect;
            HObject ho_ImageForExtractROI = null, ho_RedChannelImageOpening;
            HObject ho_ImageForJudgeBackColor, ho_RectangleForTopRegionExist;
            HObject ho_ImageReducedForTopRegionExist, ho_TopRegionExist;
            HObject ho_RectangleForBottomRegionExist, ho_ImageReducedForBottomRegionExist;
            HObject ho_BottomRegionExist, ho_ImageReducedForJudgeBackColor = null;
            HObject ho_RegionGrayBack = null, ho_BlueChannelImageReduced = null;
            HObject ho_BackGrayImageForWeldNGDetect1 = null, ho_BackGrayImageForWeldNGDetect = null;
            HObject ho_ImageOpeningForHeightResolutionCalibrate = null;
            HObject ho_ImageForHeightResolutionCalibrate = null, ho_weldingNGRegionOut = null;
            HObject ho_mainLineRegionOut = null, ho_MaxRectangleTopRegion = null;
            HObject ho_MaxRectangleSecondRegion = null, ho_MaxRectangleThirdRegion = null;
            HObject ho_MaxRectangleFourthRegion = null, ho_MaxRectangleBottomRegion = null;

            // Local control variables 

            HTuple hv_PI = null, hv_isSecondpWaferExist = null;
            HTuple hv_isThirdWaferExist = null, hv_isFourthWaferExist = null;
            HTuple hv_isFilmShiftingOfSecondWafer = null, hv_isFilmShiftingOfThirdWafer = null;
            HTuple hv_isTopCellFull = null, hv_isSecondCellFull = null;
            HTuple hv_isThirdCellFull = null, hv_isBottomCellFull = null;
            HTuple hv_isLinearityNGDetect = null, hv_isBackGrayColor = null;
            HTuple hv_isNextClassC = null, hv_BackTenTopInfo = null;
            HTuple hv_BackTenSecondInfo = null, hv_BackTenThirdInfo = null;
            HTuple hv_BackTenFourthInfo = null, hv_BackTenBottomInfo = null;
            HTuple hv_isDetectOfTopWafer = null, hv_isDetectOfBottomWafer = null;
            HTuple hv_CenterRowOfTopRegion = null, hv_CenterColumnOfTopRegion = null;
            HTuple hv_CenterRowOfSecondRegion = null, hv_CenterColumnOfSecondRegion = null;
            HTuple hv_CenterRowOfThirdRegion = null, hv_CenterColumnOfThirdRegion = null;
            HTuple hv_CenterRowOfFourthRegion = null, hv_CenterColumnOfFourthRegion = null;
            HTuple hv_CenterRowOfBottomRegion = null, hv_CenterColumnOfBottomRegion = null;
            HTuple hv_minimumArea = null, hv_maxArea = null, hv_isTopRegionCalibrateFinish = null;
            HTuple hv_isBottomRegionCalibrateFinish = null, hv_RowOfLeftCornerPointTopRegion = null;
            HTuple hv_ColumnOfLeftCornerPointTopRegion = null, hv_RowOfRightCornerPointTopRegion = null;
            HTuple hv_ColumnOfRightCornerPointTopRegion = null, hv_RowOfLeftCornerPointBottomRegion = null;
            HTuple hv_ColumnOfLeftCornerPointBottomRegion = null, hv_RowOfRightCornerPointBottomRegion = null;
            HTuple hv_ColumnOfRightCornerPointBottomRegion = null;
            HTuple hv_mainLineWidth = null, hv_Number = null, hv_DistanceArray = null;
            HTuple hv_Index = null, hv_TopHeight = new HTuple(), hv_MaxHeight = null;
            HTuple hv_isSecondWaferExist = new HTuple(), hv_BottomHeight = null;
            HTuple hv_isFourthCellFull = new HTuple(), hv_AreaOfRegionGrayBack = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_Phi = new HTuple(), hv_halfWidth = new HTuple();
            HTuple hv_halfHeight = new HTuple(), hv_isExceptionOut = new HTuple();
            HTuple hv_FilmDistanceArrayOfFirstMainLine = new HTuple();
            HTuple hv_MeanPixDistance = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowPointsOfHeightResolution = new HTuple(), hv_ColumnPointsOfHeightResolution = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_Length = new HTuple(), hv_ViceLinePixelDistance = new HTuple();
            HTuple hv_isStartWeldingNG = new HTuple(), hv_Area = new HTuple();
            HTuple hv_isFilmShiftingOfFourthWafer = new HTuple(), hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_PhiOfSecondRegion = new HTuple(), hv_HalfWidthOfSecondRegion = new HTuple();
            HTuple hv_HalfHeightOfSecondRegion = new HTuple(), hv_PhiOfThirdRegion = new HTuple();
            HTuple hv_HalfWidthOfThirdRegion = new HTuple(), hv_HalfHeightOfThirdRegion = new HTuple();
            HTuple hv_PhiOfFourthRegion = new HTuple(), hv_HalfWidthOfFourthRegion = new HTuple();
            HTuple hv_HalfHeightOfFourthRegion = new HTuple(), hv_PhiOfBottomRegion = new HTuple();
            HTuple hv_HalfWidthOfBottomRegion = new HTuple(), hv_HalfHeightOfBottomRegion = new HTuple();
            HTuple hv_isSurfaceDefectOfSecondWafer = null, hv_surfaceMeanGrayOfSecondWaferOut = null;
            HTuple hv_surfaceMeanGrayOfThirdWaferOut = null, hv_isSurfaceDefectOfThirdWafer = null;
            HTuple hv_isSurfaceScratchOfSecondWafer = null, hv_isSurfaceScratchOfThirdWafer = null;
            HTuple hv_isSurfaceDefectOfFourthWafer = new HTuple();
            HTuple hv_surfaceMeanGrayOfFourthWaferOut = new HTuple();
            HTuple hv_isSurfaceDefectOfTFourthWafer = new HTuple();
            HTuple hv_isSurfaceScratchOfFourthWafer = new HTuple();
            HTuple hv_heightResolution_COPY_INP_TMP = hv_heightResolution.Clone();
            HTuple hv_widthResolution_COPY_INP_TMP = hv_widthResolution.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_SecondRegion);
            HOperatorSet.GenEmptyObj(out ho_ThirdRegion);
            HOperatorSet.GenEmptyObj(out ho_FourthRegion);
            HOperatorSet.GenEmptyObj(out ho_TopMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_SecondMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_ThirdMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_FourthMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateTopAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateBottomAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImage);
            HOperatorSet.GenEmptyObj(out ho_GreenChannelImage);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImage);
            HOperatorSet.GenEmptyObj(out ho_ImageResult);
            HOperatorSet.GenEmptyObj(out ho_RegionsOfBinaryThreshold);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegion);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions1);
            HOperatorSet.GenEmptyObj(out ho_ImageForFilmDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeadWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractROI);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImageOpening);
            HOperatorSet.GenEmptyObj(out ho_ImageForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_RectangleForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_TopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RectangleForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_RegionGrayBack);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImageReduced);
            HOperatorSet.GenEmptyObj(out ho_BackGrayImageForWeldNGDetect1);
            HOperatorSet.GenEmptyObj(out ho_BackGrayImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningForHeightResolutionCalibrate);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeightResolutionCalibrate);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleTopRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleSecondRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleThirdRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleFourthRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleBottomRegion);
            try
            {
                hv_PI = 3.1415926;
                //*********************返回结果**************************
                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isTopWaferExist = 0;
                hv_isBottomWaferExist = 0;
                //
                hv_isSecondpWaferExist = 0;
                hv_isThirdWaferExist = 0;
                hv_isFourthWaferExist = 0;
                //
                hv_isWidthResolutionCalibrateFinish = 0;
                hv_widthResolutionOut = -1;
                hv_isHeightResolutionCalibrateFinish = 0;
                hv_heightResolutionOut = -1;
                hv_isFilmShiftingOfTopWafer = 0;
                hv_isFilmShiftingOfBottomWafer = 0;
                //20200316
                hv_isFilmShiftingOfSecondWafer = 0;
                hv_isFilmShiftingOfThirdWafer = 0;
                hv_isTopCellFull = 0;
                hv_isSecondCellFull = 0;
                hv_isThirdCellFull = 0;
                hv_isBottomCellFull = 0;
                //
                hv_isFilmMissOfTopWafer = 0;
                hv_isFilmMissOfBottomWafer = 0;
                hv_isHeadAndTailFilmShiftingOfTopWafer = 0;
                hv_isHeadAndTailFilmShiftingOfBottomWafer = 0;
                hv_isEdgeDefectOfTopWafer = 0;
                hv_isEdgeDefectOfBottomWafer = 0;
                hv_isDistanceNG = 0;
                hv_isNextClass = 0;
                hv_isSurfaceDefectOfTopWafer = 0;
                hv_isSurfaceDefectOfBottomWafer = 0;
                hv_isSurfaceScratchOfTopWafer = 0;
                hv_isSurfaceScratchOfBottomWafer = 0;
                hv_isBrokenLineOfTopWafer = 0;
                hv_isBrokenLineOfBottomWafer = 0;
                hv_isStartWeldingNGOfBottomWafer = 0;
                hv_surfaceMeanGrayOfTopWaferOut = -1;
                hv_surfaceMeanGrayOfBottomWaferOut = -1;
                hv_isLinearityNGDetect = 0;
                hv_isBackGrayColor = 0;
                hv_isNextClassC = 0;
                //
                ho_totalFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmShiftingRegionOut);
                ho_totalFilmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmMissRegionOut);
                ho_totalHeadAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalHeadAndTailFilmShiftingRegionOut);
                ho_totalEdgeDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectRegionOut);
                ho_totalSurfaceDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOut);
                ho_totalBrokenLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOut);
                //
                ho_SecondRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_SecondRegion);
                ho_ThirdRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_ThirdRegion);
                ho_FourthRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_FourthRegion);
                //
                //各主栅线上半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTopWaferNG);
                //各主栅线下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsBottomWaferNG);
                //各主栅线头部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOfWaferNG);
                //各主栅线尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTailOfWaferNG);
                //
                //
                //上半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfTopWafer);
                //下半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfBottomWafer);
                //
                //存放电池片信息数组
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenInfoOut);
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenTopInfo);
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenSecondInfo);
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenThirdInfo);
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenFourthInfo);
                HOperatorSet.TupleGenConst(0, 0, out hv_BackTenBottomInfo);
                //
                //2020.05.12-上下半片单独计算
                hv_isDetectOfTopWafer = 0;
                hv_isDetectOfBottomWafer = 0;

                //2020.05.13-初始化参数
                hv_CenterRowOfTopRegion = -1;
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterRowOfSecondRegion = -1;
                hv_CenterColumnOfSecondRegion = -1;
                hv_CenterRowOfThirdRegion = -1;
                hv_CenterColumnOfThirdRegion = -1;
                hv_CenterRowOfFourthRegion = -1;
                hv_CenterColumnOfFourthRegion = -1;
                hv_CenterRowOfBottomRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //*********************局部变量**************************
                //半片占相机视野最小面积
                hv_minimumArea = (hv_width * hv_height) * 0.1;
                //半片占相机视野最大面积
                hv_maxArea = (hv_width * hv_height) * 0.9;
                //上半片主栅线区域
                ho_TopMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopMainLineRegions);
                //下半片主栅线区域
                ho_BottomMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomMainLineRegions);
                //
                ho_SecondMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_SecondMainLineRegions);
                ho_ThirdMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_ThirdMainLineRegions);
                ho_FourthMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_FourthMainLineRegions);
                //
                //上半片边角检测区域
                ho_TopEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopEdgeDetectRegion);
                //下半片边角检测区域
                ho_BottomEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomEdgeDetectRegion);
                //上半片边角缺陷区域
                ho_totalEdgeDefectOfTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfTopRegion);
                //下半片边角缺陷区域
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfBottomRegion);
                //
                //上下半片区域矫正是否完成
                hv_isTopRegionCalibrateFinish = 0;
                hv_isBottomRegionCalibrateFinish = 0;
                //上半片左、右角点
                hv_RowOfLeftCornerPointTopRegion = -1;
                hv_ColumnOfLeftCornerPointTopRegion = -1;
                hv_RowOfRightCornerPointTopRegion = -1;
                hv_ColumnOfRightCornerPointTopRegion = -1;
                //下半片左、右角点
                hv_RowOfLeftCornerPointBottomRegion = -1;
                hv_ColumnOfLeftCornerPointBottomRegion = -1;
                hv_RowOfRightCornerPointBottomRegion = -1;
                hv_ColumnOfRightCornerPointBottomRegion = -1;
                //主栅线宽度(mm)
                hv_mainLineWidth = 0.6;
                //
                //缺角、表面、断栅缺陷检测函数对应参数初始化，避免异常发生
                ho_CalibrateTopAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateTopAroundRegion);
                ho_CalibrateBottomAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateBottomAroundRegion);
                ho_TopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegion);
                ho_BottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegion);
                ho_TopRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegionForDistance);
                ho_BottomRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegionForDistance);
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //*******************************************************
                //分割彩色图片，分别对应1-R、2-G、3-B
                ho_RedChannelImage.Dispose(); ho_GreenChannelImage.Dispose(); ho_BlueChannelImage.Dispose();
                HOperatorSet.Decompose3(ho_oriImage, out ho_RedChannelImage, out ho_GreenChannelImage,
                    out ho_BlueChannelImage);
                //
                ho_ImageResult.Dispose();
                HOperatorSet.MultImage(ho_BlueChannelImage, ho_BlueChannelImage, out ho_ImageResult,
                    0.1, 0);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.GrayClosingRect(ho_ImageResult, out ExpTmpOutVar_0, 2, 30);
                    ho_ImageResult.Dispose();
                    ho_ImageResult = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.GrayOpeningRect(ho_ImageResult, out ExpTmpOutVar_0, 1, 20);
                    ho_ImageResult.Dispose();
                    ho_ImageResult = ExpTmpOutVar_0;
                }
                //binary_threshold (ImageResult, RegionsOfBinaryThreshold, 'max_separability', 'light', UsedThreshold)
                ho_RegionsOfBinaryThreshold.Dispose();
                HOperatorSet.Threshold(ho_ImageResult, out ho_RegionsOfBinaryThreshold, 200,
                    255);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                        0.06 * hv_width, 10);
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                }
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegions,
                    "max_area", 70);
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, 20, 20);
                ho_ConnectedRegions3.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions3);
                ho_SelectedRegion.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegion, "area",
                    "and", 60000, hv_maxArea);
                HOperatorSet.CountObj(ho_SelectedRegion, out hv_Number);
                ho_SortedRegions1.Dispose();
                HOperatorSet.SortRegion(ho_SelectedRegion, out ho_SortedRegions1, "upper_left",
                    "true", "row");
                hv_DistanceArray = new HTuple();
                HTuple end_val161 = hv_Number;
                HTuple step_val161 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val161, step_val161); hv_Index = hv_Index.TupleAdd(step_val161))
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, hv_Index);
                    HOperatorSet.RegionFeatures(ho_TopRegion, "height", out hv_TopHeight);
                    if (hv_DistanceArray == null)
                        hv_DistanceArray = new HTuple();
                    hv_DistanceArray[hv_Index - 1] = hv_TopHeight;
                }
                HOperatorSet.TupleMax(hv_DistanceArray, out hv_MaxHeight);
                ho_SelectedRegion.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegion, "height",
                    "and", hv_MaxHeight / 6, hv_MaxHeight);
                HOperatorSet.CountObj(ho_SelectedRegion, out hv_Number);
                ho_SortedRegions1.Dispose();
                HOperatorSet.SortRegion(ho_SelectedRegion, out ho_SortedRegions1, "upper_left",
                    "true", "row");
                //
                //提取主栅线特征图
                //2019-6-12 5改为mainLineWidth / 0.04
                //gray_opening_rect (RedChannelImage, ImageForFilmDetect, 20, mainLineWidth / 0.04)
                //2019-7-29 高度20改为10
                ho_ImageForFilmDetect.Dispose();
                HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageForFilmDetect,
                    10, hv_mainLineWidth / 0.04);
                ho_ImageForWeldNGDetect.Dispose();
                HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageForWeldNGDetect,
                    10, 1);
                //
                //2019-5-22下半片头尾膜偏处理图
                //2019-6-12 优化时间
                ho_ImageForHeadWeldNGDetect.Dispose();
                HOperatorSet.GrayClosingRect(ho_ImageForWeldNGDetect, out ho_ImageForHeadWeldNGDetect,
                    1, 15);
                //
                //提取硅片ROI区域图
                ho_ImageResult.Dispose();
                HOperatorSet.MultImage(ho_BlueChannelImage, ho_BlueChannelImage, out ho_ImageResult,
                    0.04, 0);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.GrayClosingRect(ho_ImageResult, out ExpTmpOutVar_0, 2, 30);
                    ho_ImageResult.Dispose();
                    ho_ImageResult = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.GrayOpeningRect(ho_ImageResult, out ExpTmpOutVar_0, 1, 20);
                    ho_ImageResult.Dispose();
                    ho_ImageResult = ExpTmpOutVar_0;
                }
                ho_ImageForExtractROI.Dispose();
                ho_ImageForExtractROI = ho_ImageResult.CopyObj(1, -1);
                //
                //2019-5-9
                ho_RedChannelImageOpening.Dispose();
                HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_RedChannelImageOpening,
                    50, 50);
                ho_ImageForJudgeBackColor.Dispose();
                HOperatorSet.GrayClosingRect(ho_RedChannelImageOpening, out ho_ImageForJudgeBackColor,
                    1, 1);
                //
                //判断是否有第1片的上半片
                ho_RectangleForTopRegionExist.Dispose();
                HOperatorSet.GenRectangle1(out ho_RectangleForTopRegionExist, 130, 600, 230,
                    3000);
                ho_ImageReducedForTopRegionExist.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_RectangleForTopRegionExist,
                    out ho_ImageReducedForTopRegionExist);
                ho_TopRegionExist.Dispose();
                HOperatorSet.Threshold(ho_ImageReducedForTopRegionExist, out ho_TopRegionExist,
                    50, 255);
                //
                //判断是否有尾片或最后一片的下半片
                ho_RectangleForBottomRegionExist.Dispose();
                HOperatorSet.GenRectangle1(out ho_RectangleForBottomRegionExist, hv_height - 200,
                    600, hv_height - 100, 3000);
                ho_ImageReducedForBottomRegionExist.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_RectangleForBottomRegionExist,
                    out ho_ImageReducedForBottomRegionExist);
                ho_BottomRegionExist.Dispose();
                HOperatorSet.Threshold(ho_ImageReducedForBottomRegionExist, out ho_BottomRegionExist,
                    50, 255);
                //
                //判断电池片有无
                //平台空
                if ((int)(new HTuple(hv_Number.TupleEqual(0))) != 0)
                {
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "空平台";
                    }
                    else
                    {
                        hv_exceptionInfo = "Empty Platform";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    ho_SecondRegion.Dispose();
                    ho_ThirdRegion.Dispose();
                    ho_FourthRegion.Dispose();
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_SecondMainLineRegions.Dispose();
                    ho_ThirdMainLineRegions.Dispose();
                    ho_FourthMainLineRegions.Dispose();
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageResult.Dispose();
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegion.Dispose();
                    ho_SortedRegions1.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RedChannelImageOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_ImageReducedForTopRegionExist.Dispose();
                    ho_TopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_ImageReducedForBottomRegionExist.Dispose();
                    ho_BottomRegionExist.Dispose();
                    ho_ImageReducedForJudgeBackColor.Dispose();
                    ho_RegionGrayBack.Dispose();
                    ho_BlueChannelImageReduced.Dispose();
                    ho_BackGrayImageForWeldNGDetect1.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                    ho_ImageForHeightResolutionCalibrate.Dispose();
                    ho_weldingNGRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleSecondRegion.Dispose();
                    ho_MaxRectangleThirdRegion.Dispose();
                    ho_MaxRectangleFourthRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();

                    return;
                }
                //
                if ((int)(new HTuple(hv_Number.TupleGreater(5))) != 0)
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "内置参数异常！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Built-in parameter error!";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    ho_SecondRegion.Dispose();
                    ho_ThirdRegion.Dispose();
                    ho_FourthRegion.Dispose();
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_SecondMainLineRegions.Dispose();
                    ho_ThirdMainLineRegions.Dispose();
                    ho_FourthMainLineRegions.Dispose();
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageResult.Dispose();
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegion.Dispose();
                    ho_SortedRegions1.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RedChannelImageOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_ImageReducedForTopRegionExist.Dispose();
                    ho_TopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_ImageReducedForBottomRegionExist.Dispose();
                    ho_BottomRegionExist.Dispose();
                    ho_ImageReducedForJudgeBackColor.Dispose();
                    ho_RegionGrayBack.Dispose();
                    ho_BlueChannelImageReduced.Dispose();
                    ho_BackGrayImageForWeldNGDetect1.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                    ho_ImageForHeightResolutionCalibrate.Dispose();
                    ho_weldingNGRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleSecondRegion.Dispose();
                    ho_MaxRectangleThirdRegion.Dispose();
                    ho_MaxRectangleFourthRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();

                    return;
                    //串尾
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(1))) != 0)
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, 1);
                    hv_isTopWaferExist = 1;
                    //串间
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(2))) != 0)
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, 1);
                    ho_BottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_BottomRegion, 2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_TopRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_TopRegion.Dispose();
                        ho_TopRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_BottomRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_BottomRegion.Dispose();
                        ho_BottomRegion = ExpTmpOutVar_0;
                    }
                    hv_isTopWaferExist = 1;
                    hv_isBottomWaferExist = 1;
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(3))) != 0)
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, 1);
                    ho_SecondRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_SecondRegion, 2);
                    ho_BottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_BottomRegion, 3);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_TopRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_TopRegion.Dispose();
                        ho_TopRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_SecondRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_SecondRegion.Dispose();
                        ho_SecondRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_BottomRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_BottomRegion.Dispose();
                        ho_BottomRegion = ExpTmpOutVar_0;
                    }
                    hv_isTopWaferExist = 1;
                    hv_isSecondWaferExist = 1;
                    hv_isBottomWaferExist = 1;
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(4))) != 0)
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, 1);
                    ho_SecondRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_SecondRegion, 2);
                    ho_ThirdRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_ThirdRegion, 3);
                    ho_BottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_BottomRegion, 4);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_TopRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_TopRegion.Dispose();
                        ho_TopRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_SecondRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_SecondRegion.Dispose();
                        ho_SecondRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_ThirdRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_ThirdRegion.Dispose();
                        ho_ThirdRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_BottomRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_BottomRegion.Dispose();
                        ho_BottomRegion = ExpTmpOutVar_0;
                    }
                    hv_isTopWaferExist = 1;
                    hv_isSecondWaferExist = 1;
                    hv_isThirdWaferExist = 1;
                    hv_isBottomWaferExist = 1;
                }
                else if ((int)(new HTuple(hv_Number.TupleEqual(5))) != 0)
                {
                    ho_TopRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_TopRegion, 1);
                    ho_SecondRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_SecondRegion, 2);
                    ho_ThirdRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_ThirdRegion, 3);
                    ho_FourthRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_FourthRegion, 4);
                    ho_BottomRegion.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions1, out ho_BottomRegion, 5);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_TopRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_TopRegion.Dispose();
                        ho_TopRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_SecondRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_SecondRegion.Dispose();
                        ho_SecondRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_ThirdRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_ThirdRegion.Dispose();
                        ho_ThirdRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_FourthRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_FourthRegion.Dispose();
                        ho_FourthRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_BottomRegion, out ExpTmpOutVar_0, 1, 15);
                        ho_BottomRegion.Dispose();
                        ho_BottomRegion = ExpTmpOutVar_0;
                    }
                    hv_isTopWaferExist = 1;
                    hv_isSecondWaferExist = 1;
                    hv_isThirdWaferExist = 1;
                    hv_isFourthWaferExist = 1;
                    hv_isBottomWaferExist = 1;
                }
                //*************************************************************
                HOperatorSet.RegionFeatures(ho_TopRegion, "height", out hv_TopHeight);
                HOperatorSet.RegionFeatures(ho_BottomRegion, "height", out hv_BottomHeight);
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //半片
                    if ((int)(new HTuple(hv_TopHeight.TupleLess((5 * hv_MaxHeight) / 6))) != 0)
                    {
                        hv_isTopCellFull = 1;
                    }
                    else
                    {
                        hv_isTopCellFull = 2;
                    }
                }
                else
                {
                    hv_isTopCellFull = 0;
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //半片
                    if ((int)(new HTuple(hv_BottomHeight.TupleLess((5 * hv_MaxHeight) / 6))) != 0)
                    {
                        hv_isBottomCellFull = 1;
                    }
                    else
                    {
                        hv_isBottomCellFull = 2;
                    }
                }
                else
                {
                    hv_isBottomCellFull = 0;
                }
                //
                if ((int)(hv_isSecondWaferExist) != 0)
                {
                    hv_isSecondCellFull = 2;
                }
                else
                {
                    hv_isSecondCellFull = 0;
                }
                //
                if ((int)(hv_isThirdWaferExist) != 0)
                {
                    hv_isThirdCellFull = 2;
                }
                else
                {
                    hv_isThirdCellFull = 0;
                }
                if ((int)(new HTuple(hv_Number.TupleEqual(5))) != 0)
                {
                    if ((int)(hv_isFourthWaferExist) != 0)
                    {
                        hv_isFourthCellFull = 2;
                    }
                    else
                    {
                        hv_isFourthCellFull = 0;
                    }
                    HOperatorSet.TupleConcat(hv_BackTenFourthInfo, hv_isFourthCellFull, out hv_BackTenFourthInfo);
                }
                //
                HOperatorSet.TupleConcat(hv_BackTenTopInfo, hv_isTopCellFull, out hv_BackTenTopInfo);
                HOperatorSet.TupleConcat(hv_BackTenSecondInfo, hv_isSecondCellFull, out hv_BackTenSecondInfo);
                HOperatorSet.TupleConcat(hv_BackTenThirdInfo, hv_isThirdCellFull, out hv_BackTenThirdInfo);
                HOperatorSet.TupleConcat(hv_BackTenBottomInfo, hv_isBottomCellFull, out hv_BackTenBottomInfo);
                //
                //2019-5-9 判断背面检测是否有印刷
                if ((int)(hv_isBackDetect) != 0)
                {
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        ho_ImageReducedForJudgeBackColor.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForJudgeBackColor, ho_RectangleForTopRegionExist,
                            out ho_ImageReducedForJudgeBackColor);
                        ho_RegionGrayBack.Dispose();
                        HOperatorSet.Threshold(ho_ImageReducedForJudgeBackColor, out ho_RegionGrayBack,
                            50, 255);
                        HOperatorSet.AreaCenter(ho_RegionGrayBack, out hv_AreaOfRegionGrayBack,
                            out hv_Row, out hv_Column);
                    }
                    else
                    {
                        ho_ImageReducedForJudgeBackColor.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForJudgeBackColor, ho_RectangleForBottomRegionExist,
                            out ho_ImageReducedForJudgeBackColor);
                        ho_RegionGrayBack.Dispose();
                        HOperatorSet.Threshold(ho_ImageReducedForJudgeBackColor, out ho_RegionGrayBack,
                            50, 255);
                        HOperatorSet.AreaCenter(ho_RegionGrayBack, out hv_AreaOfRegionGrayBack,
                            out hv_Row, out hv_Column);
                    }
                    if ((int)(hv_isUsingFilmMissDetect) != 0)
                    {
                        hv_isBackGrayColor = 0;
                    }
                    else
                    {
                        hv_isBackGrayColor = 1;
                    }
                    ho_BlueChannelImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(ho_BlueChannelImage, ho_RegionOpening, out ho_BlueChannelImageReduced
                        );
                    ho_BackGrayImageForWeldNGDetect1.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_BlueChannelImageReduced, out ho_BackGrayImageForWeldNGDetect1,
                        30, 1);
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    HOperatorSet.Emphasize(ho_BackGrayImageForWeldNGDetect1, out ho_BackGrayImageForWeldNGDetect,
                        40, 7, 1);
                    //
                    //if (AreaOfRegionGrayBack >= 100000)
                    //isBackGrayColor := true
                    //reduce_domain (BlueChannelImage, RegionOpening, BlueChannelImageReduced)
                    //gray_opening_rect (BlueChannelImageReduced, BackGrayImageForWeldNGDetect, 30, 1)
                    //endif
                }
                //
                //宽度分辨率校准
                if ((int)(hv_isUsingWidthResolutionCalibrate) != 0)
                {
                    if ((int)(hv_isBottomWaferExist) != 0)
                    {
                        //smallest_rectangle2 (TopRegion, CenterRowOfTopRegion, CenterColumnOfTopRegion, Phi, halfWidth, halfHeight)
                        //2019-4-16利用主栅线校准分辨率
                        WidthResolutionCalibrateFunctionForFiveMainLine(ho_ImageForFilmDetect,
                            ho_BottomRegion, hv_width, hv_height, hv_heightResolution_COPY_INP_TMP,
                            hv_mainLineNum, hv_topShieldLengthOfBottomRegion, hv_bottomShieldLengthOfBottomRegion,
                            hv_locationMainLineThresh, hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange,
                            hv_widthResolution_COPY_INP_TMP, hv_windowHandle, out hv_isExceptionOut,
                            out hv_FilmDistanceArrayOfFirstMainLine);
                        if ((int)(hv_isExceptionOut) != 0)
                        {
                            hv_isException = 1;
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_exceptionInfo = "宽度分辨率校准函数异常!";
                            }
                            else
                            {
                                hv_exceptionInfo = "Width resolution calibration function error!";
                            }
                            //
                            disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                            ho_SecondRegion.Dispose();
                            ho_ThirdRegion.Dispose();
                            ho_FourthRegion.Dispose();
                            ho_TopMainLineRegions.Dispose();
                            ho_BottomMainLineRegions.Dispose();
                            ho_SecondMainLineRegions.Dispose();
                            ho_ThirdMainLineRegions.Dispose();
                            ho_FourthMainLineRegions.Dispose();
                            ho_TopEdgeDetectRegion.Dispose();
                            ho_BottomEdgeDetectRegion.Dispose();
                            ho_totalEdgeDefectOfTopRegion.Dispose();
                            ho_totalEdgeDefectOfBottomRegion.Dispose();
                            ho_CalibrateTopAroundRegion.Dispose();
                            ho_CalibrateBottomAroundRegion.Dispose();
                            ho_TopRegion.Dispose();
                            ho_BottomRegion.Dispose();
                            ho_TopRegionForDistance.Dispose();
                            ho_BottomRegionForDistance.Dispose();
                            ho_RedChannelImage.Dispose();
                            ho_GreenChannelImage.Dispose();
                            ho_BlueChannelImage.Dispose();
                            ho_ImageResult.Dispose();
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_SelectedRegions.Dispose();
                            ho_RegionFillUp.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegions3.Dispose();
                            ho_SelectedRegion.Dispose();
                            ho_SortedRegions1.Dispose();
                            ho_ImageForFilmDetect.Dispose();
                            ho_ImageForWeldNGDetect.Dispose();
                            ho_ImageForHeadWeldNGDetect.Dispose();
                            ho_ImageForExtractROI.Dispose();
                            ho_RedChannelImageOpening.Dispose();
                            ho_ImageForJudgeBackColor.Dispose();
                            ho_RectangleForTopRegionExist.Dispose();
                            ho_ImageReducedForTopRegionExist.Dispose();
                            ho_TopRegionExist.Dispose();
                            ho_RectangleForBottomRegionExist.Dispose();
                            ho_ImageReducedForBottomRegionExist.Dispose();
                            ho_BottomRegionExist.Dispose();
                            ho_ImageReducedForJudgeBackColor.Dispose();
                            ho_RegionGrayBack.Dispose();
                            ho_BlueChannelImageReduced.Dispose();
                            ho_BackGrayImageForWeldNGDetect1.Dispose();
                            ho_BackGrayImageForWeldNGDetect.Dispose();
                            ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                            ho_ImageForHeightResolutionCalibrate.Dispose();
                            ho_weldingNGRegionOut.Dispose();
                            ho_mainLineRegionOut.Dispose();
                            ho_MaxRectangleTopRegion.Dispose();
                            ho_MaxRectangleSecondRegion.Dispose();
                            ho_MaxRectangleThirdRegion.Dispose();
                            ho_MaxRectangleFourthRegion.Dispose();
                            ho_MaxRectangleBottomRegion.Dispose();

                            return;
                        }
                        HOperatorSet.TupleMean(hv_FilmDistanceArrayOfFirstMainLine, out hv_MeanPixDistance);
                        hv_widthResolution_COPY_INP_TMP = hv_waferWidth / hv_MeanPixDistance;
                        hv_isWidthResolutionCalibrateFinish = 1;
                        hv_widthResolutionOut = hv_widthResolution_COPY_INP_TMP.Clone();
                        //
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "宽度分辨率校准失败，无法检测到上半片！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Width resolution calibration failed. Cannot find upper cell! ";
                        }
                        //
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isWidthResolutionCalibrateFinish = 0;
                    }
                }
                //
                //高度分辨率校准
                if ((int)(hv_isUsingHeightResolutionCalibrate) != 0)
                {
                    //提取细栅线特征图
                    ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageOpeningForHeightResolutionCalibrate,
                        1, 80);
                    ho_ImageForHeightResolutionCalibrate.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageOpeningForHeightResolutionCalibrate,
                        out ho_ImageForHeightResolutionCalibrate, 1, 100);
                    //
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                            out hv_CenterColumnOfTopRegion, out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                        //disp_rectangle2 (windowHandle, CenterRowOfTopRegion, CenterColumnOfTopRegion-335, Phi-0.5*PI, 60, 5)
                        HOperatorSet.GenMeasureRectangle2(hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion - 335,
                            hv_Phi - (0.5 * hv_PI), 60, 5, hv_width, hv_height, "bilinear", out hv_MeasureHandle);
                        HOperatorSet.MeasurePos(ho_ImageForHeightResolutionCalibrate, hv_MeasureHandle,
                            3, 5, "positive", "all", out hv_RowPointsOfHeightResolution, out hv_ColumnPointsOfHeightResolution,
                            out hv_Amplitude, out hv_Distance);
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        HOperatorSet.TupleLength(hv_RowPointsOfHeightResolution, out hv_Length);
                        if ((int)(new HTuple(hv_Length.TupleLess(2))) != 0)
                        {
                            hv_isException = 1;
                            if ((int)(hv_isUsingChinese) != 0)
                            {
                                hv_exceptionInfo = "高度分辨率校准失败，无法检测到细栅线的两个点！";
                            }
                            else
                            {
                                hv_exceptionInfo = "Height resolution calibration failed. Cannot find two points for finger! ";
                            }
                            //
                            disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                            hv_isHeightResolutionCalibrateFinish = 0;
                        }
                        else
                        {
                            HOperatorSet.DistancePp(hv_RowPointsOfHeightResolution.TupleSelect(0),
                                hv_ColumnPointsOfHeightResolution.TupleSelect(0), hv_RowPointsOfHeightResolution.TupleSelect(
                                1), hv_ColumnPointsOfHeightResolution.TupleSelect(1), out hv_ViceLinePixelDistance);
                            hv_heightResolution_COPY_INP_TMP = hv_viceLineInterval / hv_ViceLinePixelDistance;
                            hv_isHeightResolutionCalibrateFinish = 1;
                            hv_heightResolutionOut = hv_heightResolution_COPY_INP_TMP.Clone();
                        }
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "高度分辨率校准失败，无法检测到上半片！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Height resolution calibration failed. Cannot find upper cell! ";
                        }
                        //
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isHeightResolutionCalibrateFinish = 0;
                    }
                }
                //
                //膜检(膜偏、露白|膜短、膜失|头尾膜检)，起焊点异常||||MBB露白
                if ((int)((new HTuple((new HTuple((new HTuple(hv_isUsingFilmShiftingDetect.TupleEqual(
                    1))).TupleOr(new HTuple(hv_isUsingFilmMissDetect.TupleEqual(1))))).TupleOr(
                    new HTuple(hv_isUsingHeadAndTailFilmShiftingDetect.TupleEqual(1))))).TupleOr(
                    new HTuple(hv_isUsingStartWeldingDetect.TupleEqual(1)))) != 0)
                {
                    //上半片处理
                    //第一片
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                        ho_TopRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut, hv_width,
                        hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                            out ExpTmpOutVar_0);
                        ho_totalFilmShiftingRegionOut.Dispose();
                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_TopMainLineRegions.Dispose();
                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                    }
                    //判断是否膜偏、露白以及膜短、膜失
                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isFilmShiftingOfTopWafer = 1;
                    }
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenSubMainLineOfBack(ho_RedChannelImage, ho_TopRegion,
                        out ho_weldingNGRegionOut, out ho_mainLineRegionOut, hv_width, hv_height,
                        hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_TopMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_TopMainLineRegions.Dispose();
                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                    }
                    //
                    //第二片
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                        ho_SecondRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                        hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                            out ExpTmpOutVar_0);
                        ho_totalFilmShiftingRegionOut.Dispose();
                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_SecondMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_SecondMainLineRegions.Dispose();
                        ho_SecondMainLineRegions = ExpTmpOutVar_0;
                    }
                    //判断是否膜偏、露白以及膜短、膜失
                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isFilmShiftingOfSecondWafer = 1;
                    }
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenSubMainLineOfBack(ho_RedChannelImage, ho_SecondRegion,
                        out ho_weldingNGRegionOut, out ho_mainLineRegionOut, hv_width, hv_height,
                        hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_SecondMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_SecondMainLineRegions.Dispose();
                        ho_SecondMainLineRegions = ExpTmpOutVar_0;
                    }
                    //第三片
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                        ho_ThirdRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                        hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                            out ExpTmpOutVar_0);
                        ho_totalFilmShiftingRegionOut.Dispose();
                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_ThirdMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_ThirdMainLineRegions.Dispose();
                        ho_ThirdMainLineRegions = ExpTmpOutVar_0;
                    }
                    //判断是否膜偏、露白以及膜短、膜失
                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isFilmShiftingOfThirdWafer = 1;
                    }
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenSubMainLineOfBack(ho_RedChannelImage, ho_ThirdRegion,
                        out ho_weldingNGRegionOut, out ho_mainLineRegionOut, hv_width, hv_height,
                        hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_ThirdMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_ThirdMainLineRegions.Dispose();
                        ho_ThirdMainLineRegions = ExpTmpOutVar_0;
                    }
                    //最后一片
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                        ho_BottomRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                        hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                            out ExpTmpOutVar_0);
                        ho_totalFilmShiftingRegionOut.Dispose();
                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BottomMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_BottomMainLineRegions.Dispose();
                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                    }
                    //判断是否膜偏、露白以及膜短、膜失
                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row, out hv_Column);
                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                    {
                        hv_isFilmShiftingOfBottomWafer = 1;
                    }
                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                    DetectWeldingDefectFunctionForTenSubMainLineOfBack(ho_RedChannelImage, ho_BottomRegion,
                        out ho_weldingNGRegionOut, out ho_mainLineRegionOut, hv_width, hv_height,
                        hv_windowHandle, hv_isUsingFilmShiftingDetect, hv_widthResolution_COPY_INP_TMP,
                        hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_BottomMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                            );
                        ho_BottomMainLineRegions.Dispose();
                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                    }
                    //第四片
                    if ((int)(new HTuple(hv_Number.TupleEqual(5))) != 0)
                    {
                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                        DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                            ho_FourthRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                            hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                            hv_widthResolution_COPY_INP_TMP, hv_weldWidthThresh, hv_filmWidthThresh,
                            out hv_isStartWeldingNG);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                out ExpTmpOutVar_0);
                            ho_totalFilmShiftingRegionOut.Dispose();
                            ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_FourthMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                                );
                            ho_FourthMainLineRegions.Dispose();
                            ho_FourthMainLineRegions = ExpTmpOutVar_0;
                        }
                        //判断是否膜偏、露白以及膜短、膜失
                        HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                            out hv_Column);
                        if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                        {
                            hv_isFilmShiftingOfFourthWafer = 1;
                        }
                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                        DetectWeldingDefectFunctionForTenSubMainLineOfBack(ho_RedChannelImage,
                            ho_FourthRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                            hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                            hv_widthResolution_COPY_INP_TMP, hv_weldWidthThresh, hv_filmWidthThresh,
                            out hv_isStartWeldingNG);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_FourthMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                                );
                            ho_FourthMainLineRegions.Dispose();
                            ho_FourthMainLineRegions = ExpTmpOutVar_0;
                        }
                        HOperatorSet.TupleConcat(hv_BackTenFourthInfo, hv_isFilmShiftingOfFourthWafer,
                            out hv_BackTenFourthInfo);
                    }
                    //
                    HOperatorSet.TupleConcat(hv_BackTenTopInfo, hv_isFilmShiftingOfTopWafer,
                        out hv_BackTenTopInfo);
                    HOperatorSet.TupleConcat(hv_BackTenSecondInfo, hv_isFilmShiftingOfSecondWafer,
                        out hv_BackTenSecondInfo);
                    HOperatorSet.TupleConcat(hv_BackTenThirdInfo, hv_isFilmShiftingOfThirdWafer,
                        out hv_BackTenThirdInfo);
                    HOperatorSet.TupleConcat(hv_BackTenBottomInfo, hv_isFilmShiftingOfBottomWafer,
                        out hv_BackTenBottomInfo);
                    //
                }
                //2020.05.13-颜色均值显示位置
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                        out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                        out hv_HalfHeightOfTopRegion);
                    ho_MaxRectangleTopRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleTopRegion, hv_CenterRowOfTopRegion,
                        hv_CenterColumnOfTopRegion, hv_PhiOfTopRegion, hv_HalfWidthOfTopRegion,
                        hv_HalfHeightOfTopRegion);
                }
                if ((int)(hv_isSecondWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_SecondRegion, out hv_CenterRowOfSecondRegion,
                        out hv_CenterColumnOfSecondRegion, out hv_PhiOfSecondRegion, out hv_HalfWidthOfSecondRegion,
                        out hv_HalfHeightOfSecondRegion);
                    ho_MaxRectangleSecondRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleSecondRegion, hv_CenterRowOfSecondRegion,
                        hv_CenterColumnOfSecondRegion, hv_PhiOfSecondRegion, hv_HalfWidthOfSecondRegion,
                        hv_HalfHeightOfSecondRegion);
                }
                if ((int)(hv_isThirdWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_ThirdRegion, out hv_CenterRowOfThirdRegion,
                        out hv_CenterColumnOfThirdRegion, out hv_PhiOfThirdRegion, out hv_HalfWidthOfThirdRegion,
                        out hv_HalfHeightOfThirdRegion);
                    ho_MaxRectangleThirdRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleThirdRegion, hv_CenterRowOfThirdRegion,
                        hv_CenterColumnOfThirdRegion, hv_PhiOfThirdRegion, hv_HalfWidthOfThirdRegion,
                        hv_HalfHeightOfThirdRegion);
                }
                if ((int)(hv_isFourthWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_FourthRegion, out hv_CenterRowOfFourthRegion,
                        out hv_CenterColumnOfFourthRegion, out hv_PhiOfFourthRegion, out hv_HalfWidthOfFourthRegion,
                        out hv_HalfHeightOfFourthRegion);
                    ho_MaxRectangleFourthRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleFourthRegion, hv_CenterRowOfFourthRegion,
                        hv_CenterColumnOfFourthRegion, hv_PhiOfFourthRegion, hv_HalfWidthOfFourthRegion,
                        hv_HalfHeightOfFourthRegion);
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                        out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                        out hv_HalfHeightOfBottomRegion);
                    ho_MaxRectangleBottomRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleBottomRegion, hv_CenterRowOfBottomRegion,
                        hv_CenterColumnOfBottomRegion, hv_PhiOfBottomRegion, hv_HalfWidthOfBottomRegion,
                        hv_HalfHeightOfBottomRegion);
                }

                ho_totalSurfaceDefectRegionOut.Dispose();
                SurfaceDefectDetectFunction(ho_RegionFillUp, ho_SelectedRegions, ho_TopRegion,
                    ho_BottomRegion, ho_TopMainLineRegions, ho_BottomMainLineRegions, ho_RedChannelImage,
                    ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOut, hv_isUsingSurfaceDefectDetect,
                    hv_surfaceDefectHeightThresh, hv_surfaceDefectWidthThresh, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_subMainLineNum, hv_PI, hv_filmMissShieldLength,
                    hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchHeightThresh,
                    hv_width, hv_height, hv_surfaceScratchWidthThresh, hv_filmMissShieldDetectRange,
                    hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                    hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion,
                    hv_CenterRowOfBottomRegion, hv_CenterColumnOfBottomRegion, hv_isDetectOfTopWafer,
                    hv_isDetectOfBottomWafer, out hv_isSurfaceDefectOfTopWafer, out hv_surfaceMeanGrayOfTopWaferOut,
                    out hv_surfaceMeanGrayOfBottomWaferOut, out hv_isSurfaceDefectOfBottomWafer,
                    out hv_isSurfaceScratchOfTopWafer, out hv_isSurfaceScratchOfBottomWafer);
                HOperatorSet.TupleConcat(hv_BackTenTopInfo, hv_isSurfaceDefectOfTopWafer, out hv_BackTenTopInfo);
                HOperatorSet.TupleConcat(hv_BackTenTopInfo, hv_isSurfaceScratchOfTopWafer,
                    out hv_BackTenTopInfo);
                HOperatorSet.TupleConcat(hv_BackTenBottomInfo, hv_isSurfaceDefectOfBottomWafer,
                    out hv_BackTenBottomInfo);
                HOperatorSet.TupleConcat(hv_BackTenBottomInfo, hv_isSurfaceScratchOfBottomWafer,
                    out hv_BackTenBottomInfo);
                //
                ho_totalSurfaceDefectRegionOut.Dispose();
                SurfaceDefectDetectFunction(ho_RegionFillUp, ho_SelectedRegions, ho_SecondRegion,
                    ho_ThirdRegion, ho_SecondMainLineRegions, ho_ThirdMainLineRegions, ho_RedChannelImage,
                    ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOut, hv_isUsingSurfaceDefectDetect,
                    hv_surfaceDefectHeightThresh, hv_surfaceDefectWidthThresh, hv_isSecondWaferExist,
                    hv_isThirdWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_subMainLineNum, hv_PI, hv_filmMissShieldLength,
                    hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchHeightThresh,
                    hv_width, hv_height, hv_surfaceScratchWidthThresh, hv_filmMissShieldDetectRange,
                    hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                    hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfSecondRegion, hv_CenterColumnOfSecondRegion,
                    hv_CenterRowOfThirdRegion, hv_CenterColumnOfThirdRegion, hv_isDetectOfTopWafer,
                    hv_isDetectOfBottomWafer, out hv_isSurfaceDefectOfSecondWafer, out hv_surfaceMeanGrayOfSecondWaferOut,
                    out hv_surfaceMeanGrayOfThirdWaferOut, out hv_isSurfaceDefectOfThirdWafer,
                    out hv_isSurfaceScratchOfSecondWafer, out hv_isSurfaceScratchOfThirdWafer);
                HOperatorSet.TupleConcat(hv_BackTenSecondInfo, hv_isSurfaceDefectOfSecondWafer,
                    out hv_BackTenSecondInfo);
                HOperatorSet.TupleConcat(hv_BackTenSecondInfo, hv_isSurfaceScratchOfSecondWafer,
                    out hv_BackTenSecondInfo);
                HOperatorSet.TupleConcat(hv_BackTenThirdInfo, hv_isSurfaceDefectOfThirdWafer,
                    out hv_BackTenThirdInfo);
                HOperatorSet.TupleConcat(hv_BackTenThirdInfo, hv_isSurfaceScratchOfThirdWafer,
                    out hv_BackTenThirdInfo);
                if ((int)(new HTuple(hv_Number.TupleEqual(5))) != 0)
                {
                    ho_totalSurfaceDefectRegionOut.Dispose();
                    SurfaceDefectDetectFunction(ho_RegionFillUp, ho_SelectedRegions, ho_FourthRegion,
                        ho_FourthRegion, ho_FourthMainLineRegions, ho_FourthMainLineRegions,
                        ho_RedChannelImage, ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOut,
                        hv_isUsingSurfaceDefectDetect, hv_surfaceDefectHeightThresh, hv_surfaceDefectWidthThresh,
                        hv_isFourthWaferExist, hv_isFourthWaferExist, hv_surfaceDefectDetectIndentDepth,
                        hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP, hv_subMainLineNum,
                        hv_PI, hv_filmMissShieldLength, hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh,
                        hv_surfaceScratchHeightThresh, hv_width, hv_height, hv_surfaceScratchWidthThresh,
                        hv_filmMissShieldDetectRange, hv_surfaceDefectViceLineShieldRightPosOffSet,
                        hv_surfaceDefectGrayThresh, hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfFourthRegion,
                        hv_CenterColumnOfFourthRegion, hv_CenterRowOfFourthRegion, hv_CenterColumnOfFourthRegion,
                        hv_isDetectOfTopWafer, hv_isDetectOfBottomWafer, out hv_isSurfaceDefectOfFourthWafer,
                        out hv_surfaceMeanGrayOfFourthWaferOut, out hv_surfaceMeanGrayOfFourthWaferOut,
                        out hv_isSurfaceDefectOfTFourthWafer, out hv_isSurfaceScratchOfFourthWafer,
                        out hv_isSurfaceScratchOfFourthWafer);
                    HOperatorSet.TupleConcat(hv_BackTenFourthInfo, hv_isSurfaceDefectOfFourthWafer,
                        out hv_BackTenFourthInfo);
                    HOperatorSet.TupleConcat(hv_BackTenFourthInfo, hv_isSurfaceScratchOfFourthWafer,
                        out hv_BackTenFourthInfo);
                }
                //
                HOperatorSet.TupleConcat(hv_BackTenInfoOut, hv_BackTenTopInfo, out hv_BackTenInfoOut);
                HOperatorSet.TupleConcat(hv_BackTenInfoOut, hv_BackTenSecondInfo, out hv_BackTenInfoOut);
                HOperatorSet.TupleConcat(hv_BackTenInfoOut, hv_BackTenThirdInfo, out hv_BackTenInfoOut);
                if ((int)(new HTuple(hv_Number.TupleEqual(5))) != 0)
                {
                    HOperatorSet.TupleConcat(hv_BackTenInfoOut, hv_BackTenFourthInfo, out hv_BackTenInfoOut);
                }
                HOperatorSet.TupleConcat(hv_BackTenInfoOut, hv_BackTenBottomInfo, out hv_BackTenInfoOut);
                //显示结果
                DisplayResult(ho_totalFilmShiftingRegionOut, ho_totalFilmMissRegionOut, ho_totalHeadAndTailFilmShiftingRegionOut,
                    ho_totalEdgeDefectRegionOut, ho_totalSurfaceDefectRegionOut, ho_totalBrokenLineRegionOut,
                    hv_isException, hv_windowHandle, hv_exceptionInfo, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_isFilmShiftingOfTopWafer, hv_isFilmShiftingOfBottomWafer,
                    hv_isFilmMissOfTopWafer, hv_isFilmMissOfBottomWafer, hv_isHeadAndTailFilmShiftingOfTopWafer,
                    hv_isHeadAndTailFilmShiftingOfBottomWafer, hv_isEdgeDefectOfTopWafer, hv_isEdgeDefectOfBottomWafer,
                    hv_isDistanceNG, hv_isSurfaceDefectOfTopWafer, hv_isSurfaceDefectOfBottomWafer,
                    hv_isSurfaceScratchOfTopWafer, hv_isSurfaceScratchOfBottomWafer, hv_isStartWeldingNGOfBottomWafer,
                    hv_isBrokenLineOfTopWafer, hv_isBrokenLineOfBottomWafer, hv_isUsingChinese);
                //
                ho_SecondRegion.Dispose();
                ho_ThirdRegion.Dispose();
                ho_FourthRegion.Dispose();
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_SecondMainLineRegions.Dispose();
                ho_ThirdMainLineRegions.Dispose();
                ho_FourthMainLineRegions.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageResult.Dispose();
                ho_RegionsOfBinaryThreshold.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegion.Dispose();
                ho_SortedRegions1.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RedChannelImageOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_ImageReducedForTopRegionExist.Dispose();
                ho_TopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_ImageReducedForBottomRegionExist.Dispose();
                ho_BottomRegionExist.Dispose();
                ho_ImageReducedForJudgeBackColor.Dispose();
                ho_RegionGrayBack.Dispose();
                ho_BlueChannelImageReduced.Dispose();
                ho_BackGrayImageForWeldNGDetect1.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                ho_ImageForHeightResolutionCalibrate.Dispose();
                ho_weldingNGRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleSecondRegion.Dispose();
                ho_MaxRectangleThirdRegion.Dispose();
                ho_MaxRectangleFourthRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_SecondRegion.Dispose();
                ho_ThirdRegion.Dispose();
                ho_FourthRegion.Dispose();
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_SecondMainLineRegions.Dispose();
                ho_ThirdMainLineRegions.Dispose();
                ho_FourthMainLineRegions.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageResult.Dispose();
                ho_RegionsOfBinaryThreshold.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegion.Dispose();
                ho_SortedRegions1.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RedChannelImageOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_ImageReducedForTopRegionExist.Dispose();
                ho_TopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_ImageReducedForBottomRegionExist.Dispose();
                ho_BottomRegionExist.Dispose();
                ho_ImageReducedForJudgeBackColor.Dispose();
                ho_RegionGrayBack.Dispose();
                ho_BlueChannelImageReduced.Dispose();
                ho_BackGrayImageForWeldNGDetect1.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                ho_ImageForHeightResolutionCalibrate.Dispose();
                ho_weldingNGRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleSecondRegion.Dispose();
                ho_MaxRectangleThirdRegion.Dispose();
                ho_MaxRectangleFourthRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForTenSubMainLineOfBack(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_widthResolution, HTuple hv_weldWidthThresh, HTuple hv_filmWidthThresh,
            out HTuple hv_isStartWeldingNG)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_Rectangle1, ho_subMainLineRegionOut;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_RowOfSecondMainLine = null;
            HTuple hv_ColumnOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_RowOfFourthMainLine = null;
            HTuple hv_ColumnOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_RowOfSixthMainLine = null;
            HTuple hv_ColumnOfSixthMainLine = null, hv_RowOfSeventhMainLine = null;
            HTuple hv_ColumnOfSeventhMainLine = null, hv_RowOfEighthMainLine = null;
            HTuple hv_ColumnOfEighthMainLine = null, hv_RowOfNinthMainLine = null;
            HTuple hv_ColumnOfNinthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_Rectangle1);
            HOperatorSet.GenEmptyObj(out ho_subMainLineRegionOut);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //opening_rectangle1 (detectRegion, detectRegion, halfWidth, halfHeight)
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                //
                //第一根细栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 3.8) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 3.8) * hv_cosValue)) - 20;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfFirstMainLine, hv_ColumnOfFirstMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                //第二根细栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 2.8) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 2.8) * hv_cosValue)) - 30;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfSecondMainLine, hv_ColumnOfSecondMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第三根细栅线
                hv_RowOfThirdMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 1.9) * hv_sinValue);
                hv_ColumnOfThirdMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 1.9) * hv_cosValue)) - 8;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfThirdMainLine, hv_ColumnOfThirdMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第四根细栅线
                hv_RowOfFourthMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 10) * 0.9) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 10) * 0.9) * hv_cosValue)) - 20;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfFourthMainLine, hv_ColumnOfFourthMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第五根细栅线
                hv_RowOfFifthMainLine = hv_CenterRow.Clone();
                hv_ColumnOfFifthMainLine = hv_CenterColumn.Clone();
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfFifthMainLine, hv_ColumnOfFifthMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第六根细栅线
                hv_RowOfSixthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 1) * hv_sinValue);
                hv_ColumnOfSixthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 1) * hv_cosValue)) - 10;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfSixthMainLine, hv_ColumnOfSixthMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第七根细栅线
                hv_RowOfSeventhMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 2) * hv_sinValue);
                hv_ColumnOfSeventhMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 2) * hv_cosValue)) - 30;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfSeventhMainLine, hv_ColumnOfSeventhMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第八根细栅线
                hv_RowOfEighthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 3) * hv_sinValue);
                hv_ColumnOfEighthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 3) * hv_cosValue)) - 40;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfEighthMainLine, hv_ColumnOfEighthMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //第九根细栅线
                hv_RowOfNinthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 10) * 4) * hv_sinValue);
                hv_ColumnOfNinthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 10) * 4) * hv_cosValue)) - 60;
                ho_Rectangle1.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_RowOfNinthMainLine, hv_ColumnOfNinthMainLine,
                    hv_Phi, 10, hv_halfHeight);
                ho_subMainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_Rectangle1, out ho_subMainLineRegionOut);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegionOut, ho_subMainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegionOut.Dispose();
                    ho_mainLineRegionOut = ExpTmpOutVar_0;
                }
                //
                ho_Rectangle1.Dispose();
                ho_subMainLineRegionOut.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_Rectangle1.Dispose();
                ho_subMainLineRegionOut.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetLRLine(HObject ho_SelectedLR, out HObject ho_SelectedLRLine, HTuple hv_Width,
            HTuple hv_ColOfTopL, HTuple hv_ColOfTopR, HTuple hv_ColOfBottomL, HTuple hv_ColOfBottomR,
            HTuple hv_Region)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_SkeletonLR, ho_LRegions, ho_RRegions;
            HObject ho_LRegion, ho_RRegion, ho_ObjectSelected = null;
            HObject ho_LContours, ho_Region1 = null, ho_RContours, ho_Region2 = null;

            // Local control variables 

            HTuple hv_LCol = null, hv_RCol = null, hv_Area = null;
            HTuple hv_Row = null, hv_Column = null, hv_LIndex = null;
            HTuple hv_RIndex = null, hv_AbsLeft = null, hv_AbsRight = null;
            HTuple hv_Length = null, hv_Index = null, hv_Max = new HTuple();
            HTuple hv_LLength = null, hv_IndexL = new HTuple(), hv_AbsL = new HTuple();
            HTuple hv_MinL = new HTuple(), hv_Min = new HTuple(), hv_RLength = null;
            HTuple hv_IndexR = new HTuple(), hv_AbsR = new HTuple();
            HTuple hv_MinR = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_SelectedLRLine);
            HOperatorSet.GenEmptyObj(out ho_SkeletonLR);
            HOperatorSet.GenEmptyObj(out ho_LRegions);
            HOperatorSet.GenEmptyObj(out ho_RRegions);
            HOperatorSet.GenEmptyObj(out ho_LRegion);
            HOperatorSet.GenEmptyObj(out ho_RRegion);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_LContours);
            HOperatorSet.GenEmptyObj(out ho_Region1);
            HOperatorSet.GenEmptyObj(out ho_RContours);
            HOperatorSet.GenEmptyObj(out ho_Region2);
            try
            {
                HOperatorSet.TupleGenConst(0, 0, out hv_LCol);
                HOperatorSet.TupleGenConst(0, 0, out hv_RCol);
                ho_SelectedLRLine.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_SelectedLRLine);
                ho_SkeletonLR.Dispose();
                HOperatorSet.Skeleton(ho_SelectedLR, out ho_SkeletonLR);
                //sort_region (SkeletonLR, SkeletonLR, 'upper_left', 'true', 'column')
                HOperatorSet.AreaCenter(ho_SkeletonLR, out hv_Area, out hv_Row, out hv_Column);
                //2020.05.11-找到电池片内部
                ho_LRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_LRegions);
                ho_RRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_RRegions);
                ho_LRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_LRegion);
                ho_RRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_RRegion);
                //2020.05.13-初始化参数
                hv_LIndex = -1;
                hv_RIndex = -1;

                //2020.05.16-电池片左右边界，找与真实边界差值最小
                HOperatorSet.TupleGenConst(0, 0, out hv_AbsLeft);
                HOperatorSet.TupleGenConst(0, 0, out hv_AbsRight);

                HOperatorSet.TupleLength(hv_Column, out hv_Length);
                HTuple end_val20 = hv_Length - 1;
                HTuple step_val20 = 1;
                for (hv_Index = 0; hv_Index.Continue(end_val20, step_val20); hv_Index = hv_Index.TupleAdd(step_val20))
                {
                    if ((int)(new HTuple(((hv_Column.TupleSelect(hv_Index))).TupleLess(hv_Width / 2))) != 0)
                    {
                        HOperatorSet.TupleConcat(hv_LCol, hv_Column.TupleSelect(hv_Index), out hv_LCol);
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_SelectedLR, out ho_ObjectSelected, hv_Index + 1);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_LRegions, ho_ObjectSelected, out ExpTmpOutVar_0);
                            ho_LRegions.Dispose();
                            ho_LRegions = ExpTmpOutVar_0;
                        }
                    }
                    else
                    {
                        HOperatorSet.TupleConcat(hv_RCol, hv_Column.TupleSelect(hv_Index), out hv_RCol);
                        ho_ObjectSelected.Dispose();
                        HOperatorSet.SelectObj(ho_SelectedLR, out ho_ObjectSelected, hv_Index + 1);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_RRegions, ho_ObjectSelected, out ExpTmpOutVar_0);
                            ho_RRegions.Dispose();
                            ho_RRegions = ExpTmpOutVar_0;
                        }
                    }
                }
                //左边缘 防止找到皮带外侧
                //tuple_max (LCol, Max)
                //tuple_find_first (Column, Max, LIndex)
                //gen_contour_region_xld (LRegions, LContours, 'center')
                //length_xld (LContours, LLength)
                //if (|LLength|>1)
                //tuple_max (LLength, LMax)
                //tuple_find_first (LLength, LMax, LIndex)
                //select_obj (LContours, LObjectSelected, LIndex+1)
                //gen_region_contour_xld (LObjectSelected, LRegion, 'filled')
                //else
                //LRegion := LRegions
                //endif
                //2020.05.13-
                HOperatorSet.TupleLength(hv_LCol, out hv_LLength);
                ho_LContours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_LRegions, out ho_LContours, "center");
                if ((int)(new HTuple(hv_LLength.TupleEqual(1))) != 0)
                {
                    hv_LIndex = 0;
                }
                else
                {
                    if ((int)((new HTuple(hv_ColOfTopL.TupleGreater(0))).TupleOr(new HTuple(hv_ColOfBottomL.TupleGreater(
                        0)))) != 0)
                    {
                        HTuple end_val51 = hv_LLength - 1;
                        HTuple step_val51 = 1;
                        for (hv_IndexL = 0; hv_IndexL.Continue(end_val51, step_val51); hv_IndexL = hv_IndexL.TupleAdd(step_val51))
                        {
                            if ((int)(new HTuple(hv_Region.TupleEqual("T"))) != 0)
                            {
                                HOperatorSet.TupleAbs((hv_LCol.TupleSelect(hv_IndexL)) - hv_ColOfTopL,
                                    out hv_AbsL);
                            }
                            if ((int)(new HTuple(hv_Region.TupleEqual("B"))) != 0)
                            {
                                HOperatorSet.TupleAbs((hv_LCol.TupleSelect(hv_IndexL)) - hv_ColOfBottomL,
                                    out hv_AbsL);
                            }
                            HOperatorSet.TupleConcat(hv_AbsLeft, hv_AbsL, out hv_AbsLeft);
                            //2020.05.15-找到真实边界和第一根细栅
                            //if (AbsL>=0 and AbsL<=20 and LIndex==-1)
                            //LIndex := IndexL
                            //endif
                        }
                        HOperatorSet.TupleMin(hv_AbsLeft, out hv_MinL);
                        HOperatorSet.TupleFindFirst(hv_AbsLeft, hv_MinL, out hv_IndexL);
                        hv_LIndex = hv_IndexL.Clone();
                    }
                    else
                    {
                        HOperatorSet.TupleMax(hv_LCol, out hv_Max);
                        HOperatorSet.TupleFindFirst(hv_Column, hv_Max, out hv_LIndex);
                    }
                }
                if ((int)(new HTuple(hv_LIndex.TupleGreaterEqual(0))) != 0)
                {
                    ho_Region1.Dispose();
                    HOperatorSet.SelectObj(ho_LContours, out ho_Region1, hv_LIndex + 1);
                    ho_LRegion.Dispose();
                    HOperatorSet.GenRegionContourXld(ho_Region1, out ho_LRegion, "filled");
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_SelectedLRLine, ho_LRegion, out ExpTmpOutVar_0);
                        ho_SelectedLRLine.Dispose();
                        ho_SelectedLRLine = ExpTmpOutVar_0;
                    }
                }
                //右边缘
                //tuple_min (RCol, Min)
                //tuple_find_first (Column, Min, RIndex)
                //gen_contour_region_xld (RRegions, RContours, 'center')
                //length_xld (RContours, RLength)
                //if (|RLength|>1)
                //tuple_max (RLength, RMax)
                //tuple_find_first (RLength, RMax, RIndex)
                //select_obj (RContours, RObjectSelected, RIndex+1)
                //gen_region_contour_xld (RObjectSelected, RRegion, 'filled')
                //else
                //RRegion := RRegions
                //endif
                //2020.05.13
                HOperatorSet.TupleLength(hv_RCol, out hv_RLength);
                ho_RContours.Dispose();
                HOperatorSet.GenContourRegionXld(ho_RRegions, out ho_RContours, "center");
                if ((int)(new HTuple(hv_RLength.TupleEqual(1))) != 0)
                {
                    hv_RIndex = 0;
                }
                else
                {
                    if ((int)((new HTuple(hv_ColOfTopR.TupleGreater(0))).TupleOr(new HTuple(hv_ColOfBottomR.TupleGreater(
                        0)))) != 0)
                    {
                        HTuple end_val97 = hv_RLength - 1;
                        HTuple step_val97 = 1;
                        for (hv_IndexR = 0; hv_IndexR.Continue(end_val97, step_val97); hv_IndexR = hv_IndexR.TupleAdd(step_val97))
                        {
                            if ((int)(new HTuple(hv_Region.TupleEqual("T"))) != 0)
                            {
                                HOperatorSet.TupleAbs((hv_RCol.TupleSelect(hv_IndexR)) - hv_ColOfTopR,
                                    out hv_AbsR);
                            }
                            if ((int)(new HTuple(hv_Region.TupleEqual("B"))) != 0)
                            {
                                HOperatorSet.TupleAbs((hv_RCol.TupleSelect(hv_IndexR)) - hv_ColOfBottomR,
                                    out hv_AbsR);
                            }
                            HOperatorSet.TupleConcat(hv_AbsRight, hv_AbsR, out hv_AbsRight);
                            //if (AbsR >= 0 and AbsR <= 20 and RIndex == -1)
                            //RIndex := IndexR
                            //endif
                        }
                        HOperatorSet.TupleMin(hv_AbsRight, out hv_MinR);
                        HOperatorSet.TupleFindFirst(hv_AbsRight, hv_MinR, out hv_IndexR);
                        hv_RIndex = hv_IndexR.Clone();
                    }
                    else
                    {
                        HOperatorSet.TupleMin(hv_RCol, out hv_Min);
                        HOperatorSet.TupleFindFirst(hv_Column, hv_Min, out hv_RIndex);

                    }
                }
                if ((int)(new HTuple(hv_RIndex.TupleGreaterEqual(0))) != 0)
                {
                    ho_Region2.Dispose();
                    HOperatorSet.SelectObj(ho_RContours, out ho_Region2, hv_RIndex + 1);
                    ho_RRegion.Dispose();
                    HOperatorSet.GenRegionContourXld(ho_Region2, out ho_RRegion, "filled");
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_SelectedLRLine, ho_RRegion, out ExpTmpOutVar_0);
                    ho_SelectedLRLine.Dispose();
                    ho_SelectedLRLine = ExpTmpOutVar_0;
                }
                ho_SkeletonLR.Dispose();
                ho_LRegions.Dispose();
                ho_RRegions.Dispose();
                ho_LRegion.Dispose();
                ho_RRegion.Dispose();
                ho_ObjectSelected.Dispose();
                ho_LContours.Dispose();
                ho_Region1.Dispose();
                ho_RContours.Dispose();
                ho_Region2.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_SkeletonLR.Dispose();
                ho_LRegions.Dispose();
                ho_RRegions.Dispose();
                ho_LRegion.Dispose();
                ho_RRegion.Dispose();
                ho_ObjectSelected.Dispose();
                ho_LContours.Dispose();
                ho_Region1.Dispose();
                ho_RContours.Dispose();
                ho_Region2.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectWeldingDefectFunctionForMoreMainLine(HObject ho_ImageForWeldingDetect,
            HObject ho_detectRegion, out HObject ho_weldingNGRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_locationMainLineThresh, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffset, HTuple hv_weldWidthThresh,
            HTuple hv_isTopRegion, HTuple hv_firstDetectPosForTopRegion, HTuple hv_secondDetectPosForTopRegion,
            HTuple hv_firstDetectPosForBottomRegion, HTuple hv_secondDetectPosForBottomRegion,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_isUsingChinese, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_isBackDetect, HTuple hv_mainLineNum, HTuple hv_twoMainLineDistance,
            out HTuple hv_isStartWeldingNG, out HTuple hv_IsDetectRegionNG, out HTuple hv_IsHeadOrTailNG,
            out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_weldingNGRegionOutOfFirstMainLine = null;
            HObject ho_mainLineRegionOutOfFisrtMainLine = null;

            // Local control variables 

            HTuple hv_PI = null, hv_filmDistanceArrayOfFirstPoint = null;
            HTuple hv_filmDistanceArrayOfSecondPoint = null, hv_filmDistanceOfFirstPoint = null;
            HTuple hv_filmDistanceOfSecondPoint = null, hv_CenterRow = null;
            HTuple hv_CenterCol = null, hv_Phi = null, hv_halfWidth = null;
            HTuple hv_halfHeight = null, hv_cosValue = null, hv_sinValue = null;
            HTuple hv_Index = null, hv_RowOfMainLine = new HTuple();
            HTuple hv_ColOfMainLine = new HTuple(), hv_isStartWeldingNGOut = new HTuple();
            HTuple hv_isDetectRegionNGOfFirstMainLine = new HTuple();
            HTuple hv_isHeadOrTailNGOfFirstMainLine = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOutOfFirstMainLine);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOutOfFisrtMainLine);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //输出
                ho_weldingNGRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_weldingNGRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isStartWeldingNG = 0;
                //各主栅线上/下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsDetectRegionNG);
                //各主栅线头部/尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOrTailNG);

                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //第一个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfFirstPoint);
                //第二个点各栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfSecondPoint);

                hv_filmDistanceOfFirstPoint = "";
                hv_filmDistanceOfSecondPoint = "";

                //**********************************************
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterCol,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                //disp_rectangle2 (windowHandle, CenterRow, CenterCol, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                HTuple end_val29 = hv_mainLineNum;
                HTuple step_val29 = 1;
                for (hv_Index = 1; hv_Index.Continue(end_val29, step_val29); hv_Index = hv_Index.TupleAdd(step_val29))
                {
                    if ((int)(new HTuple(((hv_mainLineNum % 2)).TupleEqual(0))) != 0)
                    {
                        if ((int)(new HTuple(hv_Index.TupleLessEqual(hv_mainLineNum / 2))) != 0)
                        {
                            hv_RowOfMainLine = hv_CenterRow + (((((hv_mainLineNum - (2 * (hv_Index - 1))) / 2) - 0.5) * hv_twoMainLineDistance) * hv_sinValue);
                            hv_ColOfMainLine = hv_CenterCol - (((((hv_mainLineNum - (2 * (hv_Index - 1))) / 2) - 0.5) * hv_twoMainLineDistance) * hv_cosValue);
                        }
                        else
                        {
                            hv_RowOfMainLine = hv_CenterRow - ((((((2 * hv_Index) - hv_mainLineNum) / 2) - 0.5) * hv_twoMainLineDistance) * hv_sinValue);
                            hv_ColOfMainLine = hv_CenterCol + ((((((2 * hv_Index) - hv_mainLineNum) / 2) - 0.5) * hv_twoMainLineDistance) * hv_cosValue);
                        }
                    }
                    else
                    {
                        if ((int)(new HTuple(hv_Index.TupleLess((hv_mainLineNum + 1) / 2))) != 0)
                        {
                            hv_RowOfMainLine = hv_CenterRow + ((((hv_mainLineNum - (2 * (hv_Index - 1))) / 2) * hv_twoMainLineDistance) * hv_sinValue);
                            hv_ColOfMainLine = hv_CenterCol - ((((hv_mainLineNum - (2 * (hv_Index - 1))) / 2) * hv_twoMainLineDistance) * hv_cosValue);
                        }
                        else
                        {
                            hv_RowOfMainLine = hv_CenterRow - (((((2 * hv_Index) - hv_mainLineNum) / 2) * hv_twoMainLineDistance) * hv_sinValue);
                            hv_ColOfMainLine = hv_CenterCol + (((((2 * hv_Index) - hv_mainLineNum) / 2) * hv_twoMainLineDistance) * hv_cosValue);
                        }
                    }
                    //disp_rectangle2 (windowHandle, RowOfMainLine, ColOfMainLine, Phi, 100, halfHeight)
                    ho_weldingNGRegionOutOfFirstMainLine.Dispose(); ho_mainLineRegionOutOfFisrtMainLine.Dispose();
                    DetectWeldDefectOfSingleMainLineForMBB(ho_ImageForWeldingDetect, ho_detectRegion,
                        out ho_weldingNGRegionOutOfFirstMainLine, out ho_mainLineRegionOutOfFisrtMainLine,
                        hv_windowHandle, hv_width, hv_height, hv_widthResolution, hv_heightResolution,
                        hv_RowOfMainLine, hv_ColOfMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                        hv_filmWidthThresh, hv_headAndTailFilmWidthThresh, hv_isTopRegion, hv_firstDetectPosForTopRegion,
                        hv_secondDetectPosForTopRegion, hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion,
                        hv_weldWidthThresh, hv_filmWidthOffset, hv_isUsingChinese, hv_isUsingStartWeldingDetect,
                        hv_isBackDetect, out hv_isStartWeldingNGOut, out hv_isDetectRegionNGOfFirstMainLine,
                        out hv_isHeadOrTailNGOfFirstMainLine, out hv_filmDistanceOfFirstPoint,
                        out hv_filmDistanceOfSecondPoint);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_weldingNGRegionOut, ho_weldingNGRegionOutOfFirstMainLine,
                            out ExpTmpOutVar_0);
                        ho_weldingNGRegionOut.Dispose();
                        ho_weldingNGRegionOut = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_mainLineRegionOut, ho_mainLineRegionOutOfFisrtMainLine,
                            out ExpTmpOutVar_0);
                        ho_mainLineRegionOut.Dispose();
                        ho_mainLineRegionOut = ExpTmpOutVar_0;
                    }
                    HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceOfFirstPoint,
                        out hv_filmDistanceArrayOfFirstPoint);
                    HOperatorSet.TupleConcat(hv_filmDistanceArrayOfSecondPoint, hv_filmDistanceOfSecondPoint,
                        out hv_filmDistanceArrayOfSecondPoint);
                    HOperatorSet.TupleConcat(hv_IsDetectRegionNG, hv_isDetectRegionNGOfFirstMainLine,
                        out hv_IsDetectRegionNG);
                    HOperatorSet.TupleConcat(hv_IsHeadOrTailNG, hv_isHeadOrTailNGOfFirstMainLine,
                        out hv_IsHeadOrTailNG);
                    hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);

                }

                //合并MBB第一个和第二个点宽度数组
                HOperatorSet.TupleConcat(hv_filmDistanceArrayOfFirstPoint, hv_filmDistanceArrayOfSecondPoint,
                    out hv_filmDistanceArray);
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_weldingNGRegionOutOfFirstMainLine.Dispose();
                ho_mainLineRegionOutOfFisrtMainLine.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectFunctionForFiveMainLine_COPY_1(HObject ho_imageForFilmDetect,
            HObject ho_detectRegion, HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingOfPartRegion,
            out HObject ho_filmMissOfPartRegion, out HObject ho_headAndTailFilmShiftingOfPartRegion,
            out HObject ho_mainLineRegion, HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_mainLineNum,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_locationMainLineThresh, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_isUsingHeadAndTailFilmShiftingDetect,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmDetectRange, HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            out HTuple hv_isException, out HTuple hv_exceptionInfo, out HTuple hv_isStartWeldingNG,
            out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingRegionOut, ho_filmMissRegionOut;
            HObject ho_headAndTailFilmShiftingRegionOut, ho_mainLineRegionOut;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_FilmDistanceArrayOfFirstMainLine = null;
            HTuple hv_isExceptionOut = null, hv_exceptionInfoOut = null;
            HTuple hv_isStartWeldingNGOut = null, hv_filmDistanceMax = null;
            HTuple hv_RowOfSecondMainLine = null, hv_ColumnOfSecondMainLine = null;
            HTuple hv_FilmDistanceArrayOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_FilmDistanceArrayThirdMainLine = null;
            HTuple hv_RowOfFourthMainLine = null, hv_ColumnOfFourthMainLine = null;
            HTuple hv_FilmDistanceArrayOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_FilmDistanceArrayOfFifthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_filmMissOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegion);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //局部变量
                //主栅线宽度(mm)
                //mainLineWidth := 0.6
                //
                //
                //输出
                ho_filmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingOfPartRegion);
                ho_filmMissOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissOfPartRegion);
                ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingOfPartRegion);
                ho_mainLineRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegion);
                //
                //
                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //
                //
                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isStartWeldingNG = 0;
                //**********************************************
                //gray_opening_rect (imageForFilmDetect, ImageOpening, 5, 5)
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                if ((int)(new HTuple(hv_Phi.TupleGreater(hv_PI / 4))) != 0)
                {
                    hv_Phi = hv_Phi - (hv_PI / 2);
                }
                if ((int)(new HTuple(hv_Phi.TupleLess((-hv_PI) / 4))) != 0)
                {
                    hv_Phi = hv_Phi + (hv_PI / 2);
                }
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                //
                //gray_opening_rect (imageForFilmDetect, imageOpening, 1, mainLineWidth / widthResolution)
                //
                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFirstMainLine,
                    hv_ColumnOfFirstMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    1, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    out hv_FilmDistanceArrayOfFirstMainLine, out hv_isExceptionOut, out hv_exceptionInfoOut,
                    out hv_isStartWeldingNGOut, out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfSecondMainLine,
                    hv_ColumnOfSecondMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    2, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    out hv_FilmDistanceArrayOfSecondMainLine, out hv_isExceptionOut, out hv_exceptionInfoOut,
                    out hv_isStartWeldingNGOut, out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow.Clone();
                hv_ColumnOfThirdMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfThirdMainLine,
                    hv_ColumnOfThirdMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    3, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    out hv_FilmDistanceArrayThirdMainLine, out hv_isExceptionOut, out hv_exceptionInfoOut,
                    out hv_isStartWeldingNGOut, out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFourthMainLine,
                    hv_ColumnOfFourthMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    4, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    out hv_FilmDistanceArrayOfFourthMainLine, out hv_isExceptionOut, out hv_exceptionInfoOut,
                    out hv_isStartWeldingNGOut, out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFifthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFifthMainLine,
                    hv_ColumnOfFifthMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    5, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    out hv_FilmDistanceArrayOfFifthMainLine, out hv_isExceptionOut, out hv_exceptionInfoOut,
                    out hv_isStartWeldingNGOut, out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectOfSingleMainLine_COPY_1(HObject ho_ImageOpening, HObject ho_DetectRegion,
            HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingRegionOut, out HObject ho_filmMissRegionOut,
            out HObject ho_headAndTailFilmShiftingRegionOut, out HObject ho_mainLineRegionOut,
            HTuple hv_windowHandle, HTuple hv_imageWidth, HTuple hv_imageHeight, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_locationMainLineThresh, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_numOfMainLine,
            HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            out HTuple hv_FilmDistanceArray, out HTuple hv_isExceptionOut, out HTuple hv_exceptionInfoOut,
            out HTuple hv_isStartWeldingNG, out HTuple hv_filmDistanceMax)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingSmallRectangle = null;
            HObject ho_filmMissSmallRectangle = null, ho_headAndTailFilmShiftingSmallRectangle = null;
            HObject ho_MainLine, ho_EmptyObject;

            // Local control variables 

            HTuple hv_PI = null, hv_undetectMainLineCount = null;
            HTuple hv_DistanceRealWorldTemp = null, hv_DistanceRealWorld = null;
            HTuple hv_topShieldPixelLength = null, hv_bottomShieldPixelLength = null;
            HTuple hv_headAndTailFilmShieldPixelLength = null, hv_headAndTailFilmDetectPixelRange = null;
            HTuple hv_filmMissShieldPixelLength = null, hv_filmMissShieldPixelDetectRange = null;
            HTuple hv_stepPixelDistance = null, hv_cosValue = null;
            HTuple hv_sinValue = null, hv_TotalRowOfLeftMainLinePoints = null;
            HTuple hv_TotalColumnOfLeftMainLinePoints = null, hv_TotalRowOfRightMainLinePoints = null;
            HTuple hv_TotalColumnOfRightMainLinePoints = null, hv_isStartWeldingDetect = null;
            HTuple hv_TotalStep = null, hv_centerRowOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_centerColumnOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectStartTime = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectEndTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectStartTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectEndTime = new HTuple();
            HTuple hv_Index = new HTuple(), hv_RowTemp = new HTuple();
            HTuple hv_ColumnTemp = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowOfLeftMainLinePoints = new HTuple(), hv_ColumnOfLeftMainLinePoints = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_NumTempOfLeftPos = new HTuple(), hv_RowOfRightMainLinePoints = new HTuple();
            HTuple hv_ColumnOfRightMainLinePoints = new HTuple(), hv_NumTempOfRightPos = new HTuple();
            HTuple hv_RowStartPoint = new HTuple(), hv_ColumnStartPoint = new HTuple();
            HTuple hv_RowEndPoint = new HTuple(), hv_ColumnEndPoint = new HTuple();
            HTuple hv_DistanceTemp = new HTuple(), hv_startWeldingDetectPixelPos = new HTuple();
            HTuple hv_InverseTotalRowOfRightMainLinePoints = null;
            HTuple hv_InverseTotalColumnOfRightMainLinePoints = null;
            HTuple hv_TotalRow = null, hv_TotalColumn = null, hv_FilmShiftingRegionArea = null;
            HTuple hv_Row = null, hv_Column = null, hv_Length = null;
            HTuple hv_maxValue = null, hv_minValue = null, hv_meanValue = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_filmMissSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_MainLine);
            HOperatorSet.GenEmptyObj(out ho_EmptyObject);
            hv_FilmDistanceArray = new HTuple();
            hv_isExceptionOut = new HTuple();
            hv_exceptionInfoOut = new HTuple();
            hv_isStartWeldingNG = new HTuple();
            hv_filmDistanceMax = new HTuple();
            try
            {
                if ((int)((new HTuple((new HTuple((new HTuple(hv_isUsingFilmShiftingDetect.TupleEqual(
                    0))).TupleAnd(new HTuple(hv_isUsingFilmMissDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingHeadAndTailFilmShiftingDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingStartWeldingDetect.TupleEqual(0)))) != 0)
                {
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                hv_PI = 3.1415926;
                //*****输出*******
                ho_filmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingRegionOut);
                ho_filmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissRegionOut);
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isExceptionOut = 0;
                hv_exceptionInfoOut = "";
                hv_isStartWeldingNG = 0;
                //
                hv_filmDistanceMax = "";
                //
                //***局部变量****
                //未检测到主栅线计数
                hv_undetectMainLineCount = 0;
                //主栅线左右对应点距离默认为-1
                hv_DistanceRealWorldTemp = -1;
                hv_DistanceRealWorld = -1;
                //常规膜检上屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_topShieldLength / hv_heightResolution, out hv_topShieldPixelLength);
                //常规膜检下屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_bottomShieldLength / hv_heightResolution, out hv_bottomShieldPixelLength);
                //
                //头尾膜检屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmShieldLength / hv_heightResolution,
                    out hv_headAndTailFilmShieldPixelLength);
                //头尾膜检像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmDetectRange / hv_heightResolution,
                    out hv_headAndTailFilmDetectPixelRange);
                //
                //膜失、膜短屏蔽缩进距离像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldLength / hv_heightResolution, out hv_filmMissShieldPixelLength);
                //膜失、膜短屏蔽范围像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldDetectRange / hv_heightResolution, out hv_filmMissShieldPixelDetectRange);
                //
                //
                //膜检采样像素级间隔,默认设置采样间隔为1.5mm
                HOperatorSet.TupleFloor(1.5 / hv_heightResolution, out hv_stepPixelDistance);
                //弧度Phi的Cos值
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                //弧度Phi的Sin值
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                //
                //膜宽数组
                HOperatorSet.TupleGenConst(0, 0, out hv_FilmDistanceArray);
                //主栅线左侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfLeftMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfLeftMainLinePoints);
                //主栅线右侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfRightMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfRightMainLinePoints);
                //
                //是否检测到起焊点异常
                hv_isStartWeldingDetect = 0;
                //
                //膜失、膜短屏蔽区域下片上半部分是否存在
                //isTopPartContainsFilmMissShield := false
                //膜失、膜短屏蔽区域下片下半部分是否存在
                //isBottomPartContainsFilmMissShield := false
                //
                //总寻点次数
                HOperatorSet.TupleFloor(hv_halfHeightOfSingleMainLineDetect / hv_stepPixelDistance,
                    out hv_TotalStep);
                //*******上片处理********
                if ((int)(hv_isTopRegion) != 0)
                {
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        //显示出头尾膜检区域
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }
                    //
                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);
                    //
                    //上半部分寻点处理
                    HTuple end_val84 = hv_TotalStep;
                    HTuple step_val84 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val84, step_val84); hv_Index = hv_Index.TupleAdd(step_val84))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleLess(
                                0))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleLess(0))))).TupleOr(
                                new HTuple(hv_RowEndPoint.TupleLess(0))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleLess(
                                0)))) != 0)
                            {
                                continue;
                            }
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                }
                            }
                        }
                    }
                    //
                    //下半部分寻点处理
                    HTuple end_val172 = 1;
                    HTuple step_val172 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val172, step_val172); hv_Index = hv_Index.TupleAdd(step_val172))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                            new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                        {
                                            ho_filmMissSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                                hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_filmMissRegionOut.Dispose();
                                                ho_filmMissRegionOut = ExpTmpOutVar_0;
                                            }
                                        }
                                    }
                                }
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 40, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 40, 0.3);
                                        ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                            hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_headAndTailFilmShiftingRegionOut.Dispose();
                                            ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectEndTime.TupleLess(
                                        hv_HeadAndTailFilmDetectStartTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    if ((int)(hv_isUsingFilmMissDetect) != 0)
                                    {
                                        if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                        {
                                            ho_filmMissSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                                hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_filmMissRegionOut.Dispose();
                                                ho_filmMissRegionOut = ExpTmpOutVar_0;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //
                    //*******下片处理********
                }
                else
                {
                    //显示出头尾膜检区域
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }
                    //
                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);
                    //
                    //膜短、膜失屏蔽起始次数
                    //tuple_floor (filmMissShieldPixelLength/stepPixelDistance, filmMissShieldStartTime)
                    //膜短、膜失屏蔽截止次数
                    //tuple_floor ((filmMissShieldPixelLength + filmMissShieldPixelDetectRange)/stepPixelDistance, filmMissShieldEndTime)
                    //
                    //10.31 判断膜失屏蔽区域处于下半片上下哪部分
                    //if (filmMissShieldStartTime >= TotalStep)
                    //filmMissShieldStartTime := 2*TotalStep - filmMissShieldStartTime
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //isBottomPartContainsFilmMissShield := true
                    //elseif (filmMissShieldEndTime <= TotalStep and filmMissShieldEndTime>=1)
                    //isTopPartContainsFilmMissShield := true
                    //elseif (filmMissShieldStartTime>=0 and filmMissShieldEndTime>1)
                    //isTopPartContainsFilmMissShield := true
                    //isBottomPartContainsFilmMissShield := true
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //endif
                    //
                    //上半部分寻点处理
                    //2019-4-11 2修改为1防止有膜带的时候断裂造成漏检
                    HTuple end_val330 = hv_TotalStep;
                    HTuple step_val330 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val330, step_val330); hv_Index = hv_Index.TupleAdd(step_val330))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //7.18添加背面记录栅线距离条件
                            //if (isBackDetect)
                            //if (Index >= FilmShiftingAndFilmMissDetectStartTime)
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif
                            //else
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif
                            //
                            //判断起焊点是否异常2019-5-23增加Index >= 2避免第一个点找到片间距的膜带
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(2))) != 0)
                            {
                                if ((int)(hv_isUsingStartWeldingDetect) != 0)
                                {
                                    if ((int)(hv_isStartWeldingDetect.TupleNot()) != 0)
                                    {
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_weldWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            hv_isStartWeldingDetect = 1;
                                            hv_startWeldingDetectPixelPos = hv_Index * hv_stepPixelDistance;
                                            if ((int)((new HTuple(hv_startWeldingDetectPixelPos.TupleGreaterEqual(
                                                hv_startWeldingDistanceMinThresh / hv_heightResolution))).TupleAnd(
                                                new HTuple(hv_startWeldingDetectPixelPos.TupleLessEqual(hv_startWeldingDistanceMaxThresh / hv_heightResolution)))) != 0)
                                            {
                                                hv_isStartWeldingNG = 0;
                                            }
                                            else
                                            {
                                                //2019-4-11添加显示
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                        //避免无焊带检测不到起焊点不报NG问题
                                        if ((int)(new HTuple(hv_Index.TupleEqual(hv_TotalStep))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_isStartWeldingDetect.TupleEqual(0))) != 0)
                                            {
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                            new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                        {
                                            ho_filmMissSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                                hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_filmMissRegionOut.Dispose();
                                                ho_filmMissRegionOut = ExpTmpOutVar_0;
                                            }
                                            //10.31 添加膜失、膜短屏蔽区域各判断条件
                                            //判断如果膜失、膜短屏蔽区域上下部分都存在
                                            //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                            //if (Index < filmMissShieldStartTime)
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                            //如果膜失、膜短屏蔽区域只存在上半部分
                                            //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                                            //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                            //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                                            //elseif (isTopPartContainsFilmMissShield == false)
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                        }
                                    }
                                }
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    //2019-5-22避免漏检
                                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi,
                                        hv_halfWidthOfSingleMainLineDetect, hv_stepPixelDistance / 2, hv_imageWidth,
                                        hv_imageHeight, "bilinear", out hv_MeasureHandle);
                                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //主栅线左侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageForHeadWeldNGDetect, hv_MeasureHandle,
                                        1, hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                                        out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                                    //主栅线右侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                        "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                        out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                                    //判断是否检测到主栅线左右侧点
                                    if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(
                                        new HTuple(hv_NumTempOfRightPos.TupleGreater(0)))) != 0)
                                    {
                                        //计算主栅线单个小检测框中左右边缘点的像素距离
                                        HOperatorSet.DistancePp(hv_RowOfLeftMainLinePoints, hv_ColumnOfLeftMainLinePoints,
                                            hv_RowOfRightMainLinePoints, hv_ColumnOfRightMainLinePoints,
                                            out hv_DistanceTemp);
                                        hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                                hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_headAndTailFilmShiftingRegionOut.Dispose();
                                                ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                            }
                                            //赋值左侧的点
                                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(
                                                0);
                                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                                            //赋值右侧的点
                                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(
                                                0);
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectStartTime.TupleLess(
                                        hv_HeadAndTailFilmDetectEndTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                //2019-4-10 3改为1
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(1))) != 0)
                                {
                                    //膜短、膜失检测
                                    if ((int)(hv_isUsingFilmMissDetect) != 0)
                                    {
                                        if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                        {
                                            ho_filmMissSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                                hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_filmMissRegionOut.Dispose();
                                                ho_filmMissRegionOut = ExpTmpOutVar_0;
                                            }
                                            //10.31 添加膜失、膜短屏蔽区域各判断条件
                                            //判断如果膜失、膜短屏蔽区域上下部分都存在
                                            //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                            //if (Index < filmMissShieldStartTime)
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                            //如果膜失、膜短屏蔽区域只存在上半部分
                                            //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                                            //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                            //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                                            //elseif (isTopPartContainsFilmMissShield == false)
                                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                            //endif
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //
                    //下半部分寻点处理
                    HTuple end_val550 = 1;
                    HTuple step_val550 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val550, step_val550); hv_Index = hv_Index.TupleAdd(step_val550))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleGreaterEqual(
                                hv_imageHeight))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleGreaterEqual(
                                hv_imageWidth))))).TupleOr(new HTuple(hv_RowEndPoint.TupleGreaterEqual(
                                hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleGreaterEqual(
                                hv_imageWidth)))) != 0)
                            {
                                continue;
                            }
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (Index <= 5)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //10.31 添加膜失、膜短屏蔽区域各判断条件
                                //判断如果膜失、膜短屏蔽区域上下部分都存在
                                //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                //if (Index < filmMissShieldEndTime)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域只存在下半部分
                                //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                //elseif (isBottomPartContainsFilmMissShield == false)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 修改膜宽数组记录条件
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //if (Index <= 5)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //10.31 添加膜失、膜短屏蔽区域各判断条件
                                    //判断如果膜失、膜短屏蔽区域上下部分都存在
                                    //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                    //if (Index < filmMissShieldEndTime)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域只存在下半部分
                                    //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                    //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                    //elseif (isBottomPartContainsFilmMissShield == false)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //endif
                                    //endif
                                }
                            }
                        }
                    }
                }
                //
                //********根据主栅线边缘点提取出主栅线Region***********
                if ((int)((new HTuple((new HTuple(hv_TotalRowOfRightMainLinePoints.TupleLength()
                    )).TupleLessEqual(0))).TupleOr(new HTuple((new HTuple(hv_TotalRowOfLeftMainLinePoints.TupleLength()
                    )).TupleLessEqual(0)))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }
                    //
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleInverse(hv_TotalRowOfRightMainLinePoints, out hv_InverseTotalRowOfRightMainLinePoints);
                HOperatorSet.TupleInverse(hv_TotalColumnOfRightMainLinePoints, out hv_InverseTotalColumnOfRightMainLinePoints);
                HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_InverseTotalRowOfRightMainLinePoints,
                    out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_InverseTotalColumnOfRightMainLinePoints,
                    out hv_TotalColumn);
                HOperatorSet.TupleConcat(hv_TotalRow, hv_TotalRowOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumn, hv_TotalColumnOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalColumn);
                ho_MainLine.Dispose();
                HOperatorSet.GenRegionPolygon(out ho_MainLine, hv_TotalRow, hv_TotalColumn);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_MainLine, out ho_mainLineRegionOut);
                //
                //根据主栅线左右侧点提取出主栅线Region
                //获取检测区域外轮廓
                //gen_contour_region_xld (DetectRegion, DetectRegionContours, 'border')
                //左侧点拟合直线
                //gen_contour_polygon_xld (subLeftMainLine, TotalRowOfLeftMainLinePoints, TotalColumnOfLeftMainLinePoints)
                //fit_line_contour_xld (subLeftMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, AngleOfSubLeftMainLine)
                //左侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, RowOfLeftIntersectionPoints, ColumnOfLeftInterSectionPoints, IsOverlapping)
                //右侧点拟合直线
                //gen_contour_polygon_xld (subRightMainLine, TotalRowOfRightMainLinePoints, TotalColumnOfRightMainLinePoints)
                //fit_line_contour_xld (subRightMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, AngleOfSubRightMainLine)
                //右侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, RowOfRightIntersectionPoints, ColumnOfRightInterSectionPoints, IsOverlapping)
                //主栅线矩形
                //tuple_concat (RowOfLeftIntersectionPoints, RowOfRightIntersectionPoints, RowTempConcat)
                //tuple_concat (ColumnOfLeftInterSectionPoints, ColumnOfRightInterSectionPoints, ColumnTempConcat)
                //gen_contour_polygon_xld (TempContour, RowTempConcat, ColumnTempConcat)
                //smallest_rectangle2_xld (TempContour, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //gen_rectangle2 (mainLineRegionOut, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //
                //在主栅线中心显示结果
                ho_EmptyObject.Dispose();
                HOperatorSet.GenEmptyObj(out ho_EmptyObject);
                HOperatorSet.AreaCenter(ho_filmShiftingRegionOut, out hv_FilmShiftingRegionArea,
                    out hv_Row, out hv_Column);
                HOperatorSet.TupleLength(hv_FilmDistanceArray, out hv_Length);
                if ((int)(new HTuple(hv_Length.TupleLessEqual(0))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }
                    //
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".2f", out hv_maxValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMin(), ".2f", out hv_minValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMean(), ".2f", out hv_meanValue);
                //
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".3f", out hv_filmDistanceMax);
                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                {
                    if ((int)(new HTuple(hv_FilmShiftingRegionArea.TupleGreater(0))) != 0)
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect - 200,
                            hv_centerColumnOfSingleMainLineDetect - 450, "red");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red')
                        //
                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                    }
                    else
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect - 200,
                            hv_centerColumnOfSingleMainLineDetect - 450, "green");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green')
                        //
                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                    }
                }
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void FindMiddleLine(HObject ho_Image, HObject ho_ShapeModel, out HObject ho_WaferOfToppart,
            out HObject ho_WaferOfBottompart, HTuple hv_ModelID, HTuple hv_Score, HTuple hv_WindowHandle,
            HTuple hv_MainLineNum, out HTuple hv_RowBegin, out HTuple hv_ColBegin, out HTuple hv_RowEnd,
            out HTuple hv_ColEnd)
        {




            // Local iconic variables 

            HObject ho_ModelAtNewPosition = null, ho_UnionContours = null;
            HObject ho_Region = null, ho_ConnectedRegions = null, ho_SelectedRegions = null;
            HObject ho_RegionTrans = null, ho_RegionBorder = null, ho_RegionOpening = null;
            HObject ho_ConnectedRegions1 = null, ho_SortedRegions = null;
            HObject ho_ObjectSelected = null, ho_Skeleton = null, ho_Contours = null;
            HObject ho_ContoursSplit = null, ho_SelectedContours = null;
            HObject ho_MiddleEdgeContour;

            // Local control variables 

            HTuple hv_PI = null, hv_Width = null, hv_Height = null;
            HTuple hv_RowCheck = null, hv_ColumnCheck = null, hv_AngleCheck = null;
            HTuple hv_RowOfMiddleEdgePoints = null, hv_ColOfMiddleEdgePoints = null;
            HTuple hv_i = null, hv_MovementOfObject = new HTuple();
            HTuple hv_Length = new HTuple(), hv_Max = new HTuple();
            HTuple hv_Indices = new HTuple(), hv_Nr = null, hv_Nc = null;
            HTuple hv_Dist = null, hv_RowL = null, hv_ColL = null;
            HTuple hv_RowR = null, hv_ColR = null, hv_IsOverlapping = null;
            HTuple hv_RowsOfTop = null, hv_ColsOfTop = null, hv_RowsOfBottom = null;
            HTuple hv_ColsOfBottom = null;
            HTuple hv_Score_COPY_INP_TMP = hv_Score.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_WaferOfToppart);
            HOperatorSet.GenEmptyObj(out ho_WaferOfBottompart);
            HOperatorSet.GenEmptyObj(out ho_ModelAtNewPosition);
            HOperatorSet.GenEmptyObj(out ho_UnionContours);
            HOperatorSet.GenEmptyObj(out ho_Region);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionTrans);
            HOperatorSet.GenEmptyObj(out ho_RegionBorder);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            HOperatorSet.GenEmptyObj(out ho_Skeleton);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
            HOperatorSet.GenEmptyObj(out ho_SelectedContours);
            HOperatorSet.GenEmptyObj(out ho_MiddleEdgeContour);
            try
            {
                ho_WaferOfToppart.Dispose();
                HOperatorSet.GenEmptyObj(out ho_WaferOfToppart);
                ho_WaferOfBottompart.Dispose();
                HOperatorSet.GenEmptyObj(out ho_WaferOfBottompart);
                hv_RowBegin = new HTuple();
                hv_ColBegin = new HTuple();
                hv_RowEnd = new HTuple();
                hv_ColEnd = new HTuple();
                //
                //
                hv_PI = 3.14159;
                //
                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
                HOperatorSet.FindShapeModel(ho_Image, hv_ModelID, 0, 0, 0.6, hv_MainLineNum,
                    0.5, "least_squares", 0, 0.7, out hv_RowCheck, out hv_ColumnCheck, out hv_AngleCheck,
                    out hv_Score_COPY_INP_TMP);
                //
                if ((int)(new HTuple((new HTuple(hv_Score_COPY_INP_TMP.TupleLength())).TupleLessEqual(
                    0))) != 0)
                {
                    ho_ModelAtNewPosition.Dispose();
                    ho_UnionContours.Dispose();
                    ho_Region.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionTrans.Dispose();
                    ho_RegionBorder.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_Skeleton.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();
                    ho_SelectedContours.Dispose();
                    ho_MiddleEdgeContour.Dispose();

                    return;
                }
                //
                hv_RowOfMiddleEdgePoints = new HTuple();
                hv_ColOfMiddleEdgePoints = new HTuple();
                for (hv_i = 0; (int)hv_i <= (int)((new HTuple(hv_Score_COPY_INP_TMP.TupleLength()
                    )) - 1); hv_i = (int)hv_i + 1)
                {
                    HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RowCheck.TupleSelect(hv_i), hv_ColumnCheck.TupleSelect(
                        hv_i), hv_AngleCheck.TupleSelect(hv_i), out hv_MovementOfObject);
                    ho_ModelAtNewPosition.Dispose();
                    HOperatorSet.AffineTransContourXld(ho_ShapeModel, out ho_ModelAtNewPosition,
                        hv_MovementOfObject);
                    ho_UnionContours.Dispose();
                    HOperatorSet.UnionAdjacentContoursXld(ho_ModelAtNewPosition, out ho_UnionContours,
                        100, 10, "attr_keep");
                    ho_Region.Dispose();
                    HOperatorSet.GenRegionContourXld(ho_UnionContours, out ho_Region, "filled");
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
                    ho_SelectedRegions.Dispose();
                    HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions,
                        "max_area", 70);
                    ho_RegionTrans.Dispose();
                    HOperatorSet.ShapeTrans(ho_SelectedRegions, out ho_RegionTrans, "rectangle2");
                    ho_RegionBorder.Dispose();
                    HOperatorSet.Boundary(ho_RegionTrans, out ho_RegionBorder, "inner");
                    ho_RegionOpening.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionBorder, out ho_RegionOpening, 5,
                        1);
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions1);
                    ho_SortedRegions.Dispose();
                    HOperatorSet.SortRegion(ho_ConnectedRegions1, out ho_SortedRegions, "upper_left",
                        "true", "row");
                    ho_ObjectSelected.Dispose();
                    HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected, 2);
                    //
                    ho_Skeleton.Dispose();
                    HOperatorSet.Skeleton(ho_ObjectSelected, out ho_Skeleton);
                    ho_Contours.Dispose();
                    HOperatorSet.GenContourRegionXld(ho_Skeleton, out ho_Contours, "center");
                    ho_ContoursSplit.Dispose();
                    HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines",
                        5, 4, 2);
                    HOperatorSet.LengthXld(ho_ContoursSplit, out hv_Length);
                    HOperatorSet.TupleMax(hv_Length, out hv_Max);
                    HOperatorSet.TupleFindFirst(hv_Length, hv_Max, out hv_Indices);
                    ho_SelectedContours.Dispose();
                    HOperatorSet.SelectObj(ho_ContoursSplit, out ho_SelectedContours, hv_Indices + 1);
                    HOperatorSet.FitLineContourXld(ho_SelectedContours, "tukey", -1, 0, 5, 2,
                        out hv_RowBegin, out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr,
                        out hv_Nc, out hv_Dist);
                    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                    HOperatorSet.DispLine(hv_ExpDefaultWinHandle, hv_RowBegin, hv_ColBegin, hv_RowEnd,
                        hv_ColEnd);
                    HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePoints, hv_RowBegin, out hv_RowOfMiddleEdgePoints);
                    HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePoints, hv_RowEnd, out hv_RowOfMiddleEdgePoints);
                    HOperatorSet.TupleConcat(hv_ColOfMiddleEdgePoints, hv_ColBegin, out hv_ColOfMiddleEdgePoints);
                    HOperatorSet.TupleConcat(hv_ColOfMiddleEdgePoints, hv_ColEnd, out hv_ColOfMiddleEdgePoints);
                }
                HOperatorSet.TupleSortIndex(hv_ColOfMiddleEdgePoints, out hv_Indices);
                HOperatorSet.TupleSelect(hv_RowOfMiddleEdgePoints, hv_Indices, out hv_RowOfMiddleEdgePoints);
                HOperatorSet.TupleSelect(hv_ColOfMiddleEdgePoints, hv_Indices, out hv_ColOfMiddleEdgePoints);
                ho_MiddleEdgeContour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_MiddleEdgeContour, hv_RowOfMiddleEdgePoints,
                    hv_ColOfMiddleEdgePoints);
                HOperatorSet.FitLineContourXld(ho_MiddleEdgeContour, "tukey", -1, 0, 5, 2,
                    out hv_RowL, out hv_ColL, out hv_RowR, out hv_ColR, out hv_Nr, out hv_Nc,
                    out hv_Dist);
                HOperatorSet.IntersectionLines(0, 0, hv_Height - 1, 0, hv_RowL, hv_ColL, hv_RowR,
                    hv_ColR, out hv_RowBegin, out hv_ColBegin, out hv_IsOverlapping);
                //disp_cross (WindowHandle, RowBegin, ColBegin, 100, -0.3)
                HOperatorSet.IntersectionLines(0, hv_Width - 1, hv_Height - 1, hv_Width - 1, hv_RowL,
                    hv_ColL, hv_RowR, hv_ColR, out hv_RowEnd, out hv_ColEnd, out hv_IsOverlapping);
                //disp_cross (WindowHandle, RowEnd, ColEnd, 100, -0.3)
                hv_RowsOfTop = new HTuple();
                hv_RowsOfTop[0] = 0;
                hv_RowsOfTop = hv_RowsOfTop.TupleConcat(hv_RowBegin);
                hv_RowsOfTop = hv_RowsOfTop.TupleConcat(hv_RowEnd);
                hv_RowsOfTop = hv_RowsOfTop.TupleConcat(0);
                hv_ColsOfTop = new HTuple();
                hv_ColsOfTop[0] = 0;
                hv_ColsOfTop = hv_ColsOfTop.TupleConcat(hv_ColBegin);
                hv_ColsOfTop = hv_ColsOfTop.TupleConcat(hv_ColEnd);
                hv_ColsOfTop = hv_ColsOfTop.TupleConcat(hv_Width - 1);
                ho_WaferOfToppart.Dispose();
                HOperatorSet.GenRegionPolygonFilled(out ho_WaferOfToppart, hv_RowsOfTop, hv_ColsOfTop);
                //
                hv_RowsOfBottom = new HTuple();
                hv_RowsOfBottom = hv_RowsOfBottom.TupleConcat(hv_RowBegin);
                hv_RowsOfBottom = hv_RowsOfBottom.TupleConcat(hv_Height - 1);
                hv_RowsOfBottom = hv_RowsOfBottom.TupleConcat(hv_Height - 1);
                hv_RowsOfBottom = hv_RowsOfBottom.TupleConcat(hv_RowEnd);
                hv_ColsOfBottom = new HTuple();
                hv_ColsOfBottom = hv_ColsOfBottom.TupleConcat(hv_ColBegin);
                hv_ColsOfBottom = hv_ColsOfBottom.TupleConcat(0);
                hv_ColsOfBottom = hv_ColsOfBottom.TupleConcat(hv_Width - 1);
                hv_ColsOfBottom = hv_ColsOfBottom.TupleConcat(hv_ColEnd);
                ho_WaferOfBottompart.Dispose();
                HOperatorSet.GenRegionPolygonFilled(out ho_WaferOfBottompart, hv_RowsOfBottom,
                    hv_ColsOfBottom);
                ho_ModelAtNewPosition.Dispose();
                ho_UnionContours.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionTrans.Dispose();
                ho_RegionBorder.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_Skeleton.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_SelectedContours.Dispose();
                ho_MiddleEdgeContour.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ModelAtNewPosition.Dispose();
                ho_UnionContours.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionTrans.Dispose();
                ho_RegionBorder.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SortedRegions.Dispose();
                ho_ObjectSelected.Dispose();
                ho_Skeleton.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_SelectedContours.Dispose();
                ho_MiddleEdgeContour.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void ReadModel(out HObject ho_ModelContours, HTuple hv_ModelFilePath, out HTuple hv_ModelID)
        {


            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.ReadShapeModel(hv_ModelFilePath, out hv_ModelID);
            ho_ModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);

            return;
        }

        public void PretreatmentImage(HObject ho_oriImage, out HObject ho_ImageForFilmDetect,
            out HObject ho_ImageForWeldNGDetect, out HObject ho_ImageForHeadWeldNGDetect,
            out HObject ho_ImageForExtractROI, out HObject ho_RectangleForTopRegionExist,
            out HObject ho_RectangleForBottomRegionExist, out HObject ho_RegionOpening,
            out HObject ho_ImageForJudgeBackColor, HTuple hv_isBackDetect, HTuple hv_mainLineNum,
            HTuple hv_mainLineWidth, HTuple hv_height, HTuple hv_isUsingChinese, HTuple hv_windowHandle,
            out HTuple hv_isTopWaferExist, out HTuple hv_isBottomWaferExist, out HTuple hv_exceptionInfo,
            out HTuple hv_isPretreatmentReturn)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_RedChannelImage, ho_GreenChannelImage;
            HObject ho_BlueChannelImage, ho_ImageResult = null, ho_ImageH = null;
            HObject ho_ImageS = null, ho_ImageV = null, ho_ImageClosing = null;
            HObject ho_ImageForFilmDetectS = null, ho_RedChannelImages = null;
            HObject ho_RedChannelImageOpening = null, ho_ImageReducedForTopRegionExist;
            HObject ho_TopRegionExist = null, ho_ImageReducedForBottomRegionExist;
            HObject ho_BottomRegionExist = null;

            // Local control variables 

            HTuple hv_AreaOfTopRegionExist = null, hv_Row = null;
            HTuple hv_Column = null, hv_AreaOfBottomRegionExist = null;
            HTuple hv_isDistanceNG = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ImageForFilmDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeadWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractROI);
            HOperatorSet.GenEmptyObj(out ho_RectangleForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RectangleForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ImageForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImage);
            HOperatorSet.GenEmptyObj(out ho_GreenChannelImage);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImage);
            HOperatorSet.GenEmptyObj(out ho_ImageResult);
            HOperatorSet.GenEmptyObj(out ho_ImageH);
            HOperatorSet.GenEmptyObj(out ho_ImageS);
            HOperatorSet.GenEmptyObj(out ho_ImageV);
            HOperatorSet.GenEmptyObj(out ho_ImageClosing);
            HOperatorSet.GenEmptyObj(out ho_ImageForFilmDetectS);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImages);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImageOpening);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_TopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionExist);
            try
            {
                hv_isTopWaferExist = 0;
                hv_isBottomWaferExist = 0;
                hv_exceptionInfo = "";
                //2020.05.09-添加return()判断，在主函数中直接退出
                hv_isPretreatmentReturn = 0;

                ho_ImageForJudgeBackColor.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_ImageForJudgeBackColor);
                //分割彩色图片，分别对应1-R、2-G、3-B
                ho_RedChannelImage.Dispose(); ho_GreenChannelImage.Dispose(); ho_BlueChannelImage.Dispose();
                HOperatorSet.Decompose3(ho_oriImage, out ho_RedChannelImage, out ho_GreenChannelImage,
                    out ho_BlueChannelImage);
                if ((int)((new HTuple(hv_isBackDetect.TupleEqual(1))).TupleAnd(new HTuple(hv_mainLineNum.TupleEqual(
                    5)))) != 0)
                {
                    ho_ImageResult.Dispose();
                    HOperatorSet.MultImage(ho_BlueChannelImage, ho_BlueChannelImage, out ho_ImageResult,
                        0.04, 0);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.GrayClosingRect(ho_ImageResult, out ExpTmpOutVar_0, 10, 30);
                        ho_ImageResult.Dispose();
                        ho_ImageResult = ExpTmpOutVar_0;
                    }
                    ho_ImageH.Dispose(); ho_ImageS.Dispose(); ho_ImageV.Dispose();
                    HOperatorSet.TransFromRgb(ho_RedChannelImage, ho_GreenChannelImage, ho_BlueChannelImage,
                        out ho_ImageH, out ho_ImageS, out ho_ImageV, "hsv");
                    ho_ImageClosing.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageS, out ho_ImageClosing, 15, 1);

                    ho_ImageForFilmDetectS.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_ImageClosing, out ho_ImageForFilmDetectS,
                        20, 15);
                    ho_ImageForWeldNGDetect.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_ImageClosing, out ho_ImageForWeldNGDetect,
                        10, 1);
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect = ho_ImageForWeldNGDetect.CopyObj(1, -1);
                    ho_ImageForFilmDetect.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageForFilmDetectS, out ho_ImageForFilmDetect,
                        1, 15);
                }
                else
                {
                    //提取主栅线特征图
                    //2019-6-12 5改为mainLineWidth / 0.04
                    //gray_opening_rect (RedChannelImage, ImageForFilmDetect, 20, mainLineWidth / 0.04)
                    //2020.04.23-区域寻找
                    ho_RedChannelImages.Dispose();
                    ho_RedChannelImages = ho_RedChannelImage.CopyObj(1, -1);
                    //mult_image (RedChannelImage, RedChannelImage, ImageReduces, 0.03, 0)
                    //gray_opening_rect (ImageReduces, ImageForFilmDetectForROI, 10, mainLineWidth / 0.04)
                    //2019-7-29 高度20改为10
                    ho_ImageForFilmDetect.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageForFilmDetect,
                        10, hv_mainLineWidth / 0.04);

                    ho_ImageForWeldNGDetect.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageForWeldNGDetect,
                        10, 1);

                    //2019-5-22下半片头尾膜偏处理图
                    //2019-6-12 优化时间
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    HOperatorSet.GrayClosingRect(ho_ImageForWeldNGDetect, out ho_ImageForHeadWeldNGDetect,
                        1, 15);
                }

                //提取上、下硅片ROI区域图
                if ((int)(hv_isBackDetect) != 0)
                {
                    if ((int)(new HTuple(hv_mainLineNum.TupleEqual(5))) != 0)
                    {
                        ho_ImageForExtractROI.Dispose();
                        ho_ImageForExtractROI = ho_ImageResult.CopyObj(1, -1);
                    }
                    else
                    {
                        ho_ImageResult.Dispose();
                        HOperatorSet.MultImage(ho_BlueChannelImage, ho_BlueChannelImage, out ho_ImageResult,
                            0.04, 0);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.GrayClosingRect(ho_ImageResult, out ExpTmpOutVar_0, 20, 30);
                            ho_ImageResult.Dispose();
                            ho_ImageResult = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.GrayOpeningRect(ho_ImageResult, out ExpTmpOutVar_0, 1, 20);
                            ho_ImageResult.Dispose();
                            ho_ImageResult = ExpTmpOutVar_0;
                        }
                        ho_ImageForExtractROI.Dispose();
                        ho_ImageForExtractROI = ho_ImageResult.CopyObj(1, -1);
                        //gray_closing_rect (BlueChannelImage, ImageOpening, 1, 70)
                        //gray_opening_rect (ImageOpening, ImageForExtractROI, 50, 50)
                    }

                    //2019-5-9
                    ho_RedChannelImageOpening.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_RedChannelImageOpening,
                        50, 50);
                    ho_ImageForJudgeBackColor.Dispose();
                    HOperatorSet.GrayClosingRect(ho_RedChannelImageOpening, out ho_ImageForJudgeBackColor,
                        1, 1);
                }
                else
                {
                    ho_ImageForExtractROI.Dispose();
                    HOperatorSet.GrayOpeningRect(ho_ImageForFilmDetect, out ho_ImageForExtractROI,
                        1, 70);
                }

                //判断是否有上半片
                ho_RectangleForTopRegionExist.Dispose();
                HOperatorSet.GenRectangle1(out ho_RectangleForTopRegionExist, 80, 700, 150,
                    3100);
                ho_ImageReducedForTopRegionExist.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_RectangleForTopRegionExist,
                    out ho_ImageReducedForTopRegionExist);
                if ((int)(hv_isBackDetect) != 0)
                {
                    ho_TopRegionExist.Dispose();
                    HOperatorSet.Threshold(ho_ImageReducedForTopRegionExist, out ho_TopRegionExist,
                        50, 255);
                }
                else
                {
                    ho_TopRegionExist.Dispose();
                    HOperatorSet.Threshold(ho_ImageReducedForTopRegionExist, out ho_TopRegionExist,
                        0, 50);
                }
                HOperatorSet.AreaCenter(ho_TopRegionExist, out hv_AreaOfTopRegionExist, out hv_Row,
                    out hv_Column);

                //判断是否有下半片
                ho_RectangleForBottomRegionExist.Dispose();
                HOperatorSet.GenRectangle1(out ho_RectangleForBottomRegionExist, hv_height - 200,
                    700, hv_height - 100, 3100);
                ho_ImageReducedForBottomRegionExist.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_RectangleForBottomRegionExist,
                    out ho_ImageReducedForBottomRegionExist);
                if ((int)(hv_isBackDetect) != 0)
                {
                    ho_BottomRegionExist.Dispose();
                    HOperatorSet.Threshold(ho_ImageReducedForBottomRegionExist, out ho_BottomRegionExist,
                        50, 255);
                }
                else
                {
                    ho_BottomRegionExist.Dispose();
                    HOperatorSet.Threshold(ho_ImageReducedForBottomRegionExist, out ho_BottomRegionExist,
                        0, 50);
                }
                HOperatorSet.AreaCenter(ho_BottomRegionExist, out hv_AreaOfBottomRegionExist,
                    out hv_Row, out hv_Column);

                if ((int)(new HTuple(hv_AreaOfTopRegionExist.TupleLessEqual(100000))) != 0)
                {
                    hv_isTopWaferExist = 0;
                }
                else
                {
                    hv_isTopWaferExist = 1;
                }

                if ((int)(new HTuple(hv_AreaOfBottomRegionExist.TupleLessEqual(100000))) != 0)
                {
                    hv_isBottomWaferExist = 0;
                }
                else
                {
                    hv_isBottomWaferExist = 1;
                }

                if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(0))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                    0)))) != 0)
                {
                    //isException := true
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "空平台";
                    }
                    else
                    {
                        hv_exceptionInfo = "Empty Platform";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isPretreatmentReturn = 1;
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageResult.Dispose();
                    ho_ImageH.Dispose();
                    ho_ImageS.Dispose();
                    ho_ImageV.Dispose();
                    ho_ImageClosing.Dispose();
                    ho_ImageForFilmDetectS.Dispose();
                    ho_RedChannelImages.Dispose();
                    ho_RedChannelImageOpening.Dispose();
                    ho_ImageReducedForTopRegionExist.Dispose();
                    ho_TopRegionExist.Dispose();
                    ho_ImageReducedForBottomRegionExist.Dispose();
                    ho_BottomRegionExist.Dispose();

                    return;
                }

                //2019-3-27判断是否少片
                if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                    0)))) != 0)
                {
                    hv_isDistanceNG = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "下片空";
                    }
                    else
                    {
                        hv_exceptionInfo = "No Lower Cell";
                    }
                    //disp_message_UserDefine (windowHandle, exceptionInfo, 400, 12, 'red')
                    //return ()
                }

                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageResult.Dispose();
                ho_ImageH.Dispose();
                ho_ImageS.Dispose();
                ho_ImageV.Dispose();
                ho_ImageClosing.Dispose();
                ho_ImageForFilmDetectS.Dispose();
                ho_RedChannelImages.Dispose();
                ho_RedChannelImageOpening.Dispose();
                ho_ImageReducedForTopRegionExist.Dispose();
                ho_TopRegionExist.Dispose();
                ho_ImageReducedForBottomRegionExist.Dispose();
                ho_BottomRegionExist.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageResult.Dispose();
                ho_ImageH.Dispose();
                ho_ImageS.Dispose();
                ho_ImageV.Dispose();
                ho_ImageClosing.Dispose();
                ho_ImageForFilmDetectS.Dispose();
                ho_RedChannelImages.Dispose();
                ho_RedChannelImageOpening.Dispose();
                ho_ImageReducedForTopRegionExist.Dispose();
                ho_TopRegionExist.Dispose();
                ho_ImageReducedForBottomRegionExist.Dispose();
                ho_BottomRegionExist.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetRegion(HObject ho_RedChannelImage, HObject ho_BlueChannelImage,
            HObject ho_ImageForExtractROI, HObject ho_ImageForWeldNGDetect, out HObject ho_TopRegion,
            out HObject ho_BottomRegion, out HObject ho_TopRegionForDistance, out HObject ho_BottomRegionForDistance,
            out HObject ho_SelectedRegions, out HObject ho_RegionFillUp, out HObject ho_RegionOpening,
            HTuple hv_isBackDetect, HTuple hv_width, HTuple hv_height, HTuple hv_grayOpenHeight,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_minimumArea,
            HTuple hv_maxArea, HTuple hv_isUsingChinese, HTuple hv_windowHandle, out HTuple hv_RowOfLeftTopColorCornerPointRegionOut,
            out HTuple hv_ColOfLeftTopColorCornerPointRegionOut, out HTuple hv_RowOfRightTopColorCornerPointRegionOut,
            out HTuple hv_ColOfRightTopColorCornerPointRegionOut, out HTuple hv_RowOfLeftBottomColorCornerPointRegionOut,
            out HTuple hv_ColOfLeftBottomColorCornerPointRegionOut, out HTuple hv_RowOfRightBottomColorCornerPointRegionOut,
            out HTuple hv_ColOfRightBottomColorCornerPointRegionOut, out HTuple hv_isFoundTopEdgeRegionOut,
            out HTuple hv_isFoundBottomEdgeRegionOut, out HTuple hv_isException, out HTuple hv_exceptionInfo,
            out HTuple hv_isGetRegionReturn)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegions, ho_BottomRegions, ho_TopEdgeRegion;
            HObject ho_BottomEdgeRegion, ho_RegionsOfBinaryThreshold = null;
            HObject ho_ConnectedRegions, ho_SelectedRegions1, ho_SortedRegions;
            HObject ho_EmptyRegion = null, ho_ImageClosingForDistance = null;
            HObject ho_SortedRegionsForDistance = null;

            // Local control variables 

            HTuple hv_UsedThreshold = new HTuple(), hv_BigRegionNum = null;
            HTuple hv_TopEdgeRegionIsEqual = new HTuple(), hv_BottomEdgeRegionIsEqual = new HTuple();
            HTuple hv_TopRegionWidth = new HTuple(), hv_TopRegionHeight = new HTuple();
            HTuple hv_BottomRegionWidth = new HTuple(), hv_BottomRegionHeight = new HTuple();
            HTuple hv_UsedThreshold1 = new HTuple(), hv_BigRegionNumForDistance = new HTuple();
            HTuple hv_TopRegionsIsEqual = null, hv_BottomRegionsIsEqual = null;
            HTuple hv_grayOpenHeight_COPY_INP_TMP = hv_grayOpenHeight.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_TopRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomRegions);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionsOfBinaryThreshold);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions);
            HOperatorSet.GenEmptyObj(out ho_EmptyRegion);
            HOperatorSet.GenEmptyObj(out ho_ImageClosingForDistance);
            HOperatorSet.GenEmptyObj(out ho_SortedRegionsForDistance);
            hv_RowOfLeftTopColorCornerPointRegionOut = new HTuple();
            hv_ColOfLeftTopColorCornerPointRegionOut = new HTuple();
            hv_RowOfRightTopColorCornerPointRegionOut = new HTuple();
            hv_ColOfRightTopColorCornerPointRegionOut = new HTuple();
            hv_RowOfLeftBottomColorCornerPointRegionOut = new HTuple();
            hv_ColOfLeftBottomColorCornerPointRegionOut = new HTuple();
            hv_RowOfRightBottomColorCornerPointRegionOut = new HTuple();
            hv_ColOfRightBottomColorCornerPointRegionOut = new HTuple();
            hv_isFoundTopEdgeRegionOut = new HTuple();
            hv_isFoundBottomEdgeRegionOut = new HTuple();
            try
            {
                hv_isException = 0;
                hv_exceptionInfo = "";
                //2020.04.23-存放未处理的红图
                //gen_empty_region (RedChannelImages)
                ho_TopRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegions);
                ho_BottomRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegions);
                ho_TopEdgeRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopEdgeRegion);
                ho_BottomEdgeRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomEdgeRegion);
                ho_RegionOpening.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_RegionOpening);
                //2020.05.09-初始化输出参数
                ho_TopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegion);
                ho_BottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegion);

                //2020.05.09-添加return()判断，在主函数中直接退出
                hv_isGetRegionReturn = 0;

                if ((int)(hv_isBackDetect) != 0)
                {
                    ho_RegionsOfBinaryThreshold.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractROI, out ho_RegionsOfBinaryThreshold,
                        "max_separability", "light", out hv_UsedThreshold);
                }
                else
                {
                    ho_RegionsOfBinaryThreshold.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractROI, out ho_RegionsOfBinaryThreshold,
                        "max_separability", "dark", out hv_UsedThreshold);
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                        0.07 * hv_width, 40);
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                }
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegions,
                    "max_area", 70);
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, 30, 30);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1, "area",
                    "and", hv_minimumArea, hv_maxArea);
                HOperatorSet.CountObj(ho_SelectedRegions1, out hv_BigRegionNum);
                ho_SortedRegions.Dispose();
                HOperatorSet.SortRegion(ho_SelectedRegions1, out ho_SortedRegions, "upper_left",
                    "true", "row");
                if ((int)(new HTuple(hv_BigRegionNum.TupleGreater(2))) != 0)
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "内置参数异常-超过两个区域！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Built-in parameter error-More two region!";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isGetRegionReturn = 1;
                    ho_TopRegions.Dispose();
                    ho_BottomRegions.Dispose();
                    ho_TopEdgeRegion.Dispose();
                    ho_BottomEdgeRegion.Dispose();
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_EmptyRegion.Dispose();
                    ho_ImageClosingForDistance.Dispose();
                    ho_SortedRegionsForDistance.Dispose();

                    return;
                }
                else if ((int)(new HTuple(hv_BigRegionNum.TupleEqual(2))) != 0)
                {
                    if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                        1)))) != 0)
                    {
                        //2020.06.02-拉伸情况找到区域，导致程序奔溃，改内部处理
                        if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                        {
                            ho_TopEdgeRegion.Dispose(); ho_BottomEdgeRegion.Dispose();
                            EdgeLocateChip(ho_RedChannelImage, ho_BlueChannelImage, out ho_TopEdgeRegion,
                                out ho_BottomEdgeRegion, hv_width, hv_height, hv_grayOpenHeight_COPY_INP_TMP,
                                hv_windowHandle, hv_isTopWaferExist, hv_isBottomWaferExist, out hv_isFoundTopEdgeRegionOut,
                                out hv_isFoundBottomEdgeRegionOut, out hv_RowOfLeftTopColorCornerPointRegionOut,
                                out hv_ColOfLeftTopColorCornerPointRegionOut, out hv_RowOfRightTopColorCornerPointRegionOut,
                                out hv_ColOfRightTopColorCornerPointRegionOut, out hv_RowOfLeftBottomColorCornerPointRegionOut,
                                out hv_ColOfLeftBottomColorCornerPointRegionOut, out hv_RowOfRightBottomColorCornerPointRegionOut,
                                out hv_ColOfRightBottomColorCornerPointRegionOut);
                            //2020.04.27-小片11找不到改为7再找一次
                            ho_EmptyRegion.Dispose();
                            HOperatorSet.GenEmptyRegion(out ho_EmptyRegion);
                            HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_TopEdgeRegion, out hv_TopEdgeRegionIsEqual);
                            HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_BottomEdgeRegion, out hv_BottomEdgeRegionIsEqual);
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_TopEdgeRegionIsEqual.TupleEqual(
                                1))).TupleOr(new HTuple(hv_BottomEdgeRegionIsEqual.TupleEqual(1))))).TupleAnd(
                                new HTuple(hv_isTopWaferExist.TupleEqual(1))))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                                1)))) != 0)
                            {
                                hv_grayOpenHeight_COPY_INP_TMP = 7;
                                ho_TopEdgeRegion.Dispose(); ho_BottomEdgeRegion.Dispose();
                                EdgeLocateChip(ho_RedChannelImage, ho_BlueChannelImage, out ho_TopEdgeRegion,
                                    out ho_BottomEdgeRegion, hv_width, hv_height, hv_grayOpenHeight_COPY_INP_TMP,
                                    hv_windowHandle, hv_isTopWaferExist, hv_isBottomWaferExist, out hv_isFoundTopEdgeRegionOut,
                                    out hv_isFoundBottomEdgeRegionOut, out hv_RowOfLeftTopColorCornerPointRegionOut,
                                    out hv_ColOfLeftTopColorCornerPointRegionOut, out hv_RowOfRightTopColorCornerPointRegionOut,
                                    out hv_ColOfRightTopColorCornerPointRegionOut, out hv_RowOfLeftBottomColorCornerPointRegionOut,
                                    out hv_ColOfLeftBottomColorCornerPointRegionOut, out hv_RowOfRightBottomColorCornerPointRegionOut,
                                    out hv_ColOfRightBottomColorCornerPointRegionOut);
                            }
                            //2020.06.02-区域找到不执行
                            if ((int)((new HTuple(hv_isFoundTopEdgeRegionOut.TupleEqual(0))).TupleOr(
                                new HTuple(hv_isFoundBottomEdgeRegionOut.TupleEqual(0)))) != 0)
                            {
                                ho_TopRegions.Dispose();
                                HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopRegions, 1);
                                ho_BottomRegions.Dispose();
                                HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomRegions, 2);
                                if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                {
                                    HOperatorSet.RegionFeatures(ho_TopRegions, "width", out hv_TopRegionWidth);
                                    if ((int)(new HTuple(hv_TopRegionWidth.TupleGreater(3800))) != 0)
                                    {
                                        HOperatorSet.RegionFeatures(ho_TopRegions, "height", out hv_TopRegionHeight);
                                        ho_TopRegion.Dispose();
                                        HOperatorSet.OpeningRectangle1(ho_TopRegions, out ho_TopRegion,
                                            1, hv_TopRegionHeight * 0.6);
                                    }
                                    HOperatorSet.RegionFeatures(ho_BottomRegions, "width", out hv_BottomRegionWidth);
                                    if ((int)(new HTuple(hv_BottomRegionWidth.TupleGreater(3800))) != 0)
                                    {
                                        HOperatorSet.RegionFeatures(ho_BottomRegions, "height", out hv_BottomRegionHeight);
                                        ho_BottomRegion.Dispose();
                                        HOperatorSet.OpeningRectangle1(ho_BottomRegions, out ho_BottomRegion,
                                            1, hv_BottomRegionHeight * 0.6);
                                    }
                                }
                            }
                        }
                        else
                        {
                            ho_TopRegions.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopRegions, 1);
                            ho_BottomRegions.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomRegions, 2);
                            hv_isFoundTopEdgeRegionOut = 0;
                            hv_isFoundBottomEdgeRegionOut = 0;
                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                        HOperatorSet.DispObj(ho_TopRegions, hv_ExpDefaultWinHandle);
                        HOperatorSet.DispObj(ho_BottomRegions, hv_ExpDefaultWinHandle);
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "内置参数异常-两个区域！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Built-in parameter error-Two region!";
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isGetRegionReturn = 1;
                        ho_TopRegions.Dispose();
                        ho_BottomRegions.Dispose();
                        ho_TopEdgeRegion.Dispose();
                        ho_BottomEdgeRegion.Dispose();
                        ho_RegionsOfBinaryThreshold.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions1.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_EmptyRegion.Dispose();
                        ho_ImageClosingForDistance.Dispose();
                        ho_SortedRegionsForDistance.Dispose();

                        return;
                    }
                }
                else if ((int)(new HTuple(hv_BigRegionNum.TupleEqual(1))) != 0)
                {
                    if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleXor(new HTuple(hv_isBottomWaferExist.TupleEqual(
                        1)))) != 0)
                    {
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_TopRegions.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopRegions, 1);
                        }
                        if ((int)(hv_isBottomWaferExist) != 0)
                        {
                            ho_BottomRegions.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomRegions, 1);
                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                        HOperatorSet.DispObj(ho_TopRegions, hv_ExpDefaultWinHandle);
                        HOperatorSet.DispObj(ho_BottomRegions, hv_ExpDefaultWinHandle);
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "片间距异常！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Cell Spacing Error";
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isGetRegionReturn = 1;
                        ho_TopRegions.Dispose();
                        ho_BottomRegions.Dispose();
                        ho_TopEdgeRegion.Dispose();
                        ho_BottomEdgeRegion.Dispose();
                        ho_RegionsOfBinaryThreshold.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions1.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_EmptyRegion.Dispose();
                        ho_ImageClosingForDistance.Dispose();
                        ho_SortedRegionsForDistance.Dispose();

                        return;
                    }
                }
                else
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "内置参数异常-无区域！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Built-in parameter error-Zero region!";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isGetRegionReturn = 1;
                    ho_TopRegions.Dispose();
                    ho_BottomRegions.Dispose();
                    ho_TopEdgeRegion.Dispose();
                    ho_BottomEdgeRegion.Dispose();
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_EmptyRegion.Dispose();
                    ho_ImageClosingForDistance.Dispose();
                    ho_SortedRegionsForDistance.Dispose();

                    return;
                }

                if ((int)((new HTuple(hv_isFoundTopEdgeRegionOut.TupleEqual(0))).TupleOr(new HTuple(hv_isFoundBottomEdgeRegionOut.TupleEqual(
                    0)))) != 0)
                {
                    if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                    {
                        ho_ImageClosingForDistance.Dispose();
                        HOperatorSet.GrayClosingRect(ho_ImageForWeldNGDetect, out ho_ImageClosingForDistance,
                            15, 1);
                        ho_RegionsOfBinaryThreshold.Dispose();
                        HOperatorSet.BinaryThreshold(ho_ImageClosingForDistance, out ho_RegionsOfBinaryThreshold,
                            "max_separability", "dark", out hv_UsedThreshold1);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                10, 1);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ClosingRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                80, 1);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                0.07 * hv_width, 40);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        ho_SelectedRegions.Dispose();
                        HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegions,
                            "max_area", 70);
                        ho_RegionFillUp.Dispose();
                        HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                        ho_RegionOpening.Dispose();
                        HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, 30,
                            30);
                        ho_ConnectedRegions.Dispose();
                        HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                        ho_SelectedRegions1.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1,
                            "area", "and", hv_minimumArea, hv_maxArea);
                        HOperatorSet.CountObj(ho_SelectedRegions1, out hv_BigRegionNumForDistance);
                        ho_SortedRegionsForDistance.Dispose();
                        HOperatorSet.SortRegion(ho_SelectedRegions1, out ho_SortedRegionsForDistance,
                            "upper_left", "true", "row");
                        if ((int)(new HTuple(hv_BigRegionNumForDistance.TupleEqual(2))) != 0)
                        {
                            if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                                1)))) != 0)
                            {
                                ho_TopRegionForDistance.Dispose();
                                HOperatorSet.SelectObj(ho_SortedRegionsForDistance, out ho_TopRegionForDistance,
                                    1);
                                ho_BottomRegionForDistance.Dispose();
                                HOperatorSet.SelectObj(ho_SortedRegionsForDistance, out ho_BottomRegionForDistance,
                                    2);
                                HOperatorSet.RegionFeatures(ho_TopRegionForDistance, "width", out hv_TopRegionWidth);
                                if ((int)(new HTuple(hv_TopRegionWidth.TupleGreater(3800))) != 0)
                                {
                                    HOperatorSet.RegionFeatures(ho_TopRegionForDistance, "height", out hv_TopRegionHeight);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.OpeningRectangle1(ho_TopRegionForDistance, out ExpTmpOutVar_0,
                                            1, hv_TopRegionHeight * 0.6);
                                        ho_TopRegionForDistance.Dispose();
                                        ho_TopRegionForDistance = ExpTmpOutVar_0;
                                    }
                                }

                                HOperatorSet.RegionFeatures(ho_BottomRegionForDistance, "width", out hv_BottomRegionWidth);
                                if ((int)(new HTuple(hv_BottomRegionWidth.TupleGreater(3800))) != 0)
                                {
                                    HOperatorSet.RegionFeatures(ho_BottomRegionForDistance, "height",
                                        out hv_BottomRegionHeight);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.OpeningRectangle1(ho_BottomRegionForDistance, out ExpTmpOutVar_0,
                                            1, hv_BottomRegionHeight * 0.6);
                                        ho_BottomRegionForDistance.Dispose();
                                        ho_BottomRegionForDistance = ExpTmpOutVar_0;
                                    }
                                }
                            }
                        }
                    }
                }

                //2020.04.20 区域确定
                ho_EmptyRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_EmptyRegion);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_TopEdgeRegion, out hv_TopEdgeRegionIsEqual);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_TopRegions, out hv_TopRegionsIsEqual);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_BottomEdgeRegion, out hv_BottomEdgeRegionIsEqual);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_BottomRegions, out hv_BottomRegionsIsEqual);

                if ((int)((new HTuple((new HTuple((new HTuple(hv_TopEdgeRegionIsEqual.TupleEqual(
                    0))).TupleOr(new HTuple(hv_TopRegionsIsEqual.TupleEqual(0))))).TupleOr(
                    new HTuple(hv_BottomEdgeRegionIsEqual.TupleEqual(0))))).TupleOr(new HTuple(hv_BottomRegionsIsEqual.TupleEqual(
                    0)))) != 0)
                {
                    if ((int)((new HTuple(hv_TopEdgeRegionIsEqual.TupleEqual(0))).TupleOr(new HTuple(hv_TopRegionsIsEqual.TupleEqual(
                        0)))) != 0)
                    {
                        if ((int)(hv_isFoundTopEdgeRegionOut) != 0)
                        {
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ho_TopEdgeRegion.CopyObj(1, -1);
                        }
                        else
                        {
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ho_TopRegions.CopyObj(1, -1);
                        }
                        ho_TopRegionForDistance.Dispose();
                        ho_TopRegionForDistance = ho_TopRegion.CopyObj(1, -1);
                    }
                    if ((int)((new HTuple(hv_BottomEdgeRegionIsEqual.TupleEqual(0))).TupleOr(
                        new HTuple(hv_BottomRegionsIsEqual.TupleEqual(0)))) != 0)
                    {
                        if ((int)(hv_isFoundBottomEdgeRegionOut) != 0)
                        {
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ho_BottomEdgeRegion.CopyObj(1, -1);
                        }
                        else
                        {
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ho_BottomRegions.CopyObj(1, -1);
                        }
                        ho_BottomRegionForDistance.Dispose();
                        ho_BottomRegionForDistance = ho_BottomRegion.CopyObj(1, -1);
                    }
                    ho_SelectedRegions.Dispose();
                    HOperatorSet.GenEmptyRegion(out ho_SelectedRegions);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_SelectedRegions, ho_TopRegion, out ExpTmpOutVar_0);
                        ho_SelectedRegions.Dispose();
                        ho_SelectedRegions = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union2(ho_SelectedRegions, ho_BottomRegion, out ExpTmpOutVar_0
                            );
                        ho_SelectedRegions.Dispose();
                        ho_SelectedRegions = ExpTmpOutVar_0;
                    }
                    ho_RegionFillUp.Dispose();
                    HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                }
                else
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "内置参数异常！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Built-in parameter error!";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isGetRegionReturn = 1;
                    ho_TopRegions.Dispose();
                    ho_BottomRegions.Dispose();
                    ho_TopEdgeRegion.Dispose();
                    ho_BottomEdgeRegion.Dispose();
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_EmptyRegion.Dispose();
                    ho_ImageClosingForDistance.Dispose();
                    ho_SortedRegionsForDistance.Dispose();

                    return;
                }

                if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                    1)))) != 0)
                {
                    if ((int)((new HTuple((new HTuple(hv_TopEdgeRegionIsEqual.TupleEqual(0))).TupleAnd(
                        new HTuple(hv_BottomEdgeRegionIsEqual.TupleEqual(0))))).TupleOr((new HTuple(hv_TopRegionsIsEqual.TupleEqual(
                        0))).TupleAnd(new HTuple(hv_BottomRegionsIsEqual.TupleEqual(0))))) != 0)
                    {
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "片间距异常！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Cell Spacing Error";
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isGetRegionReturn = 1;
                        ho_TopRegions.Dispose();
                        ho_BottomRegions.Dispose();
                        ho_TopEdgeRegion.Dispose();
                        ho_BottomEdgeRegion.Dispose();
                        ho_RegionsOfBinaryThreshold.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions1.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_EmptyRegion.Dispose();
                        ho_ImageClosingForDistance.Dispose();
                        ho_SortedRegionsForDistance.Dispose();

                        return;
                    }
                }

                ho_TopRegions.Dispose();
                ho_BottomRegions.Dispose();
                ho_TopEdgeRegion.Dispose();
                ho_BottomEdgeRegion.Dispose();
                ho_RegionsOfBinaryThreshold.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_SortedRegions.Dispose();
                ho_EmptyRegion.Dispose();
                ho_ImageClosingForDistance.Dispose();
                ho_SortedRegionsForDistance.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegions.Dispose();
                ho_BottomRegions.Dispose();
                ho_TopEdgeRegion.Dispose();
                ho_BottomEdgeRegion.Dispose();
                ho_RegionsOfBinaryThreshold.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_SortedRegions.Dispose();
                ho_EmptyRegion.Dispose();
                ho_ImageClosingForDistance.Dispose();
                ho_SortedRegionsForDistance.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void JudgePrintingOfBack(HObject ho_BlueChannelImage, HObject ho_ImageForJudgeBackColor,
            HObject ho_RectangleForTopRegionExist, HObject ho_RectangleForBottomRegionExist,
            HObject ho_RegionOpening, out HObject ho_BackGrayImageForWeldNGDetect, HTuple hv_isBackDetect,
            HTuple hv_isTopWaferExist, HTuple hv_isUsingFilmMissDetect, out HTuple hv_isBackGrayColor)
        {




            // Local iconic variables 

            HObject ho_ImageReducedForJudgeBackColor = null;
            HObject ho_RegionGrayBack = null, ho_BlueChannelImageReduced = null;

            // Local control variables 

            HTuple hv_AreaOfRegionGrayBack = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_BackGrayImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_RegionGrayBack);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImageReduced);
            try
            {
                ho_BackGrayImageForWeldNGDetect.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BackGrayImageForWeldNGDetect);
                //2020.05.09-背面是否有印刷初始化
                hv_isBackGrayColor = 0;
                //2019-5-9 判断背面检测是否有印刷
                if ((int)(hv_isBackDetect) != 0)
                {
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        ho_ImageReducedForJudgeBackColor.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForJudgeBackColor, ho_RectangleForTopRegionExist,
                            out ho_ImageReducedForJudgeBackColor);
                        ho_RegionGrayBack.Dispose();
                        HOperatorSet.Threshold(ho_ImageReducedForJudgeBackColor, out ho_RegionGrayBack,
                            50, 255);
                        HOperatorSet.AreaCenter(ho_RegionGrayBack, out hv_AreaOfRegionGrayBack,
                            out hv_Row, out hv_Column);
                    }
                    else
                    {
                        ho_ImageReducedForJudgeBackColor.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForJudgeBackColor, ho_RectangleForBottomRegionExist,
                            out ho_ImageReducedForJudgeBackColor);
                        ho_RegionGrayBack.Dispose();
                        HOperatorSet.Threshold(ho_ImageReducedForJudgeBackColor, out ho_RegionGrayBack,
                            50, 255);
                        HOperatorSet.AreaCenter(ho_RegionGrayBack, out hv_AreaOfRegionGrayBack,
                            out hv_Row, out hv_Column);
                    }
                    if ((int)(hv_isUsingFilmMissDetect) != 0)
                    {
                        hv_isBackGrayColor = 0;
                    }
                    else
                    {
                        hv_isBackGrayColor = 1;
                        ho_BlueChannelImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_BlueChannelImage, ho_RegionOpening, out ho_BlueChannelImageReduced
                            );
                        ho_BackGrayImageForWeldNGDetect.Dispose();
                        HOperatorSet.GrayOpeningRect(ho_BlueChannelImageReduced, out ho_BackGrayImageForWeldNGDetect,
                            30, 1);
                    }
                    //if (AreaOfRegionGrayBack >= 100000)
                    //isBackGrayColor := true
                    //reduce_domain (BlueChannelImage, RegionOpening, BlueChannelImageReduced)
                    //gray_opening_rect (BlueChannelImageReduced, BackGrayImageForWeldNGDetect, 30, 1)
                    //endif
                }
                ho_ImageReducedForJudgeBackColor.Dispose();
                ho_RegionGrayBack.Dispose();
                ho_BlueChannelImageReduced.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ImageReducedForJudgeBackColor.Dispose();
                ho_RegionGrayBack.Dispose();
                ho_BlueChannelImageReduced.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void OptimizeOfRegion(HObject ho_ImageForExtractROI, HObject ho_TopRegion,
            HObject ho_BottomRegion, HObject ho_TopRegionForDistance, HObject ho_BottomRegionForDistance,
            out HObject ho_CalibrateTopAroundRegion, out HObject ho_CalibrateBottomAroundRegion,
            out HObject ho_MaxRectangleTopRegion, out HObject ho_MaxRectangleBottomRegion,
            HTuple hv_isBackDetect, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            HTuple hv_isUsingWaferEdgeCalibration, HTuple hv_isFoundTopEdgeRegionOut, HTuple hv_isFoundBottomEdgeRegionOut,
            HTuple hv_waferEdgeCalibrationRegionDilationPixel, HTuple hv_widthResolution,
            HTuple hv_heightResolution, HTuple hv_width, HTuple hv_height, HTuple hv_locationWaferEdgeThresh,
            HTuple hv_windowHandle, out HTuple hv_RowOfLeftCornerPointTopRegion, out HTuple hv_ColumnOfLeftCornerPointTopRegion,
            out HTuple hv_RowOfRightCornerPointTopRegion, out HTuple hv_ColumnOfRightCornerPointTopRegion,
            out HTuple hv_RowOfLeftCornerPointBottomRegion, out HTuple hv_ColumnOfLeftCornerPointBottomRegion,
            out HTuple hv_RowOfRightCornerPointBottomRegion, out HTuple hv_ColumnOfRightCornerPointBottomRegion)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionDilation = null, ho_TopRegionForDistanceDilation = null;
            HObject ho_MiddleEdgeContour = null, ho_LeftEdgeContour = null;
            HObject ho_RightEdgeContour = null, ho_BottomRegionDilation = null;
            HObject ho_BottomRegionForDistanceDilation = null;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRowOfTopRegion = new HTuple();
            HTuple hv_CenterColumnOfTopRegion = new HTuple(), hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_RowOfMiddleEdgePointOfTopRegion = new HTuple();
            HTuple hv_ColumnOfMiddleEdgePointOfTopRegion = new HTuple();
            HTuple hv_RowOfLeftEdgePointOfTopRegion = new HTuple();
            HTuple hv_ColumnOfLeftEdgePointOfTopRegion = new HTuple();
            HTuple hv_RowOfRightEdgePointOfTopRegion = new HTuple();
            HTuple hv_ColumnOfRightEdgePointOfTopRegion = new HTuple();
            HTuple hv_widthUnit = new HTuple(), hv_PixWidthStep = new HTuple();
            HTuple hv_HalfScanLengthOfBottomEdge = new HTuple(), hv_tempAngle = new HTuple();
            HTuple hv_tempRightAngleSide = new HTuple(), hv_RowOfFirstRegion = new HTuple();
            HTuple hv_ColumnOfFirstRegion = new HTuple(), hv_RowOfMiddleEdgePoints = new HTuple();
            HTuple hv_ColumnOfMiddleEdgePoints = new HTuple(), hv_RowOfSecondRegion = new HTuple();
            HTuple hv_ColumnOfSecondRegion = new HTuple(), hv_RowOfThirdRegion = new HTuple();
            HTuple hv_ColumnOfThirdRegion = new HTuple(), hv_RowOfFourthRegion = new HTuple();
            HTuple hv_ColumnOfFourthRegion = new HTuple(), hv_SortIndices = new HTuple();
            HTuple hv_heightUnit = new HTuple(), hv_PixHeightStep = new HTuple();
            HTuple hv_HalfScanLengthOfLeftRightEdge = new HTuple();
            HTuple hv_NearCornerFindPoint = new HTuple(), hv_RowOfLeftEdgePoints = new HTuple();
            HTuple hv_ColumnOfLeftEdgePoints = new HTuple(), hv_RowOfRightEdgePoints = new HTuple();
            HTuple hv_ColumnOfRightEdgePoints = new HTuple(), hv_RowBeginOfMiddleEdgeLine = new HTuple();
            HTuple hv_ColBeginOfMiddleEdgeLine = new HTuple(), hv_RowEndOfMiddleEdgeLine = new HTuple();
            HTuple hv_ColEndOfMiddleEdgeLine = new HTuple(), hv_Nr = new HTuple();
            HTuple hv_Nc = new HTuple(), hv_Dist = new HTuple(), hv_RowBeginOfLeftEdgeLine = new HTuple();
            HTuple hv_ColBeginOfLeftEdgeLine = new HTuple(), hv_RowEndOfLeftEdgeLine = new HTuple();
            HTuple hv_ColEndOfLeftEdgeLine = new HTuple(), hv_RowBeginOfRightEdgeLine = new HTuple();
            HTuple hv_ColBeginOfRightEdgeLine = new HTuple(), hv_RowEndOfRightEdgeLine = new HTuple();
            HTuple hv_ColEndOfRightEdgeLine = new HTuple(), hv_RowOfLeftBottomCornerPoint = new HTuple();
            HTuple hv_ColOfLeftBottomCornerPoint = new HTuple(), hv_IsOverLapping = new HTuple();
            HTuple hv_RowOfRightBottomCornerPoint = new HTuple(), hv_ColOfRightBottomCornerPoint = new HTuple();
            HTuple hv_IsOverlapping = new HTuple(), hv_RowOfLeftTopCornerPoint = new HTuple();
            HTuple hv_ColOfLeftTopCornerPoint = new HTuple(), hv_RowOfRightTopCornerPoint = new HTuple();
            HTuple hv_ColOfRightTopCornerPoint = new HTuple(), hv_RowOfCalibrateTopRegionContour = new HTuple();
            HTuple hv_ColOfCalibrateTopRegionContour = new HTuple();
            HTuple hv_isTopRegionCalibrateFinish = new HTuple(), hv_CenterRowOfBottomRegion = new HTuple();
            HTuple hv_CenterColumnOfBottomRegion = new HTuple(), hv_PhiOfBottomRegion = new HTuple();
            HTuple hv_HalfWidthOfBottomRegion = new HTuple(), hv_HalfHeightOfBottomRegion = new HTuple();
            HTuple hv_RowOfMiddleEdgePointOfBottomRegion = new HTuple();
            HTuple hv_ColumnOfMiddleEdgePointOfBottomRegion = new HTuple();
            HTuple hv_RowOfLeftEdgePointOfBottomRegion = new HTuple();
            HTuple hv_ColumnOfLeftEdgePointOfBottomRegion = new HTuple();
            HTuple hv_RowOfRightEdgePointOfBottomRegion = new HTuple();
            HTuple hv_ColumnOfRightEdgePointOfBottomRegion = new HTuple();
            HTuple hv_RowOfCalibrateBottomRegionContour = new HTuple();
            HTuple hv_ColOfCalibrateBottomRegionContour = new HTuple();
            HTuple hv_isBottomRegionCalibrateFinish = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_CalibrateTopAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateBottomAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleTopRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionDilation);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistanceDilation);
            HOperatorSet.GenEmptyObj(out ho_MiddleEdgeContour);
            HOperatorSet.GenEmptyObj(out ho_LeftEdgeContour);
            HOperatorSet.GenEmptyObj(out ho_RightEdgeContour);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDilation);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForDistanceDilation);
            hv_RowOfLeftCornerPointTopRegion = new HTuple();
            hv_ColumnOfLeftCornerPointTopRegion = new HTuple();
            hv_RowOfRightCornerPointTopRegion = new HTuple();
            hv_ColumnOfRightCornerPointTopRegion = new HTuple();
            hv_RowOfLeftCornerPointBottomRegion = new HTuple();
            hv_ColumnOfLeftCornerPointBottomRegion = new HTuple();
            hv_RowOfRightCornerPointBottomRegion = new HTuple();
            hv_ColumnOfRightCornerPointBottomRegion = new HTuple();
            try
            {
                hv_PI = 3.1415926;
                //2020.05.09-初始化输出变量
                ho_CalibrateTopAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateTopAroundRegion);
                ho_CalibrateBottomAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateBottomAroundRegion);
                ho_MaxRectangleTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_MaxRectangleTopRegion);
                ho_MaxRectangleBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_MaxRectangleBottomRegion);
                //**********上、下电池片Region边缘优化************
                if ((int)(hv_isUsingWaferEdgeCalibration) != 0)
                {
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                            out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                            out hv_HalfHeightOfTopRegion);
                        if ((int)(new HTuple(hv_PhiOfTopRegion.TupleGreater(hv_PI / 4))) != 0)
                        {
                            hv_PhiOfTopRegion = hv_PhiOfTopRegion - (hv_PI / 2);
                        }
                        if ((int)(new HTuple(hv_PhiOfTopRegion.TupleLess((-hv_PI) / 4))) != 0)
                        {
                            hv_PhiOfTopRegion = hv_PhiOfTopRegion + (hv_PI / 2);
                        }
                        ho_MaxRectangleTopRegion.Dispose();
                        HOperatorSet.GenRectangle2(out ho_MaxRectangleTopRegion, hv_CenterRowOfTopRegion,
                            hv_CenterColumnOfTopRegion, hv_PhiOfTopRegion, hv_HalfWidthOfTopRegion,
                            hv_HalfHeightOfTopRegion);
                        //2020.04.23-找到区域不执行
                        if ((int)(new HTuple(hv_isFoundTopEdgeRegionOut.TupleEqual(0))) != 0)
                        {
                            ho_TopRegionDilation.Dispose();
                            HOperatorSet.DilationCircle(ho_TopRegion, out ho_TopRegionDilation, hv_waferEdgeCalibrationRegionDilationPixel);
                            ho_TopRegionForDistanceDilation.Dispose();
                            HOperatorSet.DilationCircle(ho_TopRegionForDistance, out ho_TopRegionForDistanceDilation,
                                hv_waferEdgeCalibrationRegionDilationPixel);
                            //中间边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //左侧边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfLeftEdgePointOfTopRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfLeftEdgePointOfTopRegion);
                            //右侧边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfRightEdgePointOfTopRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfRightEdgePointOfTopRegion);
                            //中间边缘处理
                            //基础长度单元
                            hv_widthUnit = (2 * hv_HalfWidthOfTopRegion) / 5;
                            //寻点间隔
                            hv_PixWidthStep = 0.8 / hv_widthResolution;
                            //单段寻点范围
                            hv_HalfScanLengthOfBottomEdge = hv_widthUnit * 0.2;
                            //第一段
                            HOperatorSet.TupleAtan((hv_widthUnit * 1.45) / hv_HalfHeightOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleCos()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfTopRegion + 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    20, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfTopRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfTopRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //第二段
                            HOperatorSet.TupleAtan((hv_widthUnit * 0.45) / hv_HalfHeightOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleCos()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfTopRegion + 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    20, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfTopRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfTopRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //第三段
                            HOperatorSet.TupleAtan((hv_widthUnit * 0.45) / hv_HalfHeightOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfThirdRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleCos()
                                ));
                            hv_ColumnOfThirdRegion = hv_CenterColumnOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfThirdRegion, ColumnOfThirdRegion, PhiOfTopRegion + 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfThirdRegion, hv_ColumnOfThirdRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfThirdRegion, hv_ColumnOfThirdRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    20, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfTopRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfTopRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //第四段
                            HOperatorSet.TupleAtan((hv_widthUnit * 1.45) / hv_HalfHeightOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFourthRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleCos()
                                ));
                            hv_ColumnOfFourthRegion = hv_CenterColumnOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFourthRegion, ColumnOfFourthRegion, PhiOfTopRegion + 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFourthRegion, hv_ColumnOfFourthRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFourthRegion, hv_ColumnOfFourthRegion, hv_PhiOfTopRegion + (0.5 * hv_PI),
                                    20, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfTopRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfTopRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //2019-5-22对巡边点排序（升序）
                            HOperatorSet.TupleSortIndex(hv_ColumnOfMiddleEdgePointOfTopRegion, out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfMiddleEdgePointOfTopRegion, hv_SortIndices,
                                out hv_RowOfMiddleEdgePointOfTopRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfMiddleEdgePointOfTopRegion, hv_SortIndices,
                                out hv_ColumnOfMiddleEdgePointOfTopRegion);
                            //左侧边缘处理
                            //基础长度单元
                            hv_heightUnit = (2 * hv_HalfHeightOfTopRegion) / 5;
                            //寻点间隔
                            hv_PixHeightStep = 0.8 / hv_heightResolution;
                            //单段寻点范围
                            hv_HalfScanLengthOfLeftRightEdge = hv_heightUnit * 0.5;
                            //2019-4-18靠近角部寻点中点,避免过多点寻在角部区域造成边缘畸变
                            hv_NearCornerFindPoint = hv_HalfHeightOfTopRegion - ((10 / hv_heightResolution) + hv_HalfScanLengthOfLeftRightEdge);
                            //第一段
                            HOperatorSet.TupleAtan((hv_heightUnit * 1.65) / hv_HalfWidthOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfTopRegion, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfLeftEdgePointOfTopRegion, hv_RowOfLeftEdgePoints,
                                out hv_RowOfLeftEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfLeftEdgePointOfTopRegion, hv_ColumnOfLeftEdgePoints,
                                out hv_ColumnOfLeftEdgePointOfTopRegion);
                            //第二段
                            HOperatorSet.TupleAtan(hv_NearCornerFindPoint / hv_HalfWidthOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfTopRegion, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfLeftEdgePointOfTopRegion, hv_RowOfLeftEdgePoints,
                                out hv_RowOfLeftEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfLeftEdgePointOfTopRegion, hv_ColumnOfLeftEdgePoints,
                                out hv_ColumnOfLeftEdgePointOfTopRegion);
                            HOperatorSet.TupleSortIndex(hv_RowOfLeftEdgePointOfTopRegion, out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfLeftEdgePointOfTopRegion, hv_SortIndices,
                                out hv_RowOfLeftEdgePointOfTopRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfLeftEdgePointOfTopRegion, hv_SortIndices,
                                out hv_ColumnOfLeftEdgePointOfTopRegion);
                            //右侧边缘处理
                            //第一段
                            HOperatorSet.TupleAtan((hv_heightUnit * 1.65) / hv_HalfWidthOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfTopRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfTopRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfTopRegion - PI, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfTopRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfRightEdgePointOfTopRegion, hv_RowOfRightEdgePoints,
                                out hv_RowOfRightEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfRightEdgePointOfTopRegion, hv_ColumnOfRightEdgePoints,
                                out hv_ColumnOfRightEdgePointOfTopRegion);
                            //第二段
                            HOperatorSet.TupleAtan(hv_NearCornerFindPoint / hv_HalfWidthOfTopRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfTopRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfTopRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfTopRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfTopRegion - PI, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_TopRegionDilation,
                                    ho_TopRegionForDistanceDilation, hv_windowHandle, hv_width, hv_height,
                                    hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfTopRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfRightEdgePointOfTopRegion, hv_RowOfRightEdgePoints,
                                out hv_RowOfRightEdgePointOfTopRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfRightEdgePointOfTopRegion, hv_ColumnOfRightEdgePoints,
                                out hv_ColumnOfRightEdgePointOfTopRegion);
                            HOperatorSet.TupleSortIndex(hv_RowOfRightEdgePointOfTopRegion, out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfRightEdgePointOfTopRegion, hv_SortIndices,
                                out hv_RowOfRightEdgePointOfTopRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfRightEdgePointOfTopRegion, hv_SortIndices,
                                out hv_ColumnOfRightEdgePointOfTopRegion);
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowOfMiddleEdgePointOfTopRegion.TupleLength()
                                )).TupleGreaterEqual((2 * hv_HalfScanLengthOfBottomEdge) / hv_PixWidthStep))).TupleAnd(
                                new HTuple((new HTuple(hv_RowOfLeftEdgePointOfTopRegion.TupleLength()
                                )).TupleGreaterEqual(hv_HalfScanLengthOfLeftRightEdge / hv_PixHeightStep))))).TupleAnd(
                                new HTuple((new HTuple(hv_RowOfRightEdgePointOfTopRegion.TupleLength()
                                )).TupleGreaterEqual(hv_HalfScanLengthOfLeftRightEdge / hv_PixHeightStep)))) != 0)
                            {
                                //根据中间边缘、左侧边缘、右侧边缘重新定位上半片边界
                                //中间边缘线
                                ho_MiddleEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_MiddleEdgeContour, hv_RowOfMiddleEdgePointOfTopRegion,
                                    hv_ColumnOfMiddleEdgePointOfTopRegion);
                                HOperatorSet.FitLineContourXld(ho_MiddleEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfMiddleEdgeLine, out hv_ColBeginOfMiddleEdgeLine,
                                    out hv_RowEndOfMiddleEdgeLine, out hv_ColEndOfMiddleEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //左侧边缘线
                                ho_LeftEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_LeftEdgeContour, hv_RowOfLeftEdgePointOfTopRegion,
                                    hv_ColumnOfLeftEdgePointOfTopRegion);
                                HOperatorSet.FitLineContourXld(ho_LeftEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfLeftEdgeLine, out hv_ColBeginOfLeftEdgeLine,
                                    out hv_RowEndOfLeftEdgeLine, out hv_ColEndOfLeftEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //右侧边缘线
                                ho_RightEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_RightEdgeContour, hv_RowOfRightEdgePointOfTopRegion,
                                    hv_ColumnOfRightEdgePointOfTopRegion);
                                HOperatorSet.FitLineContourXld(ho_RightEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfRightEdgeLine, out hv_ColBeginOfRightEdgeLine,
                                    out hv_RowEndOfRightEdgeLine, out hv_ColEndOfRightEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //左下角点
                                HOperatorSet.IntersectionLines(hv_RowBeginOfMiddleEdgeLine, hv_ColBeginOfMiddleEdgeLine,
                                    hv_RowEndOfMiddleEdgeLine, hv_ColEndOfMiddleEdgeLine, hv_RowBeginOfLeftEdgeLine,
                                    hv_ColBeginOfLeftEdgeLine, hv_RowEndOfLeftEdgeLine, hv_ColEndOfLeftEdgeLine,
                                    out hv_RowOfLeftBottomCornerPoint, out hv_ColOfLeftBottomCornerPoint,
                                    out hv_IsOverLapping);
                                //disp_cross (windowHandle, RowOfLeftBottomCornerPoint, ColOfLeftBottomCornerPoint, 100, -0.3)
                                //右下角点
                                HOperatorSet.IntersectionLines(hv_RowBeginOfMiddleEdgeLine, hv_ColBeginOfMiddleEdgeLine,
                                    hv_RowEndOfMiddleEdgeLine, hv_ColEndOfMiddleEdgeLine, hv_RowBeginOfRightEdgeLine,
                                    hv_ColBeginOfRightEdgeLine, hv_RowEndOfRightEdgeLine, hv_ColEndOfRightEdgeLine,
                                    out hv_RowOfRightBottomCornerPoint, out hv_ColOfRightBottomCornerPoint,
                                    out hv_IsOverlapping);
                                //disp_cross (windowHandle, RowOfRightBottomCornerPoint, ColOfRightBottomCornerPoint, 100, -0.3)
                                //左上角点
                                HOperatorSet.IntersectionLines(0, 100, 0, 200, hv_RowBeginOfLeftEdgeLine,
                                    hv_ColBeginOfLeftEdgeLine, hv_RowEndOfLeftEdgeLine, hv_ColEndOfLeftEdgeLine,
                                    out hv_RowOfLeftTopCornerPoint, out hv_ColOfLeftTopCornerPoint,
                                    out hv_IsOverLapping);
                                //disp_cross (windowHandle, RowOfLeftTopCornerPoint, ColOfLeftTopCornerPoint, 100, -0.3)
                                //右上角点
                                HOperatorSet.IntersectionLines(0, 100, 0, 200, hv_RowBeginOfRightEdgeLine,
                                    hv_ColBeginOfRightEdgeLine, hv_RowEndOfRightEdgeLine, hv_ColEndOfRightEdgeLine,
                                    out hv_RowOfRightTopCornerPoint, out hv_ColOfRightTopCornerPoint,
                                    out hv_IsOverlapping);
                                //disp_cross (windowHandle, RowOfRightTopCornerPoint, ColOfRightTopCornerPoint, 100, -0.3)
                                //拼接四个角点得到优化后TopRegion的外轮廓
                                HOperatorSet.TupleGenConst(0, 0, out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleGenConst(0, 0, out hv_ColOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateTopRegionContour, hv_RowOfLeftTopCornerPoint,
                                    out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateTopRegionContour, hv_ColOfLeftTopCornerPoint,
                                    out hv_ColOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateTopRegionContour, hv_RowOfRightTopCornerPoint,
                                    out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateTopRegionContour, hv_ColOfRightTopCornerPoint,
                                    out hv_ColOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateTopRegionContour, hv_RowOfRightBottomCornerPoint,
                                    out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateTopRegionContour, hv_ColOfRightBottomCornerPoint,
                                    out hv_ColOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateTopRegionContour, hv_RowOfLeftBottomCornerPoint,
                                    out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateTopRegionContour, hv_ColOfLeftBottomCornerPoint,
                                    out hv_ColOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateTopRegionContour, hv_RowOfLeftTopCornerPoint,
                                    out hv_RowOfCalibrateTopRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateTopRegionContour, hv_ColOfLeftTopCornerPoint,
                                    out hv_ColOfCalibrateTopRegionContour);
                                ho_CalibrateTopAroundRegion.Dispose();
                                HOperatorSet.GenRegionPolygon(out ho_CalibrateTopAroundRegion, hv_RowOfCalibrateTopRegionContour,
                                    hv_ColOfCalibrateTopRegionContour);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.FillUp(ho_CalibrateTopAroundRegion, out ExpTmpOutVar_0
                                        );
                                    ho_CalibrateTopAroundRegion.Dispose();
                                    ho_CalibrateTopAroundRegion = ExpTmpOutVar_0;
                                }
                                //左右角点赋值
                                hv_RowOfLeftCornerPointTopRegion = hv_RowOfLeftBottomCornerPoint.Clone();
                                hv_ColumnOfLeftCornerPointTopRegion = hv_ColOfLeftBottomCornerPoint.Clone();
                                hv_RowOfRightCornerPointTopRegion = hv_RowOfRightBottomCornerPoint.Clone();
                                hv_ColumnOfRightCornerPointTopRegion = hv_ColOfRightBottomCornerPoint.Clone();

                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointTopRegion,
                                    hv_ColumnOfLeftCornerPointTopRegion, 100, 0.3);
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointTopRegion,
                                    hv_ColumnOfRightCornerPointTopRegion, 100, 0.3);
                                //成功校准Flag点亮
                                hv_isTopRegionCalibrateFinish = 1;
                            }
                            else if ((int)(new HTuple((new HTuple(hv_RowOfMiddleEdgePointOfTopRegion.TupleLength()
                                )).TupleGreaterEqual((2 * hv_HalfScanLengthOfBottomEdge) / hv_PixWidthStep))) != 0)
                            {
                                //根据中间边缘重新定位上半片边界
                                //暂不考虑该情况
                                //中间边缘线
                                //gen_contour_polygon_xld (MiddleEdgeContour, RowOfMiddleEdgePointOfTopRegion, ColumnOfMiddleEdgePointOfTopRegion)
                                //fit_line_contour_xld (MiddleEdgeContour, 'tukey', -1, 0, 5, 2, RowBeginOfMiddleEdgeLine, ColBeginOfMiddleEdgeLine, RowEndOfMiddleEdgeLine, ColEndOfMiddleEdgeLine, Nr, Nc, Dist)
                                //与TopRegion最大外接矩形的交点
                                //gen_contour_region_xld (MaxRectangleTopRegion, MaxRectangleContourTopRegion, 'border')
                                //intersection_line_contour_xld (MaxRectangleContourTopRegion, RowBeginOfMiddleEdgeLine, ColBeginOfMiddleEdgeLine, RowEndOfMiddleEdgeLine, ColEndOfMiddleEdgeLine, RowOfCornerPoints, ColOfCornerPoints, IsOverlapping)
                            }
                        }
                    }
                    if ((int)(hv_isBottomWaferExist) != 0)
                    {
                        HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                            out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                            out hv_HalfHeightOfBottomRegion);
                        ho_MaxRectangleBottomRegion.Dispose();
                        HOperatorSet.GenRectangle2(out ho_MaxRectangleBottomRegion, hv_CenterRowOfBottomRegion,
                            hv_CenterColumnOfBottomRegion, hv_PhiOfBottomRegion, hv_HalfWidthOfBottomRegion,
                            hv_HalfHeightOfBottomRegion);
                        //2020.04.23-已找到边界
                        if ((int)(new HTuple(hv_isFoundBottomEdgeRegionOut.TupleEqual(0))) != 0)
                        {
                            ho_BottomRegionDilation.Dispose();
                            HOperatorSet.DilationCircle(ho_BottomRegion, out ho_BottomRegionDilation,
                                hv_waferEdgeCalibrationRegionDilationPixel);
                            ho_BottomRegionForDistanceDilation.Dispose();
                            HOperatorSet.DilationCircle(ho_BottomRegionForDistance, out ho_BottomRegionForDistanceDilation,
                                hv_waferEdgeCalibrationRegionDilationPixel);
                            //中间边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            //左侧边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfLeftEdgePointOfBottomRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfLeftEdgePointOfBottomRegion);
                            //右侧边缘点集
                            HOperatorSet.TupleGenConst(0, 0, out hv_RowOfRightEdgePointOfBottomRegion);
                            HOperatorSet.TupleGenConst(0, 0, out hv_ColumnOfRightEdgePointOfBottomRegion);
                            //中间边缘处理
                            //基础长度单元
                            hv_widthUnit = (2 * hv_HalfWidthOfBottomRegion) / 5;
                            //寻点间隔
                            hv_PixWidthStep = 0.8 / hv_widthResolution;
                            //单段寻点范围
                            hv_HalfScanLengthOfBottomEdge = hv_widthUnit * 0.2;
                            //第一段
                            HOperatorSet.TupleAtan((hv_widthUnit * 1.45) / hv_HalfHeightOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfBottomRegion - 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfBottomRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfBottomRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            //第二段
                            HOperatorSet.TupleAtan((hv_widthUnit * 0.45) / hv_HalfHeightOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfBottomRegion - 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfBottomRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfBottomRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            //第三段
                            HOperatorSet.TupleAtan((hv_widthUnit * 0.45) / hv_HalfHeightOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfThirdRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            hv_ColumnOfThirdRegion = hv_CenterColumnOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfThirdRegion, ColumnOfThirdRegion, PhiOfBottomRegion - 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfThirdRegion, hv_ColumnOfThirdRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfThirdRegion, hv_ColumnOfThirdRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfBottomRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfBottomRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            //第四段
                            HOperatorSet.TupleAtan((hv_widthUnit * 1.45) / hv_HalfHeightOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfHeightOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFourthRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            hv_ColumnOfFourthRegion = hv_CenterColumnOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFourthRegion, ColumnOfFourthRegion, PhiOfBottomRegion - 0.5*PI, 80, HalfScanLengthOfBottomEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFourthRegion, hv_ColumnOfFourthRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFourthRegion, hv_ColumnOfFourthRegion, hv_PhiOfBottomRegion - (0.5 * hv_PI),
                                    80, hv_HalfScanLengthOfBottomEdge, hv_PixWidthStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfMiddleEdgePoints, out hv_ColumnOfMiddleEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfMiddleEdgePointOfBottomRegion, hv_RowOfMiddleEdgePoints,
                                out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfMiddleEdgePointOfBottomRegion, hv_ColumnOfMiddleEdgePoints,
                                out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleSortIndex(hv_ColumnOfMiddleEdgePointOfBottomRegion,
                                out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfMiddleEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_RowOfMiddleEdgePointOfBottomRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfMiddleEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_ColumnOfMiddleEdgePointOfBottomRegion);
                            //左侧边缘处理
                            //基础长度单元
                            hv_heightUnit = (2 * hv_HalfHeightOfBottomRegion) / 5;
                            //寻点间隔
                            hv_PixHeightStep = 0.8 / hv_heightResolution;
                            //单段寻点范围
                            hv_HalfScanLengthOfLeftRightEdge = hv_heightUnit * 0.5;
                            //2019-4-18靠近角部寻点中点,避免过多点寻在角部区域造成边缘畸变
                            hv_NearCornerFindPoint = hv_HalfHeightOfBottomRegion - ((10 / hv_heightResolution) + hv_HalfScanLengthOfLeftRightEdge);
                            //第一段
                            HOperatorSet.TupleAtan(hv_NearCornerFindPoint / hv_HalfWidthOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfBottomRegion, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfLeftEdgePointOfBottomRegion, hv_RowOfLeftEdgePoints,
                                out hv_RowOfLeftEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfLeftEdgePointOfBottomRegion, hv_ColumnOfLeftEdgePoints,
                                out hv_ColumnOfLeftEdgePointOfBottomRegion);
                            //第二段
                            //2019-4-18 1.05调整为1.65
                            HOperatorSet.TupleAtan((hv_heightUnit * 1.65) / hv_HalfWidthOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfBottomRegion, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfLeftEdgePoints, out hv_ColumnOfLeftEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfLeftEdgePointOfBottomRegion, hv_RowOfLeftEdgePoints,
                                out hv_RowOfLeftEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfLeftEdgePointOfBottomRegion, hv_ColumnOfLeftEdgePoints,
                                out hv_ColumnOfLeftEdgePointOfBottomRegion);
                            HOperatorSet.TupleSortIndex(hv_RowOfLeftEdgePointOfBottomRegion, out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfLeftEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_RowOfLeftEdgePointOfBottomRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfLeftEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_ColumnOfLeftEdgePointOfBottomRegion);
                            //右侧边缘处理
                            //第一段
                            HOperatorSet.TupleAtan(hv_NearCornerFindPoint / hv_HalfWidthOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfFirstRegion = hv_CenterRowOfBottomRegion - (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfFirstRegion = hv_CenterColumnOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle + hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfFirstRegion, ColumnOfFirstRegion, PhiOfBottomRegion - PI, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfFirstRegion, hv_ColumnOfFirstRegion, hv_PhiOfBottomRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfRightEdgePointOfBottomRegion, hv_RowOfRightEdgePoints,
                                out hv_RowOfRightEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfRightEdgePointOfBottomRegion, hv_ColumnOfRightEdgePoints,
                                out hv_ColumnOfRightEdgePointOfBottomRegion);
                            //第二段
                            //2019-4-18 1.05调整为1.65
                            HOperatorSet.TupleAtan((hv_heightUnit * 1.65) / hv_HalfWidthOfBottomRegion,
                                out hv_tempAngle);
                            hv_tempRightAngleSide = hv_HalfWidthOfBottomRegion / (hv_tempAngle.TupleCos()
                                );
                            hv_RowOfSecondRegion = hv_CenterRowOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfSecondRegion = hv_CenterColumnOfBottomRegion + (hv_tempRightAngleSide * (((hv_tempAngle - hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            //disp_rectangle2 (windowHandle, RowOfSecondRegion, ColumnOfSecondRegion, PhiOfBottomRegion - PI, 80, HalfScanLengthOfLeftRightEdge)
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "positive", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            else
                            {
                                FindEdgePointsFuction(ho_ImageForExtractROI, ho_BottomRegionDilation,
                                    ho_BottomRegionForDistanceDilation, hv_windowHandle, hv_width,
                                    hv_height, hv_RowOfSecondRegion, hv_ColumnOfSecondRegion, hv_PhiOfBottomRegion - hv_PI,
                                    80, hv_HalfScanLengthOfLeftRightEdge, hv_PixHeightStep, hv_locationWaferEdgeThresh,
                                    "negative", "all", out hv_RowOfRightEdgePoints, out hv_ColumnOfRightEdgePoints);
                            }
                            HOperatorSet.TupleConcat(hv_RowOfRightEdgePointOfBottomRegion, hv_RowOfRightEdgePoints,
                                out hv_RowOfRightEdgePointOfBottomRegion);
                            HOperatorSet.TupleConcat(hv_ColumnOfRightEdgePointOfBottomRegion, hv_ColumnOfRightEdgePoints,
                                out hv_ColumnOfRightEdgePointOfBottomRegion);
                            HOperatorSet.TupleSortIndex(hv_RowOfRightEdgePointOfBottomRegion, out hv_SortIndices);
                            HOperatorSet.TupleSelect(hv_RowOfRightEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_RowOfRightEdgePointOfBottomRegion);
                            HOperatorSet.TupleSelect(hv_ColumnOfRightEdgePointOfBottomRegion, hv_SortIndices,
                                out hv_ColumnOfRightEdgePointOfBottomRegion);
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowOfMiddleEdgePointOfBottomRegion.TupleLength()
                                )).TupleGreaterEqual((2 * hv_HalfScanLengthOfBottomEdge) / hv_PixWidthStep))).TupleAnd(
                                new HTuple((new HTuple(hv_RowOfLeftEdgePointOfBottomRegion.TupleLength()
                                )).TupleGreaterEqual(hv_HalfScanLengthOfLeftRightEdge / hv_PixHeightStep))))).TupleAnd(
                                new HTuple((new HTuple(hv_RowOfRightEdgePointOfBottomRegion.TupleLength()
                                )).TupleGreaterEqual(hv_HalfScanLengthOfLeftRightEdge / hv_PixHeightStep)))) != 0)
                            {
                                //根据中间边缘、左侧边缘、右侧边缘重新定位上半片边界
                                //中间边缘线
                                ho_MiddleEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_MiddleEdgeContour, hv_RowOfMiddleEdgePointOfBottomRegion,
                                    hv_ColumnOfMiddleEdgePointOfBottomRegion);
                                HOperatorSet.FitLineContourXld(ho_MiddleEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfMiddleEdgeLine, out hv_ColBeginOfMiddleEdgeLine,
                                    out hv_RowEndOfMiddleEdgeLine, out hv_ColEndOfMiddleEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //左侧边缘线
                                ho_LeftEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_LeftEdgeContour, hv_RowOfLeftEdgePointOfBottomRegion,
                                    hv_ColumnOfLeftEdgePointOfBottomRegion);
                                HOperatorSet.FitLineContourXld(ho_LeftEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfLeftEdgeLine, out hv_ColBeginOfLeftEdgeLine,
                                    out hv_RowEndOfLeftEdgeLine, out hv_ColEndOfLeftEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //右侧边缘线
                                ho_RightEdgeContour.Dispose();
                                HOperatorSet.GenContourPolygonXld(out ho_RightEdgeContour, hv_RowOfRightEdgePointOfBottomRegion,
                                    hv_ColumnOfRightEdgePointOfBottomRegion);
                                HOperatorSet.FitLineContourXld(ho_RightEdgeContour, "tukey", -1, 0,
                                    5, 2, out hv_RowBeginOfRightEdgeLine, out hv_ColBeginOfRightEdgeLine,
                                    out hv_RowEndOfRightEdgeLine, out hv_ColEndOfRightEdgeLine, out hv_Nr,
                                    out hv_Nc, out hv_Dist);
                                //左上角点
                                HOperatorSet.IntersectionLines(hv_RowBeginOfMiddleEdgeLine, hv_ColBeginOfMiddleEdgeLine,
                                    hv_RowEndOfMiddleEdgeLine, hv_ColEndOfMiddleEdgeLine, hv_RowBeginOfLeftEdgeLine,
                                    hv_ColBeginOfLeftEdgeLine, hv_RowEndOfLeftEdgeLine, hv_ColEndOfLeftEdgeLine,
                                    out hv_RowOfLeftTopCornerPoint, out hv_ColOfLeftTopCornerPoint,
                                    out hv_IsOverLapping);
                                //disp_cross (windowHandle, RowOfLeftTopCornerPoint, ColOfLeftTopCornerPoint, 100, -0.3)
                                //右上角点
                                HOperatorSet.IntersectionLines(hv_RowBeginOfMiddleEdgeLine, hv_ColBeginOfMiddleEdgeLine,
                                    hv_RowEndOfMiddleEdgeLine, hv_ColEndOfMiddleEdgeLine, hv_RowBeginOfRightEdgeLine,
                                    hv_ColBeginOfRightEdgeLine, hv_RowEndOfRightEdgeLine, hv_ColEndOfRightEdgeLine,
                                    out hv_RowOfRightTopCornerPoint, out hv_ColOfRightTopCornerPoint,
                                    out hv_IsOverlapping);
                                //disp_cross (windowHandle, RowOfRightTopCornerPoint, ColOfRightTopCornerPoint, 100, -0.3)
                                //左下角点
                                HOperatorSet.IntersectionLines(hv_height - 1, 100, hv_height - 1, 200,
                                    hv_RowBeginOfLeftEdgeLine, hv_ColBeginOfLeftEdgeLine, hv_RowEndOfLeftEdgeLine,
                                    hv_ColEndOfLeftEdgeLine, out hv_RowOfLeftBottomCornerPoint, out hv_ColOfLeftBottomCornerPoint,
                                    out hv_IsOverLapping);
                                //disp_cross (windowHandle, RowOfLeftBottomCornerPoint, ColOfLeftBottomCornerPoint, 100, -0.3)
                                //右下角点
                                HOperatorSet.IntersectionLines(hv_height - 1, 100, hv_height - 1, 200,
                                    hv_RowBeginOfRightEdgeLine, hv_ColBeginOfRightEdgeLine, hv_RowEndOfRightEdgeLine,
                                    hv_ColEndOfRightEdgeLine, out hv_RowOfRightBottomCornerPoint, out hv_ColOfRightBottomCornerPoint,
                                    out hv_IsOverlapping);
                                //disp_cross (windowHandle, RowOfRightBottomCornerPoint, ColOfRightBottomCornerPoint, 100, -0.3)
                                //拼接四个角点得到优化后TopRegion的外轮廓
                                HOperatorSet.TupleGenConst(0, 0, out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleGenConst(0, 0, out hv_ColOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateBottomRegionContour, hv_RowOfLeftTopCornerPoint,
                                    out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateBottomRegionContour, hv_ColOfLeftTopCornerPoint,
                                    out hv_ColOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateBottomRegionContour, hv_RowOfRightTopCornerPoint,
                                    out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateBottomRegionContour, hv_ColOfRightTopCornerPoint,
                                    out hv_ColOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateBottomRegionContour, hv_RowOfRightBottomCornerPoint,
                                    out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateBottomRegionContour, hv_ColOfRightBottomCornerPoint,
                                    out hv_ColOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateBottomRegionContour, hv_RowOfLeftBottomCornerPoint,
                                    out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateBottomRegionContour, hv_ColOfLeftBottomCornerPoint,
                                    out hv_ColOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_RowOfCalibrateBottomRegionContour, hv_RowOfLeftTopCornerPoint,
                                    out hv_RowOfCalibrateBottomRegionContour);
                                HOperatorSet.TupleConcat(hv_ColOfCalibrateBottomRegionContour, hv_ColOfLeftTopCornerPoint,
                                    out hv_ColOfCalibrateBottomRegionContour);
                                ho_CalibrateBottomAroundRegion.Dispose();
                                HOperatorSet.GenRegionPolygon(out ho_CalibrateBottomAroundRegion, hv_RowOfCalibrateBottomRegionContour,
                                    hv_ColOfCalibrateBottomRegionContour);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.FillUp(ho_CalibrateBottomAroundRegion, out ExpTmpOutVar_0
                                        );
                                    ho_CalibrateBottomAroundRegion.Dispose();
                                    ho_CalibrateBottomAroundRegion = ExpTmpOutVar_0;
                                }

                                //左右角点赋值
                                hv_RowOfLeftCornerPointBottomRegion = hv_RowOfLeftTopCornerPoint.Clone();
                                hv_ColumnOfLeftCornerPointBottomRegion = hv_ColOfLeftTopCornerPoint.Clone();
                                hv_RowOfRightCornerPointBottomRegion = hv_RowOfRightTopCornerPoint.Clone();
                                hv_ColumnOfRightCornerPointBottomRegion = hv_ColOfRightTopCornerPoint.Clone();
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointBottomRegion,
                                    hv_ColumnOfLeftCornerPointBottomRegion, 100, 0.3);
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointBottomRegion,
                                    hv_ColumnOfRightCornerPointBottomRegion, 100, 0.3);
                                //成功校准Flag点亮
                                hv_isBottomRegionCalibrateFinish = 1;
                            }
                            else if ((int)(new HTuple((new HTuple(hv_RowOfMiddleEdgePointOfBottomRegion.TupleLength()
                                )).TupleGreaterEqual((2 * hv_HalfScanLengthOfBottomEdge) / hv_PixWidthStep))) != 0)
                            {
                                //根据中间边缘重新定位上半片边界
                                //暂不考虑该情况
                                //中间边缘线
                                //gen_contour_polygon_xld (MiddleEdgeContour, RowOfMiddleEdgePointOfBottomRegion, ColumnOfMiddleEdgePointOfBottomRegion)
                                //fit_line_contour_xld (MiddleEdgeContour, 'tukey', -1, 0, 5, 2, RowBeginOfMiddleEdgeLine, ColBeginOfMiddleEdgeLine, RowEndOfMiddleEdgeLine, ColEndOfMiddleEdgeLine, Nr, Nc, Dist)
                                //与BottomRegion最大外接矩形的交点
                                //gen_contour_region_xld (MaxRectangleBottomRegion, MaxRectangleContourBottomRegion, 'border')
                                //intersection_line_contour_xld (MaxRectangleContourBottomRegion, RowBeginOfMiddleEdgeLine, ColBeginOfMiddleEdgeLine, RowEndOfMiddleEdgeLine, ColEndOfMiddleEdgeLine, RowOfCornerPoints, ColOfCornerPoints, IsOverlapping)
                            }
                        }
                    }
                }
                //*********************************************
                ho_TopRegionDilation.Dispose();
                ho_TopRegionForDistanceDilation.Dispose();
                ho_MiddleEdgeContour.Dispose();
                ho_LeftEdgeContour.Dispose();
                ho_RightEdgeContour.Dispose();
                ho_BottomRegionDilation.Dispose();
                ho_BottomRegionForDistanceDilation.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionDilation.Dispose();
                ho_TopRegionForDistanceDilation.Dispose();
                ho_MiddleEdgeContour.Dispose();
                ho_LeftEdgeContour.Dispose();
                ho_RightEdgeContour.Dispose();
                ho_BottomRegionDilation.Dispose();
                ho_BottomRegionForDistanceDilation.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectionOfSliceOrString(HObject ho_TopRegion, HObject ho_BottomRegion,
            HObject ho_TopRegionForDistance, HObject ho_CalibrateTopAroundRegion, HTuple hv_isTopWaferExist,
            HTuple hv_isBottomWaferExist, HTuple hv_isFoundTopEdgeRegionOut, HTuple hv_isFoundBottomEdgeRegionOut,
            HTuple hv_isTopRegionCalibrateFinish, HTuple hv_isBottomRegionCalibrateFinish,
            HTuple hv_isUsingDistanceDetect, HTuple hv_heightResolution, HTuple hv_minimumDistanceThresh,
            HTuple hv_maxDistanceThresh, HTuple hv_classDistanceThresh, HTuple hv_RowOfLeftTopColorCornerPointRegionOut,
            HTuple hv_ColOfLeftTopColorCornerPointRegionOut, HTuple hv_RowOfRightTopColorCornerPointRegionOut,
            HTuple hv_ColOfRightTopColorCornerPointRegionOut, HTuple hv_RowOfLeftBottomColorCornerPointRegionOut,
            HTuple hv_ColOfLeftBottomColorCornerPointRegionOut, HTuple hv_RowOfRightBottomColorCornerPointRegionOut,
            HTuple hv_ColOfRightBottomColorCornerPointRegionOut, HTuple hv_windowHandle,
            out HTuple hv_isDistanceNG, out HTuple hv_isNextClass)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopRegionTrans = null, ho_TopRegionDilation = null;
            HObject ho_BottomRegionTrans = null, ho_BottomRegionDilation = null;
            HObject ho_RegionDifference = null, ho_RegionDifference3 = null;
            HObject ho_RegionOpening4 = null, ho_ConnectedRegions2 = null;
            HObject ho_TopRegionForDistanceTrans = null, ho_RegionBorder = null;
            HObject ho_RegionOpening5 = null;

            // Local control variables 

            HTuple hv_CenterRowOfTopRegion = new HTuple();
            HTuple hv_CenterColumnOfTopRegion = new HTuple(), hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_angleOfHalfHeightAndHalfWidth = new HTuple();
            HTuple hv_semiDiameterOfTopRegion = new HTuple(), hv_RowOfLeftCornerPointTopRegion = new HTuple();
            HTuple hv_ColumnOfLeftCornerPointTopRegion = new HTuple();
            HTuple hv_RowOfRightCornerPointTopRegion = new HTuple();
            HTuple hv_ColumnOfRightCornerPointTopRegion = new HTuple();
            HTuple hv_DistanceMinLeftTopRegion = new HTuple(), hv_DistanceMaxLeftTopRegion = new HTuple();
            HTuple hv_DistanceMinRightTopRegion = new HTuple(), hv_DistanceMaxRightTopRegion = new HTuple();
            HTuple hv_CenterRowOfBottomRegion = new HTuple(), hv_CenterColumnOfBottomRegion = new HTuple();
            HTuple hv_PhiOfBottomRegion = new HTuple(), hv_HalfWidthOfBottomRegion = new HTuple();
            HTuple hv_HalfHeightOfBottomRegion = new HTuple(), hv_semiDiameterOfBottomRegion = new HTuple();
            HTuple hv_RowOfLeftCornerPointBottomRegion = new HTuple();
            HTuple hv_ColumnOfLeftCornerPointBottomRegion = new HTuple();
            HTuple hv_RowOfRightCornerPointBottomRegion = new HTuple();
            HTuple hv_ColumnOfRightCornerPointBottomRegion = new HTuple();
            HTuple hv_DistanceMinLeftBottomRegion = new HTuple(), hv_DistanceMaxLeftBottomRegion = new HTuple();
            HTuple hv_DistanceMinRightBottomRegion = new HTuple();
            HTuple hv_DistanceMaxRightBottomRegion = new HTuple();
            HTuple hv_DistanceOfTopMiddlePointToBottomLine = new HTuple();
            HTuple hv_DistanceOfBottomMiddlePointToTopLine = new HTuple();
            HTuple hv_DistanceOfTopLeftCornerPointToBottomLine = new HTuple();
            HTuple hv_DistanceOfTopRightCornerPointToBottomLine = new HTuple();
            HTuple hv_DistanceOfBottomLeftCornerPointToTopLine = new HTuple();
            HTuple hv_DistanceOfBottomRightCornerPointToTopLine = new HTuple();
            HTuple hv_DistanceArray = new HTuple(), hv_MaxDistance = new HTuple();
            HTuple hv_MinDistance = new HTuple(), hv_RealMaxDistance = new HTuple();
            HTuple hv_RealMinDistance = new HTuple(), hv_RealMaxMinSubDistance = new HTuple();
            HTuple hv_RowDisp = new HTuple(), hv_ColumnDisp = new HTuple();
            HTuple hv_MaxValueAdd = new HTuple(), hv_Value1 = new HTuple();
            HTuple hv_MaxValueSub = new HTuple(), hv_Row3 = new HTuple();
            HTuple hv_Column3 = new HTuple(), hv_Phi1 = new HTuple();
            HTuple hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
            HTuple hv_DistanceMin = new HTuple(), hv_DistanceMax = new HTuple();
            HTuple hv_DistanceMin1 = new HTuple(), hv_DistanceMax1 = new HTuple();
            HTuple hv_DistanceMin2 = new HTuple(), hv_MinValueAdd = new HTuple();
            HTuple hv_temp = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_TopRegionDilation);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDilation);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference3);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening4);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistanceTrans);
            HOperatorSet.GenEmptyObj(out ho_RegionBorder);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening5);
            try
            {
                hv_isDistanceNG = 0;
                hv_isNextClass = 0;

                if ((int)(hv_isUsingDistanceDetect) != 0)
                {
                    if ((int)(hv_isTopWaferExist.TupleAnd(hv_isBottomWaferExist)) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        //2020.04.23-边界找到不执行
                        if ((int)(new HTuple(hv_isFoundTopEdgeRegionOut.TupleEqual(0))) != 0)
                        {
                            if ((int)(new HTuple(hv_isTopRegionCalibrateFinish.TupleEqual(0))) != 0)
                            {
                                //上半片区域最小外接矩形
                                HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                                    out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                                    out hv_HalfHeightOfTopRegion);
                                //disp_rectangle2 (windowHandle, CenterRowOfTopRegion, CenterColumnOfTopRegion, PhiOfTopRegion, HalfWidthOfTopRegion, HalfHeightOfTopRegion)
                                //几何运算，上半片半径角的弧度
                                HOperatorSet.TupleAtan(hv_HalfHeightOfTopRegion / hv_HalfWidthOfTopRegion,
                                    out hv_angleOfHalfHeightAndHalfWidth);
                                //几何运算，上半片对角线的一半，记为半径
                                hv_semiDiameterOfTopRegion = hv_HalfHeightOfTopRegion / (hv_angleOfHalfHeightAndHalfWidth.TupleSin()
                                    );
                                //几何运算，分别得出上半片左、右角点
                                hv_RowOfLeftCornerPointTopRegion = hv_CenterRowOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfTopRegion)).TupleSin()
                                    ));
                                hv_ColumnOfLeftCornerPointTopRegion = hv_CenterColumnOfTopRegion - (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfTopRegion)).TupleCos()
                                    ));
                                hv_RowOfRightCornerPointTopRegion = hv_CenterRowOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfTopRegion)).TupleSin()
                                    ));
                                hv_ColumnOfRightCornerPointTopRegion = hv_CenterColumnOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfTopRegion)).TupleCos()
                                    ));

                                ho_TopRegionTrans.Dispose();
                                HOperatorSet.ShapeTrans(ho_TopRegion, out ho_TopRegionTrans, "convex");
                                ho_TopRegionDilation.Dispose();
                                HOperatorSet.DilationRectangle1(ho_TopRegionTrans, out ho_TopRegionDilation,
                                    500, 1);
                                HOperatorSet.DistancePr(ho_TopRegionDilation, hv_RowOfLeftCornerPointTopRegion,
                                    hv_ColumnOfLeftCornerPointTopRegion, out hv_DistanceMinLeftTopRegion,
                                    out hv_DistanceMaxLeftTopRegion);
                                HOperatorSet.DistancePr(ho_TopRegionDilation, hv_RowOfRightCornerPointTopRegion,
                                    hv_ColumnOfRightCornerPointTopRegion, out hv_DistanceMinRightTopRegion,
                                    out hv_DistanceMaxRightTopRegion);
                                hv_RowOfLeftCornerPointTopRegion = hv_RowOfLeftCornerPointTopRegion - hv_DistanceMinLeftTopRegion;
                                hv_RowOfRightCornerPointTopRegion = hv_RowOfRightCornerPointTopRegion - hv_DistanceMinRightTopRegion;

                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointTopRegion,
                                    hv_ColumnOfLeftCornerPointTopRegion, 100, 0.3);
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointTopRegion,
                                    hv_ColumnOfRightCornerPointTopRegion, 100, 0.3);
                            }
                        }
                        else
                        {
                            hv_RowOfLeftCornerPointTopRegion = hv_RowOfLeftTopColorCornerPointRegionOut.Clone();
                            hv_ColumnOfLeftCornerPointTopRegion = hv_ColOfLeftTopColorCornerPointRegionOut.Clone();
                            hv_RowOfRightCornerPointTopRegion = hv_RowOfRightTopColorCornerPointRegionOut.Clone();
                            hv_ColumnOfRightCornerPointTopRegion = hv_ColOfRightTopColorCornerPointRegionOut.Clone();

                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointTopRegion,
                                hv_ColumnOfLeftCornerPointTopRegion, 100, 0.3);
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointTopRegion,
                                hv_ColumnOfRightCornerPointTopRegion, 100, 0.3);
                        }

                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        if ((int)(new HTuple(hv_isFoundBottomEdgeRegionOut.TupleEqual(0))) != 0)
                        {
                            if ((int)(new HTuple(hv_isBottomRegionCalibrateFinish.TupleEqual(0))) != 0)
                            {
                                //下半片区域最小外接矩形
                                HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                                    out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                                    out hv_HalfHeightOfBottomRegion);
                                //disp_rectangle2 (windowHandle, CenterRowOfBottomRegion, CenterColumnOfBottomRegion, PhiOfBottomRegion, HalfWidthOfBottomRegion, HalfHeightOfBottomRegion)
                                //几何运算，下半片半径角的弧度
                                HOperatorSet.TupleAtan(hv_HalfHeightOfBottomRegion / hv_HalfWidthOfBottomRegion,
                                    out hv_angleOfHalfHeightAndHalfWidth);
                                //几何运算，下半片对角线的一半，记为半径
                                hv_semiDiameterOfBottomRegion = hv_HalfHeightOfBottomRegion / (hv_angleOfHalfHeightAndHalfWidth.TupleSin()
                                    );
                                //几何运算，分别得出下半片左、中、右三个点
                                hv_RowOfLeftCornerPointBottomRegion = hv_CenterRowOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfBottomRegion)).TupleSin()
                                    ));
                                hv_ColumnOfLeftCornerPointBottomRegion = hv_CenterColumnOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfBottomRegion)).TupleCos()
                                    ));
                                hv_RowOfRightCornerPointBottomRegion = hv_CenterRowOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfBottomRegion)).TupleSin()
                                    ));
                                hv_ColumnOfRightCornerPointBottomRegion = hv_CenterColumnOfBottomRegion + (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfBottomRegion)).TupleCos()
                                    ));

                                ho_BottomRegionTrans.Dispose();
                                HOperatorSet.ShapeTrans(ho_BottomRegion, out ho_BottomRegionTrans,
                                    "convex");
                                ho_BottomRegionDilation.Dispose();
                                HOperatorSet.DilationRectangle1(ho_BottomRegionTrans, out ho_BottomRegionDilation,
                                    500, 1);
                                HOperatorSet.DistancePr(ho_BottomRegionDilation, hv_RowOfLeftCornerPointBottomRegion,
                                    hv_ColumnOfLeftCornerPointBottomRegion, out hv_DistanceMinLeftBottomRegion,
                                    out hv_DistanceMaxLeftBottomRegion);
                                HOperatorSet.DistancePr(ho_BottomRegionDilation, hv_RowOfRightCornerPointBottomRegion,
                                    hv_ColumnOfRightCornerPointBottomRegion, out hv_DistanceMinRightBottomRegion,
                                    out hv_DistanceMaxRightBottomRegion);
                                hv_RowOfLeftCornerPointBottomRegion = hv_RowOfLeftCornerPointBottomRegion + hv_DistanceMinLeftBottomRegion;
                                hv_RowOfRightCornerPointBottomRegion = hv_RowOfRightCornerPointBottomRegion + hv_DistanceMinRightBottomRegion;


                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointBottomRegion,
                                    hv_ColumnOfLeftCornerPointBottomRegion, 100, 0.3);
                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointBottomRegion,
                                    hv_ColumnOfRightCornerPointBottomRegion, 100, 0.3);
                            }
                        }
                        else
                        {
                            hv_RowOfLeftCornerPointBottomRegion = hv_RowOfLeftBottomColorCornerPointRegionOut.Clone();
                            hv_ColumnOfLeftCornerPointBottomRegion = hv_ColOfLeftBottomColorCornerPointRegionOut.Clone();
                            hv_RowOfRightCornerPointBottomRegion = hv_RowOfRightBottomColorCornerPointRegionOut.Clone();
                            hv_ColumnOfRightCornerPointBottomRegion = hv_ColOfRightBottomColorCornerPointRegionOut.Clone();

                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointBottomRegion,
                                hv_ColumnOfLeftCornerPointBottomRegion, 100, 0.3);
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointBottomRegion,
                                hv_ColumnOfRightCornerPointBottomRegion, 100, 0.3);

                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");

                        //2019.02.25 更改片间距算法，由角点计算片间距更改为角点中心点计算片间距
                        //显示角点中心点
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, 0.5 * (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion),
                            100, 0.3);
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, 0.5 * (hv_RowOfLeftCornerPointBottomRegion + hv_RowOfRightCornerPointBottomRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointBottomRegion + hv_ColumnOfRightCornerPointBottomRegion),
                            100, 0.3);
                        //上半片两侧角点中心点到下半片边缘距离
                        HOperatorSet.DistancePl(0.5 * (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion),
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopMiddlePointToBottomLine);
                        //下半片两侧角点中心点到上半片边缘距离
                        HOperatorSet.DistancePl(0.5 * (hv_RowOfLeftCornerPointBottomRegion + hv_RowOfRightCornerPointBottomRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointBottomRegion + hv_ColumnOfRightCornerPointBottomRegion),
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomMiddlePointToTopLine);

                        //2019-4-12 增加是否是八角片间距判断
                        //上半片左侧角点到下半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopLeftCornerPointToBottomLine);
                        //上半片右侧角点到下半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopRightCornerPointToBottomLine);
                        //下半片左侧角点到上半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomLeftCornerPointToTopLine);
                        //下半片右侧角点到上半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomRightCornerPointToTopLine);

                        //计算出四个距离中的最大值和最小值
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[0] = hv_DistanceOfTopLeftCornerPointToBottomLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[1] = hv_DistanceOfTopRightCornerPointToBottomLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[2] = hv_DistanceOfBottomLeftCornerPointToTopLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[3] = hv_DistanceOfBottomRightCornerPointToTopLine;
                        HOperatorSet.TupleMax(hv_DistanceArray, out hv_MaxDistance);
                        HOperatorSet.TupleMin(hv_DistanceArray, out hv_MinDistance);
                        hv_RealMaxDistance = hv_MaxDistance * hv_heightResolution;
                        hv_RealMinDistance = hv_MinDistance * hv_heightResolution;
                        hv_RealMaxMinSubDistance = hv_RealMaxDistance - hv_RealMinDistance;
                        if ((int)(new HTuple(hv_RealMaxMinSubDistance.TupleLess(1.1))) != 0)
                        {
                            hv_DistanceArray = new HTuple();
                            if (hv_DistanceArray == null)
                                hv_DistanceArray = new HTuple();
                            hv_DistanceArray[0] = hv_DistanceOfTopMiddlePointToBottomLine;
                            if (hv_DistanceArray == null)
                                hv_DistanceArray = new HTuple();
                            hv_DistanceArray[1] = hv_DistanceOfBottomMiddlePointToTopLine;
                        }

                        //DistanceArray[0] := DistanceOfTopMiddlePointToBottomLine
                        //DistanceArray[1] := DistanceOfBottomMiddlePointToTopLine

                        HOperatorSet.TupleMax(hv_DistanceArray, out hv_MaxDistance);
                        HOperatorSet.TupleMin(hv_DistanceArray, out hv_MinDistance);
                        hv_RealMaxDistance = hv_MaxDistance * hv_heightResolution;
                        hv_RealMinDistance = hv_MinDistance * hv_heightResolution;
                        //minimumDistanceThresh := 2.8
                        //判断片间距是否合格
                        hv_RowDisp = (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion) / 2;
                        hv_ColumnDisp = ((((hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion) + hv_ColumnOfLeftCornerPointBottomRegion) + hv_ColumnOfRightCornerPointBottomRegion) / 4) - 600;
                        if ((int)((new HTuple(hv_RealMaxDistance.TupleLessEqual(hv_maxDistanceThresh))).TupleAnd(
                            new HTuple(hv_RealMinDistance.TupleGreaterEqual(hv_minimumDistanceThresh)))) != 0)
                        {
                            hv_isDistanceNG = 0;
                            hv_isNextClass = 0;
                            disp_message_UserDefine(hv_windowHandle, (("MaxDis:" + hv_RealMaxDistance) + " MinDis:") + hv_RealMinDistance,
                                hv_RowDisp - 100, hv_ColumnDisp, "green");
                            //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'green', 'false')
                        }
                        else if ((int)(new HTuple(hv_RealMinDistance.TupleGreaterEqual(
                            hv_classDistanceThresh))) != 0)
                        {
                            //判断是否为下一串
                            hv_isDistanceNG = 0;
                            hv_isNextClass = 1;
                            disp_message_UserDefine(hv_windowHandle, (("MaxDis:" + hv_RealMaxDistance) + " MinDis:") + hv_RealMinDistance,
                                hv_RowDisp - 100, hv_ColumnDisp, "green");
                        }
                        else
                        {
                            if ((int)(hv_isTopRegionCalibrateFinish) != 0)
                            {
                                ho_RegionDifference.Dispose();
                                HOperatorSet.Difference(ho_TopRegionForDistance, ho_CalibrateTopAroundRegion,
                                    out ho_RegionDifference);
                                ho_RegionDifference3.Dispose();
                                HOperatorSet.Difference(ho_CalibrateTopAroundRegion, ho_TopRegion,
                                    out ho_RegionDifference3);
                            }
                            else
                            {
                                ho_RegionDifference.Dispose();
                                HOperatorSet.Difference(ho_TopRegionForDistance, ho_TopRegion, out ho_RegionDifference
                                    );
                                ho_RegionDifference3.Dispose();
                                HOperatorSet.Difference(ho_TopRegionForDistance, ho_TopRegion, out ho_RegionDifference3
                                    );
                            }
                            //opening_rectangle1 (RegionDifference, RegionOpening3, 200, 1)
                            //connection (RegionOpening3, ConnectedRegions1)
                            //region_features (RegionOpening3, 'height', Value)
                            //tuple_max (Value, MaxValueAdd)
                            ho_RegionOpening4.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_RegionDifference3, out ho_RegionOpening4,
                                200, 1);
                            ho_ConnectedRegions2.Dispose();
                            HOperatorSet.Connection(ho_RegionOpening4, out ho_ConnectedRegions2);
                            HOperatorSet.RegionFeatures(ho_ConnectedRegions2, "height", out hv_Value1);
                            HOperatorSet.TupleMax(hv_Value1, out hv_MaxValueSub);


                            HOperatorSet.SmallestRectangle2(ho_TopRegionForDistance, out hv_Row3,
                                out hv_Column3, out hv_Phi1, out hv_Length1, out hv_Length2);
                            ho_TopRegionForDistanceTrans.Dispose();
                            HOperatorSet.GenRectangle2(out ho_TopRegionForDistanceTrans, hv_Row3,
                                hv_Column3, hv_Phi1, hv_Length1, hv_Length2);
                            ho_RegionBorder.Dispose();
                            HOperatorSet.Boundary(ho_TopRegionForDistanceTrans, out ho_RegionBorder,
                                "outer");
                            ho_RegionOpening5.Dispose();
                            HOperatorSet.OpeningRectangle1(ho_RegionBorder, out ho_RegionOpening5,
                                10, 1);
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.DilationRectangle1(ho_RegionOpening5, out ExpTmpOutVar_0,
                                    200, 1);
                                ho_RegionOpening5.Dispose();
                                ho_RegionOpening5 = ExpTmpOutVar_0;
                            }
                            HOperatorSet.DistancePr(ho_RegionOpening5, 0.5 * (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion),
                                0.5 * (hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion),
                                out hv_DistanceMin, out hv_DistanceMax);

                            HOperatorSet.DistancePr(ho_RegionOpening5, hv_RowOfLeftCornerPointTopRegion,
                                hv_ColumnOfLeftCornerPointTopRegion, out hv_DistanceMin1, out hv_DistanceMax1);
                            HOperatorSet.DistancePr(ho_RegionOpening5, hv_RowOfRightCornerPointTopRegion,
                                hv_ColumnOfRightCornerPointTopRegion, out hv_DistanceMin2, out hv_DistanceMax1);

                            if ((int)(new HTuple(hv_RealMaxMinSubDistance.TupleLess(1.1))) != 0)
                            {
                                hv_MaxValueAdd = hv_DistanceMin.Clone();
                                hv_MinValueAdd = hv_DistanceMin.Clone();
                            }
                            else
                            {
                                if ((int)(new HTuple(hv_DistanceMin1.TupleGreater(hv_DistanceMin2))) != 0)
                                {
                                    hv_MaxValueAdd = hv_DistanceMin1.Clone();
                                    hv_MinValueAdd = hv_DistanceMin2.Clone();
                                }
                                else
                                {
                                    hv_MaxValueAdd = hv_DistanceMin2.Clone();
                                    hv_MinValueAdd = hv_DistanceMin1.Clone();
                                }
                            }


                            if ((int)(new HTuple(hv_RealMaxDistance.TupleGreater(hv_maxDistanceThresh))) != 0)
                            {
                                hv_RealMaxDistance = hv_RealMaxDistance - (hv_MaxValueAdd * hv_heightResolution);
                            }
                            if ((int)(new HTuple(hv_RealMaxDistance.TupleLess(hv_minimumDistanceThresh))) != 0)
                            {
                                hv_RealMaxDistance = hv_RealMaxDistance + (hv_MaxValueSub * hv_heightResolution);
                            }
                            if ((int)(new HTuple(hv_RealMinDistance.TupleLess(hv_minimumDistanceThresh))) != 0)
                            {
                                hv_RealMinDistance = hv_RealMinDistance + (hv_MaxValueSub * hv_heightResolution);
                            }
                            if ((int)(new HTuple(hv_RealMinDistance.TupleGreater(hv_maxDistanceThresh))) != 0)
                            {
                                hv_RealMinDistance = hv_RealMinDistance - (hv_MinValueAdd * hv_heightResolution);
                            }
                            if ((int)(new HTuple(hv_RealMaxDistance.TupleLess(hv_RealMinDistance))) != 0)
                            {
                                hv_temp = hv_RealMaxDistance.Clone();
                                hv_RealMaxDistance = hv_RealMinDistance.Clone();
                                hv_RealMinDistance = hv_temp.Clone();
                            }


                            if ((int)((new HTuple(hv_RealMaxDistance.TupleLessEqual(hv_maxDistanceThresh))).TupleAnd(
                                new HTuple(hv_RealMinDistance.TupleGreaterEqual(hv_minimumDistanceThresh)))) != 0)
                            {
                                hv_isDistanceNG = 0;
                                hv_isNextClass = 0;
                                disp_message_UserDefine(hv_windowHandle, (("MaxDis:" + hv_RealMaxDistance) + " MinDis:") + hv_RealMinDistance,
                                    hv_RowDisp - 100, hv_ColumnDisp, "green");
                                //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'green', 'false')
                            }
                            else
                            {
                                hv_isDistanceNG = 1;
                                hv_isNextClass = 0;
                                disp_message_UserDefine(hv_windowHandle, (("MaxDis:" + hv_RealMaxDistance) + " MinDis:") + hv_RealMinDistance,
                                    hv_RowDisp - 100, hv_ColumnDisp, "red");
                                //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'red', 'true')
                            }
                        }
                    }
                }

                ho_TopRegionTrans.Dispose();
                ho_TopRegionDilation.Dispose();
                ho_BottomRegionTrans.Dispose();
                ho_BottomRegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionDifference3.Dispose();
                ho_RegionOpening4.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_TopRegionForDistanceTrans.Dispose();
                ho_RegionBorder.Dispose();
                ho_RegionOpening5.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionTrans.Dispose();
                ho_TopRegionDilation.Dispose();
                ho_BottomRegionTrans.Dispose();
                ho_BottomRegionDilation.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionDifference3.Dispose();
                ho_RegionOpening4.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_TopRegionForDistanceTrans.Dispose();
                ho_RegionBorder.Dispose();
                ho_RegionOpening5.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmOfMainLine(HObject ho_RedChannelImage, HObject ho_ImageForFilmDetect,
            HObject ho_ImageForWeldNGDetect, HObject ho_ImageForHeadWeldNGDetect, HObject ho_BackGrayImageForWeldNGDetect,
            HObject ho_TopRegion, HObject ho_BottomRegion, out HObject ho_totalFilmShiftingRegionOut,
            out HObject ho_totalFilmMissRegionOut, out HObject ho_totalHeadAndTailFilmShiftingRegionOut,
            out HObject ho_TopMainLineRegions, out HObject ho_BottomMainLineRegions, HTuple hv_width,
            HTuple hv_height, HTuple hv_windowHandle, HTuple hv_widthResolution, HTuple hv_heightResolution,
            HTuple hv_mainLineNum, HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLengthOfTopRegion,
            HTuple hv_bottomShieldLengthOfTopRegion, HTuple hv_locationMainLineThresh, HTuple hv_filmWidthThresh,
            HTuple hv_filmWidthOffSet, HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh,
            HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmWidthThresh,
            HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist,
            HTuple hv_isNextClass, HTuple hv_isUsingChinese, HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength,
            HTuple hv_filmMissShieldDetectRange, HTuple hv_isWeldShield, HTuple hv_weldShieldLength,
            HTuple hv_isBackGrayColor, HTuple hv_firstDetectPosForTopRegion, HTuple hv_secondDetectPosForTopRegion,
            HTuple hv_firstDetectPosForBottomRegion, HTuple hv_secondDetectPosForBottomRegion,
            HTuple hv_twoMainLineDistance, HTuple hv_topShieldLengthOfBottomRegion, HTuple hv_bottomShieldLengthOfBottomRegion,
            out HTuple hv_isFilmShiftingOfTopWafer, out HTuple hv_isFilmShiftingOfBottomWafer,
            out HTuple hv_isFilmMissOfTopWafer, out HTuple hv_isFilmMissOfBottomWafer, out HTuple hv_isHeadAndTailFilmShiftingOfTopWafer,
            out HTuple hv_isHeadAndTailFilmShiftingOfBottomWafer, out HTuple hv_filmDistanceArrayOfTopWafer,
            out HTuple hv_filmDistanceArrayOfBottomWafer, out HTuple hv_isStartWeldingNGOfBottomWafer,
            out HTuple hv_IsDetectRegionNG, out HTuple hv_IsHeadOrTailNG, out HTuple hv_IsTopWaferNG,
            out HTuple hv_IsBottomWaferNG, out HTuple hv_IsHeadOfWaferNG, out HTuple hv_IsTailOfWaferNG,
            out HTuple hv_exceptionInfo, out HTuple hv_isException, out HTuple hv_isDetectOfTopWafer,
            out HTuple hv_isDetectOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_FilmShiftingOfTopRegion = null, ho_FilmMissOfTopRegion = null;
            HObject ho_HeadAndTailFilmShiftingOfTopRegion = null, ho_TopMainLineRegionOut = null;
            HObject ho_weldingNGRegionOut = null, ho_mainLineRegionOut = null;
            HObject ho_FilmShiftingOfBottomRegion = null, ho_FilmMissOfBottomRegion = null;
            HObject ho_HeadAndTailFilmShiftingOfBottomRegion = null, ho_BottomMainLineRegionOut = null;

            // Local control variables 

            HTuple hv_isExceptionOut = new HTuple(), hv_exceptionInfoOut = new HTuple();
            HTuple hv_isStartWeldingNGTemp = new HTuple(), hv_Area = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_isStartWeldingNG = new HTuple(), hv_isStartWeldingNGOut = new HTuple();
            HTuple hv_isWeldShield_COPY_INP_TMP = hv_isWeldShield.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_FilmShiftingOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_FilmMissOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_HeadAndTailFilmShiftingOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_TopMainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_weldingNGRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_FilmShiftingOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_FilmMissOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_HeadAndTailFilmShiftingOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineRegionOut);
            hv_IsDetectRegionNG = new HTuple();
            hv_IsHeadOrTailNG = new HTuple();
            try
            {
                hv_isFilmShiftingOfTopWafer = 0;
                hv_isFilmShiftingOfBottomWafer = 0;
                hv_isFilmMissOfTopWafer = 0;
                hv_isFilmMissOfBottomWafer = 0;
                hv_isHeadAndTailFilmShiftingOfTopWafer = 0;
                hv_isHeadAndTailFilmShiftingOfBottomWafer = 0;
                hv_isException = 0;
                hv_exceptionInfo = "";
                //2020.05.09-初始化输出参数
                //上半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfTopWafer);
                //下半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfBottomWafer);
                hv_isStartWeldingNGOfBottomWafer = 0;

                ho_totalFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmShiftingRegionOut);
                ho_totalFilmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmMissRegionOut);
                ho_totalHeadAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalHeadAndTailFilmShiftingRegionOut);
                //上半片主栅线区域
                ho_TopMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopMainLineRegions);
                //下半片主栅线区域
                ho_BottomMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomMainLineRegions);

                //各主栅线上半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTopWaferNG);
                //各主栅线下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsBottomWaferNG);
                //各主栅线头部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOfWaferNG);
                //各主栅线尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTailOfWaferNG);

                //2020.05.12-上下片单独执行
                hv_isDetectOfTopWafer = 0;
                hv_isDetectOfBottomWafer = 0;

                //判断膜带是否需要内缩屏蔽
                if ((int)((new HTuple((new HTuple(hv_isTopWaferExist.TupleEqual(0))).TupleAnd(
                    new HTuple(hv_isBottomWaferExist.TupleEqual(1))))).TupleOr(new HTuple(hv_isNextClass.TupleEqual(
                    1)))) != 0)
                {
                    hv_isWeldShield_COPY_INP_TMP = 1;
                }

                //膜检(膜偏、露白|膜短、膜失|头尾膜检)，起焊点异常||||MBB露白
                if ((int)((new HTuple((new HTuple((new HTuple(hv_isUsingFilmShiftingDetect.TupleEqual(
                    1))).TupleOr(new HTuple(hv_isUsingFilmMissDetect.TupleEqual(1))))).TupleOr(
                    new HTuple(hv_isUsingHeadAndTailFilmShiftingDetect.TupleEqual(1))))).TupleOr(
                    new HTuple(hv_isUsingStartWeldingDetect.TupleEqual(1)))) != 0)
                {
                    //上半片处理
                    if ((int)(hv_isTopWaferExist) != 0)
                    {
                        //2020.04.28
                        if ((int)(new HTuple(hv_mainLineNum.TupleEqual(5))) != 0)
                        {
                            //五栅电池片处理
                            ho_FilmShiftingOfTopRegion.Dispose(); ho_FilmMissOfTopRegion.Dispose(); ho_HeadAndTailFilmShiftingOfTopRegion.Dispose(); ho_TopMainLineRegionOut.Dispose();
                            DetectFilmDefectFunctionForFiveMainLine(ho_ImageForFilmDetect, ho_TopRegion,
                                ho_ImageForHeadWeldNGDetect, out ho_FilmShiftingOfTopRegion, out ho_FilmMissOfTopRegion,
                                out ho_HeadAndTailFilmShiftingOfTopRegion, out ho_TopMainLineRegionOut,
                                hv_width, hv_height, hv_windowHandle, hv_widthResolution, hv_heightResolution,
                                hv_mainLineNum, hv_isUsingFilmShiftingDetect, hv_topShieldLengthOfTopRegion,
                                hv_bottomShieldLengthOfTopRegion, hv_locationMainLineThresh, hv_filmWidthThresh,
                                hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                                hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmWidthThresh,
                                hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                                hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh,
                                1, hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                                hv_isWeldShield_COPY_INP_TMP, hv_weldShieldLength, out hv_isExceptionOut,
                                out hv_exceptionInfoOut, out hv_isStartWeldingNGTemp, out hv_filmDistanceArrayOfTopWafer);
                            if ((int)(hv_isExceptionOut) != 0)
                            {
                                hv_isException = 1;
                                hv_exceptionInfo = "上半片" + hv_exceptionInfoOut;
                                disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12,
                                    "red");
                                hv_isDetectOfTopWafer = 1;
                                //return ()
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_FilmShiftingOfTopRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalFilmShiftingRegionOut.Dispose();
                                ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalFilmMissRegionOut, ho_FilmMissOfTopRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalFilmMissRegionOut.Dispose();
                                ho_totalFilmMissRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalHeadAndTailFilmShiftingRegionOut, ho_HeadAndTailFilmShiftingOfTopRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalHeadAndTailFilmShiftingRegionOut.Dispose();
                                ho_totalHeadAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_TopMainLineRegions, ho_TopMainLineRegionOut, out ExpTmpOutVar_0
                                    );
                                ho_TopMainLineRegions.Dispose();
                                ho_TopMainLineRegions = ExpTmpOutVar_0;
                            }

                            //判断是否膜偏、露白以及膜短、膜失
                            HOperatorSet.AreaCenter(ho_FilmShiftingOfTopRegion, out hv_Area, out hv_Row,
                                out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isFilmShiftingOfTopWafer = 1;
                            }
                            HOperatorSet.AreaCenter(ho_FilmMissOfTopRegion, out hv_Area, out hv_Row,
                                out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isFilmMissOfTopWafer = 1;
                            }
                            HOperatorSet.AreaCenter(ho_HeadAndTailFilmShiftingOfTopRegion, out hv_Area,
                                out hv_Row, out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isHeadAndTailFilmShiftingOfTopWafer = 1;
                            }
                        }
                        else
                        {
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                if ((int)(new HTuple(hv_mainLineNum.TupleEqual(9))) != 0)
                                {
                                    //MBB九栅电池片处理  BottomRegion
                                    if ((int)(hv_isBackGrayColor) != 0)
                                    {
                                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                        DetectWeldingDefectFunctionForNineMainLineOfBackGray(ho_BackGrayImageForWeldNGDetect,
                                            ho_TopRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                            hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                                            hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh,
                                            out hv_isStartWeldingNG);
                                    }
                                    else
                                    {
                                        //filmWidthThresh := 2.3
                                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                        DetectWeldingDefectFunctionForNineMainLineOfBackBlue(ho_RedChannelImage,
                                            ho_ImageForWeldNGDetect, ho_TopRegion, out ho_weldingNGRegionOut,
                                            out ho_mainLineRegionOut, hv_width, hv_height, hv_windowHandle,
                                            hv_isUsingFilmShiftingDetect, hv_widthResolution, hv_filmWidthThresh,
                                            out hv_isStartWeldingNG);
                                    }
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_totalFilmShiftingRegionOut.Dispose();
                                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                    }
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_TopMainLineRegions, ho_mainLineRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_TopMainLineRegions.Dispose();
                                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                                    }
                                    if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                    {
                                        HOperatorSet.TupleConcat(hv_IsBottomWaferNG, hv_IsDetectRegionNG,
                                            out hv_IsBottomWaferNG);
                                        HOperatorSet.TupleConcat(hv_IsTailOfWaferNG, hv_IsHeadOrTailNG,
                                            out hv_IsTailOfWaferNG);
                                    }
                                    //判断是否膜偏、露白以及膜短、膜失
                                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                        out hv_Column);
                                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                    {
                                        hv_isFilmShiftingOfTopWafer = 1;
                                    }
                                }
                                else if ((int)(new HTuple(hv_mainLineNum.TupleEqual(
                                    10))) != 0)
                                {
                                    //MBB十栅电池片处理
                                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                                        ho_TopRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                        hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                                        hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNG);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_totalFilmShiftingRegionOut.Dispose();
                                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                    }
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_TopMainLineRegions, ho_mainLineRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_TopMainLineRegions.Dispose();
                                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                                    }
                                    if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                    {
                                        HOperatorSet.TupleConcat(hv_IsBottomWaferNG, hv_IsDetectRegionNG,
                                            out hv_IsBottomWaferNG);
                                        HOperatorSet.TupleConcat(hv_IsTailOfWaferNG, hv_IsHeadOrTailNG,
                                            out hv_IsTailOfWaferNG);
                                    }
                                    //判断是否膜偏、露白以及膜短、膜失
                                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                        out hv_Column);
                                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                    {
                                        hv_isFilmShiftingOfTopWafer = 1;
                                    }
                                }
                            }
                            else
                            {
                                //mainLineNum := 12
                                //5栅-695,10栅-350,12栅-250,9栅非-345,9栅-385
                                //twoMainLineDistance := 250

                                ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                DetectWeldingDefectFunctionForMoreMainLine(ho_ImageForWeldNGDetect,
                                    ho_TopRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                    hv_width, hv_height, hv_windowHandle, hv_widthResolution, hv_heightResolution,
                                    hv_locationMainLineThresh, hv_isUsingFilmShiftingDetect, hv_filmWidthThresh,
                                    hv_filmWidthOffSet, hv_weldWidthThresh, 1, hv_firstDetectPosForTopRegion,
                                    hv_secondDetectPosForTopRegion, hv_firstDetectPosForBottomRegion,
                                    hv_secondDetectPosForBottomRegion, hv_headAndTailFilmWidthThresh,
                                    hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                                    hv_mainLineNum, hv_twoMainLineDistance, out hv_isStartWeldingNGOut,
                                    out hv_IsDetectRegionNG, out hv_IsHeadOrTailNG, out hv_filmDistanceArrayOfTopWafer);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                        out ExpTmpOutVar_0);
                                    ho_totalFilmShiftingRegionOut.Dispose();
                                    ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                }
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.Union2(ho_TopMainLineRegions, ho_mainLineRegionOut, out ExpTmpOutVar_0
                                        );
                                    ho_TopMainLineRegions.Dispose();
                                    ho_TopMainLineRegions = ExpTmpOutVar_0;
                                }
                                if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                {
                                    HOperatorSet.TupleConcat(hv_IsBottomWaferNG, hv_IsDetectRegionNG,
                                        out hv_IsBottomWaferNG);
                                    HOperatorSet.TupleConcat(hv_IsTailOfWaferNG, hv_IsHeadOrTailNG, out hv_IsTailOfWaferNG);
                                }
                                //判断是否膜偏、露白以及膜短、膜失
                                HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                    out hv_Column);
                                if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                {
                                    hv_isFilmShiftingOfTopWafer = 1;
                                }
                            }
                        }
                    }

                    //下半片处理
                    if ((int)(hv_isBottomWaferExist) != 0)
                    {
                        //2020.04.28
                        if ((int)(new HTuple(hv_mainLineNum.TupleEqual(5))) != 0)
                        {
                            //五栅电池片处理
                            ho_FilmShiftingOfBottomRegion.Dispose(); ho_FilmMissOfBottomRegion.Dispose(); ho_HeadAndTailFilmShiftingOfBottomRegion.Dispose(); ho_BottomMainLineRegionOut.Dispose();
                            DetectFilmDefectFunctionForFiveMainLine(ho_ImageForFilmDetect, ho_BottomRegion,
                                ho_ImageForHeadWeldNGDetect, out ho_FilmShiftingOfBottomRegion, out ho_FilmMissOfBottomRegion,
                                out ho_HeadAndTailFilmShiftingOfBottomRegion, out ho_BottomMainLineRegionOut,
                                hv_width, hv_height, hv_windowHandle, hv_widthResolution, hv_heightResolution,
                                hv_mainLineNum, hv_isUsingFilmShiftingDetect, hv_topShieldLengthOfBottomRegion,
                                hv_bottomShieldLengthOfBottomRegion, hv_locationMainLineThresh, hv_filmWidthThresh,
                                hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                                hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmWidthThresh,
                                hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                                hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh,
                                0, hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                                hv_isWeldShield_COPY_INP_TMP, hv_weldShieldLength, out hv_isExceptionOut,
                                out hv_exceptionInfoOut, out hv_isStartWeldingNGOut, out hv_filmDistanceArrayOfBottomWafer);
                            if ((int)(hv_isExceptionOut) != 0)
                            {
                                hv_isException = 1;
                                hv_exceptionInfo = "下半片" + hv_exceptionInfoOut;
                                disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12,
                                    "red");
                                hv_isDetectOfBottomWafer = 1;
                                //return ()
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_FilmShiftingOfBottomRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalFilmShiftingRegionOut.Dispose();
                                ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalFilmMissRegionOut, ho_FilmMissOfBottomRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalFilmMissRegionOut.Dispose();
                                ho_totalFilmMissRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_totalHeadAndTailFilmShiftingRegionOut, ho_HeadAndTailFilmShiftingOfBottomRegion,
                                    out ExpTmpOutVar_0);
                                ho_totalHeadAndTailFilmShiftingRegionOut.Dispose();
                                ho_totalHeadAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                            }
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.Union2(ho_BottomMainLineRegions, ho_BottomMainLineRegionOut,
                                    out ExpTmpOutVar_0);
                                ho_BottomMainLineRegions.Dispose();
                                ho_BottomMainLineRegions = ExpTmpOutVar_0;
                            }
                            //判断是否膜偏、露白以及膜短、膜失
                            HOperatorSet.AreaCenter(ho_FilmShiftingOfBottomRegion, out hv_Area, out hv_Row,
                                out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isFilmShiftingOfBottomWafer = 1;
                            }
                            HOperatorSet.AreaCenter(ho_FilmMissOfBottomRegion, out hv_Area, out hv_Row,
                                out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isFilmMissOfBottomWafer = 1;
                            }
                            HOperatorSet.AreaCenter(ho_HeadAndTailFilmShiftingOfBottomRegion, out hv_Area,
                                out hv_Row, out hv_Column);
                            if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                            {
                                hv_isHeadAndTailFilmShiftingOfBottomWafer = 1;
                            }
                            //判断是否起焊点异常
                            hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOut.Clone();
                        }
                        else
                        {
                            if ((int)(hv_isBackDetect) != 0)
                            {
                                if ((int)(new HTuple(hv_mainLineNum.TupleEqual(9))) != 0)
                                {
                                    //MBB九栅电池片处理
                                    if ((int)(hv_isBackGrayColor) != 0)
                                    {
                                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                        DetectWeldingDefectFunctionForNineMainLineOfBackGray(ho_BackGrayImageForWeldNGDetect,
                                            ho_BottomRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                            hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                                            hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh,
                                            out hv_isStartWeldingNGOut);
                                    }
                                    else
                                    {
                                        //filmWidthThresh := 2.3
                                        ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                        DetectWeldingDefectFunctionForNineMainLineOfBackBlue(ho_RedChannelImage,
                                            ho_ImageForWeldNGDetect, ho_BottomRegion, out ho_weldingNGRegionOut,
                                            out ho_mainLineRegionOut, hv_width, hv_height, hv_windowHandle,
                                            hv_isUsingFilmShiftingDetect, hv_widthResolution, hv_filmWidthThresh,
                                            out hv_isStartWeldingNGOut);
                                    }

                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_totalFilmShiftingRegionOut.Dispose();
                                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                    }
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_BottomMainLineRegions, ho_mainLineRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_BottomMainLineRegions.Dispose();
                                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                                    }
                                    if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                    {
                                        HOperatorSet.TupleConcat(hv_IsTopWaferNG, hv_IsDetectRegionNG,
                                            out hv_IsTopWaferNG);
                                        HOperatorSet.TupleConcat(hv_IsHeadOfWaferNG, hv_IsHeadOrTailNG,
                                            out hv_IsHeadOfWaferNG);
                                    }

                                    //判断是否膜偏、露白以及膜短、膜失
                                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                        out hv_Column);
                                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                    {
                                        hv_isFilmShiftingOfBottomWafer = 1;
                                    }
                                    //判断是否起焊点异常
                                    hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOut.Clone();
                                }
                                else if ((int)(new HTuple(hv_mainLineNum.TupleEqual(
                                    10))) != 0)
                                {
                                    //MBB十栅电池片处理
                                    ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                    DetectWeldingDefectFunctionForTenMainLineOfBack(ho_BackGrayImageForWeldNGDetect,
                                        ho_BottomRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                        hv_width, hv_height, hv_windowHandle, hv_isUsingFilmShiftingDetect,
                                        hv_widthResolution, hv_weldWidthThresh, hv_filmWidthThresh, out hv_isStartWeldingNGOut);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_totalFilmShiftingRegionOut.Dispose();
                                        ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                    }
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_BottomMainLineRegions, ho_mainLineRegionOut,
                                            out ExpTmpOutVar_0);
                                        ho_BottomMainLineRegions.Dispose();
                                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                                    }
                                    if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                    {
                                        HOperatorSet.TupleConcat(hv_IsTopWaferNG, hv_IsDetectRegionNG,
                                            out hv_IsTopWaferNG);
                                        HOperatorSet.TupleConcat(hv_IsHeadOfWaferNG, hv_IsHeadOrTailNG,
                                            out hv_IsHeadOfWaferNG);
                                    }

                                    //判断是否膜偏、露白以及膜短、膜失
                                    HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                        out hv_Column);
                                    if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                    {
                                        hv_isFilmShiftingOfBottomWafer = 1;
                                    }
                                    //判断是否起焊点异常
                                    hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOut.Clone();
                                }
                            }
                            else
                            {
                                ho_weldingNGRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                                DetectWeldingDefectFunctionForMoreMainLine(ho_ImageForWeldNGDetect,
                                    ho_BottomRegion, out ho_weldingNGRegionOut, out ho_mainLineRegionOut,
                                    hv_width, hv_height, hv_windowHandle, hv_widthResolution, hv_heightResolution,
                                    hv_locationMainLineThresh, hv_isUsingFilmShiftingDetect, hv_filmWidthThresh,
                                    hv_filmWidthOffSet, hv_weldWidthThresh, 0, hv_firstDetectPosForTopRegion,
                                    hv_secondDetectPosForTopRegion, hv_firstDetectPosForBottomRegion,
                                    hv_secondDetectPosForBottomRegion, hv_headAndTailFilmWidthThresh,
                                    hv_isUsingChinese, hv_isUsingStartWeldingDetect, hv_isBackDetect,
                                    hv_mainLineNum, hv_twoMainLineDistance, out hv_isStartWeldingNGOut,
                                    out hv_IsDetectRegionNG, out hv_IsHeadOrTailNG, out hv_filmDistanceArrayOfTopWafer);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.Union2(ho_totalFilmShiftingRegionOut, ho_weldingNGRegionOut,
                                        out ExpTmpOutVar_0);
                                    ho_totalFilmShiftingRegionOut.Dispose();
                                    ho_totalFilmShiftingRegionOut = ExpTmpOutVar_0;
                                }
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.Union2(ho_BottomMainLineRegions, ho_mainLineRegionOut,
                                        out ExpTmpOutVar_0);
                                    ho_BottomMainLineRegions.Dispose();
                                    ho_BottomMainLineRegions = ExpTmpOutVar_0;
                                }
                                if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                                {
                                    HOperatorSet.TupleConcat(hv_IsTopWaferNG, hv_IsDetectRegionNG, out hv_IsTopWaferNG);
                                    HOperatorSet.TupleConcat(hv_IsHeadOfWaferNG, hv_IsHeadOrTailNG, out hv_IsHeadOfWaferNG);
                                }

                                //判断是否膜偏、露白以及膜短、膜失
                                HOperatorSet.AreaCenter(ho_weldingNGRegionOut, out hv_Area, out hv_Row,
                                    out hv_Column);
                                if ((int)(new HTuple(hv_Area.TupleGreater(0))) != 0)
                                {
                                    hv_isFilmShiftingOfBottomWafer = 1;
                                }
                                //判断是否起焊点异常
                                hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOut.Clone();
                            }
                        }
                    }
                }

                ho_FilmShiftingOfTopRegion.Dispose();
                ho_FilmMissOfTopRegion.Dispose();
                ho_HeadAndTailFilmShiftingOfTopRegion.Dispose();
                ho_TopMainLineRegionOut.Dispose();
                ho_weldingNGRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();
                ho_FilmShiftingOfBottomRegion.Dispose();
                ho_FilmMissOfBottomRegion.Dispose();
                ho_HeadAndTailFilmShiftingOfBottomRegion.Dispose();
                ho_BottomMainLineRegionOut.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_FilmShiftingOfTopRegion.Dispose();
                ho_FilmMissOfTopRegion.Dispose();
                ho_HeadAndTailFilmShiftingOfTopRegion.Dispose();
                ho_TopMainLineRegionOut.Dispose();
                ho_weldingNGRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();
                ho_FilmShiftingOfBottomRegion.Dispose();
                ho_FilmMissOfBottomRegion.Dispose();
                ho_HeadAndTailFilmShiftingOfBottomRegion.Dispose();
                ho_BottomMainLineRegionOut.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectionOfTRSliceOrString(HObject ho_TopRegion, HObject ho_BottomRegion,
            HObject ho_TopRegionForDistance, HObject ho_CalibrateTopAroundRegion, HTuple hv_isTopWaferExist,
            HTuple hv_isBottomWaferExist, HTuple hv_isTopRegionCalibrateFinish, HTuple hv_isBottomRegionCalibrateFinish,
            HTuple hv_isUsingDistanceDetect, HTuple hv_heightResolution, HTuple hv_minimumDistanceThresh,
            HTuple hv_maxDistanceThresh, HTuple hv_classDistanceThresh, HTuple hv_windowHandle,
            out HTuple hv_isDistanceNG, out HTuple hv_isNextClass)
        {




            // Local iconic variables 

            HObject ho_TopRegionTrans = null, ho_TopRegionDilation = null;
            HObject ho_BottomRegionTrans = null, ho_BottomRegionDilation = null;

            // Local control variables 

            HTuple hv_CenterRowOfTopRegion = new HTuple();
            HTuple hv_CenterColumnOfTopRegion = new HTuple(), hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_angleOfHalfHeightAndHalfWidth = new HTuple();
            HTuple hv_semiDiameterOfTopRegion = new HTuple(), hv_RowOfLeftCornerPointTopRegion = new HTuple();
            HTuple hv_ColumnOfLeftCornerPointTopRegion = new HTuple();
            HTuple hv_RowOfRightCornerPointTopRegion = new HTuple();
            HTuple hv_ColumnOfRightCornerPointTopRegion = new HTuple();
            HTuple hv_DistanceMinLeftTopRegion = new HTuple(), hv_DistanceMaxLeftTopRegion = new HTuple();
            HTuple hv_DistanceMinRightTopRegion = new HTuple(), hv_DistanceMaxRightTopRegion = new HTuple();
            HTuple hv_CenterRowOfBottomRegion = new HTuple(), hv_CenterColumnOfBottomRegion = new HTuple();
            HTuple hv_PhiOfBottomRegion = new HTuple(), hv_HalfWidthOfBottomRegion = new HTuple();
            HTuple hv_HalfHeightOfBottomRegion = new HTuple(), hv_semiDiameterOfBottomRegion = new HTuple();
            HTuple hv_RowOfLeftCornerPointBottomRegion = new HTuple();
            HTuple hv_ColumnOfLeftCornerPointBottomRegion = new HTuple();
            HTuple hv_RowOfRightCornerPointBottomRegion = new HTuple();
            HTuple hv_ColumnOfRightCornerPointBottomRegion = new HTuple();
            HTuple hv_DistanceMinLeftBottomRegion = new HTuple(), hv_DistanceMaxLeftBottomRegion = new HTuple();
            HTuple hv_DistanceMinRightBottomRegion = new HTuple();
            HTuple hv_DistanceMaxRightBottomRegion = new HTuple();
            HTuple hv_DistanceOfTopMiddlePointToBottomLine = new HTuple();
            HTuple hv_DistanceOfBottomMiddlePointToTopLine = new HTuple();
            HTuple hv_DistanceOfTopLeftCornerPointToBottomLine = new HTuple();
            HTuple hv_DistanceOfTopRightCornerPointToBottomLine = new HTuple();
            HTuple hv_DistanceOfBottomLeftCornerPointToTopLine = new HTuple();
            HTuple hv_DistanceOfBottomRightCornerPointToTopLine = new HTuple();
            HTuple hv_DistanceArray = new HTuple(), hv_MaxDistance = new HTuple();
            HTuple hv_MinDistance = new HTuple(), hv_RealMaxDistance = new HTuple();
            HTuple hv_RealMinDistance = new HTuple(), hv_RealMaxMinSubDistance = new HTuple();
            HTuple hv_RowDisp = new HTuple(), hv_ColumnDisp = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_TopRegionDilation);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionTrans);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionDilation);
            try
            {
                //2020.05.22-初始化参数
                hv_isDistanceNG = 0;
                hv_isNextClass = 0;
                //片/串间距检测
                if ((int)(hv_isUsingDistanceDetect) != 0)
                {
                    if ((int)(hv_isTopWaferExist.TupleAnd(hv_isBottomWaferExist)) != 0)
                    {
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        if ((int)(new HTuple(hv_isTopRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            //上半片区域最小外接矩形
                            HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                                out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                                out hv_HalfHeightOfTopRegion);
                            //disp_rectangle2 (windowHandle, CenterRowOfTopRegion, CenterColumnOfTopRegion, PhiOfTopRegion, HalfWidthOfTopRegion, HalfHeightOfTopRegion)
                            //几何运算，上半片半径角的弧度
                            HOperatorSet.TupleAtan(hv_HalfHeightOfTopRegion / hv_HalfWidthOfTopRegion,
                                out hv_angleOfHalfHeightAndHalfWidth);
                            //几何运算，上半片对角线的一半，记为半径
                            hv_semiDiameterOfTopRegion = hv_HalfHeightOfTopRegion / (hv_angleOfHalfHeightAndHalfWidth.TupleSin()
                                );
                            //几何运算，分别得出上半片左、右角点
                            hv_RowOfLeftCornerPointTopRegion = hv_CenterRowOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfLeftCornerPointTopRegion = hv_CenterColumnOfTopRegion - (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfTopRegion)).TupleCos()
                                ));
                            hv_RowOfRightCornerPointTopRegion = hv_CenterRowOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfTopRegion)).TupleSin()
                                ));
                            hv_ColumnOfRightCornerPointTopRegion = hv_CenterColumnOfTopRegion + (hv_semiDiameterOfTopRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfTopRegion)).TupleCos()
                                ));
                            //
                            ho_TopRegionTrans.Dispose();
                            HOperatorSet.ShapeTrans(ho_TopRegion, out ho_TopRegionTrans, "convex");
                            ho_TopRegionDilation.Dispose();
                            HOperatorSet.DilationRectangle1(ho_TopRegionTrans, out ho_TopRegionDilation,
                                500, 1);
                            HOperatorSet.DistancePr(ho_TopRegionDilation, hv_RowOfLeftCornerPointTopRegion,
                                hv_ColumnOfLeftCornerPointTopRegion, out hv_DistanceMinLeftTopRegion,
                                out hv_DistanceMaxLeftTopRegion);
                            HOperatorSet.DistancePr(ho_TopRegionDilation, hv_RowOfRightCornerPointTopRegion,
                                hv_ColumnOfRightCornerPointTopRegion, out hv_DistanceMinRightTopRegion,
                                out hv_DistanceMaxRightTopRegion);
                            hv_RowOfLeftCornerPointTopRegion = hv_RowOfLeftCornerPointTopRegion - hv_DistanceMinLeftTopRegion;
                            hv_RowOfRightCornerPointTopRegion = hv_RowOfRightCornerPointTopRegion - hv_DistanceMinRightTopRegion;
                            //
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointTopRegion,
                                hv_ColumnOfLeftCornerPointTopRegion, 100, 0.3);
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointTopRegion,
                                hv_ColumnOfRightCornerPointTopRegion, 100, 0.3);
                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        if ((int)(new HTuple(hv_isBottomRegionCalibrateFinish.TupleEqual(0))) != 0)
                        {
                            //下半片区域最小外接矩形
                            HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                                out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                                out hv_HalfHeightOfBottomRegion);
                            //disp_rectangle2 (windowHandle, CenterRowOfBottomRegion, CenterColumnOfBottomRegion, PhiOfBottomRegion, HalfWidthOfBottomRegion, HalfHeightOfBottomRegion)
                            //几何运算，下半片半径角的弧度
                            HOperatorSet.TupleAtan(hv_HalfHeightOfBottomRegion / hv_HalfWidthOfBottomRegion,
                                out hv_angleOfHalfHeightAndHalfWidth);
                            //几何运算，下半片对角线的一半，记为半径
                            hv_semiDiameterOfBottomRegion = hv_HalfHeightOfBottomRegion / (hv_angleOfHalfHeightAndHalfWidth.TupleSin()
                                );
                            //几何运算，分别得出下半片左、中、右三个点
                            hv_RowOfLeftCornerPointBottomRegion = hv_CenterRowOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfLeftCornerPointBottomRegion = hv_CenterColumnOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth - hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            hv_RowOfRightCornerPointBottomRegion = hv_CenterRowOfBottomRegion - (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfBottomRegion)).TupleSin()
                                ));
                            hv_ColumnOfRightCornerPointBottomRegion = hv_CenterColumnOfBottomRegion + (hv_semiDiameterOfBottomRegion * (((hv_angleOfHalfHeightAndHalfWidth + hv_PhiOfBottomRegion)).TupleCos()
                                ));
                            //
                            ho_BottomRegionTrans.Dispose();
                            HOperatorSet.ShapeTrans(ho_BottomRegion, out ho_BottomRegionTrans, "convex");
                            ho_BottomRegionDilation.Dispose();
                            HOperatorSet.DilationRectangle1(ho_BottomRegionTrans, out ho_BottomRegionDilation,
                                500, 1);
                            HOperatorSet.DistancePr(ho_BottomRegionDilation, hv_RowOfLeftCornerPointBottomRegion,
                                hv_ColumnOfLeftCornerPointBottomRegion, out hv_DistanceMinLeftBottomRegion,
                                out hv_DistanceMaxLeftBottomRegion);
                            HOperatorSet.DistancePr(ho_BottomRegionDilation, hv_RowOfRightCornerPointBottomRegion,
                                hv_ColumnOfRightCornerPointBottomRegion, out hv_DistanceMinRightBottomRegion,
                                out hv_DistanceMaxRightBottomRegion);
                            hv_RowOfLeftCornerPointBottomRegion = hv_RowOfLeftCornerPointBottomRegion + hv_DistanceMinLeftBottomRegion;
                            hv_RowOfRightCornerPointBottomRegion = hv_RowOfRightCornerPointBottomRegion + hv_DistanceMinRightBottomRegion;
                            //
                            //
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfLeftCornerPointBottomRegion,
                                hv_ColumnOfLeftCornerPointBottomRegion, 100, 0.3);
                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowOfRightCornerPointBottomRegion,
                                hv_ColumnOfRightCornerPointBottomRegion, 100, 0.3);
                        }
                        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                        //
                        //2019.02.25 更改片间距算法，由角点计算片间距更改为角点中心点计算片间距
                        //显示角点中心点
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, 0.5 * (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion),
                            100, 0.3);
                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, 0.5 * (hv_RowOfLeftCornerPointBottomRegion + hv_RowOfRightCornerPointBottomRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointBottomRegion + hv_ColumnOfRightCornerPointBottomRegion),
                            100, 0.3);
                        //上半片两侧角点中心点到下半片边缘距离
                        HOperatorSet.DistancePl(0.5 * (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion),
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopMiddlePointToBottomLine);
                        //下半片两侧角点中心点到上半片边缘距离
                        HOperatorSet.DistancePl(0.5 * (hv_RowOfLeftCornerPointBottomRegion + hv_RowOfRightCornerPointBottomRegion),
                            0.5 * (hv_ColumnOfLeftCornerPointBottomRegion + hv_ColumnOfRightCornerPointBottomRegion),
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomMiddlePointToTopLine);
                        //
                        //2019-4-12 增加是否是八角片间距判断
                        //上半片左侧角点到下半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopLeftCornerPointToBottomLine);
                        //上半片右侧角点到下半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            out hv_DistanceOfTopRightCornerPointToBottomLine);
                        //下半片左侧角点到上半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfLeftCornerPointBottomRegion, hv_ColumnOfLeftCornerPointBottomRegion,
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomLeftCornerPointToTopLine);
                        //下半片右侧角点到上半片边缘距离
                        HOperatorSet.DistancePl(hv_RowOfRightCornerPointBottomRegion, hv_ColumnOfRightCornerPointBottomRegion,
                            hv_RowOfLeftCornerPointTopRegion, hv_ColumnOfLeftCornerPointTopRegion,
                            hv_RowOfRightCornerPointTopRegion, hv_ColumnOfRightCornerPointTopRegion,
                            out hv_DistanceOfBottomRightCornerPointToTopLine);
                        //
                        //计算出四个距离中的最大值和最小值
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[0] = hv_DistanceOfTopLeftCornerPointToBottomLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[1] = hv_DistanceOfTopRightCornerPointToBottomLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[2] = hv_DistanceOfBottomLeftCornerPointToTopLine;
                        if (hv_DistanceArray == null)
                            hv_DistanceArray = new HTuple();
                        hv_DistanceArray[3] = hv_DistanceOfBottomRightCornerPointToTopLine;
                        HOperatorSet.TupleMax(hv_DistanceArray, out hv_MaxDistance);
                        HOperatorSet.TupleMin(hv_DistanceArray, out hv_MinDistance);
                        hv_RealMaxDistance = hv_MaxDistance * hv_heightResolution;
                        hv_RealMinDistance = hv_MinDistance * hv_heightResolution;
                        hv_RealMaxMinSubDistance = hv_RealMaxDistance - hv_RealMinDistance;
                        if ((int)(new HTuple(hv_RealMaxMinSubDistance.TupleLess(1.1))) != 0)
                        {
                            hv_DistanceArray = new HTuple();
                            if (hv_DistanceArray == null)
                                hv_DistanceArray = new HTuple();
                            hv_DistanceArray[0] = hv_DistanceOfTopMiddlePointToBottomLine;
                            if (hv_DistanceArray == null)
                                hv_DistanceArray = new HTuple();
                            hv_DistanceArray[1] = hv_DistanceOfBottomMiddlePointToTopLine;
                        }
                        //
                        //DistanceArray[0] := DistanceOfTopMiddlePointToBottomLine
                        //DistanceArray[1] := DistanceOfBottomMiddlePointToTopLine
                        //
                        HOperatorSet.TupleMax(hv_DistanceArray, out hv_MaxDistance);
                        HOperatorSet.TupleMin(hv_DistanceArray, out hv_MinDistance);
                        hv_RealMaxDistance = hv_MaxDistance * hv_heightResolution;
                        hv_RealMinDistance = hv_MinDistance * hv_heightResolution;
                        //minimumDistanceThresh := 2.8
                        //判断片间距是否合格
                        hv_RowDisp = (hv_RowOfLeftCornerPointTopRegion + hv_RowOfRightCornerPointTopRegion) / 2;
                        hv_ColumnDisp = ((((hv_ColumnOfLeftCornerPointTopRegion + hv_ColumnOfRightCornerPointTopRegion) + hv_ColumnOfLeftCornerPointBottomRegion) + hv_ColumnOfRightCornerPointBottomRegion) / 4) - 600;
                        if ((int)((new HTuple(hv_RealMaxDistance.TupleLessEqual(hv_maxDistanceThresh))).TupleAnd(
                            new HTuple(hv_RealMinDistance.TupleGreaterEqual(hv_minimumDistanceThresh)))) != 0)
                        {
                            //isDistanceNG := false
                            //isNextClass := false
                            //disp_message_UserDefine (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, RowDisp-100, ColumnDisp, 'green')
                            //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'green', 'false')
                        }
                        else if ((int)(new HTuple(hv_RealMinDistance.TupleGreaterEqual(
                            hv_classDistanceThresh))) != 0)
                        {
                            //判断是否为下一串
                            hv_isDistanceNG = 0;
                            hv_isNextClass = 1;
                            disp_message_UserDefine(hv_windowHandle, (("MaxDis:" + hv_RealMaxDistance) + " MinDis:") + hv_RealMinDistance,
                                hv_RowDisp - 100, hv_ColumnDisp, "green");
                        }
                        else
                        {
                            //if (isTopRegionCalibrateFinish)
                            //difference (TopRegionForDistance, CalibrateTopAroundRegion, RegionDifference)
                            //difference (CalibrateTopAroundRegion, TopRegion, RegionDifference3)
                            //else
                            //difference (TopRegionForDistance, TopRegion, RegionDifference)
                            //difference (TopRegionForDistance, TopRegion, RegionDifference3)
                            //endif
                            //opening_rectangle1 (RegionDifference, RegionOpening3, 200, 1)
                            //connection (RegionOpening3, ConnectedRegions1)
                            //region_features (RegionOpening3, 'height', Value)
                            //tuple_max (Value, MaxValueAdd)
                            //opening_rectangle1 (RegionDifference3, RegionOpening4, 200, 1)
                            //connection (RegionOpening4, ConnectedRegions2)
                            //region_features (ConnectedRegions2, 'height', Value1)
                            //tuple_max (Value1, MaxValueSub)
                            //
                            //
                            //smallest_rectangle2 (TopRegionForDistance, Row3, Column3, Phi1, Length1, Length2)
                            //gen_rectangle2 (TopRegionForDistanceTrans, Row3, Column3, Phi1, Length1, Length2)
                            //boundary (TopRegionForDistanceTrans, RegionBorder, 'outer')
                            //opening_rectangle1 (RegionBorder, RegionOpening5, 10, 1)
                            //dilation_rectangle1 (RegionOpening5, RegionOpening5, 200, 1)
                            //distance_pr (RegionOpening5, 0.5 * (RowOfLeftCornerPointTopRegion + RowOfRightCornerPointTopRegion), 0.5 * (ColumnOfLeftCornerPointTopRegion + ColumnOfRightCornerPointTopRegion), DistanceMin, DistanceMax)
                            //
                            //distance_pr (RegionOpening5, RowOfLeftCornerPointTopRegion, ColumnOfLeftCornerPointTopRegion, DistanceMin1, DistanceMax1)
                            //distance_pr (RegionOpening5, RowOfRightCornerPointTopRegion, ColumnOfRightCornerPointTopRegion, DistanceMin2, DistanceMax1)
                            //
                            //if (RealMaxMinSubDistance < 1.1)
                            //MaxValueAdd := DistanceMin
                            //MinValueAdd := DistanceMin
                            //else
                            //if (DistanceMin1>DistanceMin2)
                            //MaxValueAdd := DistanceMin1
                            //MinValueAdd := DistanceMin2
                            //else
                            //MaxValueAdd := DistanceMin2
                            //MinValueAdd := DistanceMin1
                            //endif
                            //endif
                            //
                            //
                            //if (RealMaxDistance > maxDistanceThresh)
                            //RealMaxDistance := RealMaxDistance - MaxValueAdd * heightResolution
                            //endif
                            //if (RealMaxDistance < minimumDistanceThresh)
                            //RealMaxDistance := RealMaxDistance + MaxValueSub * heightResolution
                            //endif
                            //if (RealMinDistance < minimumDistanceThresh)
                            //RealMinDistance := RealMinDistance + MaxValueSub * heightResolution
                            //endif
                            //if (RealMinDistance > maxDistanceThresh)
                            //RealMinDistance := RealMinDistance - MinValueAdd * heightResolution
                            //endif
                            //if (RealMaxDistance < RealMinDistance)
                            //temp := RealMaxDistance
                            //RealMaxDistance := RealMinDistance
                            //RealMinDistance := temp
                            //endif
                            //
                            //
                            //if (RealMaxDistance <= maxDistanceThresh and RealMinDistance >= minimumDistanceThresh)
                            //isDistanceNG := false
                            //isNextClass := false
                            //disp_message_UserDefine (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, RowDisp-100, ColumnDisp, 'green')
                            //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'green', 'false')
                            //else
                            //isDistanceNG := true
                            //isNextClass := false
                            //disp_message_UserDefine (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, RowDisp-100, ColumnDisp, 'red')
                            //disp_message (windowHandle, 'MaxDis:' + RealMaxDistance +' MinDis:' + RealMinDistance, 'image', RowDisp, ColumnDisp, 'red', 'true')
                            //endif
                        }
                    }
                }
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopRegionTrans.Dispose();
                ho_TopRegionDilation.Dispose();
                ho_BottomRegionTrans.Dispose();
                ho_BottomRegionDilation.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetTRRegion(HObject ho_ImageForExtractROI, HObject ho_oriImage, HObject ho_modelContoursOfTop,
            HObject ho_RedChannelImage, out HObject ho_TopRegion, out HObject ho_BottomRegion,
            out HObject ho_SelectedRegions, out HObject ho_RegionFillUp, out HObject ho_RegionOpening,
            HTuple hv_width, HTuple hv_mainLineNum, HTuple hv_modelIDOfTop, HTuple hv_isBackDetect,
            HTuple hv_isTopWaferExist, HTuple hv_isBottomWaferExist, HTuple hv_isUsingChinese,
            HTuple hv_windowHandle, out HTuple hv_isGetTRRegionReturn, out HTuple hv_isFoundTopEdgeRegionOut,
            out HTuple hv_isFoundBottomEdgeRegionOut)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_RegionsOfBinaryThreshold = null, ho_ConnectedRegions;
            HObject ho_SortedRegions, ho_WaferOfToppart = null, ho_WaferOfBottompart = null;
            HObject ho_TopImageReduced = null, ho_ImageResultTop = null;
            HObject ho_SelectedRegionsTop = null, ho_BottomImageReduced = null;
            HObject ho_SelectedRegionsBottom = null, ho_EmptyRegion;

            // Local control variables 

            HTuple hv_UsedThreshold = new HTuple(), hv_BigRegionNum = null;
            HTuple hv_RowBeginT = new HTuple(), hv_ColBeginT = new HTuple();
            HTuple hv_RowEndT = new HTuple(), hv_ColEndT = new HTuple();
            HTuple hv_UsedThreshold1 = new HTuple(), hv_TopRegionWidth = new HTuple();
            HTuple hv_TopRegionHeight = new HTuple(), hv_BottomRegionWidth = new HTuple();
            HTuple hv_BottomRegionHeight = new HTuple(), hv_isException = new HTuple();
            HTuple hv_exceptionInfo = new HTuple(), hv_TopEdgeRegionIsEqual = null;
            HTuple hv_BottomEdgeRegionIsEqual = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_RegionsOfBinaryThreshold);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SortedRegions);
            HOperatorSet.GenEmptyObj(out ho_WaferOfToppart);
            HOperatorSet.GenEmptyObj(out ho_WaferOfBottompart);
            HOperatorSet.GenEmptyObj(out ho_TopImageReduced);
            HOperatorSet.GenEmptyObj(out ho_ImageResultTop);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegionsTop);
            HOperatorSet.GenEmptyObj(out ho_BottomImageReduced);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegionsBottom);
            HOperatorSet.GenEmptyObj(out ho_EmptyRegion);
            try
            {
                //2020.05.09-初始化返回参数
                hv_isGetTRRegionReturn = 0;
                ho_RegionOpening.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_RegionOpening);
                //2020.05.14-添加边界是否找到的参数
                hv_isFoundTopEdgeRegionOut = 1;
                hv_isFoundBottomEdgeRegionOut = 1;

                if ((int)(hv_isBackDetect) != 0)
                {
                    ho_RegionsOfBinaryThreshold.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractROI, out ho_RegionsOfBinaryThreshold,
                        "max_separability", "light", out hv_UsedThreshold);
                }
                else
                {
                    ho_RegionsOfBinaryThreshold.Dispose();
                    HOperatorSet.BinaryThreshold(ho_ImageForExtractROI, out ho_RegionsOfBinaryThreshold,
                        "max_separability", "dark", out hv_UsedThreshold);
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                        0.07 * hv_width, 80);
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                }
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegions,
                    "max_area", 70);
                ho_RegionFillUp.Dispose();
                HOperatorSet.FillUp(ho_SelectedRegions, out ho_RegionFillUp);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionFillUp, out ho_RegionOpening, 30, 30);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                HOperatorSet.CountObj(ho_ConnectedRegions, out hv_BigRegionNum);
                ho_SortedRegions.Dispose();
                HOperatorSet.SortRegion(ho_ConnectedRegions, out ho_SortedRegions, "upper_left",
                    "true", "row");
                if ((int)(new HTuple(hv_BigRegionNum.TupleEqual(1))) != 0)
                {
                    if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleXor(new HTuple(hv_isBottomWaferExist.TupleEqual(
                        1)))) != 0)
                    {
                        if ((int)(hv_isTopWaferExist) != 0)
                        {
                            ho_TopRegion.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopRegion, 1);
                        }
                        if ((int)(hv_isBottomWaferExist) != 0)
                        {
                            ho_BottomRegion.Dispose();
                            HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomRegion, 1);
                        }
                    }
                    else if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(
                        new HTuple(hv_isBottomWaferExist.TupleEqual(1)))) != 0)
                    {
                        ho_WaferOfToppart.Dispose(); ho_WaferOfBottompart.Dispose();
                        FindMiddleLine(ho_oriImage, ho_modelContoursOfTop, out ho_WaferOfToppart,
                            out ho_WaferOfBottompart, hv_modelIDOfTop, 0.6, hv_windowHandle, hv_mainLineNum,
                            out hv_RowBeginT, out hv_ColBeginT, out hv_RowEndT, out hv_ColEndT);
                        //
                        ho_TopImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_RedChannelImage, ho_WaferOfToppart, out ho_TopImageReduced
                            );
                        ho_ImageResultTop.Dispose();
                        HOperatorSet.MultImage(ho_TopImageReduced, ho_TopImageReduced, out ho_ImageResultTop,
                            0.03, 0);
                        ho_RegionsOfBinaryThreshold.Dispose();
                        HOperatorSet.BinaryThreshold(ho_ImageResultTop, out ho_RegionsOfBinaryThreshold,
                            "max_separability", "dark", out hv_UsedThreshold);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                10, 1);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ClosingRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                80, 8);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                0.07 * hv_width, 60);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        ho_SelectedRegionsTop.Dispose();
                        HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegionsTop,
                            "max_area", 70);
                        ho_TopRegion.Dispose();
                        HOperatorSet.FillUp(ho_SelectedRegionsTop, out ho_TopRegion);
                        //
                        ho_BottomImageReduced.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageForExtractROI, ho_WaferOfBottompart,
                            out ho_BottomImageReduced);
                        ho_RegionsOfBinaryThreshold.Dispose();
                        HOperatorSet.BinaryThreshold(ho_BottomImageReduced, out ho_RegionsOfBinaryThreshold,
                            "max_separability", "dark", out hv_UsedThreshold1);
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionsOfBinaryThreshold, out ExpTmpOutVar_0,
                                0.07 * hv_width, 60);
                            ho_RegionsOfBinaryThreshold.Dispose();
                            ho_RegionsOfBinaryThreshold = ExpTmpOutVar_0;
                        }
                        ho_SelectedRegionsBottom.Dispose();
                        HOperatorSet.SelectShapeStd(ho_RegionsOfBinaryThreshold, out ho_SelectedRegionsBottom,
                            "max_area", 70);
                        ho_BottomRegion.Dispose();
                        HOperatorSet.FillUp(ho_SelectedRegionsBottom, out ho_BottomRegion);
                    }
                }
                else if ((int)(new HTuple(hv_BigRegionNum.TupleEqual(2))) != 0)
                {
                    if ((int)((new HTuple(hv_isTopWaferExist.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                        1)))) != 0)
                    {
                        ho_TopRegion.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_TopRegion, 1);
                        ho_BottomRegion.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_BottomRegion, 2);
                        if ((int)(new HTuple(hv_isBackDetect.TupleEqual(0))) != 0)
                        {
                            HOperatorSet.RegionFeatures(ho_TopRegion, "width", out hv_TopRegionWidth);
                            if ((int)(new HTuple(hv_TopRegionWidth.TupleGreater(3800))) != 0)
                            {
                                HOperatorSet.RegionFeatures(ho_TopRegion, "height", out hv_TopRegionHeight);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.OpeningRectangle1(ho_TopRegion, out ExpTmpOutVar_0, 1,
                                        hv_TopRegionHeight * 0.6);
                                    ho_TopRegion.Dispose();
                                    ho_TopRegion = ExpTmpOutVar_0;
                                }
                            }
                            HOperatorSet.RegionFeatures(ho_BottomRegion, "width", out hv_BottomRegionWidth);
                            if ((int)(new HTuple(hv_BottomRegionWidth.TupleGreater(3800))) != 0)
                            {
                                HOperatorSet.RegionFeatures(ho_BottomRegion, "height", out hv_BottomRegionHeight);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.OpeningRectangle1(ho_BottomRegion, out ExpTmpOutVar_0,
                                        1, hv_BottomRegionHeight * 0.6);
                                    ho_BottomRegion.Dispose();
                                    ho_BottomRegion = ExpTmpOutVar_0;
                                }
                            }
                        }
                    }
                    else
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "内置参数异常！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Built-in parameter error!";
                        }
                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isGetTRRegionReturn = 1;
                        ho_RegionsOfBinaryThreshold.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_WaferOfToppart.Dispose();
                        ho_WaferOfBottompart.Dispose();
                        ho_TopImageReduced.Dispose();
                        ho_ImageResultTop.Dispose();
                        ho_SelectedRegionsTop.Dispose();
                        ho_BottomImageReduced.Dispose();
                        ho_SelectedRegionsBottom.Dispose();
                        ho_EmptyRegion.Dispose();

                        return;
                    }
                }
                else
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "内置参数异常！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Built-in parameter error!";
                    }
                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isGetTRRegionReturn = 1;
                    ho_RegionsOfBinaryThreshold.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_WaferOfToppart.Dispose();
                    ho_WaferOfBottompart.Dispose();
                    ho_TopImageReduced.Dispose();
                    ho_ImageResultTop.Dispose();
                    ho_SelectedRegionsTop.Dispose();
                    ho_BottomImageReduced.Dispose();
                    ho_SelectedRegionsBottom.Dispose();
                    ho_EmptyRegion.Dispose();

                    return;
                }

                //2020.05.14-判断是否找到真实边界
                ho_EmptyRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_EmptyRegion);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_TopRegion, out hv_TopEdgeRegionIsEqual);
                HOperatorSet.TestEqualRegion(ho_EmptyRegion, ho_BottomRegion, out hv_BottomEdgeRegionIsEqual);
                if ((int)((new HTuple(hv_TopEdgeRegionIsEqual.TupleEqual(1))).TupleAnd(new HTuple(hv_isTopWaferExist.TupleEqual(
                    1)))) != 0)
                {
                    hv_isFoundTopEdgeRegionOut = 0;
                }
                if ((int)((new HTuple(hv_BottomEdgeRegionIsEqual.TupleEqual(1))).TupleAnd(new HTuple(hv_isBottomWaferExist.TupleEqual(
                    1)))) != 0)
                {
                    hv_isFoundBottomEdgeRegionOut = 0;
                }

                ho_RegionsOfBinaryThreshold.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_WaferOfToppart.Dispose();
                ho_WaferOfBottompart.Dispose();
                ho_TopImageReduced.Dispose();
                ho_ImageResultTop.Dispose();
                ho_SelectedRegionsTop.Dispose();
                ho_BottomImageReduced.Dispose();
                ho_SelectedRegionsBottom.Dispose();
                ho_EmptyRegion.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_RegionsOfBinaryThreshold.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SortedRegions.Dispose();
                ho_WaferOfToppart.Dispose();
                ho_WaferOfBottompart.Dispose();
                ho_TopImageReduced.Dispose();
                ho_ImageResultTop.Dispose();
                ho_SelectedRegionsTop.Dispose();
                ho_BottomImageReduced.Dispose();
                ho_SelectedRegionsBottom.Dispose();
                ho_EmptyRegion.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectFunctionForFiveMainLine_COPY_1_COPY_1(HObject ho_imageForFilmDetect,
            HObject ho_detectRegion, HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingOfPartRegion,
            out HObject ho_filmMissOfPartRegion, out HObject ho_headAndTailFilmShiftingOfPartRegion,
            out HObject ho_mainLineRegion, HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_mainLineNum,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_locationMainLineThresh, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_isUsingHeadAndTailFilmShiftingDetect,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmDetectRange, HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_isWeldShield, HTuple hv_weldShieldLength, out HTuple hv_isException,
            out HTuple hv_exceptionInfo, out HTuple hv_isStartWeldingNG, out HTuple hv_filmDistanceArray)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingRegionOut, ho_filmMissRegionOut;
            HObject ho_headAndTailFilmShiftingRegionOut, ho_mainLineRegionOut;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRow = null, hv_CenterColumn = null;
            HTuple hv_Phi = null, hv_halfWidth = null, hv_halfHeight = null;
            HTuple hv_cosValue = null, hv_sinValue = null, hv_RowOfFirstMainLine = null;
            HTuple hv_ColumnOfFirstMainLine = null, hv_FilmDistanceArrayOfFirstMainLine = null;
            HTuple hv_isExceptionOut = null, hv_exceptionInfoOut = null;
            HTuple hv_isStartWeldingNGOut = null, hv_filmDistanceMax = null;
            HTuple hv_RowOfSecondMainLine = null, hv_ColumnOfSecondMainLine = null;
            HTuple hv_FilmDistanceArrayOfSecondMainLine = null, hv_RowOfThirdMainLine = null;
            HTuple hv_ColumnOfThirdMainLine = null, hv_FilmDistanceArrayThirdMainLine = null;
            HTuple hv_RowOfFourthMainLine = null, hv_ColumnOfFourthMainLine = null;
            HTuple hv_FilmDistanceArrayOfFourthMainLine = null, hv_RowOfFifthMainLine = null;
            HTuple hv_ColumnOfFifthMainLine = null, hv_FilmDistanceArrayOfFifthMainLine = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_filmMissOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingOfPartRegion);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegion);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            try
            {
                //**********************************************
                hv_PI = 3.1415926;
                //**********************************************
                //局部变量
                //主栅线宽度(mm)
                //mainLineWidth := 0.6
                //
                //
                //输出
                ho_filmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingOfPartRegion);
                ho_filmMissOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissOfPartRegion);
                ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingOfPartRegion);
                ho_mainLineRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegion);
                //
                //
                //各主栅线宽度数组
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArray);
                //
                //
                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isStartWeldingNG = 0;
                //**********************************************
                //gray_opening_rect (imageForFilmDetect, ImageOpening, 5, 5)
                HOperatorSet.SmallestRectangle2(ho_detectRegion, out hv_CenterRow, out hv_CenterColumn,
                    out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                if ((int)(new HTuple(hv_Phi.TupleGreater(hv_PI / 4))) != 0)
                {
                    hv_Phi = hv_Phi - (hv_PI / 2);
                }
                if ((int)(new HTuple(hv_Phi.TupleLess((-hv_PI) / 4))) != 0)
                {
                    hv_Phi = hv_Phi + (hv_PI / 2);
                }
                //disp_rectangle2 (windowHandle, CenterRow, CenterColumn, Phi, halfWidth, halfHeight)
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                //
                //gray_opening_rect (imageForFilmDetect, imageOpening, 1, mainLineWidth / widthResolution)
                //
                //第一根主栅线
                hv_RowOfFirstMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFirstMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfFirstMainLine, ColumnOfFirstMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFirstMainLine,
                    hv_ColumnOfFirstMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    1, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFirstMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第二根主栅线
                hv_RowOfSecondMainLine = hv_CenterRow + ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfSecondMainLine = (hv_CenterColumn - ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 20;
                //disp_rectangle2 (windowHandle, RowOfSecondMainLine, ColumnOfSecondMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfSecondMainLine,
                    hv_ColumnOfSecondMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    2, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfSecondMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第三根主栅线
                hv_RowOfThirdMainLine = hv_CenterRow.Clone();
                hv_ColumnOfThirdMainLine = hv_CenterColumn.Clone();
                //disp_rectangle2 (windowHandle, RowOfThirdMainLine, ColumnOfThirdMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfThirdMainLine,
                    hv_ColumnOfThirdMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    3, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayThirdMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第四根主栅线
                hv_RowOfFourthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 1) * hv_sinValue);
                hv_ColumnOfFourthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 1) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFourthMainLine, ColumnOfFourthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFourthMainLine,
                    hv_ColumnOfFourthMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    4, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFourthMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                //第五根主栅线
                hv_RowOfFifthMainLine = hv_CenterRow - ((((2 * hv_halfWidth) / 5) * 2) * hv_sinValue);
                hv_ColumnOfFifthMainLine = (hv_CenterColumn + ((((2 * hv_halfWidth) / 5) * 2) * hv_cosValue)) + 10;
                //disp_rectangle2 (windowHandle, RowOfFifthMainLine, ColumnOfFifthMainLine, Phi, 100, halfHeight)
                //常规膜检(膜偏、露白|膜短、膜失) + 头尾膜检 + 主栅线区域
                ho_filmShiftingRegionOut.Dispose(); ho_filmMissRegionOut.Dispose(); ho_headAndTailFilmShiftingRegionOut.Dispose(); ho_mainLineRegionOut.Dispose();
                DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(ho_imageForFilmDetect, ho_detectRegion,
                    ho_ImageForHeadWeldNGDetect, out ho_filmShiftingRegionOut, out ho_filmMissRegionOut,
                    out ho_headAndTailFilmShiftingRegionOut, out ho_mainLineRegionOut, hv_windowHandle,
                    hv_width, hv_height, hv_widthResolution, hv_heightResolution, hv_RowOfFifthMainLine,
                    hv_ColumnOfFifthMainLine, hv_Phi, 100, hv_halfHeight, hv_locationMainLineThresh,
                    hv_topShieldLength, hv_bottomShieldLength, hv_isUsingFilmShiftingDetect,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    5, hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmWidthThresh, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopRegion,
                    hv_isUsingChinese, hv_isBackDetect, hv_filmMissShieldLength, hv_filmMissShieldDetectRange,
                    hv_isWeldShield, hv_weldShieldLength, out hv_FilmDistanceArrayOfFifthMainLine,
                    out hv_isExceptionOut, out hv_exceptionInfoOut, out hv_isStartWeldingNGOut,
                    out hv_filmDistanceMax);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    hv_exceptionInfo = hv_exceptionInfoOut.Clone();
                    ho_filmShiftingRegionOut.Dispose();
                    ho_filmMissRegionOut.Dispose();
                    ho_headAndTailFilmShiftingRegionOut.Dispose();
                    ho_mainLineRegionOut.Dispose();

                    return;
                }
                //
                HOperatorSet.TupleConcat(hv_filmDistanceArray, hv_filmDistanceMax, out hv_filmDistanceArray);
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmShiftingOfPartRegion, ho_filmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_filmShiftingOfPartRegion.Dispose();
                    ho_filmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_filmMissOfPartRegion, ho_filmMissRegionOut, out ExpTmpOutVar_0
                        );
                    ho_filmMissOfPartRegion.Dispose();
                    ho_filmMissOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_headAndTailFilmShiftingOfPartRegion, ho_headAndTailFilmShiftingRegionOut,
                        out ExpTmpOutVar_0);
                    ho_headAndTailFilmShiftingOfPartRegion.Dispose();
                    ho_headAndTailFilmShiftingOfPartRegion = ExpTmpOutVar_0;
                }
                {
                    HObject ExpTmpOutVar_0;
                    HOperatorSet.Union2(ho_mainLineRegion, ho_mainLineRegionOut, out ExpTmpOutVar_0
                        );
                    ho_mainLineRegion.Dispose();
                    ho_mainLineRegion = ExpTmpOutVar_0;
                }
                hv_isStartWeldingNG = hv_isStartWeldingNG.TupleOr(hv_isStartWeldingNGOut);
                //
                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingRegionOut.Dispose();
                ho_filmMissRegionOut.Dispose();
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                ho_mainLineRegionOut.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void DetectFilmDefectOfSingleMainLine_COPY_1_COPY_1(HObject ho_ImageOpening,
            HObject ho_DetectRegion, HObject ho_ImageForHeadWeldNGDetect, out HObject ho_filmShiftingRegionOut,
            out HObject ho_filmMissRegionOut, out HObject ho_headAndTailFilmShiftingRegionOut,
            out HObject ho_mainLineRegionOut, HTuple hv_windowHandle, HTuple hv_imageWidth,
            HTuple hv_imageHeight, HTuple hv_widthResolution, HTuple hv_heightResolution,
            HTuple hv_centerRowOfSingleMainLineDetect, HTuple hv_centerColumnOfSingleMainLineDetect,
            HTuple hv_Phi, HTuple hv_halfWidthOfSingleMainLineDetect, HTuple hv_halfHeightOfSingleMainLineDetect,
            HTuple hv_locationMainLineThresh, HTuple hv_topShieldLength, HTuple hv_bottomShieldLength,
            HTuple hv_isUsingFilmShiftingDetect, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_numOfMainLine,
            HTuple hv_isUsingHeadAndTailFilmShiftingDetect, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmDetectRange,
            HTuple hv_isUsingStartWeldingDetect, HTuple hv_startWeldingDistanceMaxThresh,
            HTuple hv_startWeldingDistanceMinThresh, HTuple hv_isTopRegion, HTuple hv_isUsingChinese,
            HTuple hv_isBackDetect, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_isWeldShield, HTuple hv_weldShieldLength, out HTuple hv_FilmDistanceArray,
            out HTuple hv_isExceptionOut, out HTuple hv_exceptionInfoOut, out HTuple hv_isStartWeldingNG,
            out HTuple hv_filmDistanceMax)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_filmShiftingSmallRectangle = null;
            HObject ho_filmMissSmallRectangle = null, ho_headAndTailFilmShiftingSmallRectangle = null;
            HObject ho_MainLine, ho_EmptyObject;

            // Local control variables 

            HTuple hv_PI = null, hv_undetectMainLineCount = null;
            HTuple hv_DistanceRealWorldTemp = null, hv_DistanceRealWorld = null;
            HTuple hv_WeldShieldTime = null, hv_topShieldPixelLength = null;
            HTuple hv_bottomShieldPixelLength = null, hv_headAndTailFilmShieldPixelLength = null;
            HTuple hv_headAndTailFilmDetectPixelRange = null, hv_filmMissShieldPixelLength = null;
            HTuple hv_filmMissShieldPixelDetectRange = null, hv_weldShieldPixelLength = null;
            HTuple hv_stepPixelDistance = null, hv_cosValue = null;
            HTuple hv_sinValue = null, hv_TotalRowOfLeftMainLinePoints = null;
            HTuple hv_TotalColumnOfLeftMainLinePoints = null, hv_TotalRowOfRightMainLinePoints = null;
            HTuple hv_TotalColumnOfRightMainLinePoints = null, hv_isStartWeldingDetect = null;
            HTuple hv_TotalStep = null, hv_centerRowOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_centerColumnOfHeadAndTailDetectRectangle = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectStartTime = new HTuple();
            HTuple hv_FilmShiftingAndFilmMissDetectEndTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectStartTime = new HTuple();
            HTuple hv_HeadAndTailFilmDetectEndTime = new HTuple();
            HTuple hv_Index = new HTuple(), hv_RowTemp = new HTuple();
            HTuple hv_ColumnTemp = new HTuple(), hv_MeasureHandle = new HTuple();
            HTuple hv_RowOfLeftMainLinePoints = new HTuple(), hv_ColumnOfLeftMainLinePoints = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_NumTempOfLeftPos = new HTuple(), hv_RowOfRightMainLinePoints = new HTuple();
            HTuple hv_ColumnOfRightMainLinePoints = new HTuple(), hv_NumTempOfRightPos = new HTuple();
            HTuple hv_RowStartPoint = new HTuple(), hv_ColumnStartPoint = new HTuple();
            HTuple hv_RowEndPoint = new HTuple(), hv_ColumnEndPoint = new HTuple();
            HTuple hv_DistanceTemp = new HTuple(), hv_startWeldingDetectPixelPos = new HTuple();
            HTuple hv_InverseTotalRowOfRightMainLinePoints = null;
            HTuple hv_InverseTotalColumnOfRightMainLinePoints = null;
            HTuple hv_TotalRow = null, hv_TotalColumn = null, hv_FilmShiftingRegionArea = null;
            HTuple hv_Row = null, hv_Column = null, hv_Length = null;
            HTuple hv_maxValue = null, hv_minValue = null, hv_meanValue = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_filmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_mainLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_filmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_filmMissSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_headAndTailFilmShiftingSmallRectangle);
            HOperatorSet.GenEmptyObj(out ho_MainLine);
            HOperatorSet.GenEmptyObj(out ho_EmptyObject);
            hv_FilmDistanceArray = new HTuple();
            hv_isExceptionOut = new HTuple();
            hv_exceptionInfoOut = new HTuple();
            hv_isStartWeldingNG = new HTuple();
            hv_filmDistanceMax = new HTuple();
            try
            {
                if ((int)((new HTuple((new HTuple((new HTuple(hv_isUsingFilmShiftingDetect.TupleEqual(
                    0))).TupleAnd(new HTuple(hv_isUsingFilmMissDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingHeadAndTailFilmShiftingDetect.TupleEqual(0))))).TupleAnd(
                    new HTuple(hv_isUsingStartWeldingDetect.TupleEqual(0)))) != 0)
                {
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                hv_PI = 3.1415926;
                //*****输出*******
                ho_filmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmShiftingRegionOut);
                ho_filmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_filmMissRegionOut);
                ho_headAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_headAndTailFilmShiftingRegionOut);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_mainLineRegionOut);
                hv_isExceptionOut = 0;
                hv_exceptionInfoOut = "";
                hv_isStartWeldingNG = 0;
                //
                hv_filmDistanceMax = "";
                //
                //***局部变量****
                //未检测到主栅线计数
                hv_undetectMainLineCount = 0;
                //主栅线左右对应点距离默认为-1
                hv_DistanceRealWorldTemp = -1;
                hv_DistanceRealWorld = -1;
                //膜带内缩屏蔽次数
                hv_WeldShieldTime = 0;
                //
                //常规膜检上屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_topShieldLength / hv_heightResolution, out hv_topShieldPixelLength);
                //常规膜检下屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_bottomShieldLength / hv_heightResolution, out hv_bottomShieldPixelLength);
                //
                //头尾膜检屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmShieldLength / hv_heightResolution,
                    out hv_headAndTailFilmShieldPixelLength);
                //头尾膜检像素级长度
                HOperatorSet.TupleFloor(hv_headAndTailFilmDetectRange / hv_heightResolution,
                    out hv_headAndTailFilmDetectPixelRange);
                //
                //膜失、膜短屏蔽缩进距离像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldLength / hv_heightResolution, out hv_filmMissShieldPixelLength);
                //膜失、膜短屏蔽范围像素级长度
                HOperatorSet.TupleFloor(hv_filmMissShieldDetectRange / hv_heightResolution, out hv_filmMissShieldPixelDetectRange);
                //
                //膜带内缩屏蔽像素级长度
                HOperatorSet.TupleFloor(hv_weldShieldLength / hv_heightResolution, out hv_weldShieldPixelLength);
                //
                //
                //膜检采样像素级间隔,默认设置采样间隔为1.5mm
                HOperatorSet.TupleFloor(1.5 / hv_heightResolution, out hv_stepPixelDistance);
                //弧度Phi的Cos值
                HOperatorSet.TupleCos(hv_Phi, out hv_cosValue);
                //弧度Phi的Sin值
                HOperatorSet.TupleSin(hv_Phi, out hv_sinValue);
                //
                //膜宽数组
                HOperatorSet.TupleGenConst(0, 0, out hv_FilmDistanceArray);
                //主栅线左侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfLeftMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfLeftMainLinePoints);
                //主栅线右侧点数组
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalRowOfRightMainLinePoints);
                HOperatorSet.TupleGenConst(0, 0, out hv_TotalColumnOfRightMainLinePoints);
                //
                //是否检测到起焊点异常
                hv_isStartWeldingDetect = 0;
                //
                //膜失、膜短屏蔽区域下片上半部分是否存在
                //isTopPartContainsFilmMissShield := false
                //膜失、膜短屏蔽区域下片下半部分是否存在
                //isBottomPartContainsFilmMissShield := false
                //
                //总寻点次数
                HOperatorSet.TupleFloor(hv_halfHeightOfSingleMainLineDetect / hv_stepPixelDistance,
                    out hv_TotalStep);
                //*******上片处理********
                if ((int)(hv_isTopRegion) != 0)
                {
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        //显示出头尾膜检区域
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect + (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }
                    //
                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);
                    //
                    //上半部分寻点处理
                    HTuple end_val90 = hv_TotalStep;
                    HTuple step_val90 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val90, step_val90); hv_Index = hv_Index.TupleAdd(step_val90))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleLess(
                                0))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleLess(0))))).TupleOr(
                                new HTuple(hv_RowEndPoint.TupleLess(0))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleLess(
                                0)))) != 0)
                            {
                                continue;
                            }
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                }
                            }
                        }
                    }
                    //
                    //下半部分寻点处理
                    HTuple end_val178 = 1;
                    HTuple step_val178 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val178, step_val178); hv_Index = hv_Index.TupleAdd(step_val178))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //
                            //膜短、膜失检测
                            if ((int)(hv_isUsingFilmMissDetect) != 0)
                            {
                                if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                {
                                    if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                        new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }
                            //
                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 40, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 40, 0.3);
                                        ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                            hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_headAndTailFilmShiftingRegionOut.Dispose();
                                            ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectEndTime.TupleLess(
                                        hv_HeadAndTailFilmDetectStartTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            //if (Index >= FilmShiftingAndFilmMissDetectEndTime)
                            hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                            if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                            {
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_Index.TupleLessEqual(2))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }
                            //endif
                        }
                    }
                    //
                    //*******下片处理********
                }
                else
                {
                    //显示出头尾膜检区域
                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                    {
                        hv_centerRowOfHeadAndTailDetectRectangle = hv_centerRowOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_cosValue);
                        hv_centerColumnOfHeadAndTailDetectRectangle = hv_centerColumnOfSingleMainLineDetect - (((hv_halfHeightOfSingleMainLineDetect - (0.5 * hv_headAndTailFilmDetectPixelRange)) - hv_headAndTailFilmShieldPixelLength) * hv_sinValue);
                        HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_centerRowOfHeadAndTailDetectRectangle,
                            hv_centerColumnOfHeadAndTailDetectRectangle, hv_Phi, 150, 0.5 * hv_headAndTailFilmDetectPixelRange);
                    }
                    //
                    //上半部分
                    //常规膜检开始次数
                    HOperatorSet.TupleFloor(hv_topShieldPixelLength / hv_stepPixelDistance, out hv_FilmShiftingAndFilmMissDetectStartTime);
                    //头尾膜检开始次数
                    HOperatorSet.TupleFloor(hv_headAndTailFilmShieldPixelLength / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectStartTime);
                    //头尾膜检截止次数
                    HOperatorSet.TupleFloor((hv_headAndTailFilmShieldPixelLength + hv_headAndTailFilmDetectPixelRange) / hv_stepPixelDistance,
                        out hv_HeadAndTailFilmDetectEndTime);
                    //下半部分
                    //常规膜检截止次数
                    HOperatorSet.TupleFloor(hv_bottomShieldPixelLength / hv_stepPixelDistance,
                        out hv_FilmShiftingAndFilmMissDetectEndTime);
                    //
                    //膜带内缩屏蔽次数
                    if ((int)(hv_isWeldShield) != 0)
                    {
                        HOperatorSet.TupleFloor(hv_weldShieldPixelLength / hv_stepPixelDistance,
                            out hv_WeldShieldTime);
                    }
                    //
                    //
                    //膜短、膜失屏蔽起始次数
                    //tuple_floor (filmMissShieldPixelLength/stepPixelDistance, filmMissShieldStartTime)
                    //膜短、膜失屏蔽截止次数
                    //tuple_floor ((filmMissShieldPixelLength + filmMissShieldPixelDetectRange)/stepPixelDistance, filmMissShieldEndTime)
                    //
                    //10.31 判断膜失屏蔽区域处于下半片上下哪部分
                    //if (filmMissShieldStartTime >= TotalStep)
                    //filmMissShieldStartTime := 2*TotalStep - filmMissShieldStartTime
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //isBottomPartContainsFilmMissShield := true
                    //elseif (filmMissShieldEndTime <= TotalStep and filmMissShieldEndTime>=1)
                    //isTopPartContainsFilmMissShield := true
                    //elseif (filmMissShieldStartTime>=0 and filmMissShieldEndTime>1)
                    //isTopPartContainsFilmMissShield := true
                    //isBottomPartContainsFilmMissShield := true
                    //filmMissShieldEndTime := 2*TotalStep - filmMissShieldEndTime
                    //endif
                    //
                    //上半部分寻点处理
                    //2019-4-11 2修改为1防止有膜带的时候断裂造成漏检
                    HTuple end_val344 = hv_TotalStep;
                    HTuple step_val344 = 1;
                    for (hv_Index = 1; hv_Index.Continue(end_val344, step_val344); hv_Index = hv_Index.TupleAdd(step_val344))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect - ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "bilinear",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //7.18添加背面记录栅线距离条件
                            //if (isBackDetect)
                            //if (Index >= FilmShiftingAndFilmMissDetectStartTime)
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif
                            //else
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //endif
                            //
                            //判断起焊点是否异常2019-5-23增加Index >= 2避免第一个点找到片间距的膜带
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(2))) != 0)
                            {
                                if ((int)(hv_isUsingStartWeldingDetect) != 0)
                                {
                                    if ((int)(hv_isStartWeldingDetect.TupleNot()) != 0)
                                    {
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_weldWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            hv_isStartWeldingDetect = 1;
                                            hv_startWeldingDetectPixelPos = hv_Index * hv_stepPixelDistance;
                                            if ((int)((new HTuple(hv_startWeldingDetectPixelPos.TupleGreaterEqual(
                                                hv_startWeldingDistanceMinThresh / hv_heightResolution))).TupleAnd(
                                                new HTuple(hv_startWeldingDetectPixelPos.TupleLessEqual(hv_startWeldingDistanceMaxThresh / hv_heightResolution)))) != 0)
                                            {
                                                hv_isStartWeldingNG = 0;
                                            }
                                            else
                                            {
                                                //2019-4-11添加显示
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                        //避免无焊带检测不到起焊点不报NG问题
                                        if ((int)(new HTuple(hv_Index.TupleEqual(hv_TotalStep))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_isStartWeldingDetect.TupleEqual(0))) != 0)
                                            {
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 40, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 40, 0.3);
                                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                                hv_isStartWeldingNG = 1;
                                            }
                                        }
                                    }
                                }
                            }
                            //
                            //2020.04.22 膜短、膜失检测
                            if ((int)(hv_isUsingFilmMissDetect) != 0)
                            {
                                if ((int)((new HTuple(hv_Index.TupleGreaterEqual(1 + hv_WeldShieldTime))).TupleAnd(
                                    new HTuple(hv_Index.TupleLessEqual(2 + hv_WeldShieldTime)))) != 0)
                                {
                                    if ((int)((new HTuple(hv_DistanceRealWorld.TupleLessEqual(hv_weldWidthThresh))).TupleAnd(
                                        new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(0)))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }
                            //
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    //2019-4-12避免头尾膜和常规膜检区域交叉。
                                    if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                    {
                                        //规避头尾膜检测区域
                                        if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectEndTime))) != 0)
                                        {
                                            if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                            {
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                    hv_ColumnStartPoint, 20, 0.3);
                                                HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                    hv_ColumnEndPoint, 20, 0.3);
                                                ho_filmShiftingSmallRectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle,
                                                    hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                    hv_stepPixelDistance);
                                                {
                                                    HObject ExpTmpOutVar_0;
                                                    HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                        out ExpTmpOutVar_0);
                                                    ho_filmShiftingRegionOut.Dispose();
                                                    ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                                }
                                            }
                                        }
                                    }
                                    else if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(
                                        hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect == true and isWeldShield == false)
                                //if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //10.31 添加膜失、膜短屏蔽区域各判断条件
                                //判断如果膜失、膜短屏蔽区域上下部分都存在
                                //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                //if (Index < filmMissShieldStartTime)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域只存在上半部分
                                //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                                //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                                //elseif (isTopPartContainsFilmMissShield == false)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 记录膜宽数组
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //判断是否在头尾膜检区域内
                            if ((int)((new HTuple(hv_Index.TupleGreaterEqual(hv_HeadAndTailFilmDetectStartTime))).TupleAnd(
                                new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime)))) != 0)
                            {
                                if ((int)(hv_isUsingHeadAndTailFilmShiftingDetect) != 0)
                                {
                                    //头尾膜偏、露白检测
                                    //2019-5-22避免漏检
                                    HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi,
                                        hv_halfWidthOfSingleMainLineDetect, hv_stepPixelDistance / 2, hv_imageWidth,
                                        hv_imageHeight, "bilinear", out hv_MeasureHandle);
                                    //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //主栅线左侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageForHeadWeldNGDetect, hv_MeasureHandle,
                                        1, hv_locationMainLineThresh, "positive", "first", out hv_RowOfLeftMainLinePoints,
                                        out hv_ColumnOfLeftMainLinePoints, out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                                    //主栅线右侧寻点
                                    HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                        "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                        out hv_Amplitude, out hv_Distance);
                                    HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                                    //判断是否检测到主栅线左右侧点
                                    if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(
                                        new HTuple(hv_NumTempOfRightPos.TupleGreater(0)))) != 0)
                                    {
                                        //计算主栅线单个小检测框中左右边缘点的像素距离
                                        HOperatorSet.DistancePp(hv_RowOfLeftMainLinePoints, hv_ColumnOfLeftMainLinePoints,
                                            hv_RowOfRightMainLinePoints, hv_ColumnOfRightMainLinePoints,
                                            out hv_DistanceTemp);
                                        hv_DistanceRealWorld = hv_DistanceTemp * hv_widthResolution;
                                        if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_headAndTailFilmWidthThresh))) != 0)
                                        {
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                                hv_ColumnStartPoint, 40, 0.3);
                                            HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                                hv_ColumnEndPoint, 40, 0.3);
                                            ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                                            HOperatorSet.GenRectangle2(out ho_headAndTailFilmShiftingSmallRectangle,
                                                hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                                hv_stepPixelDistance);
                                            {
                                                HObject ExpTmpOutVar_0;
                                                HOperatorSet.Union2(ho_headAndTailFilmShiftingRegionOut, ho_headAndTailFilmShiftingSmallRectangle,
                                                    out ExpTmpOutVar_0);
                                                ho_headAndTailFilmShiftingRegionOut.Dispose();
                                                ho_headAndTailFilmShiftingRegionOut = ExpTmpOutVar_0;
                                            }
                                            //赋值左侧的点
                                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(
                                                0);
                                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                                            //赋值右侧的点
                                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(
                                                0);
                                        }
                                    }
                                    //8.28 修改膜宽数组记录条件
                                    if ((int)(new HTuple(hv_FilmShiftingAndFilmMissDetectStartTime.TupleLess(
                                        hv_HeadAndTailFilmDetectEndTime))) != 0)
                                    {
                                        if ((int)((new HTuple(hv_Index.TupleLess(hv_HeadAndTailFilmDetectEndTime))).TupleAnd(
                                            new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectStartTime)))) != 0)
                                        {
                                            HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                                out hv_FilmDistanceArray);
                                        }
                                    }
                                }
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            //左侧点列坐标左移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint - 20,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            //右侧点列坐标右移20个像素，防止鱼叉状电池片主栅线造成边角误检问题
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint + 20,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                            if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(1))) != 0)
                            {
                                //膜短、膜失检测
                                if ((int)(hv_isUsingFilmMissDetect) != 0)
                                {
                                    if ((int)((new HTuple(hv_Index.TupleGreaterEqual(1 + hv_WeldShieldTime))).TupleAnd(
                                        new HTuple(hv_Index.TupleLessEqual(2 + hv_WeldShieldTime)))) != 0)
                                    {
                                        ho_filmMissSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmMissSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmMissRegionOut, ho_filmMissSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmMissRegionOut.Dispose();
                                            ho_filmMissRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                            }
                            //
                            //if (Index >= FilmShiftingAndFilmMissDetectStartTime and isWeldShield == false)
                            //undetectMainLineCount := undetectMainLineCount + 1
                            //2019-4-10 3改为1
                            //if (undetectMainLineCount >=1)
                            //膜短、膜失检测
                            //if (isUsingFilmMissDetect)
                            //if (Index >= 1 + WeldShieldTime and Index <= 2 + WeldShieldTime)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //10.31 添加膜失、膜短屏蔽区域各判断条件
                            //判断如果膜失、膜短屏蔽区域上下部分都存在
                            //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                            //if (Index < filmMissShieldStartTime)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //如果膜失、膜短屏蔽区域只存在上半部分
                            //elseif ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == false))
                            //if ((Index < filmMissShieldStartTime) or (Index > filmMissShieldEndTime))
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //如果膜失、膜短屏蔽区域不存在或只存在下半部分
                            //elseif (isTopPartContainsFilmMissShield == false)
                            //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                            //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                            //endif
                            //endif
                            //endif
                            //endif
                            //endif
                        }
                    }
                    //
                    //下半部分寻点处理
                    HTuple end_val586 = 1;
                    HTuple step_val586 = -1;
                    for (hv_Index = hv_TotalStep; hv_Index.Continue(end_val586, step_val586); hv_Index = hv_Index.TupleAdd(step_val586))
                    {
                        hv_RowTemp = hv_centerRowOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_cosValue);
                        hv_ColumnTemp = hv_centerColumnOfSingleMainLineDetect + ((hv_halfHeightOfSingleMainLineDetect - (hv_stepPixelDistance * hv_Index)) * hv_sinValue);
                        if ((int)((new HTuple(hv_RowTemp.TupleLess(0))).TupleOr(new HTuple(hv_ColumnTemp.TupleLess(
                            0)))) != 0)
                        {
                            continue;
                        }
                        //disp_rectangle2 (windowHandle, RowTemp, ColumnTemp, Phi, 100, StepDistance)
                        HOperatorSet.GenMeasureRectangle2(hv_RowTemp, hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                            hv_stepPixelDistance / 2, hv_imageWidth, hv_imageHeight, "nearest_neighbor",
                            out hv_MeasureHandle);
                        if ((int)(hv_isBackDetect) != 0)
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        else
                        {
                            //主栅线左侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "positive", "first", out hv_RowOfLeftMainLinePoints, out hv_ColumnOfLeftMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfLeftMainLinePoints, out hv_NumTempOfLeftPos);
                            //主栅线右侧寻点
                            HOperatorSet.MeasurePos(ho_ImageOpening, hv_MeasureHandle, 1, hv_locationMainLineThresh,
                                "negative", "last", out hv_RowOfRightMainLinePoints, out hv_ColumnOfRightMainLinePoints,
                                out hv_Amplitude, out hv_Distance);
                            HOperatorSet.TupleLength(hv_RowOfRightMainLinePoints, out hv_NumTempOfRightPos);
                        }
                        HOperatorSet.CloseMeasure(hv_MeasureHandle);
                        //判断是否检测到主栅线左右侧点
                        if ((int)((new HTuple(hv_NumTempOfLeftPos.TupleGreater(0))).TupleAnd(new HTuple(hv_NumTempOfRightPos.TupleGreater(
                            0)))) != 0)
                        {
                            //赋值左侧的点
                            hv_RowStartPoint = hv_RowOfLeftMainLinePoints.TupleSelect(0);
                            hv_ColumnStartPoint = hv_ColumnOfLeftMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowStartPoint, ColumnStartPoint, 20, 0.3)
                            //赋值右侧的点
                            hv_RowEndPoint = hv_RowOfRightMainLinePoints.TupleSelect(0);
                            hv_ColumnEndPoint = hv_ColumnOfRightMainLinePoints.TupleSelect(0);
                            //disp_cross (windowHandle, RowEndPoint, ColumnEndPoint, 20, 0.3)
                            //
                            //判断定位到的点是否出界
                            if ((int)((new HTuple((new HTuple((new HTuple(hv_RowStartPoint.TupleGreaterEqual(
                                hv_imageHeight))).TupleOr(new HTuple(hv_ColumnStartPoint.TupleGreaterEqual(
                                hv_imageWidth))))).TupleOr(new HTuple(hv_RowEndPoint.TupleGreaterEqual(
                                hv_imageHeight))))).TupleOr(new HTuple(hv_ColumnEndPoint.TupleGreaterEqual(
                                hv_imageWidth)))) != 0)
                            {
                                continue;
                            }
                            //
                            //计算主栅线单个小检测框中左右边缘点的像素距离
                            HOperatorSet.DistancePp(hv_RowStartPoint, hv_ColumnStartPoint, hv_RowEndPoint,
                                hv_ColumnEndPoint, out hv_DistanceTemp);
                            hv_DistanceRealWorldTemp = hv_DistanceTemp * hv_widthResolution;
                            hv_DistanceRealWorld = hv_DistanceRealWorldTemp + hv_filmWidthOffSet;
                            //tuple_concat (FilmDistanceArray, DistanceRealWorld, FilmDistanceArray)
                            //
                            //判断是否在常规膜检区域内
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                //膜偏、露白检测
                                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                                {
                                    if ((int)(new HTuple(hv_DistanceRealWorld.TupleGreaterEqual(hv_filmWidthThresh))) != 0)
                                    {
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowStartPoint,
                                            hv_ColumnStartPoint, 20, 0.3);
                                        HOperatorSet.DispCross(hv_ExpDefaultWinHandle, hv_RowEndPoint,
                                            hv_ColumnEndPoint, 20, 0.3);
                                        ho_filmShiftingSmallRectangle.Dispose();
                                        HOperatorSet.GenRectangle2(out ho_filmShiftingSmallRectangle, hv_RowTemp,
                                            hv_ColumnTemp, hv_Phi, hv_halfWidthOfSingleMainLineDetect,
                                            hv_stepPixelDistance);
                                        {
                                            HObject ExpTmpOutVar_0;
                                            HOperatorSet.Union2(ho_filmShiftingRegionOut, ho_filmShiftingSmallRectangle,
                                                out ExpTmpOutVar_0);
                                            ho_filmShiftingRegionOut.Dispose();
                                            ho_filmShiftingRegionOut = ExpTmpOutVar_0;
                                        }
                                    }
                                }
                                //膜短、膜失检测
                                //if (isUsingFilmMissDetect)
                                //if (Index <= 5)
                                //if (DistanceRealWorld <= weldWidthThresh and DistanceRealWorld >= 0)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //10.31 添加膜失、膜短屏蔽区域各判断条件
                                //判断如果膜失、膜短屏蔽区域上下部分都存在
                                //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                //if (Index < filmMissShieldEndTime)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域只存在下半部分
                                //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                //elseif (isBottomPartContainsFilmMissShield == false)
                                //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                //endif
                                //endif
                                //endif
                                //endif
                                //主栅线断开暂不考虑
                                //8.28 修改膜宽数组记录条件
                                HOperatorSet.TupleConcat(hv_FilmDistanceArray, hv_DistanceRealWorld,
                                    out hv_FilmDistanceArray);
                            }
                            //
                            //记录所寻的点
                            HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_RowStartPoint,
                                out hv_TotalRowOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_ColumnStartPoint,
                                out hv_TotalColumnOfLeftMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalRowOfRightMainLinePoints, hv_RowEndPoint,
                                out hv_TotalRowOfRightMainLinePoints);
                            HOperatorSet.TupleConcat(hv_TotalColumnOfRightMainLinePoints, hv_ColumnEndPoint,
                                out hv_TotalColumnOfRightMainLinePoints);
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Index.TupleGreaterEqual(hv_FilmShiftingAndFilmMissDetectEndTime))) != 0)
                            {
                                hv_undetectMainLineCount = hv_undetectMainLineCount + 1;
                                if ((int)(new HTuple(hv_undetectMainLineCount.TupleGreaterEqual(3))) != 0)
                                {
                                    //膜短、膜失检测
                                    //if (isUsingFilmMissDetect)
                                    //if (Index <= 5)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //10.31 添加膜失、膜短屏蔽区域各判断条件
                                    //判断如果膜失、膜短屏蔽区域上下部分都存在
                                    //if ((isTopPartContainsFilmMissShield == true) and (isBottomPartContainsFilmMissShield == true))
                                    //if (Index < filmMissShieldEndTime)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域只存在下半部分
                                    //elseif ((isTopPartContainsFilmMissShield == false) and (isBottomPartContainsFilmMissShield == true))
                                    //if ((Index > filmMissShieldStartTime) or (Index < filmMissShieldEndTime))
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //如果膜失、膜短屏蔽区域不存在或只存在上半部分
                                    //elseif (isBottomPartContainsFilmMissShield == false)
                                    //gen_rectangle2 (filmMissSmallRectangle, RowTemp, ColumnTemp, Phi, halfWidthOfSingleMainLineDetect, stepPixelDistance)
                                    //union2 (filmMissRegionOut, filmMissSmallRectangle, filmMissRegionOut)
                                    //endif
                                    //endif
                                    //endif
                                }
                            }
                        }
                    }
                }
                //
                //********根据主栅线边缘点提取出主栅线Region***********
                if ((int)((new HTuple((new HTuple(hv_TotalRowOfRightMainLinePoints.TupleLength()
                    )).TupleLessEqual(0))).TupleOr(new HTuple((new HTuple(hv_TotalRowOfLeftMainLinePoints.TupleLength()
                    )).TupleLessEqual(0)))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }
                    //
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleInverse(hv_TotalRowOfRightMainLinePoints, out hv_InverseTotalRowOfRightMainLinePoints);
                HOperatorSet.TupleInverse(hv_TotalColumnOfRightMainLinePoints, out hv_InverseTotalColumnOfRightMainLinePoints);
                HOperatorSet.TupleConcat(hv_TotalRowOfLeftMainLinePoints, hv_InverseTotalRowOfRightMainLinePoints,
                    out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumnOfLeftMainLinePoints, hv_InverseTotalColumnOfRightMainLinePoints,
                    out hv_TotalColumn);
                HOperatorSet.TupleConcat(hv_TotalRow, hv_TotalRowOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalRow);
                HOperatorSet.TupleConcat(hv_TotalColumn, hv_TotalColumnOfLeftMainLinePoints.TupleSelect(
                    0), out hv_TotalColumn);
                ho_MainLine.Dispose();
                HOperatorSet.GenRegionPolygon(out ho_MainLine, hv_TotalRow, hv_TotalColumn);
                ho_mainLineRegionOut.Dispose();
                HOperatorSet.FillUp(ho_MainLine, out ho_mainLineRegionOut);
                //
                //根据主栅线左右侧点提取出主栅线Region
                //获取检测区域外轮廓
                //gen_contour_region_xld (DetectRegion, DetectRegionContours, 'border')
                //左侧点拟合直线
                //gen_contour_polygon_xld (subLeftMainLine, TotalRowOfLeftMainLinePoints, TotalColumnOfLeftMainLinePoints)
                //fit_line_contour_xld (subLeftMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, AngleOfSubLeftMainLine)
                //左侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubLeftMainLine, ColBeginOfSubLeftMainLine, RowEndOfSubLeftMainLine, ColEndOfSubLeftMainLine, RowOfLeftIntersectionPoints, ColumnOfLeftInterSectionPoints, IsOverlapping)
                //右侧点拟合直线
                //gen_contour_polygon_xld (subRightMainLine, TotalRowOfRightMainLinePoints, TotalColumnOfRightMainLinePoints)
                //fit_line_contour_xld (subRightMainLine, 'tukey', -1, 0, 5, 2, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, Nr, Nc, Dist)
                //angle_lx (RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, AngleOfSubRightMainLine)
                //右侧点拟合直线与检测区域外轮廓交点
                //intersection_line_contour_xld (DetectRegionContours, RowBeginOfSubRightMainLine, ColBeginOfSubRightMainLine, RowEndOfSubRightMainLine, ColEndOfSubRightMainLine, RowOfRightIntersectionPoints, ColumnOfRightInterSectionPoints, IsOverlapping)
                //主栅线矩形
                //tuple_concat (RowOfLeftIntersectionPoints, RowOfRightIntersectionPoints, RowTempConcat)
                //tuple_concat (ColumnOfLeftInterSectionPoints, ColumnOfRightInterSectionPoints, ColumnTempConcat)
                //gen_contour_polygon_xld (TempContour, RowTempConcat, ColumnTempConcat)
                //smallest_rectangle2_xld (TempContour, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //gen_rectangle2 (mainLineRegionOut, CenterRowOfMainLine, CenterColumnOfMainLine, PhiOfMainLine, HalfWidthOfMainLine, HalfHeightOfMainLine)
                //
                //在主栅线中心显示结果
                ho_EmptyObject.Dispose();
                HOperatorSet.GenEmptyObj(out ho_EmptyObject);
                HOperatorSet.AreaCenter(ho_filmShiftingRegionOut, out hv_FilmShiftingRegionArea,
                    out hv_Row, out hv_Column);
                HOperatorSet.TupleLength(hv_FilmDistanceArray, out hv_Length);
                if ((int)(new HTuple(hv_Length.TupleLessEqual(0))) != 0)
                {
                    hv_isExceptionOut = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfoOut = "无法检测到主栅线";
                    }
                    else
                    {
                        hv_exceptionInfoOut = "Cannot find busbar";
                    }
                    //
                    ho_filmShiftingSmallRectangle.Dispose();
                    ho_filmMissSmallRectangle.Dispose();
                    ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                    ho_MainLine.Dispose();
                    ho_EmptyObject.Dispose();

                    return;
                }
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".2f", out hv_maxValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMin(), ".2f", out hv_minValue);
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMean(), ".2f", out hv_meanValue);
                //
                HOperatorSet.TupleString(hv_FilmDistanceArray.TupleMax(), ".3f", out hv_filmDistanceMax);
                if ((int)(hv_isUsingFilmShiftingDetect) != 0)
                {
                    if ((int)(new HTuple(hv_FilmShiftingRegionArea.TupleGreater(0))) != 0)
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect - 200,
                            hv_centerColumnOfSingleMainLineDetect - 450, "red");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red')
                        //
                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'red', 'false')
                    }
                    else
                    {
                        disp_message_UserDefine(hv_windowHandle, "Max: " + hv_maxValue, hv_centerRowOfSingleMainLineDetect - 200,
                            hv_centerColumnOfSingleMainLineDetect - 450, "green");
                        //disp_message_UserDefine (windowHandle, 'Min: ' + minValue, centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green')
                        //disp_message_UserDefine (windowHandle, 'Avg: ' + meanValue, centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green')
                        //
                        //disp_message (windowHandle, 'Max: ' + maxValue, 'image', centerRowOfSingleMainLineDetect-200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Min: ' + minValue, 'image', centerRowOfSingleMainLineDetect, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                        //disp_message (windowHandle, 'Avg: ' + meanValue, 'image', centerRowOfSingleMainLineDetect+200, centerColumnOfSingleMainLineDetect-450, 'green', 'false')
                    }
                }
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_filmShiftingSmallRectangle.Dispose();
                ho_filmMissSmallRectangle.Dispose();
                ho_headAndTailFilmShiftingSmallRectangle.Dispose();
                ho_MainLine.Dispose();
                ho_EmptyObject.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void ProcessingTRImage(HObject ho_oriImage, HObject ho_modelContoursOfTop,
            out HObject ho_totalFilmShiftingRegionOut, out HObject ho_totalFilmMissRegionOut,
            out HObject ho_totalHeadAndTailFilmShiftingRegionOut, out HObject ho_totalEdgeDefectRegionOut,
            out HObject ho_totalSurfaceDefectRegionOut, out HObject ho_totalBrokenLineRegionOut,
            HTuple hv_width, HTuple hv_height, HTuple hv_windowHandle, HTuple hv_mainLineNum,
            HTuple hv_isFullWafer, HTuple hv_subMainLineNum, HTuple hv_isBackDetect, HTuple hv_isUsingWidthResolutionCalibrate,
            HTuple hv_widthResolution, HTuple hv_waferWidth, HTuple hv_isUsingHeightResolutionCalibrate,
            HTuple hv_heightResolution, HTuple hv_viceLineInterval, HTuple hv_isUsingFilmShiftingDetect,
            HTuple hv_topShieldLengthOfTopRegion, HTuple hv_bottomShieldLengthOfTopRegion,
            HTuple hv_topShieldLengthOfBottomRegion, HTuple hv_bottomShieldLengthOfBottomRegion,
            HTuple hv_locationMainLineThresh, HTuple hv_filmWidthThresh, HTuple hv_filmWidthOffSet,
            HTuple hv_firstDetectPosForTopRegion, HTuple hv_secondDetectPosForTopRegion,
            HTuple hv_firstDetectPosForBottomRegion, HTuple hv_secondDetectPosForBottomRegion,
            HTuple hv_isUsingFilmMissDetect, HTuple hv_weldWidthThresh, HTuple hv_isUsingHeadAndTailFilmShiftingDetect,
            HTuple hv_headAndTailFilmWidthThresh, HTuple hv_headAndTailFilmShieldLength,
            HTuple hv_headAndTailFilmDetectRange, HTuple hv_isUsingWaferEdgeCalibration,
            HTuple hv_locationWaferEdgeThresh, HTuple hv_waferEdgeCalibrationRegionDilationPixel,
            HTuple hv_isUsingDistanceDetect, HTuple hv_minimumDistanceThresh, HTuple hv_maxDistanceThresh,
            HTuple hv_classDistanceThresh, HTuple hv_isUsingEdgeDefectDetect, HTuple hv_edgeBigDefectWidthThresh,
            HTuple hv_edgeBigDefectHeightThresh, HTuple hv_edgeSmallDefectDetectDepth, HTuple hv_edgeSmallDefectGrayThresh,
            HTuple hv_edgeSmallDefectWidthThresh, HTuple hv_edgeSmallDefectHeightThresh,
            HTuple hv_edgeSmallDefectGrayMeanThresh, HTuple hv_edgeSmallDefectGrayDeviationThresh,
            HTuple hv_cornerDefectAreaRatioThresh, HTuple hv_isUsingSurfaceDefectDetect,
            HTuple hv_surfaceDefectGrayThresh, HTuple hv_surfaceDefectWidthThresh, HTuple hv_surfaceDefectHeightThresh,
            HTuple hv_surfaceDefectDetectIndentDepth, HTuple hv_filmMissShieldLength, HTuple hv_filmMissShieldDetectRange,
            HTuple hv_surfaceDefectViceLineShieldRightPosOffSet, HTuple hv_surfaceScratchGrayThresh,
            HTuple hv_surfaceScratchWidthThresh, HTuple hv_surfaceScratchHeightThresh, HTuple hv_isUsingStartWeldingDetect,
            HTuple hv_startWeldingDistanceMaxThresh, HTuple hv_startWeldingDistanceMinThresh,
            HTuple hv_isUsingBrokenLineDetect, HTuple hv_brokenLineGrayThresh, HTuple hv_brokenLineWidthThresh,
            HTuple hv_brokenLineHeightThresh, HTuple hv_brokenLineDetectIndentDepth, HTuple hv_isUsingSurfaceColorDiffDetect,
            HTuple hv_isUsingChinese, HTuple hv_weldShieldLength, HTuple hv_modelIDOfTop,
            HTuple hv_twoMainLineDistance, out HTuple hv_isException, out HTuple hv_exceptionInfo,
            out HTuple hv_isTopWaferExist, out HTuple hv_isBottomWaferExist, out HTuple hv_isWidthResolutionCalibrateFinish,
            out HTuple hv_widthResolutionOut, out HTuple hv_isHeightResolutionCalibrateFinish,
            out HTuple hv_heightResolutionOut, out HTuple hv_isFilmShiftingOfTopWafer, out HTuple hv_isFilmShiftingOfBottomWafer,
            out HTuple hv_isFilmMissOfTopWafer, out HTuple hv_isFilmMissOfBottomWafer, out HTuple hv_isHeadAndTailFilmShiftingOfTopWafer,
            out HTuple hv_isHeadAndTailFilmShiftingOfBottomWafer, out HTuple hv_isEdgeDefectOfTopWafer,
            out HTuple hv_isEdgeDefectOfBottomWafer, out HTuple hv_isDistanceNG, out HTuple hv_isNextClass,
            out HTuple hv_isSurfaceDefectOfTopWafer, out HTuple hv_isSurfaceDefectOfBottomWafer,
            out HTuple hv_isSurfaceScratchOfTopWafer, out HTuple hv_isSurfaceScratchOfBottomWafer,
            out HTuple hv_isBrokenLineOfTopWafer, out HTuple hv_isBrokenLineOfBottomWafer,
            out HTuple hv_isStartWeldingNGOfBottomWafer, out HTuple hv_surfaceMeanGrayOfTopWaferOut,
            out HTuple hv_surfaceMeanGrayOfBottomWaferOut, out HTuple hv_IsTopWaferNG, out HTuple hv_IsBottomWaferNG,
            out HTuple hv_IsHeadOfWaferNG, out HTuple hv_IsTailOfWaferNG, out HTuple hv_filmDistanceArrayOfTopWafer,
            out HTuple hv_filmDistanceArrayOfBottomWafer)
        {




            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_TopMainLineRegions, ho_BottomMainLineRegions;
            HObject ho_TopEdgeDetectRegion, ho_BottomEdgeDetectRegion;
            HObject ho_totalEdgeDefectOfTopRegion, ho_totalEdgeDefectOfBottomRegion;
            HObject ho_CalibrateTopAroundRegion, ho_CalibrateBottomAroundRegion;
            HObject ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance;
            HObject ho_BottomRegionForDistance, ho_RedChannelImage;
            HObject ho_GreenChannelImage, ho_BlueChannelImage, ho_ImageForFilmDetect;
            HObject ho_ImageForWeldNGDetect, ho_ImageForHeadWeldNGDetect;
            HObject ho_ImageForExtractROI, ho_RectangleForTopRegionExist;
            HObject ho_RectangleForBottomRegionExist, ho_RegionOpening;
            HObject ho_ImageForJudgeBackColor, ho_SelectedRegions, ho_RegionFillUp;
            HObject ho_BackGrayImageForWeldNGDetect, ho_MaxRectangleTopRegion;
            HObject ho_MaxRectangleBottomRegion, ho_RegionDifference1 = null;
            HObject ho_RegionOpening1 = null, ho_RegionDifference2 = null;
            HObject ho_RegionOpening2 = null;

            // Local control variables 

            HTuple hv_PI = null, hv_isLinearityNGDetect = null;
            HTuple hv_isBackGrayColor = null, hv_isWeldShield = null;
            HTuple hv_CenterRowOfTopRegion = null, hv_CenterColumnOfTopRegion = null;
            HTuple hv_CenterRowOfBottomRegion = null, hv_CenterColumnOfBottomRegion = null;
            HTuple hv_minimumArea = null, hv_maxArea = null, hv_isTopRegionCalibrateFinish = null;
            HTuple hv_isBottomRegionCalibrateFinish = null, hv_RowOfLeftCornerPointTopRegion = null;
            HTuple hv_ColumnOfLeftCornerPointTopRegion = null, hv_RowOfRightCornerPointTopRegion = null;
            HTuple hv_ColumnOfRightCornerPointTopRegion = null, hv_RowOfLeftCornerPointBottomRegion = null;
            HTuple hv_ColumnOfLeftCornerPointBottomRegion = null, hv_RowOfRightCornerPointBottomRegion = null;
            HTuple hv_ColumnOfRightCornerPointBottomRegion = null;
            HTuple hv_mainLineWidth = null, hv_isPretreatmentReturn = null;
            HTuple hv_isGetTRRegionReturn = null, hv_isFoundTopEdgeRegionOut = null;
            HTuple hv_isFoundBottomEdgeRegionOut = null, hv_RowOfLeftCornerPointTopRegion1 = null;
            HTuple hv_ColumnOfLeftCornerPointTopRegion1 = null, hv_RowOfRightCornerPointTopRegion1 = null;
            HTuple hv_ColumnOfRightCornerPointTopRegion1 = null, hv_RowOfLeftCornerPointBottomRegion1 = null;
            HTuple hv_ColumnOfLeftCornerPointBottomRegion1 = null;
            HTuple hv_RowOfRightCornerPointBottomRegion1 = null, hv_ColumnOfRightCornerPointBottomRegion1 = null;
            HTuple hv_IsDetectRegionNG = null, hv_IsHeadOrTailNG = null;
            HTuple hv_isDetectOfTopWafer = null, hv_isDetectOfBottomWafer = null;
            HTuple hv_TopRegionForDistanceArea = null, hv_Row1 = null;
            HTuple hv_Column1 = null, hv_BottomRegionForDistanceArea = null;
            HTuple hv_Row2 = null, hv_Column2 = null, hv_IsTopMonocrystalline = null;
            HTuple hv_IsBottomMonocrystalline = null, hv_PhiOfTopRegion = new HTuple();
            HTuple hv_HalfWidthOfTopRegion = new HTuple(), hv_HalfHeightOfTopRegion = new HTuple();
            HTuple hv_TopTwoConnerRegionArea = new HTuple(), hv_PhiOfBottomRegion = new HTuple();
            HTuple hv_HalfWidthOfBottomRegion = new HTuple(), hv_HalfHeightOfBottomRegion = new HTuple();
            HTuple hv_BottomTwoConnerRegionArea = new HTuple(), hv_isStartWeldingNGOut = null;
            HTuple hv_heightResolution_COPY_INP_TMP = hv_heightResolution.Clone();
            HTuple hv_twoMainLineDistance_COPY_INP_TMP = hv_twoMainLineDistance.Clone();
            HTuple hv_widthResolution_COPY_INP_TMP = hv_widthResolution.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_totalFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalFilmMissRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalHeadAndTailFilmShiftingRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalSurfaceDefectRegionOut);
            HOperatorSet.GenEmptyObj(out ho_totalBrokenLineRegionOut);
            HOperatorSet.GenEmptyObj(out ho_TopMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_BottomMainLineRegions);
            HOperatorSet.GenEmptyObj(out ho_TopEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomEdgeDetectRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfTopRegion);
            HOperatorSet.GenEmptyObj(out ho_totalEdgeDefectOfBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateTopAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_CalibrateBottomAroundRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegion);
            HOperatorSet.GenEmptyObj(out ho_BottomRegion);
            HOperatorSet.GenEmptyObj(out ho_TopRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_BottomRegionForDistance);
            HOperatorSet.GenEmptyObj(out ho_RedChannelImage);
            HOperatorSet.GenEmptyObj(out ho_GreenChannelImage);
            HOperatorSet.GenEmptyObj(out ho_BlueChannelImage);
            HOperatorSet.GenEmptyObj(out ho_ImageForFilmDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeadWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_ImageForExtractROI);
            HOperatorSet.GenEmptyObj(out ho_RectangleForTopRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RectangleForBottomRegionExist);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ImageForJudgeBackColor);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_BackGrayImageForWeldNGDetect);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleTopRegion);
            HOperatorSet.GenEmptyObj(out ho_MaxRectangleBottomRegion);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference2);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening2);
            try
            {
                hv_PI = 3.1415926;
                //*********************返回结果**************************
                hv_isException = 0;
                hv_exceptionInfo = "";
                hv_isTopWaferExist = 0;
                hv_isBottomWaferExist = 0;
                hv_isWidthResolutionCalibrateFinish = 0;
                hv_widthResolutionOut = -1;
                hv_isHeightResolutionCalibrateFinish = 0;
                hv_heightResolutionOut = -1;
                hv_isFilmShiftingOfTopWafer = 0;
                hv_isFilmShiftingOfBottomWafer = 0;
                hv_isFilmMissOfTopWafer = 0;
                hv_isFilmMissOfBottomWafer = 0;
                hv_isHeadAndTailFilmShiftingOfTopWafer = 0;
                hv_isHeadAndTailFilmShiftingOfBottomWafer = 0;
                hv_isEdgeDefectOfTopWafer = 0;
                hv_isEdgeDefectOfBottomWafer = 0;
                hv_isDistanceNG = 0;
                hv_isNextClass = 0;
                hv_isSurfaceDefectOfTopWafer = 0;
                hv_isSurfaceDefectOfBottomWafer = 0;
                hv_isSurfaceScratchOfTopWafer = 0;
                hv_isSurfaceScratchOfBottomWafer = 0;
                hv_isBrokenLineOfTopWafer = 0;
                hv_isBrokenLineOfBottomWafer = 0;
                hv_isStartWeldingNGOfBottomWafer = 0;
                hv_surfaceMeanGrayOfTopWaferOut = -1;
                hv_surfaceMeanGrayOfBottomWaferOut = -1;
                hv_isLinearityNGDetect = 0;
                hv_isBackGrayColor = 0;
                //
                ho_totalFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmShiftingRegionOut);
                ho_totalFilmMissRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalFilmMissRegionOut);
                ho_totalHeadAndTailFilmShiftingRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalHeadAndTailFilmShiftingRegionOut);
                ho_totalEdgeDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectRegionOut);
                ho_totalSurfaceDefectRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalSurfaceDefectRegionOut);
                ho_totalBrokenLineRegionOut.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalBrokenLineRegionOut);
                //
                //各主栅线上半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTopWaferNG);
                //各主栅线下半片是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsBottomWaferNG);
                //各主栅线头部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsHeadOfWaferNG);
                //各主栅线尾部是否NG数组
                HOperatorSet.TupleGenConst(0, 0, out hv_IsTailOfWaferNG);
                //
                //
                //上半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfTopWafer);
                //下半片各主栅线宽度
                HOperatorSet.TupleGenConst(0, 0, out hv_filmDistanceArrayOfBottomWafer);
                //2020.05.07-膜带是否内缩屏蔽
                hv_isWeldShield = 0;

                //2020.05.13-初始化参数
                hv_CenterRowOfTopRegion = -1;
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterRowOfBottomRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //
                //*********************局部变量**************************
                //半片占相机视野最小面积
                hv_minimumArea = (hv_width * hv_height) * 0.1;
                //半片占相机视野最大面积
                hv_maxArea = (hv_width * hv_height) * 0.9;
                //上半片主栅线区域
                ho_TopMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopMainLineRegions);
                //下半片主栅线区域
                ho_BottomMainLineRegions.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomMainLineRegions);
                //上半片边角检测区域
                ho_TopEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopEdgeDetectRegion);
                //下半片边角检测区域
                ho_BottomEdgeDetectRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomEdgeDetectRegion);
                //上半片边角缺陷区域
                ho_totalEdgeDefectOfTopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfTopRegion);
                //下半片边角缺陷区域
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_totalEdgeDefectOfBottomRegion);
                //
                //上下半片区域矫正是否完成
                hv_isTopRegionCalibrateFinish = 0;
                hv_isBottomRegionCalibrateFinish = 0;
                //上半片左、右角点
                hv_RowOfLeftCornerPointTopRegion = -1;
                hv_ColumnOfLeftCornerPointTopRegion = -1;
                hv_RowOfRightCornerPointTopRegion = -1;
                hv_ColumnOfRightCornerPointTopRegion = -1;
                //下半片左、右角点
                hv_RowOfLeftCornerPointBottomRegion = -1;
                hv_ColumnOfLeftCornerPointBottomRegion = -1;
                hv_RowOfRightCornerPointBottomRegion = -1;
                hv_ColumnOfRightCornerPointBottomRegion = -1;
                //主栅线宽度(mm)
                hv_mainLineWidth = 0.6;
                //2020.04.29
                hv_twoMainLineDistance_COPY_INP_TMP = hv_twoMainLineDistance_COPY_INP_TMP / hv_widthResolution_COPY_INP_TMP;
                //
                //
                //缺角、表面、断栅缺陷检测函数对应参数初始化，避免异常发生
                ho_CalibrateTopAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateTopAroundRegion);
                ho_CalibrateBottomAroundRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_CalibrateBottomAroundRegion);
                ho_TopRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegion);
                ho_BottomRegion.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegion);
                ho_TopRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_TopRegionForDistance);
                ho_BottomRegionForDistance.Dispose();
                HOperatorSet.GenEmptyRegion(out ho_BottomRegionForDistance);
                hv_CenterColumnOfTopRegion = -1;
                hv_CenterColumnOfBottomRegion = -1;
                //*******************************************************
                //分割彩色图片，分别对应1-R、2-G、3-B
                ho_RedChannelImage.Dispose(); ho_GreenChannelImage.Dispose(); ho_BlueChannelImage.Dispose();
                HOperatorSet.Decompose3(ho_oriImage, out ho_RedChannelImage, out ho_GreenChannelImage,
                    out ho_BlueChannelImage);
                //图片预处理
                ho_ImageForFilmDetect.Dispose(); ho_ImageForWeldNGDetect.Dispose(); ho_ImageForHeadWeldNGDetect.Dispose(); ho_ImageForExtractROI.Dispose(); ho_RectangleForTopRegionExist.Dispose(); ho_RectangleForBottomRegionExist.Dispose(); ho_RegionOpening.Dispose(); ho_ImageForJudgeBackColor.Dispose();
                PretreatmentImage(ho_oriImage, out ho_ImageForFilmDetect, out ho_ImageForWeldNGDetect,
                    out ho_ImageForHeadWeldNGDetect, out ho_ImageForExtractROI, out ho_RectangleForTopRegionExist,
                    out ho_RectangleForBottomRegionExist, out ho_RegionOpening, out ho_ImageForJudgeBackColor,
                    hv_isBackDetect, hv_mainLineNum, hv_mainLineWidth, hv_height, hv_isUsingChinese,
                    hv_windowHandle, out hv_isTopWaferExist, out hv_isBottomWaferExist, out hv_exceptionInfo,
                    out hv_isPretreatmentReturn);
                //2020.05.09-添加返回主函数判断
                if ((int)(hv_isPretreatmentReturn) != 0)
                {
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_RegionDifference2.Dispose();
                    ho_RegionOpening2.Dispose();

                    return;
                }
                //得到区域
                ho_TopRegion.Dispose(); ho_BottomRegion.Dispose(); ho_SelectedRegions.Dispose(); ho_RegionFillUp.Dispose(); ho_RegionOpening.Dispose();
                GetTRRegion(ho_ImageForExtractROI, ho_oriImage, ho_modelContoursOfTop, ho_RedChannelImage,
                    out ho_TopRegion, out ho_BottomRegion, out ho_SelectedRegions, out ho_RegionFillUp,
                    out ho_RegionOpening, hv_width, hv_mainLineNum, hv_modelIDOfTop, hv_isBackDetect,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_isUsingChinese, hv_windowHandle,
                    out hv_isGetTRRegionReturn, out hv_isFoundTopEdgeRegionOut, out hv_isFoundBottomEdgeRegionOut);
                if ((int)(hv_isGetTRRegionReturn) != 0)
                {
                    ho_TopMainLineRegions.Dispose();
                    ho_BottomMainLineRegions.Dispose();
                    ho_TopEdgeDetectRegion.Dispose();
                    ho_BottomEdgeDetectRegion.Dispose();
                    ho_totalEdgeDefectOfTopRegion.Dispose();
                    ho_totalEdgeDefectOfBottomRegion.Dispose();
                    ho_CalibrateTopAroundRegion.Dispose();
                    ho_CalibrateBottomAroundRegion.Dispose();
                    ho_TopRegion.Dispose();
                    ho_BottomRegion.Dispose();
                    ho_TopRegionForDistance.Dispose();
                    ho_BottomRegionForDistance.Dispose();
                    ho_RedChannelImage.Dispose();
                    ho_GreenChannelImage.Dispose();
                    ho_BlueChannelImage.Dispose();
                    ho_ImageForFilmDetect.Dispose();
                    ho_ImageForWeldNGDetect.Dispose();
                    ho_ImageForHeadWeldNGDetect.Dispose();
                    ho_ImageForExtractROI.Dispose();
                    ho_RectangleForTopRegionExist.Dispose();
                    ho_RectangleForBottomRegionExist.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ImageForJudgeBackColor.Dispose();
                    ho_SelectedRegions.Dispose();
                    ho_RegionFillUp.Dispose();
                    ho_BackGrayImageForWeldNGDetect.Dispose();
                    ho_MaxRectangleTopRegion.Dispose();
                    ho_MaxRectangleBottomRegion.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_RegionDifference2.Dispose();
                    ho_RegionOpening2.Dispose();

                    return;
                }
                //判断背面是否有印刷
                ho_BackGrayImageForWeldNGDetect.Dispose();
                JudgePrintingOfBack(ho_BlueChannelImage, ho_ImageForJudgeBackColor, ho_RectangleForTopRegionExist,
                    ho_RectangleForBottomRegionExist, ho_RegionOpening, out ho_BackGrayImageForWeldNGDetect,
                    hv_isBackDetect, hv_isTopWaferExist, hv_isUsingFilmMissDetect, out hv_isBackGrayColor);
                //2020.05.08-分辨率分开校准
                //宽度分辨率
                if ((int)(hv_isUsingWidthResolutionCalibrate) != 0)
                {
                    GetWidthResolutionOfImage(ho_ImageForFilmDetect, ho_BottomRegion, hv_width,
                        hv_height, hv_waferWidth, hv_mainLineNum, hv_widthResolution_COPY_INP_TMP,
                        hv_heightResolution_COPY_INP_TMP, hv_isBottomWaferExist, hv_isUsingChinese,
                        hv_windowHandle, hv_topShieldLengthOfBottomRegion, hv_bottomShieldLengthOfBottomRegion,
                        hv_locationMainLineThresh, hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange,
                        out hv_widthResolutionOut, out hv_isWidthResolutionCalibrateFinish, out hv_isException,
                        out hv_exceptionInfo);
                    hv_widthResolution_COPY_INP_TMP = hv_widthResolutionOut.Clone();
                }
                //高度分辨率
                if ((int)(hv_isUsingHeightResolutionCalibrate) != 0)
                {
                    GetHeightResolutionOfImage(ho_RedChannelImage, ho_TopRegion, hv_width, hv_height,
                        hv_isTopWaferExist, hv_viceLineInterval, hv_windowHandle, hv_isUsingChinese,
                        out hv_heightResolutionOut, out hv_isHeightResolutionCalibrateFinish,
                        out hv_isException, out hv_exceptionInfo);
                    hv_heightResolution_COPY_INP_TMP = hv_heightResolutionOut.Clone();
                }

                //上、下电池片Region边缘优化
                ho_CalibrateTopAroundRegion.Dispose(); ho_CalibrateBottomAroundRegion.Dispose(); ho_MaxRectangleTopRegion.Dispose(); ho_MaxRectangleBottomRegion.Dispose();
                OptimizeOfRegion(ho_ImageForExtractROI, ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance,
                    ho_BottomRegionForDistance, out ho_CalibrateTopAroundRegion, out ho_CalibrateBottomAroundRegion,
                    out ho_MaxRectangleTopRegion, out ho_MaxRectangleBottomRegion, hv_isBackDetect,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_isUsingWaferEdgeCalibration,
                    hv_isFoundTopEdgeRegionOut, hv_isFoundBottomEdgeRegionOut, hv_waferEdgeCalibrationRegionDilationPixel,
                    hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP, hv_width,
                    hv_height, hv_locationWaferEdgeThresh, hv_windowHandle, out hv_RowOfLeftCornerPointTopRegion1,
                    out hv_ColumnOfLeftCornerPointTopRegion1, out hv_RowOfRightCornerPointTopRegion1,
                    out hv_ColumnOfRightCornerPointTopRegion1, out hv_RowOfLeftCornerPointBottomRegion1,
                    out hv_ColumnOfLeftCornerPointBottomRegion1, out hv_RowOfRightCornerPointBottomRegion1,
                    out hv_ColumnOfRightCornerPointBottomRegion1);
                //片/串间距检测
                DetectionOfTRSliceOrString(ho_TopRegion, ho_BottomRegion, ho_TopRegionForDistance,
                    ho_CalibrateTopAroundRegion, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_isTopRegionCalibrateFinish, hv_isBottomRegionCalibrateFinish, hv_isUsingDistanceDetect,
                    hv_heightResolution_COPY_INP_TMP, hv_minimumDistanceThresh, hv_maxDistanceThresh,
                    hv_classDistanceThresh, hv_windowHandle, out hv_isDistanceNG, out hv_isNextClass);
                //*膜检(膜偏、露白|膜短、膜失|头尾膜检)，起焊点异常||||MBB露白
                ho_totalFilmShiftingRegionOut.Dispose(); ho_totalFilmMissRegionOut.Dispose(); ho_totalHeadAndTailFilmShiftingRegionOut.Dispose(); ho_TopMainLineRegions.Dispose(); ho_BottomMainLineRegions.Dispose();
                DetectFilmOfMainLine(ho_RedChannelImage, ho_ImageForFilmDetect, ho_ImageForWeldNGDetect,
                    ho_ImageForHeadWeldNGDetect, ho_BackGrayImageForWeldNGDetect, ho_TopRegion,
                    ho_BottomRegion, out ho_totalFilmShiftingRegionOut, out ho_totalFilmMissRegionOut,
                    out ho_totalHeadAndTailFilmShiftingRegionOut, out ho_TopMainLineRegions,
                    out ho_BottomMainLineRegions, hv_width, hv_height, hv_windowHandle, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_mainLineNum, hv_isUsingFilmShiftingDetect,
                    hv_topShieldLengthOfTopRegion, hv_bottomShieldLengthOfTopRegion, hv_locationMainLineThresh,
                    hv_filmWidthThresh, hv_filmWidthOffSet, hv_isUsingFilmMissDetect, hv_weldWidthThresh,
                    hv_isUsingHeadAndTailFilmShiftingDetect, hv_headAndTailFilmWidthThresh,
                    hv_headAndTailFilmShieldLength, hv_headAndTailFilmDetectRange, hv_isUsingStartWeldingDetect,
                    hv_startWeldingDistanceMaxThresh, hv_startWeldingDistanceMinThresh, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_isNextClass, hv_isUsingChinese, hv_isBackDetect,
                    hv_filmMissShieldLength, hv_filmMissShieldDetectRange, hv_isWeldShield,
                    hv_weldShieldLength, hv_isBackGrayColor, hv_firstDetectPosForTopRegion,
                    hv_secondDetectPosForTopRegion, hv_firstDetectPosForBottomRegion, hv_secondDetectPosForBottomRegion,
                    hv_twoMainLineDistance_COPY_INP_TMP, hv_topShieldLengthOfBottomRegion,
                    hv_bottomShieldLengthOfBottomRegion, out hv_isFilmShiftingOfTopWafer, out hv_isFilmShiftingOfBottomWafer,
                    out hv_isFilmMissOfTopWafer, out hv_isFilmMissOfBottomWafer, out hv_isHeadAndTailFilmShiftingOfTopWafer,
                    out hv_isHeadAndTailFilmShiftingOfBottomWafer, out hv_filmDistanceArrayOfTopWafer,
                    out hv_filmDistanceArrayOfBottomWafer, out hv_isStartWeldingNGOfBottomWafer,
                    out hv_IsDetectRegionNG, out hv_IsHeadOrTailNG, out hv_IsTopWaferNG, out hv_IsBottomWaferNG,
                    out hv_IsHeadOfWaferNG, out hv_IsTailOfWaferNG, out hv_exceptionInfo, out hv_isException,
                    out hv_isDetectOfTopWafer, out hv_isDetectOfBottomWafer);

                //纵向延长上下半片主栅线区域，防止上下寻边不稳定导致的区域漏检
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //2019-4-17将1修改为6
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationRectangle1(ho_TopMainLineRegions, out ExpTmpOutVar_0,
                            6, 500);
                        ho_TopMainLineRegions.Dispose();
                        ho_TopMainLineRegions = ExpTmpOutVar_0;
                    }
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //2019-4-17将1修改为6
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.DilationRectangle1(ho_BottomMainLineRegions, out ExpTmpOutVar_0,
                            6, 500);
                        ho_BottomMainLineRegions.Dispose();
                        ho_BottomMainLineRegions = ExpTmpOutVar_0;
                    }
                }

                //2020.2.25
                HOperatorSet.AreaCenter(ho_TopRegionForDistance, out hv_TopRegionForDistanceArea,
                    out hv_Row1, out hv_Column1);
                if ((int)(new HTuple(hv_TopRegionForDistanceArea.TupleLessEqual(0))) != 0)
                {
                    ho_TopRegionForDistance.Dispose();
                    ho_TopRegionForDistance = ho_TopRegion.CopyObj(1, -1);
                }
                HOperatorSet.AreaCenter(ho_BottomRegionForDistance, out hv_BottomRegionForDistanceArea,
                    out hv_Row2, out hv_Column2);
                if ((int)(new HTuple(hv_BottomRegionForDistanceArea.TupleLessEqual(0))) != 0)
                {
                    ho_BottomRegionForDistance.Dispose();
                    ho_BottomRegionForDistance = ho_BottomRegion.CopyObj(1, -1);
                }
                //
                //2019-12-28  增加片间距检测电池片上下部分区域
                //if (isBackDetect == false)
                //TopRegionForDistance := TopRegion
                //BottomRegionForDistance := BottomRegion
                //else
                //if (BigRegionNumForDistance == 2)
                //if ((isTopWaferExist == true) and (isBottomWaferExist == true))
                //shape_trans (TopRegion, TopRegionForDistance, 'convex')
                //shape_trans (BottomRegion, BottomRegionForDistance, 'convex')
                //else
                //isException := true
                //if (isUsingChinese)
                //exceptionInfo := '内置参数异常！'
                //else
                //exceptionInfo := 'Built-in parameter error!'
                //endif
                //disp_message_UserDefine (windowHandle, exceptionInfo, 100, 12, 'red')
                //return ()
                //endif
                //else
                //TopRegionForDistance := TopRegion
                //BottomRegionForDistance := BottomRegion
                //endif
                //endif
                //2019-4-18增加单多晶flag，用于角部缺角筛选
                hv_IsTopMonocrystalline = 0;
                hv_IsBottomMonocrystalline = 0;
                //消除单晶角部皮带交接处干扰
                if ((int)(hv_isTopWaferExist) != 0)
                {
                    //if (isUsingWaferEdgeCalibration == false)
                    HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                        out hv_CenterColumnOfTopRegion, out hv_PhiOfTopRegion, out hv_HalfWidthOfTopRegion,
                        out hv_HalfHeightOfTopRegion);
                    ho_MaxRectangleTopRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleTopRegion, hv_CenterRowOfTopRegion,
                        hv_CenterColumnOfTopRegion, hv_PhiOfTopRegion, hv_HalfWidthOfTopRegion,
                        hv_HalfHeightOfTopRegion);
                    //endif
                    //2019-3-20 判断单多晶
                    ho_RegionDifference1.Dispose();
                    HOperatorSet.Difference(ho_MaxRectangleTopRegion, ho_TopRegion, out ho_RegionDifference1
                        );
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference1, out ho_RegionOpening1,
                        20, 20);
                    HOperatorSet.RegionFeatures(ho_RegionOpening1, "area", out hv_TopTwoConnerRegionArea);
                    if ((int)(new HTuple(hv_TopTwoConnerRegionArea.TupleGreater(20000))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_TopRegion, out ExpTmpOutVar_0, 140);
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ExpTmpOutVar_0;
                        }
                        hv_IsTopMonocrystalline = 1;
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_TopRegion, out ExpTmpOutVar_0, 80);
                            ho_TopRegion.Dispose();
                            ho_TopRegion = ExpTmpOutVar_0;
                        }
                    }
                }
                if ((int)(hv_isBottomWaferExist) != 0)
                {
                    //if (isUsingWaferEdgeCalibration == false)
                    HOperatorSet.SmallestRectangle2(ho_BottomRegion, out hv_CenterRowOfBottomRegion,
                        out hv_CenterColumnOfBottomRegion, out hv_PhiOfBottomRegion, out hv_HalfWidthOfBottomRegion,
                        out hv_HalfHeightOfBottomRegion);
                    ho_MaxRectangleBottomRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_MaxRectangleBottomRegion, hv_CenterRowOfBottomRegion,
                        hv_CenterColumnOfBottomRegion, hv_PhiOfBottomRegion, hv_HalfWidthOfBottomRegion,
                        hv_HalfHeightOfBottomRegion);
                    //endif
                    ho_RegionDifference2.Dispose();
                    HOperatorSet.Difference(ho_MaxRectangleBottomRegion, ho_BottomRegion, out ho_RegionDifference2
                        );
                    ho_RegionOpening2.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference2, out ho_RegionOpening2,
                        20, 20);
                    HOperatorSet.RegionFeatures(ho_RegionOpening2, "area", out hv_BottomTwoConnerRegionArea);
                    if ((int)(new HTuple(hv_BottomTwoConnerRegionArea.TupleGreater(20000))) != 0)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_BottomRegion, out ExpTmpOutVar_0, 140);
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ExpTmpOutVar_0;
                        }
                        hv_IsBottomMonocrystalline = 1;
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningCircle(ho_BottomRegion, out ExpTmpOutVar_0, 80);
                            ho_BottomRegion.Dispose();
                            ho_BottomRegion = ExpTmpOutVar_0;
                        }
                    }
                }
                //
                //2019-6-12 边角、表面、断栅缺陷以及各个缺陷项上下片同时封装成函数，开启线程，并行处理
                //边角缺陷检测
                //par_start<EdgeDefectDetectFunction> :
                ho_totalEdgeDefectRegionOut.Dispose();
                EdgeDefectDetectFunction(ho_RedChannelImage, ho_SelectedRegions, ho_CalibrateTopAroundRegion,
                    ho_ImageForFilmDetect, ho_TopRegion, ho_BottomRegion, ho_ImageForExtractROI,
                    ho_TopMainLineRegions, ho_BottomMainLineRegions, ho_ImageForWeldNGDetect,
                    ho_CalibrateBottomAroundRegion, out ho_totalEdgeDefectRegionOut, hv_isUsingEdgeDefectDetect,
                    hv_isTopWaferExist, hv_isBottomWaferExist, hv_isTopRegionCalibrateFinish,
                    hv_isBottomRegionCalibrateFinish, hv_windowHandle, hv_edgeBigDefectWidthThresh,
                    hv_edgeBigDefectHeightThresh, hv_isFullWafer, hv_height, hv_mainLineNum,
                    hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP, hv_edgeSmallDefectDetectDepth,
                    hv_edgeSmallDefectWidthThresh, hv_edgeSmallDefectHeightThresh, hv_edgeSmallDefectGrayThresh,
                    hv_IsTopMonocrystalline, hv_cornerDefectAreaRatioThresh, hv_isUsingChinese,
                    hv_IsBottomMonocrystalline, hv_weldWidthThresh, hv_isUsingStartWeldingDetect,
                    hv_isDetectOfTopWafer, hv_isDetectOfBottomWafer, out hv_isEdgeDefectOfTopWafer,
                    out hv_isEdgeDefectOfBottomWafer, out hv_isStartWeldingNGOut);
                //判断是否起焊点异常
                hv_isStartWeldingNGOfBottomWafer = hv_isStartWeldingNGOfBottomWafer.TupleOr(
                    hv_isStartWeldingNGOut);
                //
                //表面缺陷检测
                //par_start<SurfaceDefectDetectFunction> :
                ho_totalSurfaceDefectRegionOut.Dispose();
                SurfaceDefectDetectFunction(ho_RegionFillUp, ho_SelectedRegions, ho_TopRegion,
                    ho_BottomRegion, ho_TopMainLineRegions, ho_BottomMainLineRegions, ho_RedChannelImage,
                    ho_BlueChannelImage, out ho_totalSurfaceDefectRegionOut, hv_isUsingSurfaceDefectDetect,
                    hv_surfaceDefectHeightThresh, hv_surfaceDefectWidthThresh, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_surfaceDefectDetectIndentDepth, hv_widthResolution_COPY_INP_TMP,
                    hv_heightResolution_COPY_INP_TMP, hv_subMainLineNum, hv_PI, hv_filmMissShieldLength,
                    hv_isUsingChinese, hv_windowHandle, hv_surfaceScratchGrayThresh, hv_surfaceScratchHeightThresh,
                    hv_width, hv_height, hv_surfaceScratchWidthThresh, hv_filmMissShieldDetectRange,
                    hv_surfaceDefectViceLineShieldRightPosOffSet, hv_surfaceDefectGrayThresh,
                    hv_isUsingSurfaceColorDiffDetect, hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion,
                    hv_CenterRowOfBottomRegion, hv_CenterColumnOfBottomRegion, hv_isDetectOfTopWafer,
                    hv_isDetectOfBottomWafer, out hv_isSurfaceDefectOfTopWafer, out hv_surfaceMeanGrayOfTopWaferOut,
                    out hv_surfaceMeanGrayOfBottomWaferOut, out hv_isSurfaceDefectOfBottomWafer,
                    out hv_isSurfaceScratchOfTopWafer, out hv_isSurfaceScratchOfBottomWafer);
                //
                //断栅检测
                //par_start <BrokenLineDetectFunction> :
                ho_totalBrokenLineRegionOut.Dispose();
                BrokenLineDetectFunction(ho_TopMainLineRegions, ho_BottomRegion, ho_TopRegion,
                    ho_BottomMainLineRegions, ho_GreenChannelImage, ho_RedChannelImage, out ho_totalBrokenLineRegionOut,
                    hv_isUsingBrokenLineDetect, hv_isTopWaferExist, hv_isBottomWaferExist,
                    hv_brokenLineDetectIndentDepth, hv_widthResolution_COPY_INP_TMP, hv_heightResolution_COPY_INP_TMP,
                    hv_isBackDetect, hv_brokenLineGrayThresh, hv_brokenLineWidthThresh, hv_brokenLineHeightThresh,
                    hv_isDetectOfTopWafer, hv_isDetectOfBottomWafer, out hv_isBrokenLineOfTopWafer,
                    out hv_isBrokenLineOfBottomWafer);
                //par_join ([EdgeDefectDetectFunction,SurfaceDefectDetectFunction,BrokenLineDetectFunction])
                //
                //显示结果
                DisplayResult(ho_totalFilmShiftingRegionOut, ho_totalFilmMissRegionOut, ho_totalHeadAndTailFilmShiftingRegionOut,
                    ho_totalEdgeDefectRegionOut, ho_totalSurfaceDefectRegionOut, ho_totalBrokenLineRegionOut,
                    hv_isException, hv_windowHandle, hv_exceptionInfo, hv_isTopWaferExist,
                    hv_isBottomWaferExist, hv_isFilmShiftingOfTopWafer, hv_isFilmShiftingOfBottomWafer,
                    hv_isFilmMissOfTopWafer, hv_isFilmMissOfBottomWafer, hv_isHeadAndTailFilmShiftingOfTopWafer,
                    hv_isHeadAndTailFilmShiftingOfBottomWafer, hv_isEdgeDefectOfTopWafer, hv_isEdgeDefectOfBottomWafer,
                    hv_isDistanceNG, hv_isSurfaceDefectOfTopWafer, hv_isSurfaceDefectOfBottomWafer,
                    hv_isSurfaceScratchOfTopWafer, hv_isSurfaceScratchOfBottomWafer, hv_isStartWeldingNGOfBottomWafer,
                    hv_isBrokenLineOfTopWafer, hv_isBrokenLineOfBottomWafer, hv_isUsingChinese);
                //
                //
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_RegionOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();
                ho_RegionDifference1.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionDifference2.Dispose();
                ho_RegionOpening2.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TopMainLineRegions.Dispose();
                ho_BottomMainLineRegions.Dispose();
                ho_TopEdgeDetectRegion.Dispose();
                ho_BottomEdgeDetectRegion.Dispose();
                ho_totalEdgeDefectOfTopRegion.Dispose();
                ho_totalEdgeDefectOfBottomRegion.Dispose();
                ho_CalibrateTopAroundRegion.Dispose();
                ho_CalibrateBottomAroundRegion.Dispose();
                ho_TopRegion.Dispose();
                ho_BottomRegion.Dispose();
                ho_TopRegionForDistance.Dispose();
                ho_BottomRegionForDistance.Dispose();
                ho_RedChannelImage.Dispose();
                ho_GreenChannelImage.Dispose();
                ho_BlueChannelImage.Dispose();
                ho_ImageForFilmDetect.Dispose();
                ho_ImageForWeldNGDetect.Dispose();
                ho_ImageForHeadWeldNGDetect.Dispose();
                ho_ImageForExtractROI.Dispose();
                ho_RectangleForTopRegionExist.Dispose();
                ho_RectangleForBottomRegionExist.Dispose();
                ho_RegionOpening.Dispose();
                ho_ImageForJudgeBackColor.Dispose();
                ho_SelectedRegions.Dispose();
                ho_RegionFillUp.Dispose();
                ho_BackGrayImageForWeldNGDetect.Dispose();
                ho_MaxRectangleTopRegion.Dispose();
                ho_MaxRectangleBottomRegion.Dispose();
                ho_RegionDifference1.Dispose();
                ho_RegionOpening1.Dispose();
                ho_RegionDifference2.Dispose();
                ho_RegionOpening2.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void CreatModel(HObject ho_ModelImage, HTuple hv_RowOfTopLeft, HTuple hv_ColOfTopLeft,
            HTuple hv_RowOfBottomRight, HTuple hv_ColOfBottomRight, HTuple hv_ModelFilePath)
        {




            // Local iconic variables 

            HObject ho_ModelROIT, ho_ImageROIT, ho_ShapeModelImage;
            HObject ho_ShapeModelRegion, ho_ShapeModel;

            // Local control variables 

            HTuple hv_ModelID = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ModelROIT);
            HOperatorSet.GenEmptyObj(out ho_ImageROIT);
            HOperatorSet.GenEmptyObj(out ho_ShapeModelImage);
            HOperatorSet.GenEmptyObj(out ho_ShapeModelRegion);
            HOperatorSet.GenEmptyObj(out ho_ShapeModel);
            try
            {
                ho_ModelROIT.Dispose();
                HOperatorSet.GenRectangle1(out ho_ModelROIT, hv_RowOfTopLeft, hv_ColOfTopLeft,
                    hv_RowOfBottomRight, hv_ColOfBottomRight);
                ho_ImageROIT.Dispose();
                HOperatorSet.ReduceDomain(ho_ModelImage, ho_ModelROIT, out ho_ImageROIT);
                HOperatorSet.CreateShapeModel(ho_ImageROIT, 4, 0, 0, "auto", "none", "use_polarity",
                    30, 10, out hv_ModelID);
                ho_ShapeModelImage.Dispose(); ho_ShapeModelRegion.Dispose();
                HOperatorSet.InspectShapeModel(ho_ImageROIT, out ho_ShapeModelImage, out ho_ShapeModelRegion,
                    1, 30);
                ho_ShapeModel.Dispose();
                HOperatorSet.GetShapeModelContours(out ho_ShapeModel, hv_ModelID, 1);
                //
                HOperatorSet.WriteShapeModel(hv_ModelID, hv_ModelFilePath);
                //
                //
                //
                //gen_rectangle1 (ModelROIB, 1017, 423, 1203, 501)
                //reduce_domain (ModelImage, ModelROIB, ImageROIB)
                //create_shape_model (ImageROIB, 4, 0, 0, 'auto', 'none', 'use_polarity', 30, 10, ModelIDB)
                //inspect_shape_model (ImageROIB, ShapeModelImage, ShapeModelRegion, 1, 30)
                //get_shape_model_contours (ShapeModelB, ModelIDB, 1)
                ho_ModelROIT.Dispose();
                ho_ImageROIT.Dispose();
                ho_ShapeModelImage.Dispose();
                ho_ShapeModelRegion.Dispose();
                ho_ShapeModel.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ModelROIT.Dispose();
                ho_ImageROIT.Dispose();
                ho_ShapeModelImage.Dispose();
                ho_ShapeModelRegion.Dispose();
                ho_ShapeModel.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetWidthResolutionOfImage(HObject ho_ImageForFilmDetect, HObject ho_BottomRegion,
            HTuple hv_width, HTuple hv_height, HTuple hv_waferWidth, HTuple hv_mainLineNum,
            HTuple hv_widthResolution, HTuple hv_heightResolution, HTuple hv_isBottomWaferExist,
            HTuple hv_isUsingChinese, HTuple hv_windowHandle, HTuple hv_topShieldLengthOfBottomRegion,
            HTuple hv_bottomShieldLengthOfBottomRegion, HTuple hv_locationMainLineThresh,
            HTuple hv_headAndTailFilmShieldLength, HTuple hv_headAndTailFilmDetectRange,
            out HTuple hv_widthResolutionOut, out HTuple hv_isWidthResolutionCalibrateFinish,
            out HTuple hv_isException, out HTuple hv_exceptionInfo)
        {




            // Local iconic variables 

            // Local control variables 

            HTuple hv_isExceptionOut = new HTuple(), hv_FilmDistanceArrayOfFirstMainLine = new HTuple();
            HTuple hv_MeanPixDistance = new HTuple();
            HTuple hv_widthResolution_COPY_INP_TMP = hv_widthResolution.Clone();

            // Initialize local and output iconic variables 
            hv_isWidthResolutionCalibrateFinish = 0;
            hv_widthResolutionOut = -1;
            hv_isException = 0;
            hv_exceptionInfo = "";

            //宽度分辨率校准
            if ((int)(hv_isBottomWaferExist) != 0)
            {
                //smallest_rectangle2 (TopRegion, CenterRowOfTopRegion, CenterColumnOfTopRegion, Phi, halfWidth, halfHeight)
                //2019-4-16利用主栅线校准分辨率
                WidthResolutionCalibrateFunctionForFiveMainLine(ho_ImageForFilmDetect, ho_BottomRegion,
                    hv_width, hv_height, hv_heightResolution, hv_mainLineNum, hv_topShieldLengthOfBottomRegion,
                    hv_bottomShieldLengthOfBottomRegion, hv_locationMainLineThresh, hv_headAndTailFilmShieldLength,
                    hv_headAndTailFilmDetectRange, hv_widthResolution_COPY_INP_TMP, hv_windowHandle,
                    out hv_isExceptionOut, out hv_FilmDistanceArrayOfFirstMainLine);
                if ((int)(hv_isExceptionOut) != 0)
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "宽度分辨率校准函数异常!";
                    }
                    else
                    {
                        hv_exceptionInfo = "Width resolution calibration function error!";
                    }

                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");

                    return;
                }
                HOperatorSet.TupleMean(hv_FilmDistanceArrayOfFirstMainLine, out hv_MeanPixDistance);
                hv_widthResolution_COPY_INP_TMP = hv_waferWidth / hv_MeanPixDistance;
                hv_isWidthResolutionCalibrateFinish = 1;
                hv_widthResolutionOut = hv_widthResolution_COPY_INP_TMP.Clone();

            }
            else
            {
                hv_isException = 1;
                if ((int)(hv_isUsingChinese) != 0)
                {
                    hv_exceptionInfo = "宽度分辨率校准失败，无法检测到上半片！";
                }
                else
                {
                    hv_exceptionInfo = "Width resolution calibration failed. Cannot find upper cell! ";
                }

                disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                hv_isWidthResolutionCalibrateFinish = 0;
            }

            //高度分辨率校准
            //if (isUsingHeightResolutionCalibrate)
            //提取细栅线特征图
            //gray_opening_rect (RedChannelImage, ImageOpeningForHeightResolutionCalibrate, 1, 80)
            //gray_closing_rect (ImageOpeningForHeightResolutionCalibrate, ImageForHeightResolutionCalibrate, 1, 100)

            //if (isTopWaferExist)
            //smallest_rectangle2 (TopRegion, CenterRowOfTopRegion, CenterColumnOfTopRegion, Phi, halfWidth, halfHeight)
            //disp_rectangle2 (windowHandle, CenterRowOfTopRegion, CenterColumnOfTopRegion-335, Phi-0.5*PI, 60, 5)
            //gen_measure_rectangle2 (CenterRowOfTopRegion, CenterColumnOfTopRegion-335, Phi-0.5*PI, 60, 5, width, height, 'bilinear', MeasureHandle)
            //measure_pos (ImageForHeightResolutionCalibrate, MeasureHandle, 3, 5, 'positive', 'all', RowPointsOfHeightResolution, ColumnPointsOfHeightResolution, Amplitude, Distance)
            //close_measure (MeasureHandle)
            //tuple_length (RowPointsOfHeightResolution, Length)
            //if (Length < 2)
            //isException := true
            //if (isUsingChinese)
            //exceptionInfo := '高度分辨率校准失败，无法检测到细栅线的两个点！'
            //else
            //exceptionInfo := 'Height resolution calibration failed. Cannot find two points for finger! '
            //endif

            //disp_message_UserDefine (windowHandle, exceptionInfo, 100, 12, 'red')
            //isHeightResolutionCalibrateFinish := false
            //else
            //distance_pp (RowPointsOfHeightResolution[0], ColumnPointsOfHeightResolution[0], RowPointsOfHeightResolution[1], ColumnPointsOfHeightResolution[1], ViceLinePixelDistance)
            //heightResolution := viceLineInterval/ViceLinePixelDistance
            //isHeightResolutionCalibrateFinish := true
            //heightResolutionOut := heightResolution
            //endif
            //else
            //isException := true
            //if (isUsingChinese)
            //exceptionInfo := '高度分辨率校准失败，无法检测到上半片！'
            //else
            //exceptionInfo := 'Height resolution calibration failed. Cannot find upper cell! '
            //endif

            //disp_message_UserDefine (windowHandle, exceptionInfo, 100, 12, 'red')
            //isHeightResolutionCalibrateFinish := false
            //endif
            //endif


            return;
        }

        public void GetHeightResolutionOfImage(HObject ho_RedChannelImage, HObject ho_TopRegion,
            HTuple hv_width, HTuple hv_height, HTuple hv_isTopWaferExist, HTuple hv_viceLineInterval,
            HTuple hv_windowHandle, HTuple hv_isUsingChinese, out HTuple hv_heightResolutionOut,
            out HTuple hv_isHeightResolutionCalibrateFinish, out HTuple hv_isException,
            out HTuple hv_exceptionInfo)
        {




            // Local iconic variables 

            HObject ho_ImageOpeningForHeightResolutionCalibrate;
            HObject ho_ImageForHeightResolutionCalibrate;

            // Local control variables 

            HTuple hv_PI = null, hv_CenterRowOfTopRegion = new HTuple();
            HTuple hv_CenterColumnOfTopRegion = new HTuple(), hv_Phi = new HTuple();
            HTuple hv_halfWidth = new HTuple(), hv_halfHeight = new HTuple();
            HTuple hv_MeasureHandle = new HTuple(), hv_RowPointsOfHeightResolution = new HTuple();
            HTuple hv_ColumnPointsOfHeightResolution = new HTuple();
            HTuple hv_Amplitude = new HTuple(), hv_Distance = new HTuple();
            HTuple hv_Length = new HTuple(), hv_ViceLinePixelDistance = new HTuple();
            HTuple hv_heightResolution = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ImageOpeningForHeightResolutionCalibrate);
            HOperatorSet.GenEmptyObj(out ho_ImageForHeightResolutionCalibrate);
            try
            {
                hv_isHeightResolutionCalibrateFinish = 0;
                hv_heightResolutionOut = -1;
                hv_isException = 0;
                hv_exceptionInfo = "";

                hv_PI = 3.1415926;
                //提取细栅线特征图
                ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                HOperatorSet.GrayOpeningRect(ho_RedChannelImage, out ho_ImageOpeningForHeightResolutionCalibrate,
                    1, 80);
                ho_ImageForHeightResolutionCalibrate.Dispose();
                HOperatorSet.GrayClosingRect(ho_ImageOpeningForHeightResolutionCalibrate, out ho_ImageForHeightResolutionCalibrate,
                    1, 100);

                if ((int)(hv_isTopWaferExist) != 0)
                {
                    HOperatorSet.SmallestRectangle2(ho_TopRegion, out hv_CenterRowOfTopRegion,
                        out hv_CenterColumnOfTopRegion, out hv_Phi, out hv_halfWidth, out hv_halfHeight);
                    HOperatorSet.DispRectangle2(hv_ExpDefaultWinHandle, hv_CenterRowOfTopRegion,
                        hv_CenterColumnOfTopRegion - 335, hv_Phi - (0.5 * hv_PI), 60, 5);
                    HOperatorSet.GenMeasureRectangle2(hv_CenterRowOfTopRegion, hv_CenterColumnOfTopRegion - 335,
                        hv_Phi - (0.5 * hv_PI), 60, 5, hv_width, hv_height, "bilinear", out hv_MeasureHandle);
                    HOperatorSet.MeasurePos(ho_ImageForHeightResolutionCalibrate, hv_MeasureHandle,
                        3, 5, "positive", "all", out hv_RowPointsOfHeightResolution, out hv_ColumnPointsOfHeightResolution,
                        out hv_Amplitude, out hv_Distance);
                    HOperatorSet.CloseMeasure(hv_MeasureHandle);
                    HOperatorSet.TupleLength(hv_RowPointsOfHeightResolution, out hv_Length);
                    if ((int)(new HTuple(hv_Length.TupleLess(2))) != 0)
                    {
                        hv_isException = 1;
                        if ((int)(hv_isUsingChinese) != 0)
                        {
                            hv_exceptionInfo = "高度分辨率校准失败，无法检测到细栅线的两个点！";
                        }
                        else
                        {
                            hv_exceptionInfo = "Height resolution calibration failed. Cannot find two points for finger! ";
                        }

                        disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                        hv_isHeightResolutionCalibrateFinish = 0;
                    }
                    else
                    {
                        HOperatorSet.DistancePp(hv_RowPointsOfHeightResolution.TupleSelect(0),
                            hv_ColumnPointsOfHeightResolution.TupleSelect(0), hv_RowPointsOfHeightResolution.TupleSelect(
                            1), hv_ColumnPointsOfHeightResolution.TupleSelect(1), out hv_ViceLinePixelDistance);
                        hv_heightResolution = hv_viceLineInterval / hv_ViceLinePixelDistance;
                        hv_isHeightResolutionCalibrateFinish = 1;
                        hv_heightResolutionOut = hv_heightResolution.Clone();
                    }
                }
                else
                {
                    hv_isException = 1;
                    if ((int)(hv_isUsingChinese) != 0)
                    {
                        hv_exceptionInfo = "高度分辨率校准失败，无法检测到上半片！";
                    }
                    else
                    {
                        hv_exceptionInfo = "Height resolution calibration failed. Cannot find upper cell! ";
                    }

                    disp_message_UserDefine(hv_windowHandle, hv_exceptionInfo, 100, 12, "red");
                    hv_isHeightResolutionCalibrateFinish = 0;
                }

                ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                ho_ImageForHeightResolutionCalibrate.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_ImageOpeningForHeightResolutionCalibrate.Dispose();
                ho_ImageForHeightResolutionCalibrate.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void GetRowAndColOfLeftAndRightLine(HObject ho_SortedRegionsOfRegion, HTuple hv_heightOfRegion,
            out HTuple hv_RowOfL, out HTuple hv_ColOfL, out HTuple hv_RowOfR, out HTuple hv_ColOfR)
        {




            // Local iconic variables 

            HObject ho_firstObj, ho_secondObj;

            // Local control variables 

            HTuple hv_Length = null, hv_Sorted = null;
            HTuple hv_first = null, hv_second = null, hv_firstIndex = null;
            HTuple hv_secondIndex = new HTuple(), hv_Area1 = null;
            HTuple hv_Row1 = null, hv_Column1 = null, hv_Area2 = null;
            HTuple hv_Row2 = null, hv_Column2 = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_firstObj);
            HOperatorSet.GenEmptyObj(out ho_secondObj);
            hv_RowOfL = new HTuple();
            hv_ColOfL = new HTuple();
            hv_RowOfR = new HTuple();
            hv_ColOfR = new HTuple();
            try
            {

                HOperatorSet.TupleLength(hv_heightOfRegion, out hv_Length);
                HOperatorSet.TupleSort(hv_heightOfRegion, out hv_Sorted);
                hv_first = hv_Sorted.TupleSelect(hv_Length - 1);
                hv_second = hv_Sorted.TupleSelect(hv_Length - 2);
                HOperatorSet.TupleFindFirst(hv_heightOfRegion, hv_first, out hv_firstIndex);
                if ((int)(new HTuple(hv_first.TupleEqual(hv_second))) != 0)
                {
                    HOperatorSet.TupleFindLast(hv_heightOfRegion, hv_second, out hv_secondIndex);
                }
                else
                {
                    HOperatorSet.TupleFindFirst(hv_heightOfRegion, hv_second, out hv_secondIndex);
                }
                ho_firstObj.Dispose();
                HOperatorSet.SelectObj(ho_SortedRegionsOfRegion, out ho_firstObj, hv_firstIndex + 1);
                HOperatorSet.AreaCenter(ho_firstObj, out hv_Area1, out hv_Row1, out hv_Column1);
                ho_secondObj.Dispose();
                HOperatorSet.SelectObj(ho_SortedRegionsOfRegion, out ho_secondObj, hv_secondIndex + 1);
                HOperatorSet.AreaCenter(ho_secondObj, out hv_Area2, out hv_Row2, out hv_Column2);
                if ((int)(new HTuple(hv_Column1.TupleLess(hv_Column2))) != 0)
                {
                    hv_RowOfL = hv_Row1.Clone();
                    hv_ColOfL = hv_Column1.Clone();
                    hv_RowOfR = hv_Row2.Clone();
                    hv_ColOfR = hv_Column2.Clone();
                }
                else
                {
                    hv_RowOfL = hv_Row2.Clone();
                    hv_ColOfL = hv_Column2.Clone();
                    hv_RowOfR = hv_Row1.Clone();
                    hv_ColOfR = hv_Column1.Clone();
                }
                ho_firstObj.Dispose();
                ho_secondObj.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_firstObj.Dispose();
                ho_secondObj.Dispose();

                throw HDevExpDefaultException;
            }
        }

        public void InitHalcon()
        {
            // Default settings used in HDevelop 
            HOperatorSet.SetSystem("width", 512);
            HOperatorSet.SetSystem("height", 512);
        }

        public void RunHalcon(HTuple Window)
        {
            hv_ExpDefaultWinHandle = Window;
        }
    }
}

